
fatfs-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef8  08005ef8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ef8  08005ef8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ef8  08005ef8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08005f0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08005f0c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8d3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002149  00000000  00000000  0002b90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030502  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d232  00000000  00000000  0005f552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ca96  00000000  00000000  0006c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018921a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  0018926c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005e84 	.word	0x08005e84

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005e84 	.word	0x08005e84

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f9b5 	bl	800056e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f807 	bl	8000216 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f87a 	bl	8000300 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800020c:	f000 f856 	bl	80002bc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000210:	f005 fc2c 	bl	8005a6c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x18>

08000216 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	b096      	sub	sp, #88	; 0x58
 800021a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2244      	movs	r2, #68	; 0x44
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f005 fe25 	bl	8005e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022a:	463b      	mov	r3, r7
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000238:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023c:	f000 fcc8 	bl	8000bd0 <HAL_PWREx_ControlVoltageScaling>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000246:	f000 f87f 	bl	8000348 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024a:	2310      	movs	r3, #16
 800024c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000256:	2360      	movs	r3, #96	; 0x60
 8000258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800025e:	2301      	movs	r3, #1
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000262:	2301      	movs	r3, #1
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000266:	2308      	movs	r3, #8
 8000268:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800026a:	2302      	movs	r3, #2
 800026c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800026e:	2302      	movs	r3, #2
 8000270:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fd4c 	bl	8000d18 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000286:	f000 f85f 	bl	8000348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 f952 	bl	800154c <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002ae:	f000 f84b 	bl	8000348 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3758      	adds	r7, #88	; 0x58
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <MX_SDMMC1_SD_Init+0x3c>)
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <MX_SDMMC1_SD_Init+0x40>)
 80002c4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_SDMMC1_SD_Init+0x3c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_SDMMC1_SD_Init+0x3c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_SDMMC1_SD_Init+0x3c>)
 80002d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_SDMMC1_SD_Init+0x3c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <MX_SDMMC1_SD_Init+0x3c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <MX_SDMMC1_SD_Init+0x3c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000028 	.word	0x20000028
 80002fc:	50062400 	.word	0x50062400

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_GPIO_Init+0x44>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <MX_GPIO_Init+0x44>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_GPIO_Init+0x44>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	f003 0304 	and.w	r3, r3, #4
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_GPIO_Init+0x44>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_GPIO_Init+0x44>)
 8000324:	f043 0308 	orr.w	r3, r3, #8
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_GPIO_Init+0x44>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0308 	and.w	r3, r3, #8
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
}
 800034e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000350:	e7fe      	b.n	8000350 <Error_Handler+0x8>
	...

08000354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x44>)
 800035c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x44>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6613      	str	r3, [r2, #96]	; 0x60
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x44>)
 8000368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <HAL_MspInit+0x44>)
 8000374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000376:	4a08      	ldr	r2, [pc, #32]	; (8000398 <HAL_MspInit+0x44>)
 8000378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800037c:	6593      	str	r3, [r2, #88]	; 0x58
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_MspInit+0x44>)
 8000380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b0b2      	sub	sp, #200	; 0xc8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	229c      	movs	r2, #156	; 0x9c
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f005 fd59 	bl	8005e74 <memset>
  if(hsd->Instance==SDMMC1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a33      	ldr	r2, [pc, #204]	; (8000494 <HAL_SD_MspInit+0xf8>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d15f      	bne.n	800048c <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80003cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80003d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fb72 	bl	8001ac8 <HAL_RCCEx_PeriphCLKConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80003ea:	f7ff ffad 	bl	8000348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80003ee:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <HAL_SD_MspInit+0xfc>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4a29      	ldr	r2, [pc, #164]	; (8000498 <HAL_SD_MspInit+0xfc>)
 80003f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <HAL_SD_MspInit+0xfc>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <HAL_SD_MspInit+0xfc>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a23      	ldr	r2, [pc, #140]	; (8000498 <HAL_SD_MspInit+0xfc>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <HAL_SD_MspInit+0xfc>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800041e:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <HAL_SD_MspInit+0xfc>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <HAL_SD_MspInit+0xfc>)
 8000424:	f043 0308 	orr.w	r3, r3, #8
 8000428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042a:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <HAL_SD_MspInit+0xfc>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	f003 0308 	and.w	r3, r3, #8
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000436:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800043a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043e:	2302      	movs	r3, #2
 8000440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800044a:	2303      	movs	r3, #3
 800044c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000450:	230c      	movs	r3, #12
 8000452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000456:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800045a:	4619      	mov	r1, r3
 800045c:	480f      	ldr	r0, [pc, #60]	; (800049c <HAL_SD_MspInit+0x100>)
 800045e:	f000 fa05 	bl	800086c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000462:	2304      	movs	r3, #4
 8000464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800047a:	230c      	movs	r3, #12
 800047c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000480:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <HAL_SD_MspInit+0x104>)
 8000488:	f000 f9f0 	bl	800086c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800048c:	bf00      	nop
 800048e:	37c8      	adds	r7, #200	; 0xc8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	50062400 	.word	0x50062400
 8000498:	40021000 	.word	0x40021000
 800049c:	48000800 	.word	0x48000800
 80004a0:	48000c00 	.word	0x48000c00

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f0:	f000 f892 	bl	8000618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <SystemInit+0x20>)
 80004fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <SystemInit+0x20>)
 8000504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800051c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000554 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000520:	f7ff ffea 	bl	80004f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054a:	f005 fc6f 	bl	8005e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054e:	f7ff fe55 	bl	80001fc <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000554:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000560:	08005f00 	.word	0x08005f00
  ldr r2, =_sbss
 8000564:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000568:	200000c0 	.word	0x200000c0

0800056c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_IRQHandler>

0800056e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f943 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800057e:	200f      	movs	r0, #15
 8000580:	f000 f80e 	bl	80005a0 <HAL_InitTick>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	e001      	b.n	8000594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000590:	f7ff fee0 	bl	8000354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000594:	79fb      	ldrb	r3, [r7, #7]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_InitTick+0x6c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d023      	beq.n	80005fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_InitTick+0x70>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_InitTick+0x6c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f941 	bl	8000852 <HAL_SYSTICK_Config>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10f      	bne.n	80005f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d809      	bhi.n	80005f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e4:	f000 f919 	bl	800081a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_InitTick+0x74>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e007      	b.n	8000600 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e004      	b.n	8000600 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e001      	b.n	8000600 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000008 	.word	0x20000008
 8000610:	20000000 	.word	0x20000000
 8000614:	20000004 	.word	0x20000004

08000618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x20>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x24>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_IncTick+0x24>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000008 	.word	0x20000008
 800063c:	200000a8 	.word	0x200000a8

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GetTick+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000a8 	.word	0x200000a8

08000658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff ffee 	bl	8000640 <HAL_GetTick>
 8000664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000670:	d005      	beq.n	800067e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_Delay+0x44>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067e:	bf00      	nop
 8000680:	f7ff ffde 	bl	8000640 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f7      	bhi.n	8000680 <HAL_Delay+0x28>
  {
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000008 	.word	0x20000008

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	db0a      	blt.n	800072e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	490c      	ldr	r1, [pc, #48]	; (8000750 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800072c:	e00a      	b.n	8000744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	0112      	lsls	r2, r2, #4
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	440b      	add	r3, r1
 8000742:	761a      	strb	r2, [r3, #24]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000758:	b480      	push	{r7}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f1c3 0307 	rsb	r3, r3, #7
 8000772:	2b04      	cmp	r3, #4
 8000774:	bf28      	it	cs
 8000776:	2304      	movcs	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3304      	adds	r3, #4
 800077e:	2b06      	cmp	r3, #6
 8000780:	d902      	bls.n	8000788 <NVIC_EncodePriority+0x30>
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b03      	subs	r3, #3
 8000786:	e000      	b.n	800078a <NVIC_EncodePriority+0x32>
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	401a      	ands	r2, r3
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43d9      	mvns	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d0:	d301      	bcc.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00f      	b.n	80007f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <SysTick_Config+0x40>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e4:	f7ff ff8e 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <SysTick_Config+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SysTick_Config+0x40>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff47 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff5c 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ff8e 	bl	8000758 <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5d 	bl	8000704 <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffb0 	bl	80007c0 <SysTick_Config>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087a:	e166      	b.n	8000b4a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	2101      	movs	r1, #1
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 8158 	beq.w	8000b44 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	2b01      	cmp	r3, #1
 800089e:	d005      	beq.n	80008ac <HAL_GPIO_Init+0x40>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 0303 	and.w	r3, r3, #3
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d130      	bne.n	800090e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	2203      	movs	r2, #3
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e2:	2201      	movs	r2, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4013      	ands	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	f003 0201 	and.w	r2, r3, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4313      	orrs	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b03      	cmp	r3, #3
 8000918:	d017      	beq.n	800094a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d123      	bne.n	800099e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	08da      	lsrs	r2, r3, #3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3208      	adds	r2, #8
 800095e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	220f      	movs	r2, #15
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	691a      	ldr	r2, [r3, #16]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	6939      	ldr	r1, [r7, #16]
 800099a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0203 	and.w	r2, r3, #3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 80b2 	beq.w	8000b44 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <HAL_GPIO_Init+0x2fc>)
 80009e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e4:	4a60      	ldr	r2, [pc, #384]	; (8000b68 <HAL_GPIO_Init+0x2fc>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6613      	str	r3, [r2, #96]	; 0x60
 80009ec:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <HAL_GPIO_Init+0x2fc>)
 80009ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f8:	4a5c      	ldr	r2, [pc, #368]	; (8000b6c <HAL_GPIO_Init+0x300>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a22:	d02b      	beq.n	8000a7c <HAL_GPIO_Init+0x210>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a52      	ldr	r2, [pc, #328]	; (8000b70 <HAL_GPIO_Init+0x304>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d025      	beq.n	8000a78 <HAL_GPIO_Init+0x20c>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a51      	ldr	r2, [pc, #324]	; (8000b74 <HAL_GPIO_Init+0x308>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d01f      	beq.n	8000a74 <HAL_GPIO_Init+0x208>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a50      	ldr	r2, [pc, #320]	; (8000b78 <HAL_GPIO_Init+0x30c>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d019      	beq.n	8000a70 <HAL_GPIO_Init+0x204>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a4f      	ldr	r2, [pc, #316]	; (8000b7c <HAL_GPIO_Init+0x310>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d013      	beq.n	8000a6c <HAL_GPIO_Init+0x200>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a4e      	ldr	r2, [pc, #312]	; (8000b80 <HAL_GPIO_Init+0x314>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d00d      	beq.n	8000a68 <HAL_GPIO_Init+0x1fc>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a4d      	ldr	r2, [pc, #308]	; (8000b84 <HAL_GPIO_Init+0x318>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x1f8>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a4c      	ldr	r2, [pc, #304]	; (8000b88 <HAL_GPIO_Init+0x31c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d101      	bne.n	8000a60 <HAL_GPIO_Init+0x1f4>
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	e00e      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a60:	2308      	movs	r3, #8
 8000a62:	e00c      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a64:	2306      	movs	r3, #6
 8000a66:	e00a      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a68:	2305      	movs	r3, #5
 8000a6a:	e008      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	e006      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a70:	2303      	movs	r3, #3
 8000a72:	e004      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a74:	2302      	movs	r3, #2
 8000a76:	e002      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <HAL_GPIO_Init+0x212>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	f002 0203 	and.w	r2, r2, #3
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	4093      	lsls	r3, r2
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a8e:	4937      	ldr	r1, [pc, #220]	; (8000b6c <HAL_GPIO_Init+0x300>)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3302      	adds	r3, #2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ac0:	4a32      	ldr	r2, [pc, #200]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aea:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <HAL_GPIO_Init+0x320>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa22 f303 	lsr.w	r3, r2, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f47f ae91 	bne.w	800087c <HAL_GPIO_Init+0x10>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000c00 	.word	0x48000c00
 8000b7c:	48001000 	.word	0x48001000
 8000b80:	48001400 	.word	0x48001400
 8000b84:	48001800 	.word	0x48001800
 8000b88:	48001c00 	.word	0x48001c00
 8000b8c:	40010400 	.word	0x40010400

08000b90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_PWREx_GetVoltageRange+0x3c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba0:	d102      	bne.n	8000ba8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba6:	e00b      	b.n	8000bc0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_PWREx_GetVoltageRange+0x3c>)
 8000baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb6:	d102      	bne.n	8000bbe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbc:	e000      	b.n	8000bc0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000bbe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d141      	bne.n	8000c62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bde:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bea:	d131      	bne.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bec:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bf2:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c04:	4a41      	ldr	r2, [pc, #260]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000c0c:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2232      	movs	r2, #50	; 0x32
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	0c9b      	lsrs	r3, r3, #18
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c22:	e002      	b.n	8000c2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c36:	d102      	bne.n	8000c3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f2      	bne.n	8000c24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4a:	d158      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e057      	b.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c60:	e04d      	b.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c68:	d141      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c76:	d131      	bne.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2232      	movs	r2, #50	; 0x32
 8000c9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0c9b      	lsrs	r3, r3, #18
 8000caa:	3301      	adds	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cae:	e002      	b.n	8000cb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc2:	d102      	bne.n	8000cca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f2      	bne.n	8000cb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd6:	d112      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e011      	b.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000cec:	e007      	b.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40007000 	.word	0x40007000
 8000d10:	20000000 	.word	0x20000000
 8000d14:	431bde83 	.word	0x431bde83

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f000 bc08 	b.w	800153c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d2c:	4b96      	ldr	r3, [pc, #600]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d36:	4b94      	ldr	r3, [pc, #592]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80e4 	beq.w	8000f16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d007      	beq.n	8000d64 <HAL_RCC_OscConfig+0x4c>
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2b0c      	cmp	r3, #12
 8000d58:	f040 808b 	bne.w	8000e72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	f040 8087 	bne.w	8000e72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d64:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_RCC_OscConfig+0x64>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e3df      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a1a      	ldr	r2, [r3, #32]
 8000d80:	4b81      	ldr	r3, [pc, #516]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <HAL_RCC_OscConfig+0x7e>
 8000d8c:	4b7e      	ldr	r3, [pc, #504]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d94:	e005      	b.n	8000da2 <HAL_RCC_OscConfig+0x8a>
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d223      	bcs.n	8000dee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fdcc 	bl	8001948 <RCC_SetFlashLatencyFromMSIRange>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e3c0      	b.n	800153c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dba:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a72      	ldr	r2, [pc, #456]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	496d      	ldr	r1, [pc, #436]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4968      	ldr	r1, [pc, #416]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
 8000dec:	e025      	b.n	8000e3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dee:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a65      	ldr	r2, [pc, #404]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b63      	ldr	r3, [pc, #396]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4960      	ldr	r1, [pc, #384]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	495b      	ldr	r1, [pc, #364]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d109      	bne.n	8000e3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fd8c 	bl	8001948 <RCC_SetFlashLatencyFromMSIRange>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e380      	b.n	800153c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e3a:	f000 fcc1 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	4950      	ldr	r1, [pc, #320]	; (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000e4c:	5ccb      	ldrb	r3, [r1, r3]
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <HAL_RCC_OscConfig+0x278>)
 8000e58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <HAL_RCC_OscConfig+0x27c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fb9e 	bl	80005a0 <HAL_InitTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d052      	beq.n	8000f14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	e364      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d032      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a42      	ldr	r2, [pc, #264]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fbdb 	bl	8000640 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fbd7 	bl	8000640 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e34d      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a35      	ldr	r2, [pc, #212]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4930      	ldr	r1, [pc, #192]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	492b      	ldr	r1, [pc, #172]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
 8000ede:	e01a      	b.n	8000f16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fba8 	bl	8000640 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fba4 	bl	8000640 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e31a      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x1dc>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d073      	beq.n	800100a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d005      	beq.n	8000f34 <HAL_RCC_OscConfig+0x21c>
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d10e      	bne.n	8000f4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d10b      	bne.n	8000f4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d063      	beq.n	8001008 <HAL_RCC_OscConfig+0x2f0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d15f      	bne.n	8001008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e2f7      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x24c>
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e025      	b.n	8000fb0 <HAL_RCC_OscConfig+0x298>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6c:	d114      	bne.n	8000f98 <HAL_RCC_OscConfig+0x280>
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a02      	ldr	r2, [pc, #8]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e013      	b.n	8000fb0 <HAL_RCC_OscConfig+0x298>
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	08005e9c 	.word	0x08005e9c
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004
 8000f98:	4ba0      	ldr	r3, [pc, #640]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a9f      	ldr	r2, [pc, #636]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b9d      	ldr	r3, [pc, #628]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a9c      	ldr	r2, [pc, #624]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d013      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fb42 	bl	8000640 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fb3e 	bl	8000640 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e2b4      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fd2:	4b92      	ldr	r3, [pc, #584]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x2a8>
 8000fde:	e014      	b.n	800100a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fb2e 	bl	8000640 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fb2a 	bl	8000640 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e2a0      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x2d0>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d060      	beq.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x310>
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b0c      	cmp	r3, #12
 8001020:	d119      	bne.n	8001056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d116      	bne.n	8001056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001028:	4b7c      	ldr	r3, [pc, #496]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_RCC_OscConfig+0x328>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e27d      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b76      	ldr	r3, [pc, #472]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	4973      	ldr	r1, [pc, #460]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001054:	e040      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d023      	beq.n	80010a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105e:	4b6f      	ldr	r3, [pc, #444]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a6e      	ldr	r2, [pc, #440]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106a:	f7ff fae9 	bl	8000640 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fae5 	bl	8000640 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e25b      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001084:	4b65      	ldr	r3, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	061b      	lsls	r3, r3, #24
 800109e:	495f      	ldr	r1, [pc, #380]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
 80010a4:	e018      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a5c      	ldr	r2, [pc, #368]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fac5 	bl	8000640 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fac1 	bl	8000640 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e237      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f0      	bne.n	80010ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01c      	beq.n	8001126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f2:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff faa0 	bl	8000640 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fa9c 	bl	8000640 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e212      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0ef      	beq.n	8001104 <HAL_RCC_OscConfig+0x3ec>
 8001124:	e01b      	b.n	800115e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112c:	4a3b      	ldr	r2, [pc, #236]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001136:	f7ff fa83 	bl	8000640 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113e:	f7ff fa7f 	bl	8000640 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e1f5      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ef      	bne.n	800113e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80a6 	beq.w	80012b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10d      	bne.n	8001198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6593      	str	r3, [r2, #88]	; 0x58
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001194:	2301      	movs	r3, #1
 8001196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d118      	bne.n	80011d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fa46 	bl	8000640 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b8:	f7ff fa42 	bl	8000640 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1b8      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_RCC_OscConfig+0x4d8>
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80011e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ee:	e029      	b.n	8001244 <HAL_RCC_OscConfig+0x52c>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d115      	bne.n	8001224 <HAL_RCC_OscConfig+0x50c>
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x52c>
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40007000 	.word	0x40007000
 8001224:	4b9d      	ldr	r3, [pc, #628]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	4a9c      	ldr	r2, [pc, #624]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001234:	4b99      	ldr	r3, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a98      	ldr	r2, [pc, #608]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff f9f8 	bl	8000640 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff f9f4 	bl	8000640 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e168      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126a:	4b8c      	ldr	r3, [pc, #560]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ed      	beq.n	8001254 <HAL_RCC_OscConfig+0x53c>
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127a:	f7ff f9e1 	bl	8000640 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff f9dd 	bl	8000640 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e151      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001298:	4b80      	ldr	r3, [pc, #512]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ed      	bne.n	8001282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ac:	4b7b      	ldr	r3, [pc, #492]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	4a7a      	ldr	r2, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03c      	beq.n	800133e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d01c      	beq.n	8001306 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012cc:	4b73      	ldr	r3, [pc, #460]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d2:	4a72      	ldr	r2, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff f9b0 	bl	8000640 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e4:	f7ff f9ac 	bl	8000640 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e122      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012f6:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ef      	beq.n	80012e4 <HAL_RCC_OscConfig+0x5cc>
 8001304:	e01b      	b.n	800133e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130c:	4a63      	ldr	r2, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001316:	f7ff f993 	bl	8000640 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800131e:	f7ff f98f 	bl	8000640 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e105      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001330:	4b5a      	ldr	r3, [pc, #360]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ef      	bne.n	800131e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80f9 	beq.w	800153a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	2b02      	cmp	r3, #2
 800134e:	f040 80cf 	bne.w	80014f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0203 	and.w	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	429a      	cmp	r2, r3
 8001364:	d12c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	3b01      	subs	r3, #1
 8001372:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d123      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d11b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d113      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d109      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d071      	beq.n	80014a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d068      	beq.n	8001498 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0ac      	b.n	800153c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013ee:	f7ff f927 	bl	8000640 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff f923 	bl	8000640 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e099      	b.n	800153c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_OscConfig+0x788>)
 800141a:	4013      	ands	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001424:	3a01      	subs	r2, #1
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	4311      	orrs	r1, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800142e:	0212      	lsls	r2, r2, #8
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	0552      	lsls	r2, r2, #21
 800143c:	4311      	orrs	r1, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001442:	0852      	lsrs	r2, r2, #1
 8001444:	3a01      	subs	r2, #1
 8001446:	0652      	lsls	r2, r2, #25
 8001448:	4311      	orrs	r1, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800144e:	06d2      	lsls	r2, r2, #27
 8001450:	430a      	orrs	r2, r1
 8001452:	4912      	ldr	r1, [pc, #72]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800146a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001470:	f7ff f8e6 	bl	8000640 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff f8e2 	bl	8000640 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e058      	b.n	800153c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001496:	e050      	b.n	800153a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e04f      	b.n	800153c <HAL_RCC_OscConfig+0x824>
 800149c:	40021000 	.word	0x40021000
 80014a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d144      	bne.n	800153a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a23      	ldr	r2, [pc, #140]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014c8:	f7ff f8ba 	bl	8000640 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff f8b6 	bl	8000640 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e02c      	b.n	800153c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x7b8>
 80014ee:	e024      	b.n	800153a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d01f      	beq.n	8001536 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff f89d 	bl	8000640 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff f899 	bl	8000640 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e00f      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	4905      	ldr	r1, [pc, #20]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_OscConfig+0x830>)
 8001530:	4013      	ands	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
 8001534:	e001      	b.n	800153a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	feeefffc 	.word	0xfeeefffc

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e11d      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b90      	ldr	r3, [pc, #576]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d910      	bls.n	8001594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b8d      	ldr	r3, [pc, #564]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 020f 	bic.w	r2, r3, #15
 800157a:	498b      	ldr	r1, [pc, #556]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e105      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d010      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d908      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b7e      	ldr	r3, [pc, #504]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	497b      	ldr	r1, [pc, #492]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d079      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d11e      	bne.n	8001614 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d6:	4b75      	ldr	r3, [pc, #468]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0dc      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80015e6:	f000 fa09 	bl	80019fc <RCC_GetSysClockFreqFromPLLSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a70      	ldr	r2, [pc, #448]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d946      	bls.n	8001680 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80015f2:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d140      	bne.n	8001680 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015fe:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001606:	4a69      	ldr	r2, [pc, #420]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e035      	b.n	8001680 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d107      	bne.n	800162c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161c:	4b63      	ldr	r3, [pc, #396]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d115      	bne.n	8001654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b9      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001634:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0ad      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0a5      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001654:	f000 f8b4 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8001658:	4603      	mov	r3, r0
 800165a:	4a55      	ldr	r2, [pc, #340]	; (80017b0 <HAL_RCC_ClockConfig+0x264>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d90f      	bls.n	8001680 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001660:	4b52      	ldr	r3, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800166c:	4b4f      	ldr	r3, [pc, #316]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001674:	4a4d      	ldr	r2, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001680:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 0203 	bic.w	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4947      	ldr	r1, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001692:	f7fe ffd5 	bl	8000640 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f7fe ffd1 	bl	8000640 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e077      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 020c 	and.w	r2, r3, #12
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	429a      	cmp	r2, r3
 80016c0:	d1eb      	bne.n	800169a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b80      	cmp	r3, #128	; 0x80
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a37      	ldr	r2, [pc, #220]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016d2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d010      	beq.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d208      	bcs.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	492b      	ldr	r1, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d210      	bcs.n	8001732 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 020f 	bic.w	r2, r3, #15
 8001718:	4923      	ldr	r1, [pc, #140]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_RCC_ClockConfig+0x25c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e036      	b.n	80017a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4918      	ldr	r1, [pc, #96]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d009      	beq.n	8001770 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4910      	ldr	r1, [pc, #64]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001770:	f000 f826 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_RCC_ClockConfig+0x260>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <HAL_RCC_ClockConfig+0x268>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_RCC_ClockConfig+0x26c>)
 800178e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_RCC_ClockConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe ff03 	bl	80005a0 <HAL_InitTick>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]

  return status;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	04c4b400 	.word	0x04c4b400
 80017b4:	08005e9c 	.word	0x08005e9c
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x34>
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d121      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d11e      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e005      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800181c:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b04      	cmp	r3, #4
 8001836:	d102      	bne.n	800183e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	e004      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d101      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d134      	bne.n	80018b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0xa6>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d003      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0xac>
 8001864:	e005      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001868:	617b      	str	r3, [r7, #20]
      break;
 800186a:	e005      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800186e:	617b      	str	r3, [r7, #20]
      break;
 8001870:	e002      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	617b      	str	r3, [r7, #20]
      break;
 8001876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3301      	adds	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	fb03 f202 	mul.w	r2, r3, r2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	0e5b      	lsrs	r3, r3, #25
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	3301      	adds	r3, #1
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018b8:	69bb      	ldr	r3, [r7, #24]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08005eb4 	.word	0x08005eb4
 80018d0:	00f42400 	.word	0x00f42400
 80018d4:	007a1200 	.word	0x007a1200

080018d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_RCC_GetHCLKFreq+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000000 	.word	0x20000000

080018f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018f4:	f7ff fff0 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	4904      	ldr	r1, [pc, #16]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001906:	5ccb      	ldrb	r3, [r1, r3]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	08005eac 	.word	0x08005eac

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001920:	f7ff ffda 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0adb      	lsrs	r3, r3, #11
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4904      	ldr	r1, [pc, #16]	; (8001944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000
 8001944:	08005eac 	.word	0x08005eac

08001948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001960:	f7ff f916 	bl	8000b90 <HAL_PWREx_GetVoltageRange>
 8001964:	6178      	str	r0, [r7, #20]
 8001966:	e014      	b.n	8001992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800196e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001972:	6593      	str	r3, [r2, #88]	; 0x58
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001980:	f7ff f906 	bl	8000b90 <HAL_PWREx_GetVoltageRange>
 8001984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800198c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001998:	d10b      	bne.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b80      	cmp	r3, #128	; 0x80
 800199e:	d913      	bls.n	80019c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2ba0      	cmp	r3, #160	; 0xa0
 80019a4:	d902      	bls.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a6:	2302      	movs	r3, #2
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e00d      	b.n	80019c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019ac:	2301      	movs	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	e00a      	b.n	80019c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b7f      	cmp	r3, #127	; 0x7f
 80019b6:	d902      	bls.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80019b8:	2302      	movs	r3, #2
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e004      	b.n	80019c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b70      	cmp	r3, #112	; 0x70
 80019c2:	d101      	bne.n	80019c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019c4:	2301      	movs	r3, #1
 80019c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 020f 	bic.w	r2, r3, #15
 80019d0:	4909      	ldr	r1, [pc, #36]	; (80019f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40022000 	.word	0x40022000

080019fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d00b      	beq.n	8001a2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d825      	bhi.n	8001a64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d008      	beq.n	8001a30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d11f      	bne.n	8001a64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001a26:	613b      	str	r3, [r7, #16]
    break;
 8001a28:	e01f      	b.n	8001a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001a2c:	613b      	str	r3, [r7, #16]
    break;
 8001a2e:	e01c      	b.n	8001a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e005      	b.n	8001a58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001a58:	4a1a      	ldr	r2, [pc, #104]	; (8001ac4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	613b      	str	r3, [r7, #16]
    break;
 8001a62:	e002      	b.n	8001a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
    break;
 8001a68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	3301      	adds	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	fb03 f202 	mul.w	r2, r3, r2
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0e5b      	lsrs	r3, r3, #25
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001aaa:	683b      	ldr	r3, [r7, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200
 8001ac4:	08005eb4 	.word	0x08005eb4

08001ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d040      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d02a      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001aec:	2b80      	cmp	r3, #128	; 0x80
 8001aee:	d825      	bhi.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001af0:	2b60      	cmp	r3, #96	; 0x60
 8001af2:	d026      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001af4:	2b60      	cmp	r3, #96	; 0x60
 8001af6:	d821      	bhi.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001af8:	2b40      	cmp	r3, #64	; 0x40
 8001afa:	d006      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001afc:	2b40      	cmp	r3, #64	; 0x40
 8001afe:	d81d      	bhi.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d010      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001b08:	e018      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a88      	ldr	r2, [pc, #544]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b16:	e015      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 fa84 	bl	800302c <RCCEx_PLLSAI1_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b28:	e00c      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3320      	adds	r3, #32
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fb6f 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8001b36:	4603      	mov	r3, r0
 8001b38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b3a:	e003      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	74fb      	strb	r3, [r7, #19]
      break;
 8001b40:	e000      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8001b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b44:	7cfb      	ldrb	r3, [r7, #19]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b4a:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b50:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b58:	4975      	ldr	r1, [pc, #468]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8001b60:	e001      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d047      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7a:	d030      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b80:	d82a      	bhi.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b86:	d02a      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b8c:	d824      	bhi.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b98:	d81e      	bhi.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba2:	d010      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001ba4:	e018      	b.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ba6:	4b62      	ldr	r3, [pc, #392]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	4a61      	ldr	r2, [pc, #388]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bb2:	e015      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fa36 	bl	800302c <RCCEx_PLLSAI1_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bc4:	e00c      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3320      	adds	r3, #32
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fb21 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bd6:	e003      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	74fb      	strb	r3, [r7, #19]
      break;
 8001bdc:	e000      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8001bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001be0:	7cfb      	ldrb	r3, [r7, #19]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001be6:	4b52      	ldr	r3, [pc, #328]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	494e      	ldr	r1, [pc, #312]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8001bfc:	e001      	b.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 809f 	beq.w	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c14:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	4a40      	ldr	r2, [pc, #256]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6593      	str	r3, [r2, #88]	; 0x58
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c52:	f7fe fcf5 	bl	8000640 <HAL_GetTick>
 8001c56:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c58:	e009      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7fe fcf1 	bl	8000640 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d902      	bls.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	74fb      	strb	r3, [r7, #19]
        break;
 8001c6c:	e005      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ef      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d15b      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01f      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d019      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cca:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d016      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fcb0 	bl	8000640 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7fe fcac 	bl	8000640 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d902      	bls.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	74fb      	strb	r3, [r7, #19]
            break;
 8001cfa:	e006      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ec      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d28:	e008      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	74bb      	strb	r3, [r7, #18]
 8001d2e:	e005      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3c:	7c7b      	ldrb	r3, [r7, #17]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d105      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4ba0      	ldr	r3, [pc, #640]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4a9f      	ldr	r2, [pc, #636]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d5a:	4b9a      	ldr	r3, [pc, #616]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f023 0203 	bic.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	4996      	ldr	r1, [pc, #600]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d7c:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f023 020c 	bic.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	498e      	ldr	r1, [pc, #568]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d9e:	4b89      	ldr	r3, [pc, #548]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	4985      	ldr	r1, [pc, #532]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dc0:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dce:	497d      	ldr	r1, [pc, #500]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001de2:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4974      	ldr	r1, [pc, #464]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e12:	496c      	ldr	r1, [pc, #432]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e34:	4963      	ldr	r1, [pc, #396]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e56:	495b      	ldr	r1, [pc, #364]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	4952      	ldr	r1, [pc, #328]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	494a      	ldr	r1, [pc, #296]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eae:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	4941      	ldr	r1, [pc, #260]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ed6:	f023 0203 	bic.w	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	4939      	ldr	r1, [pc, #228]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d028      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ef2:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f00:	4930      	ldr	r1, [pc, #192]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f10:	d106      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f1c:	60d3      	str	r3, [r2, #12]
 8001f1e:	e011      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 f87b 	bl	800302c <RCCEx_PLLSAI1_Config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f3a:	7cfb      	ldrb	r3, [r7, #19]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d04d      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f58:	d108      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f60:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001f6a:	e012      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f8a:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9a:	d106      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	60d3      	str	r3, [r2, #12]
 8001fa8:	e020      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a02      	ldr	r2, [pc, #8]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	60d3      	str	r3, [r2, #12]
 8001fc0:	e014      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 f827 	bl	800302c <RCCEx_PLLSAI1_Config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d028      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ff8:	4b7a      	ldr	r3, [pc, #488]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002006:	4977      	ldr	r1, [pc, #476]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002016:	d106      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002018:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800201e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002022:	60d3      	str	r3, [r2, #12]
 8002024:	e011      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800202a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800202e:	d10c      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	2101      	movs	r1, #1
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fff8 	bl	800302c <RCCEx_PLLSAI1_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01e      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002066:	495f      	ldr	r1, [pc, #380]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002078:	d10c      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	2102      	movs	r1, #2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 ffd3 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80020a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a6:	f023 0204 	bic.w	r2, r3, #4
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b0:	494c      	ldr	r1, [pc, #304]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00b      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020c4:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80020c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020ca:	f023 0218 	bic.w	r2, r3, #24
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	4943      	ldr	r1, [pc, #268]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d035      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80020e8:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3d      	ldr	r2, [pc, #244]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80020ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7fe faa4 	bl	8000640 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020fc:	f7fe faa0 	bl	8000640 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d902      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	74fb      	strb	r3, [r7, #19]
        break;
 800210e:	e005      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002110:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ef      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d113      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002132:	492c      	ldr	r1, [pc, #176]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3320      	adds	r3, #32
 800213e:	2102      	movs	r1, #2
 8002140:	4618      	mov	r0, r3
 8002142:	f001 f867 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01e      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	491c      	ldr	r1, [pc, #112]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	d10c      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3320      	adds	r3, #32
 8002188:	2101      	movs	r1, #1
 800218a:	4618      	mov	r0, r3
 800218c:	f001 f842 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800219a:	7cfb      	ldrb	r3, [r7, #19]
 800219c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d017      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80021ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ba:	490a      	ldr	r1, [pc, #40]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021cc:	d105      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80021d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021da:	7cbb      	ldrb	r3, [r7, #18]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021fa:	d13e      	bne.n	800227a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80021fc:	4bb6      	ldr	r3, [pc, #728]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800220e:	d028      	beq.n	8002262 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002216:	f200 86f4 	bhi.w	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002220:	d005      	beq.n	800222e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002228:	d00e      	beq.n	8002248 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800222a:	f000 beea 	b.w	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800222e:	4baa      	ldr	r3, [pc, #680]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	f040 86e4 	bne.w	8003006 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800223e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002242:	61fb      	str	r3, [r7, #28]
      break;
 8002244:	f000 bedf 	b.w	8003006 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002248:	4ba3      	ldr	r3, [pc, #652]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	f040 86d9 	bne.w	800300a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8002258:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800225c:	61fb      	str	r3, [r7, #28]
      break;
 800225e:	f000 bed4 	b.w	800300a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002262:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800226e:	f040 86ce 	bne.w	800300e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8002272:	4b9a      	ldr	r3, [pc, #616]	; (80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002274:	61fb      	str	r3, [r7, #28]
      break;
 8002276:	f000 beca 	b.w	800300e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227a:	4b97      	ldr	r3, [pc, #604]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d036      	beq.n	80022f8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d840      	bhi.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d003      	beq.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d020      	beq.n	80022de <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800229c:	e039      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800229e:	4b8e      	ldr	r3, [pc, #568]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d116      	bne.n	80022d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80022aa:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	e005      	b.n	80022ce <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80022c2:	4b85      	ldr	r3, [pc, #532]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a84      	ldr	r2, [pc, #528]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80022d6:	e01f      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
      break;
 80022dc:	e01c      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80022de:	4b7e      	ldr	r3, [pc, #504]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ea:	d102      	bne.n	80022f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80022ec:	4b7d      	ldr	r3, [pc, #500]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80022ee:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80022f0:	e012      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
      break;
 80022f6:	e00f      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022f8:	4b77      	ldr	r3, [pc, #476]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002304:	d102      	bne.n	800230c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002306:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002308:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800230a:	e005      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
      break;
 8002310:	e002      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
      break;
 8002316:	bf00      	nop
    }

    switch(PeriphClk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231e:	f000 8606 	beq.w	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002328:	f200 8673 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002332:	f000 8469 	beq.w	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800233c:	f200 8669 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002346:	f000 8531 	beq.w	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002350:	f200 865f 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800235a:	f000 8187 	beq.w	800266c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002364:	f200 8655 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800236e:	f000 80cd 	beq.w	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002378:	f200 864b 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002382:	f000 8430 	beq.w	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	f200 8641 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002396:	f000 83e4 	beq.w	8002b62 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a0:	f200 8637 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023aa:	f000 80af 	beq.w	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b4:	f200 862d 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	f000 809d 	beq.w	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	f200 8623 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d2:	f000 808b 	beq.w	80024ec <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023dc:	f200 8619 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e6:	f000 8554 	beq.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f0:	f200 860f 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fa:	f000 8500 	beq.w	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002404:	f200 8605 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240e:	f000 84a1 	beq.w	8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002418:	f200 85fb 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b80      	cmp	r3, #128	; 0x80
 8002420:	f000 846c 	beq.w	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b80      	cmp	r3, #128	; 0x80
 8002428:	f200 85f3 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d84c      	bhi.n	80024cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 85ec 	beq.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3b01      	subs	r3, #1
 800243e:	2b1f      	cmp	r3, #31
 8002440:	f200 85e7 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8002444:	a201      	add	r2, pc, #4	; (adr r2, 800244c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	08002861 	.word	0x08002861
 8002450:	080028cf 	.word	0x080028cf
 8002454:	08003013 	.word	0x08003013
 8002458:	08002963 	.word	0x08002963
 800245c:	08003013 	.word	0x08003013
 8002460:	08003013 	.word	0x08003013
 8002464:	08003013 	.word	0x08003013
 8002468:	080029db 	.word	0x080029db
 800246c:	08003013 	.word	0x08003013
 8002470:	08003013 	.word	0x08003013
 8002474:	08003013 	.word	0x08003013
 8002478:	08003013 	.word	0x08003013
 800247c:	08003013 	.word	0x08003013
 8002480:	08003013 	.word	0x08003013
 8002484:	08003013 	.word	0x08003013
 8002488:	08002a5f 	.word	0x08002a5f
 800248c:	08003013 	.word	0x08003013
 8002490:	08003013 	.word	0x08003013
 8002494:	08003013 	.word	0x08003013
 8002498:	08003013 	.word	0x08003013
 800249c:	08003013 	.word	0x08003013
 80024a0:	08003013 	.word	0x08003013
 80024a4:	08003013 	.word	0x08003013
 80024a8:	08003013 	.word	0x08003013
 80024ac:	08003013 	.word	0x08003013
 80024b0:	08003013 	.word	0x08003013
 80024b4:	08003013 	.word	0x08003013
 80024b8:	08003013 	.word	0x08003013
 80024bc:	08003013 	.word	0x08003013
 80024c0:	08003013 	.word	0x08003013
 80024c4:	08003013 	.word	0x08003013
 80024c8:	08002ae1 	.word	0x08002ae1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	f000 83e8 	beq.w	8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80024d4:	f000 bd9d 	b.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0003d090 	.word	0x0003d090
 80024e0:	08005eb4 	.word	0x08005eb4
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024f2:	f000 ff83 	bl	80033fc <RCCEx_GetSAIxPeriphCLKFreq>
 80024f6:	61f8      	str	r0, [r7, #28]
      break;
 80024f8:	f000 bd8e 	b.w	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002502:	f000 ff7b 	bl	80033fc <RCCEx_GetSAIxPeriphCLKFreq>
 8002506:	61f8      	str	r0, [r7, #28]
      break;
 8002508:	f000 bd86 	b.w	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800250c:	4b9a      	ldr	r3, [pc, #616]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800251e:	d015      	beq.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002526:	f200 8092 	bhi.w	800264e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002530:	d029      	beq.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002538:	f200 8089 	bhi.w	800264e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d07b      	beq.n	800263a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002548:	d04a      	beq.n	80025e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800254a:	e080      	b.n	800264e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800254c:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b02      	cmp	r3, #2
 8002556:	d17d      	bne.n	8002654 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002558:	4b87      	ldr	r3, [pc, #540]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8002564:	4b84      	ldr	r3, [pc, #528]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	e005      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4a7f      	ldr	r2, [pc, #508]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	61fb      	str	r3, [r7, #28]
          break;
 8002584:	e066      	b.n	8002654 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002592:	d162      	bne.n	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002594:	4b78      	ldr	r3, [pc, #480]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a0:	d15b      	bne.n	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80025a2:	4b75      	ldr	r3, [pc, #468]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ac:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	3301      	adds	r3, #1
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0d5b      	lsrs	r3, r3, #21
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	3301      	adds	r3, #1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	61fb      	str	r3, [r7, #28]
          break;
 80025de:	e03c      	b.n	800265a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80025e0:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ec:	d138      	bne.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80025ee:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fa:	d131      	bne.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80025fc:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002606:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	fb03 f202 	mul.w	r2, r3, r2
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3301      	adds	r3, #1
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002622:	4b55      	ldr	r3, [pc, #340]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	0d5b      	lsrs	r3, r3, #21
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	3301      	adds	r3, #1
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	61fb      	str	r3, [r7, #28]
          break;
 8002638:	e012      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800263a:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800263c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	d10e      	bne.n	8002666 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800264a:	61fb      	str	r3, [r7, #28]
          break;
 800264c:	e00b      	b.n	8002666 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800264e:	bf00      	nop
 8002650:	f000 bce2 	b.w	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002654:	bf00      	nop
 8002656:	f000 bcdf 	b.w	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800265a:	bf00      	nop
 800265c:	f000 bcdc 	b.w	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002660:	bf00      	nop
 8002662:	f000 bcd9 	b.w	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002666:	bf00      	nop
        break;
 8002668:	f000 bcd6 	b.w	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800266c:	4b42      	ldr	r3, [pc, #264]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800266e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800267a:	d13d      	bne.n	80026f8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800267c:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002688:	f040 84c5 	bne.w	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	f040 84bd 	bne.w	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	fb03 f202 	mul.w	r2, r3, r2
 80026b0:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3301      	adds	r3, #1
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0edb      	lsrs	r3, r3, #27
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80026e0:	2311      	movs	r3, #17
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e001      	b.n	80026ea <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80026e6:	2307      	movs	r3, #7
 80026e8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	61fb      	str	r3, [r7, #28]
      break;
 80026f4:	f000 bc8f 	b.w	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800270a:	d016      	beq.n	800273a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002712:	f200 809b 	bhi.w	800284c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800271c:	d032      	beq.n	8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002724:	f200 8092 	bhi.w	800284c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8084 	beq.w	8002838 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002736:	d052      	beq.n	80027de <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8002738:	e088      	b.n	800284c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	f040 8084 	bne.w	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	e005      	b.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	4a03      	ldr	r2, [pc, #12]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61fb      	str	r3, [r7, #28]
          break;
 8002774:	e06c      	b.n	8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	08005eb4 	.word	0x08005eb4
 8002780:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002784:	4ba5      	ldr	r3, [pc, #660]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002790:	d160      	bne.n	8002854 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002792:	4ba2      	ldr	r3, [pc, #648]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800279e:	d159      	bne.n	8002854 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80027a0:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027aa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	fb03 f202 	mul.w	r2, r3, r2
 80027b4:	4b99      	ldr	r3, [pc, #612]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3301      	adds	r3, #1
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80027c6:	4b95      	ldr	r3, [pc, #596]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	0d5b      	lsrs	r3, r3, #21
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	3301      	adds	r3, #1
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	61fb      	str	r3, [r7, #28]
          break;
 80027dc:	e03a      	b.n	8002854 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80027de:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ea:	d135      	bne.n	8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80027ec:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f8:	d12e      	bne.n	8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002804:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	fb03 f202 	mul.w	r2, r3, r2
 800280e:	4b83      	ldr	r3, [pc, #524]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	3301      	adds	r3, #1
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	0d5b      	lsrs	r3, r3, #21
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	61fb      	str	r3, [r7, #28]
          break;
 8002836:	e00f      	b.n	8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8002838:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800283a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b02      	cmp	r3, #2
 8002844:	d10a      	bne.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8002846:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8002848:	61fb      	str	r3, [r7, #28]
          break;
 800284a:	e007      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800284c:	bf00      	nop
 800284e:	e3e2      	b.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8002850:	bf00      	nop
 8002852:	e3e0      	b.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8002854:	bf00      	nop
 8002856:	e3de      	b.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8002858:	bf00      	nop
 800285a:	e3dc      	b.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800285c:	bf00      	nop
      break;
 800285e:	e3da      	b.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002860:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d827      	bhi.n	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	08002891 	.word	0x08002891
 8002880:	08002899 	.word	0x08002899
 8002884:	080028ad 	.word	0x080028ad
          frequency = HAL_RCC_GetPCLK2Freq();
 8002888:	f7ff f848 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 800288c:	61f8      	str	r0, [r7, #28]
          break;
 800288e:	e01d      	b.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8002890:	f7fe ff96 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002894:	61f8      	str	r0, [r7, #28]
          break;
 8002896:	e019      	b.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a4:	d10f      	bne.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80028a6:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80028a8:	61fb      	str	r3, [r7, #28]
          break;
 80028aa:	e00c      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80028ac:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d107      	bne.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80028ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028be:	61fb      	str	r3, [r7, #28]
          break;
 80028c0:	e003      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80028c2:	bf00      	nop
 80028c4:	e3a8      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80028c6:	bf00      	nop
 80028c8:	e3a6      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80028ca:	bf00      	nop
        break;
 80028cc:	e3a4      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b0c      	cmp	r3, #12
 80028de:	d83a      	bhi.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	0800291d 	.word	0x0800291d
 80028ec:	08002957 	.word	0x08002957
 80028f0:	08002957 	.word	0x08002957
 80028f4:	08002957 	.word	0x08002957
 80028f8:	08002925 	.word	0x08002925
 80028fc:	08002957 	.word	0x08002957
 8002900:	08002957 	.word	0x08002957
 8002904:	08002957 	.word	0x08002957
 8002908:	0800292d 	.word	0x0800292d
 800290c:	08002957 	.word	0x08002957
 8002910:	08002957 	.word	0x08002957
 8002914:	08002957 	.word	0x08002957
 8002918:	08002941 	.word	0x08002941
          frequency = HAL_RCC_GetPCLK1Freq();
 800291c:	f7fe ffe8 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002920:	61f8      	str	r0, [r7, #28]
          break;
 8002922:	e01d      	b.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8002924:	f7fe ff4c 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002928:	61f8      	str	r0, [r7, #28]
          break;
 800292a:	e019      	b.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800292c:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d10f      	bne.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800293c:	61fb      	str	r3, [r7, #28]
          break;
 800293e:	e00c      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800294e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002952:	61fb      	str	r3, [r7, #28]
          break;
 8002954:	e003      	b.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8002956:	bf00      	nop
 8002958:	e35e      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800295a:	bf00      	nop
 800295c:	e35c      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800295e:	bf00      	nop
        break;
 8002960:	e35a      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b30      	cmp	r3, #48	; 0x30
 8002972:	d021      	beq.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b30      	cmp	r3, #48	; 0x30
 8002978:	d829      	bhi.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b20      	cmp	r3, #32
 800297e:	d011      	beq.n	80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b20      	cmp	r3, #32
 8002984:	d823      	bhi.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b10      	cmp	r3, #16
 8002990:	d004      	beq.n	800299c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8002992:	e01c      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002994:	f7fe ffac 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002998:	61f8      	str	r0, [r7, #28]
          break;
 800299a:	e01d      	b.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800299c:	f7fe ff10 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 80029a0:	61f8      	str	r0, [r7, #28]
          break;
 80029a2:	e019      	b.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d10f      	bne.n	80029d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80029b4:	61fb      	str	r3, [r7, #28]
          break;
 80029b6:	e00c      	b.n	80029d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d107      	bne.n	80029d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80029c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ca:	61fb      	str	r3, [r7, #28]
          break;
 80029cc:	e003      	b.n	80029d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80029ce:	bf00      	nop
 80029d0:	e322      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80029d2:	bf00      	nop
 80029d4:	e320      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80029d6:	bf00      	nop
        break;
 80029d8:	e31e      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2bc0      	cmp	r3, #192	; 0xc0
 80029ea:	d027      	beq.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2bc0      	cmp	r3, #192	; 0xc0
 80029f0:	d82f      	bhi.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d017      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d829      	bhi.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d004      	beq.n	8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8002a0a:	e022      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7fe ff70 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002a10:	61f8      	str	r0, [r7, #28]
          break;
 8002a12:	e023      	b.n	8002a5c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a14:	f7fe fed4 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002a18:	61f8      	str	r0, [r7, #28]
          break;
 8002a1a:	e01f      	b.n	8002a5c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	02dc6c00 	.word	0x02dc6c00
 8002a24:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a28:	4b9b      	ldr	r3, [pc, #620]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a34:	d10f      	bne.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8002a36:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8002a38:	61fb      	str	r3, [r7, #28]
          break;
 8002a3a:	e00c      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a3c:	4b96      	ldr	r3, [pc, #600]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d107      	bne.n	8002a5a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8002a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4e:	61fb      	str	r3, [r7, #28]
          break;
 8002a50:	e003      	b.n	8002a5a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8002a52:	bf00      	nop
 8002a54:	e2e0      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002a56:	bf00      	nop
 8002a58:	e2de      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002a5a:	bf00      	nop
        break;
 8002a5c:	e2dc      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002a5e:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a70:	d025      	beq.n	8002abe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a78:	d82c      	bhi.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	d013      	beq.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d824      	bhi.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a96:	d004      	beq.n	8002aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8002a98:	e01c      	b.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a9a:	f7fe ff29 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002a9e:	61f8      	str	r0, [r7, #28]
          break;
 8002aa0:	e01d      	b.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8002aa2:	f7fe fe8d 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002aa6:	61f8      	str	r0, [r7, #28]
          break;
 8002aa8:	e019      	b.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8002ab8:	4b78      	ldr	r3, [pc, #480]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8002aba:	61fb      	str	r3, [r7, #28]
          break;
 8002abc:	e00c      	b.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002abe:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d107      	bne.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8002acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad0:	61fb      	str	r3, [r7, #28]
          break;
 8002ad2:	e003      	b.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8002ad4:	bf00      	nop
 8002ad6:	e29f      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002ad8:	bf00      	nop
 8002ada:	e29d      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002adc:	bf00      	nop
        break;
 8002ade:	e29b      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002ae0:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002af2:	d025      	beq.n	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002afa:	d82c      	bhi.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b02:	d013      	beq.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0a:	d824      	bhi.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b18:	d004      	beq.n	8002b24 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8002b1a:	e01c      	b.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f7fe fee8 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002b20:	61f8      	str	r0, [r7, #28]
          break;
 8002b22:	e01d      	b.n	8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b24:	f7fe fe4c 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002b28:	61f8      	str	r0, [r7, #28]
          break;
 8002b2a:	e019      	b.n	8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d10f      	bne.n	8002b5a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8002b3a:	4b58      	ldr	r3, [pc, #352]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8002b3c:	61fb      	str	r3, [r7, #28]
          break;
 8002b3e:	e00c      	b.n	8002b5a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b40:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8002b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b52:	61fb      	str	r3, [r7, #28]
          break;
 8002b54:	e003      	b.n	8002b5e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8002b56:	bf00      	nop
 8002b58:	e25e      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002b5a:	bf00      	nop
 8002b5c:	e25c      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002b5e:	bf00      	nop
        break;
 8002b60:	e25a      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002b62:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b74:	d007      	beq.n	8002b86 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b7c:	d12f      	bne.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b7e:	f7fe fe1f 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002b82:	61f8      	str	r0, [r7, #28]
          break;
 8002b84:	e02e      	b.n	8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b92:	d126      	bne.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002baa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	fb03 f202 	mul.w	r2, r3, r2
 8002bb4:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	0e5b      	lsrs	r3, r3, #25
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	61fb      	str	r3, [r7, #28]
          break;
 8002bdc:	e001      	b.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8002bde:	bf00      	nop
 8002be0:	e21a      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002be2:	bf00      	nop
        break;
 8002be4:	e218      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002bf8:	f7fe fe90 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8002bfc:	61f8      	str	r0, [r7, #28]
        break;
 8002bfe:	e20b      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c00:	f7fe fdde 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002c04:	61f8      	str	r0, [r7, #28]
        break;
 8002c06:	e207      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c0e:	f003 0318 	and.w	r3, r3, #24
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d010      	beq.n	8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d834      	bhi.n	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d024      	beq.n	8002c76 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8002c2c:	e02d      	b.n	8002c8a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002c2e:	69b9      	ldr	r1, [r7, #24]
 8002c30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c34:	f000 fbe2 	bl	80033fc <RCCEx_GetSAIxPeriphCLKFreq>
 8002c38:	61f8      	str	r0, [r7, #28]
          break;
 8002c3a:	e02b      	b.n	8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d122      	bne.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	e005      	b.n	8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	61fb      	str	r3, [r7, #28]
          break;
 8002c74:	e00b      	b.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c82:	d106      	bne.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8002c86:	61fb      	str	r3, [r7, #28]
          break;
 8002c88:	e003      	b.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8002c8a:	bf00      	nop
 8002c8c:	e1c4      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002c8e:	bf00      	nop
 8002c90:	e1c2      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002c92:	bf00      	nop
        break;
 8002c94:	e1c0      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	08005eb4 	.word	0x08005eb4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbe:	d819      	bhi.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ccc:	d004      	beq.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8002cce:	e011      	b.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002cd0:	f7fe fe0e 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002cd4:	61f8      	str	r0, [r7, #28]
          break;
 8002cd6:	e010      	b.n	8002cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8002cd8:	f7fe fd72 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002cdc:	61f8      	str	r0, [r7, #28]
          break;
 8002cde:	e00c      	b.n	8002cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ce0:	4b87      	ldr	r3, [pc, #540]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cec:	d104      	bne.n	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8002cee:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8002cf0:	61fb      	str	r3, [r7, #28]
          break;
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8002cf4:	bf00      	nop
 8002cf6:	e18f      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002cf8:	bf00      	nop
        break;
 8002cfa:	e18d      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002cfc:	4b80      	ldr	r3, [pc, #512]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d16:	d819      	bhi.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d24:	d004      	beq.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8002d26:	e011      	b.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7fe fde2 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	61f8      	str	r0, [r7, #28]
          break;
 8002d2e:	e010      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d30:	f7fe fd46 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002d34:	61f8      	str	r0, [r7, #28]
          break;
 8002d36:	e00c      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d38:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d104      	bne.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8002d48:	61fb      	str	r3, [r7, #28]
          break;
 8002d4a:	e001      	b.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8002d4c:	bf00      	nop
 8002d4e:	e163      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002d50:	bf00      	nop
        break;
 8002d52:	e161      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d66:	d013      	beq.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6e:	d819      	bhi.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d004      	beq.n	8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8002d7e:	e011      	b.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7fe fdb6 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002d84:	61f8      	str	r0, [r7, #28]
          break;
 8002d86:	e010      	b.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d88:	f7fe fd1a 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002d8c:	61f8      	str	r0, [r7, #28]
          break;
 8002d8e:	e00c      	b.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d90:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d104      	bne.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8002d9e:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8002da0:	61fb      	str	r3, [r7, #28]
          break;
 8002da2:	e001      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8002da4:	bf00      	nop
 8002da6:	e137      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002da8:	bf00      	nop
        break;
 8002daa:	e135      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8002dac:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d011      	beq.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d818      	bhi.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d004      	beq.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8002dd0:	e011      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002dd2:	f7fe fd8d 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002dd6:	61f8      	str	r0, [r7, #28]
          break;
 8002dd8:	e010      	b.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8002dda:	f7fe fcf1 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002dde:	61f8      	str	r0, [r7, #28]
          break;
 8002de0:	e00c      	b.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d104      	bne.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8002df2:	61fb      	str	r3, [r7, #28]
          break;
 8002df4:	e001      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8002df6:	bf00      	nop
 8002df8:	e10e      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002dfa:	bf00      	nop
        break;
 8002dfc:	e10c      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e10:	d02c      	beq.n	8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e18:	d833      	bhi.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e20:	d01a      	beq.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e28:	d82b      	bhi.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e36:	d004      	beq.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8002e38:	e023      	b.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e3a:	f7fe fd59 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002e3e:	61f8      	str	r0, [r7, #28]
          break;
 8002e40:	e026      	b.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d11a      	bne.n	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8002e50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002e54:	61fb      	str	r3, [r7, #28]
          break;
 8002e56:	e016      	b.n	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d111      	bne.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8002e68:	61fb      	str	r3, [r7, #28]
          break;
 8002e6a:	e00e      	b.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d109      	bne.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8002e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7e:	61fb      	str	r3, [r7, #28]
          break;
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8002e82:	bf00      	nop
 8002e84:	e0c8      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002e86:	bf00      	nop
 8002e88:	e0c6      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002e8a:	bf00      	nop
 8002e8c:	e0c4      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002e8e:	bf00      	nop
        break;
 8002e90:	e0c2      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ea4:	d030      	beq.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eac:	d837      	bhi.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb4:	d01a      	beq.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ebc:	d82f      	bhi.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eca:	d004      	beq.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8002ecc:	e027      	b.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ece:	f7fe fd0f 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002ed2:	61f8      	str	r0, [r7, #28]
          break;
 8002ed4:	e02a      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d11e      	bne.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8002ee4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002ee8:	61fb      	str	r3, [r7, #28]
          break;
 8002eea:	e01a      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8002efa:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8002efc:	61fb      	str	r3, [r7, #28]
          break;
 8002efe:	e012      	b.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f08:	4b46      	ldr	r3, [pc, #280]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d109      	bne.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8002f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1a:	61fb      	str	r3, [r7, #28]
          break;
 8002f1c:	e005      	b.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8002f1e:	bf00      	nop
 8002f20:	e07a      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002f22:	bf00      	nop
 8002f24:	e078      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002f26:	bf00      	nop
 8002f28:	e076      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002f2a:	bf00      	nop
        break;
 8002f2c:	e074      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f40:	d02c      	beq.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f48:	d855      	bhi.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f56:	d004      	beq.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8002f58:	e04d      	b.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7fe fc31 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 8002f5e:	61f8      	str	r0, [r7, #28]
          break;
 8002f60:	e04e      	b.n	8003000 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002f62:	4b30      	ldr	r3, [pc, #192]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d145      	bne.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	e005      	b.n	8002f92 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a25      	ldr	r2, [pc, #148]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	61fb      	str	r3, [r7, #28]
          break;
 8002f9a:	e02e      	b.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fa8:	d129      	bne.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb6:	d122      	bne.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	fb03 f202 	mul.w	r2, r3, r2
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	0d5b      	lsrs	r3, r3, #21
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	61fb      	str	r3, [r7, #28]
          break;
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8002ff6:	bf00      	nop
 8002ff8:	e00e      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002ffa:	bf00      	nop
 8002ffc:	e00c      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8002ffe:	bf00      	nop
        break;
 8003000:	e00a      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8003002:	bf00      	nop
 8003004:	e008      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8003006:	bf00      	nop
 8003008:	e006      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800300a:	bf00      	nop
 800300c:	e004      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8003016:	bf00      	nop
    }
  }

  return(frequency);
 8003018:	69fb      	ldr	r3, [r7, #28]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	08005eb4 	.word	0x08005eb4

0800302c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303a:	4b72      	ldr	r3, [pc, #456]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003046:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d103      	bne.n	800305e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
       ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d142      	bne.n	80030e4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e03f      	b.n	80030e4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d018      	beq.n	800309e <RCCEx_PLLSAI1_Config+0x72>
 800306c:	2b03      	cmp	r3, #3
 800306e:	d825      	bhi.n	80030bc <RCCEx_PLLSAI1_Config+0x90>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <RCCEx_PLLSAI1_Config+0x4e>
 8003074:	2b02      	cmp	r3, #2
 8003076:	d009      	beq.n	800308c <RCCEx_PLLSAI1_Config+0x60>
 8003078:	e020      	b.n	80030bc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308a:	e01a      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800308c:	4b5d      	ldr	r3, [pc, #372]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309c:	e013      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030aa:	4b56      	ldr	r3, [pc, #344]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ba:	e006      	b.n	80030ca <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e004      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d108      	bne.n	80030e4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80030d2:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4949      	ldr	r1, [pc, #292]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 8086 	bne.w	80031f8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030ec:	4b45      	ldr	r3, [pc, #276]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a44      	ldr	r2, [pc, #272]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f8:	f7fd faa2 	bl	8000640 <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030fe:	e009      	b.n	8003114 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003100:	f7fd fa9e 	bl	8000640 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	73fb      	strb	r3, [r7, #15]
        break;
 8003112:	e005      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ef      	bne.n	8003100 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d168      	bne.n	80031f8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d113      	bne.n	8003154 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	4b35      	ldr	r3, [pc, #212]	; (8003208 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6892      	ldr	r2, [r2, #8]
 8003138:	0211      	lsls	r1, r2, #8
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68d2      	ldr	r2, [r2, #12]
 800313e:	06d2      	lsls	r2, r2, #27
 8003140:	4311      	orrs	r1, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6852      	ldr	r2, [r2, #4]
 8003146:	3a01      	subs	r2, #1
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	430a      	orrs	r2, r1
 800314c:	492d      	ldr	r1, [pc, #180]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	610b      	str	r3, [r1, #16]
 8003152:	e02d      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d115      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6892      	ldr	r2, [r2, #8]
 8003166:	0211      	lsls	r1, r2, #8
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6912      	ldr	r2, [r2, #16]
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	3a01      	subs	r2, #1
 8003170:	0552      	lsls	r2, r2, #21
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6852      	ldr	r2, [r2, #4]
 8003178:	3a01      	subs	r2, #1
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	430a      	orrs	r2, r1
 800317e:	4921      	ldr	r1, [pc, #132]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003180:	4313      	orrs	r3, r2
 8003182:	610b      	str	r3, [r1, #16]
 8003184:	e014      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6892      	ldr	r2, [r2, #8]
 8003192:	0211      	lsls	r1, r2, #8
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6952      	ldr	r2, [r2, #20]
 8003198:	0852      	lsrs	r2, r2, #1
 800319a:	3a01      	subs	r2, #1
 800319c:	0652      	lsls	r2, r2, #25
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6852      	ldr	r2, [r2, #4]
 80031a4:	3a01      	subs	r2, #1
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	430a      	orrs	r2, r1
 80031aa:	4916      	ldr	r1, [pc, #88]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fd fa40 	bl	8000640 <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031c2:	e009      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c4:	f7fd fa3c 	bl	8000640 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d902      	bls.n	80031d8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	73fb      	strb	r3, [r7, #15]
          break;
 80031d6:	e005      	b.n	80031e4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ef      	beq.n	80031c4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4904      	ldr	r1, [pc, #16]	; (8003204 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	07ff800f 	.word	0x07ff800f
 800320c:	ff9f800f 	.word	0xff9f800f
 8003210:	f9ff800f 	.word	0xf9ff800f

08003214 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003222:	4b72      	ldr	r3, [pc, #456]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00e      	beq.n	800324c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800322e:	4b6f      	ldr	r3, [pc, #444]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d103      	bne.n	8003246 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
       ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	d142      	bne.n	80032cc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e03f      	b.n	80032cc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d018      	beq.n	8003286 <RCCEx_PLLSAI2_Config+0x72>
 8003254:	2b03      	cmp	r3, #3
 8003256:	d825      	bhi.n	80032a4 <RCCEx_PLLSAI2_Config+0x90>
 8003258:	2b01      	cmp	r3, #1
 800325a:	d002      	beq.n	8003262 <RCCEx_PLLSAI2_Config+0x4e>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d009      	beq.n	8003274 <RCCEx_PLLSAI2_Config+0x60>
 8003260:	e020      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003262:	4b62      	ldr	r3, [pc, #392]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11d      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003272:	e01a      	b.n	80032aa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003274:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d116      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e013      	b.n	80032ae <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003286:	4b59      	ldr	r3, [pc, #356]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003292:	4b56      	ldr	r3, [pc, #344]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032a2:	e006      	b.n	80032b2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e004      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80032b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d108      	bne.n	80032cc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80032ba:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4949      	ldr	r1, [pc, #292]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 8086 	bne.w	80033e0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032d4:	4b45      	ldr	r3, [pc, #276]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a44      	ldr	r2, [pc, #272]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e0:	f7fd f9ae 	bl	8000640 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032e6:	e009      	b.n	80032fc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032e8:	f7fd f9aa 	bl	8000640 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d902      	bls.n	80032fc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	73fb      	strb	r3, [r7, #15]
        break;
 80032fa:	e005      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032fc:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ef      	bne.n	80032e8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d168      	bne.n	80033e0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d113      	bne.n	800333c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6892      	ldr	r2, [r2, #8]
 8003320:	0211      	lsls	r1, r2, #8
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	06d2      	lsls	r2, r2, #27
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6852      	ldr	r2, [r2, #4]
 800332e:	3a01      	subs	r2, #1
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	430a      	orrs	r2, r1
 8003334:	492d      	ldr	r1, [pc, #180]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	614b      	str	r3, [r1, #20]
 800333a:	e02d      	b.n	8003398 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d115      	bne.n	800336e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003348:	4013      	ands	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6892      	ldr	r2, [r2, #8]
 800334e:	0211      	lsls	r1, r2, #8
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6912      	ldr	r2, [r2, #16]
 8003354:	0852      	lsrs	r2, r2, #1
 8003356:	3a01      	subs	r2, #1
 8003358:	0552      	lsls	r2, r2, #21
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6852      	ldr	r2, [r2, #4]
 8003360:	3a01      	subs	r2, #1
 8003362:	0112      	lsls	r2, r2, #4
 8003364:	430a      	orrs	r2, r1
 8003366:	4921      	ldr	r1, [pc, #132]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003368:	4313      	orrs	r3, r2
 800336a:	614b      	str	r3, [r1, #20]
 800336c:	e014      	b.n	8003398 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800336e:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	0211      	lsls	r1, r2, #8
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6952      	ldr	r2, [r2, #20]
 8003380:	0852      	lsrs	r2, r2, #1
 8003382:	3a01      	subs	r2, #1
 8003384:	0652      	lsls	r2, r2, #25
 8003386:	4311      	orrs	r1, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6852      	ldr	r2, [r2, #4]
 800338c:	3a01      	subs	r2, #1
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	430a      	orrs	r2, r1
 8003392:	4916      	ldr	r1, [pc, #88]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a13      	ldr	r2, [pc, #76]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 800339e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fd f94c 	bl	8000640 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033aa:	e009      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033ac:	f7fd f948 	bl	8000640 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d902      	bls.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	73fb      	strb	r3, [r7, #15]
          break;
 80033be:	e005      	b.n	80033cc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ef      	beq.n	80033ac <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	4904      	ldr	r1, [pc, #16]	; (80033ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	07ff800f 	.word	0x07ff800f
 80033f4:	ff9f800f 	.word	0xff9f800f
 80033f8:	f9ff800f 	.word	0xf9ff800f

080033fc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003418:	d10b      	bne.n	8003432 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800341a:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800341c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003420:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003424:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d112      	bne.n	8003452 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800342c:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e00f      	b.n	8003452 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003438:	d10b      	bne.n	8003452 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800343a:	4b76      	ldr	r3, [pc, #472]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800343c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003444:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344c:	d101      	bne.n	8003452 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800344e:	4b72      	ldr	r3, [pc, #456]	; (8003618 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8003450:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 80d6 	bne.w	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d003      	beq.n	800346c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	d13b      	bne.n	80034e4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003478:	f040 80c4 	bne.w	8003604 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800347c:	4b65      	ldr	r3, [pc, #404]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80bd 	beq.w	8003604 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800348a:	4b62      	ldr	r3, [pc, #392]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	3301      	adds	r3, #1
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80034aa:	4b5a      	ldr	r3, [pc, #360]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	0edb      	lsrs	r3, r3, #27
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80034bc:	4b55      	ldr	r3, [pc, #340]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80034c8:	2311      	movs	r3, #17
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e001      	b.n	80034d2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80034ce:	2307      	movs	r3, #7
 80034d0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	fb03 f202 	mul.w	r2, r3, r2
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80034e2:	e08f      	b.n	8003604 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d13a      	bne.n	8003560 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f6:	f040 8086 	bne.w	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80034fa:	4b46      	ldr	r3, [pc, #280]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d07f      	beq.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	3301      	adds	r3, #1
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800351a:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003524:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	0edb      	lsrs	r3, r3, #27
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8003544:	2311      	movs	r3, #17
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	e001      	b.n	800354e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800354a:	2307      	movs	r3, #7
 800354c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	fb03 f202 	mul.w	r2, r3, r2
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e052      	b.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d003      	beq.n	800356e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356c:	d109      	bne.n	8003582 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d144      	bne.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800357e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003580:	e041      	b.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b20      	cmp	r3, #32
 8003586:	d003      	beq.n	8003590 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358e:	d13a      	bne.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359c:	d133      	bne.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02d      	beq.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	3301      	adds	r3, #1
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	0edb      	lsrs	r3, r3, #27
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80035e8:	2311      	movs	r3, #17
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e001      	b.n	80035f2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80035ee:	2307      	movs	r3, #7
 80035f0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	fb03 f202 	mul.w	r2, r3, r2
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e000      	b.n	8003606 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003604:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003606:	69fb      	ldr	r3, [r7, #28]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3724      	adds	r7, #36	; 0x24
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000
 8003618:	001fff68 	.word	0x001fff68
 800361c:	00f42400 	.word	0x00f42400

08003620 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e078      	b.n	8003724 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fc fea9 	bl	800039c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f86a 	bl	800372c <HAL_SD_InitCard>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e060      	b.n	8003724 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8003662:	f107 0308 	add.w	r3, r7, #8
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fdcd 	bl	8004208 <HAL_SD_GetCardStatus>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e055      	b.n	8003724 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8003678:	7e3b      	ldrb	r3, [r7, #24]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800367e:	7e7b      	ldrb	r3, [r7, #25]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10a      	bne.n	80036a2 <HAL_SD_Init+0x82>
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_SD_Init+0x78>
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369e:	65da      	str	r2, [r3, #92]	; 0x5c
 80036a0:	e00b      	b.n	80036ba <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d104      	bne.n	80036b4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b2:	e002      	b.n	80036ba <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4619      	mov	r1, r3
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fe83 	bl	80043cc <HAL_SD_ConfigWideBusOperation>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e029      	b.n	8003724 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80036d0:	f7fc ffb6 	bl	8000640 <HAL_GetTick>
 80036d4:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80036d6:	e014      	b.n	8003702 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80036d8:	f7fc ffb2 	bl	8000640 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e6:	d10c      	bne.n	8003702 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e010      	b.n	8003724 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 ff76 	bl	80045f4 <HAL_SD_GetCardState>
 8003708:	4603      	mov	r3, r0
 800370a:	2b04      	cmp	r3, #4
 800370c:	d1e4      	bne.n	80036d8 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800372c:	b5b0      	push	{r4, r5, r7, lr}
 800372e:	b08e      	sub	sp, #56	; 0x38
 8003730:	af04      	add	r7, sp, #16
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8003744:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003748:	f7fe fd4e 	bl	80021e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e079      	b.n	800385c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <HAL_SD_InitCard+0x138>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0210 	orr.w	r2, r2, #16
 8003792:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681d      	ldr	r5, [r3, #0]
 8003798:	466c      	mov	r4, sp
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ac:	4628      	mov	r0, r5
 80037ae:	f001 fb77 	bl	8004ea0 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fbba 	bl	8004f30 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <HAL_SD_InitCard+0x13c>)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc ff40 	bl	8000658 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 ffeb 	bl	80047b4 <SD_PowerON>
 80037de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e02e      	b.n	800385c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 ff18 	bl	8004634 <SD_InitCard>
 8003804:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01b      	b.n	800385c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fc15 	bl	800505c <SDMMC_CmdBlockLength>
 8003832:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00f      	beq.n	800385a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0b      	ldr	r2, [pc, #44]	; (800386c <HAL_SD_InitCard+0x140>)
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bdb0      	pop	{r4, r5, r7, pc}
 8003864:	014f8b59 	.word	0x014f8b59
 8003868:	00012110 	.word	0x00012110
 800386c:	1fe00fff 	.word	0x1fe00fff

08003870 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b092      	sub	sp, #72	; 0x48
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7fc fedf 	bl	8000640 <HAL_GetTick>
 8003882:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d107      	bne.n	80038a2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e170      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	f040 8163 	bne.w	8003b76 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d907      	bls.n	80038d4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e157      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2200      	movs	r2, #0
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d002      	beq.n	80038f2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	025b      	lsls	r3, r3, #9
 80038fc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80038fe:	2390      	movs	r3, #144	; 0x90
 8003900:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003902:	2302      	movs	r3, #2
 8003904:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800390a:	2300      	movs	r3, #0
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f107 0214 	add.w	r2, r7, #20
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fb73 	bl	8005004 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800392c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d90a      	bls.n	800394a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2202      	movs	r2, #2
 8003938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fbd1 	bl	80050e8 <SDMMC_CmdReadMultiBlock>
 8003946:	6478      	str	r0, [r7, #68]	; 0x44
 8003948:	e009      	b.n	800395e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fba3 	bl	80050a2 <SDMMC_CmdReadSingleBlock>
 800395c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800395e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a88      	ldr	r2, [pc, #544]	; (8003b8c <HAL_SD_ReadBlocks+0x31c>)
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003972:	431a      	orrs	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0fc      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800398e:	e061      	b.n	8003a54 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03c      	beq.n	8003a18 <HAL_SD_ReadBlocks+0x1a8>
 800399e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d039      	beq.n	8003a18 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
 80039a8:	e033      	b.n	8003a12 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 faa0 	bl	8004ef4 <SDMMC_ReadFIFO>
 80039b4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	3301      	adds	r3, #1
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	3b01      	subs	r3, #1
 80039c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	3301      	adds	r3, #1
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039dc:	3b01      	subs	r3, #1
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	0c1b      	lsrs	r3, r3, #16
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	3301      	adds	r3, #1
 80039ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f2:	3b01      	subs	r3, #1
 80039f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	0e1b      	lsrs	r3, r3, #24
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	3301      	adds	r3, #1
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0e:	3301      	adds	r3, #1
 8003a10:	643b      	str	r3, [r7, #64]	; 0x40
 8003a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a14:	2b07      	cmp	r3, #7
 8003a16:	d9c8      	bls.n	80039aa <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a18:	f7fc fe12 	bl	8000640 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d902      	bls.n	8003a2e <HAL_SD_ReadBlocks+0x1be>
 8003a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d112      	bne.n	8003a54 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	; (8003b8c <HAL_SD_ReadBlocks+0x31c>)
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e097      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d096      	beq.n	8003990 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a70:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d022      	beq.n	8003ac6 <HAL_SD_ReadBlocks+0x256>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d91f      	bls.n	8003ac6 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d01b      	beq.n	8003ac6 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fb92 	bl	80051bc <SDMMC_CmdStopTransfer>
 8003a98:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <HAL_SD_ReadBlocks+0x31c>)
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e05e      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <HAL_SD_ReadBlocks+0x31c>)
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f043 0208 	orr.w	r2, r3, #8
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e044      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <HAL_SD_ReadBlocks+0x31c>)
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	f043 0202 	orr.w	r2, r3, #2
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e02a      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <HAL_SD_ReadBlocks+0x31c>)
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e010      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_SD_ReadBlocks+0x320>)
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e006      	b.n	8003b84 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3748      	adds	r7, #72	; 0x48
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	1fe00fff 	.word	0x1fe00fff
 8003b90:	18000f3a 	.word	0x18000f3a

08003b94 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b092      	sub	sp, #72	; 0x48
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003ba2:	f7fc fd4d 	bl	8000640 <HAL_GetTick>
 8003ba6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e174      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	f040 8167 	bne.w	8003ea2 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	441a      	add	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d907      	bls.n	8003bf8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e15b      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d002      	beq.n	8003c16 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	025b      	lsls	r3, r3, #9
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c1a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	025b      	lsls	r3, r3, #9
 8003c20:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003c22:	2390      	movs	r3, #144	; 0x90
 8003c24:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f107 0218 	add.w	r2, r7, #24
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f9e1 	bl	8005004 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c50:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d90a      	bls.n	8003c6e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fa85 	bl	8005174 <SDMMC_CmdWriteMultiBlock>
 8003c6a:	6478      	str	r0, [r7, #68]	; 0x44
 8003c6c:	e009      	b.n	8003c82 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2210      	movs	r2, #16
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fa57 	bl	800512e <SDMMC_CmdWriteSingleBlock>
 8003c80:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d012      	beq.n	8003cae <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a8a      	ldr	r2, [pc, #552]	; (8003eb8 <HAL_SD_WriteBlocks+0x324>)
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e100      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003cb2:	e065      	b.n	8003d80 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d040      	beq.n	8003d44 <HAL_SD_WriteBlocks+0x1b0>
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03d      	beq.n	8003d44 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	643b      	str	r3, [r7, #64]	; 0x40
 8003ccc:	e037      	b.n	8003d3e <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	3301      	adds	r3, #1
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	041a      	lsls	r2, r3, #16
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	3301      	adds	r3, #1
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	061a      	lsls	r2, r3, #24
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	3301      	adds	r3, #1
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d24:	3b01      	subs	r3, #1
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f107 0214 	add.w	r2, r7, #20
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 f8eb 	bl	8004f0e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	d9c4      	bls.n	8003cce <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d44:	f7fc fc7c 	bl	8000640 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d902      	bls.n	8003d5a <HAL_SD_WriteBlocks+0x1c6>
 8003d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d112      	bne.n	8003d80 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a56      	ldr	r2, [pc, #344]	; (8003eb8 <HAL_SD_WriteBlocks+0x324>)
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e097      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d092      	beq.n	8003cb4 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d022      	beq.n	8003df2 <HAL_SD_WriteBlocks+0x25e>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d91f      	bls.n	8003df2 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d01b      	beq.n	8003df2 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f9fc 	bl	80051bc <SDMMC_CmdStopTransfer>
 8003dc4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	; (8003eb8 <HAL_SD_WriteBlocks+0x324>)
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e05e      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <HAL_SD_WriteBlocks+0x324>)
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	f043 0208 	orr.w	r2, r3, #8
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e044      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d012      	beq.n	8003e5a <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_SD_WriteBlocks+0x324>)
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	f043 0202 	orr.w	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02a      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <HAL_SD_WriteBlocks+0x324>)
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	f043 0210 	orr.w	r2, r3, #16
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e010      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <HAL_SD_WriteBlocks+0x328>)
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e006      	b.n	8003eb0 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3748      	adds	r7, #72	; 0x48
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	1fe00fff 	.word	0x1fe00fff
 8003ebc:	18000f3a 	.word	0x18000f3a

08003ec0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ece:	0f9b      	lsrs	r3, r3, #30
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	0e9b      	lsrs	r3, r3, #26
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eec:	0e1b      	lsrs	r3, r3, #24
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efe:	0c1b      	lsrs	r3, r3, #16
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f20:	0d1b      	lsrs	r3, r3, #20
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3e:	0bdb      	lsrs	r3, r3, #15
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f50:	0b9b      	lsrs	r3, r3, #14
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f62:	0b5b      	lsrs	r3, r3, #13
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f74:	0b1b      	lsrs	r3, r3, #12
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2200      	movs	r2, #0
 8003f86:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d163      	bne.n	8004058 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f94:	009a      	lsls	r2, r3, #2
 8003f96:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fa0:	0f92      	lsrs	r2, r2, #30
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fac:	0edb      	lsrs	r3, r3, #27
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbe:	0e1b      	lsrs	r3, r3, #24
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd0:	0d5b      	lsrs	r3, r3, #21
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe2:	0c9b      	lsrs	r3, r3, #18
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff4:	0bdb      	lsrs	r3, r3, #15
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	7e1b      	ldrb	r3, [r3, #24]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	3302      	adds	r3, #2
 8004018:	2201      	movs	r2, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004022:	fb03 f202 	mul.w	r2, r3, r2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	7a1b      	ldrb	r3, [r3, #8]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004044:	0a52      	lsrs	r2, r2, #9
 8004046:	fb03 f202 	mul.w	r2, r3, r2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004054:	659a      	str	r2, [r3, #88]	; 0x58
 8004056:	e031      	b.n	80040bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d11d      	bne.n	800409c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	3301      	adds	r3, #1
 800407c:	029a      	lsls	r2, r3, #10
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	659a      	str	r2, [r3, #88]	; 0x58
 800409a:	e00f      	b.n	80040bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a58      	ldr	r2, [pc, #352]	; (8004204 <HAL_SD_GetCardCSD+0x344>)
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e09d      	b.n	80041f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c0:	0b9b      	lsrs	r3, r3, #14
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d2:	09db      	lsrs	r3, r3, #7
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f4:	0fdb      	lsrs	r3, r3, #31
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004100:	0f5b      	lsrs	r3, r3, #29
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	b2da      	uxtb	r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	0e9b      	lsrs	r3, r3, #26
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	b2da      	uxtb	r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004124:	0d9b      	lsrs	r3, r3, #22
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	b2da      	uxtb	r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004136:	0d5b      	lsrs	r3, r3, #21
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	0bdb      	lsrs	r3, r3, #15
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	0b9b      	lsrs	r3, r3, #14
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418e:	0b5b      	lsrs	r3, r3, #13
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	b2da      	uxtb	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	0b1b      	lsrs	r3, r3, #12
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b6:	0a9b      	lsrs	r3, r3, #10
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	1fe00fff 	.word	0x1fe00fff

08004208 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b094      	sub	sp, #80	; 0x50
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8004218:	f107 0308 	add.w	r3, r7, #8
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fbd4 	bl	80049cc <SD_SendSDStatus>
 8004224:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a4f      	ldr	r2, [pc, #316]	; (8004370 <HAL_SD_GetCardStatus+0x168>)
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800424e:	e070      	b.n	8004332 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	b2da      	uxtb	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	b2da      	uxtb	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b29b      	uxth	r3, r3
 8004276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800427a:	b29a      	uxth	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	0e1b      	lsrs	r3, r3, #24
 8004280:	b29b      	uxth	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b29a      	uxth	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	061a      	lsls	r2, r3, #24
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004296:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80042a0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d8:	b29a      	uxth	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	0a9b      	lsrs	r3, r3, #10
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	b2da      	uxtb	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	b2da      	uxtb	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	b2da      	uxtb	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	0e1b      	lsrs	r3, r3, #24
 800432c:	b2da      	uxtb	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fe8e 	bl	800505c <SDMMC_CmdBlockLength>
 8004340:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_SD_GetCardStatus+0x168>)
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8004364:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004368:	4618      	mov	r0, r3
 800436a:	3750      	adds	r7, #80	; 0x50
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	1fe00fff 	.word	0x1fe00fff

08004374 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80043cc:	b5b0      	push	{r4, r5, r7, lr}
 80043ce:	b090      	sub	sp, #64	; 0x40
 80043d0:	af04      	add	r7, sp, #16
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2203      	movs	r2, #3
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d02e      	beq.n	800444a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f2:	d106      	bne.n	8004402 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004400:	e029      	b.n	8004456 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004408:	d10a      	bne.n	8004420 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fbd6 	bl	8004bbc <SD_WideBus_Enable>
 8004410:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
 800441e:	e01a      	b.n	8004456 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fc13 	bl	8004c52 <SD_WideBus_Disable>
 800442c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	639a      	str	r2, [r3, #56]	; 0x38
 800443a:	e00c      	b.n	8004456 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
 8004448:	e005      	b.n	8004456 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800446c:	e097      	b.n	800459e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800446e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004472:	f7fd feb9 	bl	80021e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8086 	beq.w	800458c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	4952      	ldr	r1, [pc, #328]	; (80045e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800449e:	fba1 1303 	umull	r1, r3, r1, r3
 80044a2:	0e1b      	lsrs	r3, r3, #24
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d303      	bcc.n	80044b0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e05a      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b8:	d103      	bne.n	80044c2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e051      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ca:	d126      	bne.n	800451a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10e      	bne.n	80044f2 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	4a45      	ldr	r2, [pc, #276]	; (80045ec <HAL_SD_ConfigWideBusOperation+0x220>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d906      	bls.n	80044ea <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	4a42      	ldr	r2, [pc, #264]	; (80045e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0e5b      	lsrs	r3, r3, #25
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e03d      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e039      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	4a3b      	ldr	r2, [pc, #236]	; (80045ec <HAL_SD_ConfigWideBusOperation+0x220>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d906      	bls.n	8004512 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	4a38      	ldr	r2, [pc, #224]	; (80045e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	0e5b      	lsrs	r3, r3, #25
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e029      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e025      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10e      	bne.n	8004540 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <HAL_SD_ConfigWideBusOperation+0x224>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d906      	bls.n	8004538 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	4a2e      	ldr	r2, [pc, #184]	; (80045e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0e1b      	lsrs	r3, r3, #24
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e016      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	e012      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	4a28      	ldr	r2, [pc, #160]	; (80045f0 <HAL_SD_ConfigWideBusOperation+0x224>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d906      	bls.n	8004560 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	0e1b      	lsrs	r3, r3, #24
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e002      	b.n	8004566 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681d      	ldr	r5, [r3, #0]
 8004570:	466c      	mov	r4, sp
 8004572:	f107 0318 	add.w	r3, r7, #24
 8004576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800457a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004584:	4628      	mov	r0, r5
 8004586:	f000 fc8b 	bl	8004ea0 <SDMMC_Init>
 800458a:	e008      	b.n	800459e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fd58 	bl	800505c <SDMMC_CmdBlockLength>
 80045ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80045d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	; 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bdb0      	pop	{r4, r5, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	1fe00fff 	.word	0x1fe00fff
 80045e8:	55e63b89 	.word	0x55e63b89
 80045ec:	02faf080 	.word	0x02faf080
 80045f0:	017d7840 	.word	0x017d7840

080045f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004600:	f107 030c 	add.w	r3, r7, #12
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fab0 	bl	8004b6c <SD_SendStatus>
 800460c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0a5b      	lsrs	r3, r3, #9
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800462a:	693b      	ldr	r3, [r7, #16]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b090      	sub	sp, #64	; 0x40
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800463c:	2301      	movs	r3, #1
 800463e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fc85 	bl	8004f54 <SDMMC_GetPowerState>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004654:	e0a9      	b.n	80047aa <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	2b03      	cmp	r3, #3
 800465c:	d02e      	beq.n	80046bc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 feca 	bl	80053fc <SDMMC_CmdSendCID>
 8004668:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <SD_InitCard+0x40>
    {
      return errorstate;
 8004670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004672:	e09a      	b.n	80047aa <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fcaf 	bl	8004fde <SDMMC_GetResponse>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2104      	movs	r1, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fca6 	bl	8004fde <SDMMC_GetResponse>
 8004692:	4602      	mov	r2, r0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2108      	movs	r1, #8
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fc9d 	bl	8004fde <SDMMC_GetResponse>
 80046a4:	4602      	mov	r2, r0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	210c      	movs	r1, #12
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fc94 	bl	8004fde <SDMMC_GetResponse>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d00d      	beq.n	80046e0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f107 020e 	add.w	r2, r7, #14
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fed3 	bl	800547a <SDMMC_CmdSetRelAdd>
 80046d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <SD_InitCard+0xac>
    {
      return errorstate;
 80046dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046de:	e064      	b.n	80047aa <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d036      	beq.n	8004756 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046e8:	89fb      	ldrh	r3, [r7, #14]
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f000 fe9c 	bl	800543a <SDMMC_CmdSendCSD>
 8004702:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <SD_InitCard+0xda>
    {
      return errorstate;
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	e04d      	b.n	80047aa <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fc62 	bl	8004fde <SDMMC_GetResponse>
 800471a:	4602      	mov	r2, r0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2104      	movs	r1, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fc59 	bl	8004fde <SDMMC_GetResponse>
 800472c:	4602      	mov	r2, r0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2108      	movs	r1, #8
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fc50 	bl	8004fde <SDMMC_GetResponse>
 800473e:	4602      	mov	r2, r0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	210c      	movs	r1, #12
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fc47 	bl	8004fde <SDMMC_GetResponse>
 8004750:	4602      	mov	r2, r0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2104      	movs	r1, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fc3e 	bl	8004fde <SDMMC_GetResponse>
 8004762:	4603      	mov	r3, r0
 8004764:	0d1a      	lsrs	r2, r3, #20
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800476a:	f107 0310 	add.w	r3, r7, #16
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fba5 	bl	8003ec0 <HAL_SD_GetCardCSD>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800477c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004780:	e013      	b.n	80047aa <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	2200      	movs	r2, #0
 800478e:	461c      	mov	r4, r3
 8004790:	4615      	mov	r5, r2
 8004792:	4622      	mov	r2, r4
 8004794:	462b      	mov	r3, r5
 8004796:	4608      	mov	r0, r1
 8004798:	f000 fd46 	bl	8005228 <SDMMC_CmdSelDesel>
 800479c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <SD_InitCard+0x174>
  {
    return errorstate;
 80047a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a6:	e000      	b.n	80047aa <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3740      	adds	r7, #64	; 0x40
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080047b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80047c8:	f7fb ff3a 	bl	8000640 <HAL_GetTick>
 80047cc:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd4c 	bl	8005270 <SDMMC_CmdGoIdleState>
 80047d8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <SD_PowerON+0x30>
  {
    return errorstate;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	e0ed      	b.n	80049c0 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fd5f 	bl	80052ac <SDMMC_CmdOperCond>
 80047ee:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fd35 	bl	8005270 <SDMMC_CmdGoIdleState>
 8004806:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <SD_PowerON+0x64>
    {
      return errorstate;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	e0d6      	b.n	80049c0 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	2b01      	cmp	r3, #1
 800481e:	d137      	bne.n	8004890 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fd60 	bl	80052ec <SDMMC_CmdAppCommand>
 800482c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02d      	beq.n	8004890 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004834:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004838:	e0c2      	b.n	80049c0 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fd53 	bl	80052ec <SDMMC_CmdAppCommand>
 8004846:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <SD_PowerON+0x9e>
    {
      return errorstate;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	e0b6      	b.n	80049c0 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	495c      	ldr	r1, [pc, #368]	; (80049c8 <SD_PowerON+0x214>)
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fd6a 	bl	8005332 <SDMMC_CmdAppOperCommand>
 800485e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004866:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800486a:	e0a9      	b.n	80049c0 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fbb3 	bl	8004fde <SDMMC_GetResponse>
 8004878:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	0fdb      	lsrs	r3, r3, #31
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <SD_PowerON+0xd2>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <SD_PowerON+0xd4>
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]

    count++;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004896:	4293      	cmp	r3, r2
 8004898:	d802      	bhi.n	80048a0 <SD_PowerON+0xec>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0cc      	beq.n	800483a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d902      	bls.n	80048b0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80048aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048ae:	e087      	b.n	80049c0 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d07e      	beq.n	80049b8 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d17a      	bne.n	80049be <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0208 	orr.w	r2, r2, #8
 80048e8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fe2a 	bl	8005548 <SDMMC_CmdVoltageSwitch>
 80048f4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00c      	beq.n	8004916 <SD_PowerON+0x162>
        {
          return errorstate;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	e05f      	b.n	80049c0 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004900:	f7fb fe9e 	bl	8000640 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800490e:	d102      	bne.n	8004916 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8004910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004914:	e054      	b.n	80049c0 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004924:	d1ec      	bne.n	8004900 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800492e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493e:	d002      	beq.n	8004946 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8004940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004944:	e03c      	b.n	80049c0 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8004946:	2001      	movs	r0, #1
 8004948:	f000 fa9e 	bl	8004e88 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0204 	orr.w	r2, r2, #4
 800495a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800495c:	e00a      	b.n	8004974 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800495e:	f7fb fe6f 	bl	8000640 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800496c:	d102      	bne.n	8004974 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800496e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004972:	e025      	b.n	80049c0 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004982:	d1ec      	bne.n	800495e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800498c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499c:	d102      	bne.n	80049a4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800499e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049a2:	e00d      	b.n	80049c0 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2213      	movs	r2, #19
 80049aa:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
 80049b6:	e002      	b.n	80049be <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	c1100000 	.word	0xc1100000

080049cc <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08c      	sub	sp, #48	; 0x30
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80049d6:	f7fb fe33 	bl	8000640 <HAL_GetTick>
 80049da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 faf9 	bl	8004fde <SDMMC_GetResponse>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f6:	d102      	bne.n	80049fe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049fc:	e0b0      	b.n	8004b60 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2140      	movs	r1, #64	; 0x40
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fb29 	bl	800505c <SDMMC_CmdBlockLength>
 8004a0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	e0a0      	b.n	8004b60 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f000 fc5e 	bl	80052ec <SDMMC_CmdAppCommand>
 8004a30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	e08d      	b.n	8004b60 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a48:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8004a4a:	2340      	movs	r3, #64	; 0x40
 8004a4c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8004a4e:	2360      	movs	r3, #96	; 0x60
 8004a50:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a52:	2302      	movs	r3, #2
 8004a54:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f107 0208 	add.w	r2, r7, #8
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 facb 	bl	8005004 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fd46 	bl	8005504 <SDMMC_CmdStatusRegister>
 8004a78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d02b      	beq.n	8004ad8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	e069      	b.n	8004b60 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d013      	beq.n	8004ac2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	e00d      	b.n	8004abc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fa25 	bl	8004ef4 <SDMMC_ReadFIFO>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	601a      	str	r2, [r3, #0]
        pData++;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	3301      	adds	r3, #1
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b07      	cmp	r3, #7
 8004ac0:	d9ee      	bls.n	8004aa0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ac2:	f7fb fdbd 	bl	8000640 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad0:	d102      	bne.n	8004ad8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ad2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ad6:	e043      	b.n	8004b60 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0d2      	beq.n	8004a8c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004af4:	2308      	movs	r3, #8
 8004af6:	e033      	b.n	8004b60 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b06:	2302      	movs	r3, #2
 8004b08:	e02a      	b.n	8004b60 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d017      	beq.n	8004b48 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8004b18:	2320      	movs	r3, #32
 8004b1a:	e021      	b.n	8004b60 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f9e7 	bl	8004ef4 <SDMMC_ReadFIFO>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	601a      	str	r2, [r3, #0]
    pData++;
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	3304      	adds	r3, #4
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b32:	f7fb fd85 	bl	8000640 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b40:	d102      	bne.n	8004b48 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b46:	e00b      	b.n	8004b60 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1e2      	bne.n	8004b1c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a03      	ldr	r2, [pc, #12]	; (8004b68 <SD_SendSDStatus+0x19c>)
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3730      	adds	r7, #48	; 0x30
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	18000f3a 	.word	0x18000f3a

08004b6c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b80:	e018      	b.n	8004bb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f000 fc95 	bl	80054be <SDMMC_CmdSendStatus>
 8004b94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	e009      	b.n	8004bb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa19 	bl	8004fde <SDMMC_GetResponse>
 8004bac:	4602      	mov	r2, r0
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa03 	bl	8004fde <SDMMC_GetResponse>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be2:	d102      	bne.n	8004bea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004be8:	e02f      	b.n	8004c4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bea:	f107 030c 	add.w	r3, r7, #12
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f879 	bl	8004ce8 <SD_FindSCR>
 8004bf6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	e023      	b.n	8004c4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01c      	beq.n	8004c46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f000 fb67 	bl	80052ec <SDMMC_CmdAppCommand>
 8004c1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	e00f      	b.n	8004c4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fb9e 	bl	8005372 <SDMMC_CmdBusWidth>
 8004c36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	e003      	b.n	8004c4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e001      	b.n	8004c4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f9b8 	bl	8004fde <SDMMC_GetResponse>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c78:	d102      	bne.n	8004c80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c7e:	e02f      	b.n	8004ce0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c80:	f107 030c 	add.w	r3, r7, #12
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f82e 	bl	8004ce8 <SD_FindSCR>
 8004c8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	e023      	b.n	8004ce0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01c      	beq.n	8004cdc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fb1c 	bl	80052ec <SDMMC_CmdAppCommand>
 8004cb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	e00f      	b.n	8004ce0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fb53 	bl	8005372 <SDMMC_CmdBusWidth>
 8004ccc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	e003      	b.n	8004ce0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e001      	b.n	8004ce0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08e      	sub	sp, #56	; 0x38
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004cf2:	f7fb fca5 	bl	8000640 <HAL_GetTick>
 8004cf6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2108      	movs	r1, #8
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f9a4 	bl	800505c <SDMMC_CmdBlockLength>
 8004d14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	e0ad      	b.n	8004e7c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d28:	041b      	lsls	r3, r3, #16
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f000 fadd 	bl	80052ec <SDMMC_CmdAppCommand>
 8004d32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	e09e      	b.n	8004e7c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d44:	2308      	movs	r3, #8
 8004d46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004d48:	2330      	movs	r3, #48	; 0x30
 8004d4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d54:	2301      	movs	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f107 0210 	add.w	r2, r7, #16
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f94e 	bl	8005004 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fb23 	bl	80053b8 <SDMMC_CmdSendSCR>
 8004d72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d027      	beq.n	8004dca <SD_FindSCR+0xe2>
  {
    return errorstate;
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	e07e      	b.n	8004e7c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d113      	bne.n	8004db4 <SD_FindSCR+0xcc>
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d110      	bne.n	8004db4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f8ac 	bl	8004ef4 <SDMMC_ReadFIFO>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f8a5 	bl	8004ef4 <SDMMC_ReadFIFO>
 8004daa:	4603      	mov	r3, r0
 8004dac:	60fb      	str	r3, [r7, #12]
      index++;
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	3301      	adds	r3, #1
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004db4:	f7fb fc44 	bl	8000640 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dc2:	d102      	bne.n	8004dca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004dc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dc8:	e058      	b.n	8004e7c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd0:	f240 532a 	movw	r3, #1322	; 0x52a
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0d1      	beq.n	8004d7e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2208      	movs	r2, #8
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004df0:	2308      	movs	r3, #8
 8004df2:	e043      	b.n	8004e7c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2202      	movs	r2, #2
 8004e08:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e036      	b.n	8004e7c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2220      	movs	r2, #32
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e24:	2320      	movs	r3, #32
 8004e26:	e029      	b.n	8004e7c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <SD_FindSCR+0x19c>)
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	061a      	lsls	r2, r3, #24
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	0e1b      	lsrs	r3, r3, #24
 8004e4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	601a      	str	r2, [r3, #0]
    scr++;
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	3304      	adds	r3, #4
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	061a      	lsls	r2, r3, #24
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	0e1b      	lsrs	r3, r3, #24
 8004e74:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3738      	adds	r7, #56	; 0x38
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	18000f3a 	.word	0x18000f3a

08004e88 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	f107 001c 	add.w	r0, r7, #28
 8004eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8004eb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004eba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8004ebe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8004ec2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8004ec6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <SDMMC_Init+0x50>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	b004      	add	sp, #16
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	ffc02c00 	.word	0xffc02c00

08004ef4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f043 0203 	orr.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004f44:	2002      	movs	r0, #2
 8004f46:	f7fb fb87 	bl	8000658 <HAL_Delay>

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0303 	and.w	r3, r3, #3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f94:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <SDMMC_SendCommand+0x50>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	fffee0c0 	.word	0xfffee0c0

08004fc4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	b2db      	uxtb	r3, r3
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3314      	adds	r3, #20
 8004fec:	461a      	mov	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800502a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005030:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005036:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800504e:	2300      	movs	r3, #0

}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800506a:	2310      	movs	r3, #16
 800506c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800506e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800507c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff73 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800508a:	f241 3288 	movw	r2, #5000	; 0x1388
 800508e:	2110      	movs	r1, #16
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fa7b 	bl	800558c <SDMMC_GetCmdResp1>
 8005096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005098:	69fb      	ldr	r3, [r7, #28]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3720      	adds	r7, #32
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b088      	sub	sp, #32
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80050b0:	2311      	movs	r3, #17
 80050b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050c4:	f107 0308 	add.w	r3, r7, #8
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff ff50 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	2111      	movs	r1, #17
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fa58 	bl	800558c <SDMMC_GetCmdResp1>
 80050dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050de:	69fb      	ldr	r3, [r7, #28]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050f6:	2312      	movs	r3, #18
 80050f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005108:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff2d 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	2112      	movs	r1, #18
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fa35 	bl	800558c <SDMMC_GetCmdResp1>
 8005122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005124:	69fb      	ldr	r3, [r7, #28]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800513c:	2318      	movs	r3, #24
 800513e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800514a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800514e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ff0a 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	2118      	movs	r1, #24
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa12 	bl	800558c <SDMMC_GetCmdResp1>
 8005168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800516a:	69fb      	ldr	r3, [r7, #28]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005182:	2319      	movs	r3, #25
 8005184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800518a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005196:	f107 0308 	add.w	r3, r7, #8
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fee7 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	2119      	movs	r1, #25
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f9ef 	bl	800558c <SDMMC_GetCmdResp1>
 80051ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051b0:	69fb      	ldr	r3, [r7, #28]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051c8:	230c      	movs	r3, #12
 80051ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051da:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051f4:	f107 0308 	add.w	r3, r7, #8
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff feb8 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <SDMMC_CmdStopTransfer+0x68>)
 8005202:	210c      	movs	r1, #12
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f9c1 	bl	800558c <SDMMC_GetCmdResp1>
 800520a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8005218:	69fb      	ldr	r3, [r7, #28]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	05f5e100 	.word	0x05f5e100

08005228 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005238:	2307      	movs	r3, #7
 800523a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800523c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005240:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800524a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800524c:	f107 0310 	add.w	r3, r7, #16
 8005250:	4619      	mov	r1, r3
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff fe8c 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	2107      	movs	r1, #7
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f994 	bl	800558c <SDMMC_GetCmdResp1>
 8005264:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	; 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800528c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fe6b 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fbb8 	bl	8005a10 <SDMMC_GetCmdError>
 80052a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a2:	69fb      	ldr	r3, [r7, #28]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80052b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80052b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80052ba:	2308      	movs	r3, #8
 80052bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fe4b 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fb4a 	bl	8005974 <SDMMC_GetCmdResp7>
 80052e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052e2:	69fb      	ldr	r3, [r7, #28]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80052fa:	2337      	movs	r3, #55	; 0x37
 80052fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800530c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800530e:	f107 0308 	add.w	r3, r7, #8
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff fe2b 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800531a:	f241 3288 	movw	r2, #5000	; 0x1388
 800531e:	2137      	movs	r1, #55	; 0x37
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f933 	bl	800558c <SDMMC_GetCmdResp1>
 8005326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005328:	69fb      	ldr	r3, [r7, #28]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b088      	sub	sp, #32
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005340:	2329      	movs	r3, #41	; 0x29
 8005342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800534e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005352:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005354:	f107 0308 	add.w	r3, r7, #8
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fe08 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fa4f 	bl	8005804 <SDMMC_GetCmdResp3>
 8005366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005368:	69fb      	ldr	r3, [r7, #28]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005380:	2306      	movs	r3, #6
 8005382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800538e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005394:	f107 0308 	add.w	r3, r7, #8
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fde8 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	2106      	movs	r1, #6
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8f0 	bl	800558c <SDMMC_GetCmdResp1>
 80053ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ae:	69fb      	ldr	r3, [r7, #28]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80053c4:	2333      	movs	r3, #51	; 0x33
 80053c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053d8:	f107 0308 	add.w	r3, r7, #8
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fdc6 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80053e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e8:	2133      	movs	r1, #51	; 0x33
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8ce 	bl	800558c <SDMMC_GetCmdResp1>
 80053f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005408:	2302      	movs	r3, #2
 800540a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800540c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800541a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800541c:	f107 0308 	add.w	r3, r7, #8
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fda4 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f9a1 	bl	8005770 <SDMMC_GetCmdResp2>
 800542e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005430:	69fb      	ldr	r3, [r7, #28]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b088      	sub	sp, #32
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005448:	2309      	movs	r3, #9
 800544a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800544c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800545a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fd84 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f981 	bl	8005770 <SDMMC_GetCmdResp2>
 800546e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005470:	69fb      	ldr	r3, [r7, #28]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b088      	sub	sp, #32
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005488:	2303      	movs	r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800548c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800549a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fd64 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	2103      	movs	r1, #3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f9e9 	bl	8005884 <SDMMC_GetCmdResp6>
 80054b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b4:	69fb      	ldr	r3, [r7, #28]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b088      	sub	sp, #32
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80054cc:	230d      	movs	r3, #13
 80054ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fd42 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	210d      	movs	r1, #13
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f84a 	bl	800558c <SDMMC_GetCmdResp1>
 80054f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054fa:	69fb      	ldr	r3, [r7, #28]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8005510:	230d      	movs	r3, #13
 8005512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800551e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005524:	f107 0308 	add.w	r3, r7, #8
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff fd20 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8005530:	f241 3288 	movw	r2, #5000	; 0x1388
 8005534:	210d      	movs	r1, #13
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f828 	bl	800558c <SDMMC_GetCmdResp1>
 800553c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800553e:	69fb      	ldr	r3, [r7, #28]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8005554:	230b      	movs	r3, #11
 8005556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800555c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005568:	f107 0308 	add.w	r3, r7, #8
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fcfe 	bl	8004f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8005574:	f241 3288 	movw	r2, #5000	; 0x1388
 8005578:	210b      	movs	r1, #11
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f806 	bl	800558c <SDMMC_GetCmdResp1>
 8005580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005582:	69fb      	ldr	r3, [r7, #28]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	460b      	mov	r3, r1
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800559a:	4b70      	ldr	r3, [pc, #448]	; (800575c <SDMMC_GetCmdResp1+0x1d0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a70      	ldr	r2, [pc, #448]	; (8005760 <SDMMC_GetCmdResp1+0x1d4>)
 80055a0:	fba2 2303 	umull	r2, r3, r2, r3
 80055a4:	0a5a      	lsrs	r2, r3, #9
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	61fa      	str	r2, [r7, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055bc:	e0c9      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4b67      	ldr	r3, [pc, #412]	; (8005764 <SDMMC_GetCmdResp1+0x1d8>)
 80055c8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0ef      	beq.n	80055ae <SDMMC_GetCmdResp1+0x22>
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ea      	bne.n	80055ae <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2204      	movs	r2, #4
 80055e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055ea:	2304      	movs	r3, #4
 80055ec:	e0b1      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005600:	2301      	movs	r3, #1
 8005602:	e0a6      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a58      	ldr	r2, [pc, #352]	; (8005768 <SDMMC_GetCmdResp1+0x1dc>)
 8005608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fcda 	bl	8004fc4 <SDMMC_GetCommandResponse>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	4293      	cmp	r3, r2
 8005618:	d001      	beq.n	800561e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800561a:	2301      	movs	r3, #1
 800561c:	e099      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800561e:	2100      	movs	r1, #0
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fcdc 	bl	8004fde <SDMMC_GetResponse>
 8005626:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4b50      	ldr	r3, [pc, #320]	; (800576c <SDMMC_GetCmdResp1+0x1e0>)
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005632:	2300      	movs	r3, #0
 8005634:	e08d      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	da02      	bge.n	8005642 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800563c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005640:	e087      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800564c:	2340      	movs	r3, #64	; 0x40
 800564e:	e080      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	e079      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800566c:	e071      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800567c:	e069      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800568c:	e061      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800569c:	e059      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ac:	e051      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056bc:	e049      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80056c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056cc:	e041      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80056d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056dc:	e039      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80056e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ec:	e031      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80056f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056fc:	e029      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800570c:	e021      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800571c:	e019      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800572c:	e011      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800573c:	e009      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005748:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800574c:	e001      	b.n	8005752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800574e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005752:	4618      	mov	r0, r3
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000000 	.word	0x20000000
 8005760:	10624dd3 	.word	0x10624dd3
 8005764:	00200045 	.word	0x00200045
 8005768:	002000c5 	.word	0x002000c5
 800576c:	fdffe008 	.word	0xfdffe008

08005770 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005778:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <SDMMC_GetCmdResp2+0x88>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <SDMMC_GetCmdResp2+0x8c>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1e5a      	subs	r2, r3, #1
 8005792:	60fa      	str	r2, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800579c:	e026      	b.n	80057ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ef      	beq.n	800578e <SDMMC_GetCmdResp2+0x1e>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ea      	bne.n	800578e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2204      	movs	r2, #4
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057ca:	2304      	movs	r3, #4
 80057cc:	e00e      	b.n	80057ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e003      	b.n	80057ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a06      	ldr	r2, [pc, #24]	; (8005800 <SDMMC_GetCmdResp2+0x90>)
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	20000000 	.word	0x20000000
 80057fc:	10624dd3 	.word	0x10624dd3
 8005800:	002000c5 	.word	0x002000c5

08005804 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <SDMMC_GetCmdResp3+0x74>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1a      	ldr	r2, [pc, #104]	; (800587c <SDMMC_GetCmdResp3+0x78>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	0a5b      	lsrs	r3, r3, #9
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	fb02 f303 	mul.w	r3, r2, r3
 8005820:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1e5a      	subs	r2, r3, #1
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800582c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005830:	e01b      	b.n	800586a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005836:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0ef      	beq.n	8005822 <SDMMC_GetCmdResp3+0x1e>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ea      	bne.n	8005822 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2204      	movs	r2, #4
 800585c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800585e:	2304      	movs	r3, #4
 8005860:	e003      	b.n	800586a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <SDMMC_GetCmdResp3+0x7c>)
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000000 	.word	0x20000000
 800587c:	10624dd3 	.word	0x10624dd3
 8005880:	002000c5 	.word	0x002000c5

08005884 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	460b      	mov	r3, r1
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005892:	4b35      	ldr	r3, [pc, #212]	; (8005968 <SDMMC_GetCmdResp6+0xe4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a35      	ldr	r2, [pc, #212]	; (800596c <SDMMC_GetCmdResp6+0xe8>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	0a5b      	lsrs	r3, r3, #9
 800589e:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	61fa      	str	r2, [r7, #28]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058b6:	e052      	b.n	800595e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ef      	beq.n	80058a8 <SDMMC_GetCmdResp6+0x24>
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1ea      	bne.n	80058a8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2204      	movs	r2, #4
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058e4:	2304      	movs	r3, #4
 80058e6:	e03a      	b.n	800595e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e02f      	b.n	800595e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7ff fb60 	bl	8004fc4 <SDMMC_GetCommandResponse>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	7afb      	ldrb	r3, [r7, #11]
 800590a:	4293      	cmp	r3, r2
 800590c:	d001      	beq.n	8005912 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800590e:	2301      	movs	r3, #1
 8005910:	e025      	b.n	800595e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a16      	ldr	r2, [pc, #88]	; (8005970 <SDMMC_GetCmdResp6+0xec>)
 8005916:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005918:	2100      	movs	r1, #0
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff fb5f 	bl	8004fde <SDMMC_GetResponse>
 8005920:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	b29a      	uxth	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8005936:	2300      	movs	r3, #0
 8005938:	e011      	b.n	800595e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005948:	e009      	b.n	800595e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005958:	e001      	b.n	800595e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800595a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000000 	.word	0x20000000
 800596c:	10624dd3 	.word	0x10624dd3
 8005970:	002000c5 	.word	0x002000c5

08005974 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800597c:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <SDMMC_GetCmdResp7+0x94>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <SDMMC_GetCmdResp7+0x98>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	0a5b      	lsrs	r3, r3, #9
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1e5a      	subs	r2, r3, #1
 8005996:	60fa      	str	r2, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800599c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059a0:	e02c      	b.n	80059fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0ef      	beq.n	8005992 <SDMMC_GetCmdResp7+0x1e>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ea      	bne.n	8005992 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2204      	movs	r2, #4
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059ce:	2304      	movs	r3, #4
 80059d0:	e014      	b.n	80059fc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e009      	b.n	80059fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2240      	movs	r2, #64	; 0x40
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80059fa:	2300      	movs	r3, #0

}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	10624dd3 	.word	0x10624dd3

08005a10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <SDMMC_GetCmdError+0x50>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <SDMMC_GetCmdError+0x54>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	0a5b      	lsrs	r3, r3, #9
 8005a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1e5a      	subs	r2, r3, #1
 8005a32:	60fa      	str	r2, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a3c:	e009      	b.n	8005a52 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f1      	beq.n	8005a2e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a06      	ldr	r2, [pc, #24]	; (8005a68 <SDMMC_GetCmdError+0x58>)
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000000 	.word	0x20000000
 8005a64:	10624dd3 	.word	0x10624dd3
 8005a68:	002000c5 	.word	0x002000c5

08005a6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005a70:	4904      	ldr	r1, [pc, #16]	; (8005a84 <MX_FATFS_Init+0x18>)
 8005a72:	4805      	ldr	r0, [pc, #20]	; (8005a88 <MX_FATFS_Init+0x1c>)
 8005a74:	f000 f9ca 	bl	8005e0c <FATFS_LinkDriver>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <MX_FATFS_Init+0x20>)
 8005a7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200000b0 	.word	0x200000b0
 8005a88:	08005ee4 	.word	0x08005ee4
 8005a8c:	200000ac 	.word	0x200000ac

08005a90 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005a9a:	f000 f879 	bl	8005b90 <BSP_SD_IsDetected>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d001      	beq.n	8005aa8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e012      	b.n	8005ace <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005aa8:	480b      	ldr	r0, [pc, #44]	; (8005ad8 <BSP_SD_Init+0x48>)
 8005aaa:	f7fd fdb9 	bl	8003620 <HAL_SD_Init>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d109      	bne.n	8005acc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005abc:	4806      	ldr	r0, [pc, #24]	; (8005ad8 <BSP_SD_Init+0x48>)
 8005abe:	f7fe fc85 	bl	80043cc <HAL_SD_ConfigWideBusOperation>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005acc:	79fb      	ldrb	r3, [r7, #7]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000028 	.word	0x20000028

08005adc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	4806      	ldr	r0, [pc, #24]	; (8005b14 <BSP_SD_ReadBlocks+0x38>)
 8005afa:	f7fd feb9 	bl	8003870 <HAL_SD_ReadBlocks>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000028 	.word	0x20000028

08005b18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	4806      	ldr	r0, [pc, #24]	; (8005b50 <BSP_SD_WriteBlocks+0x38>)
 8005b36:	f7fe f82d 	bl	8003b94 <HAL_SD_WriteBlocks>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000028 	.word	0x20000028

08005b54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005b58:	4805      	ldr	r0, [pc, #20]	; (8005b70 <BSP_SD_GetCardState+0x1c>)
 8005b5a:	f7fe fd4b 	bl	80045f4 <HAL_SD_GetCardState>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000028 	.word	0x20000028

08005b74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4803      	ldr	r0, [pc, #12]	; (8005b8c <BSP_SD_GetCardInfo+0x18>)
 8005b80:	f7fe fbf8 	bl	8004374 <HAL_SD_GetCardInfo>
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000028 	.word	0x20000028

08005b90 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005b96:	2301      	movs	r3, #1
 8005b98:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	b2db      	uxtb	r3, r3
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005bbc:	f7ff ffca 	bl	8005b54 <BSP_SD_GetCardState>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005bd6:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <SD_CheckStatus+0x38>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b2db      	uxtb	r3, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000009 	.word	0x20000009

08005be8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <SD_initialize+0x38>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005bf8:	f7ff ff4a 	bl	8005a90 <BSP_SD_Init>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ffd1 	bl	8005bac <SD_CheckStatus>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <SD_initialize+0x38>)
 8005c10:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005c12:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <SD_initialize+0x38>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	b2db      	uxtb	r3, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000009 	.word	0x20000009

08005c24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ffbb 	bl	8005bac <SD_CheckStatus>
 8005c36:	4603      	mov	r3, r0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	68b8      	ldr	r0, [r7, #8]
 8005c5e:	f7ff ff3d 	bl	8005adc <BSP_SD_ReadBlocks>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005c68:	bf00      	nop
 8005c6a:	f7ff ff73 	bl	8005b54 <BSP_SD_GetCardState>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1fa      	bne.n	8005c6a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	68b8      	ldr	r0, [r7, #8]
 8005ca0:	f7ff ff3a 	bl	8005b18 <BSP_SD_WriteBlocks>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d107      	bne.n	8005cba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005caa:	bf00      	nop
 8005cac:	f7ff ff52 	bl	8005b54 <BSP_SD_GetCardState>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1fa      	bne.n	8005cac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	; 0x30
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	603a      	str	r2, [r7, #0]
 8005cce:	71fb      	strb	r3, [r7, #7]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <SD_ioctl+0xac>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <SD_ioctl+0x28>
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e03c      	b.n	8005d66 <SD_ioctl+0xa2>

  switch (cmd)
 8005cec:	79bb      	ldrb	r3, [r7, #6]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d834      	bhi.n	8005d5c <SD_ioctl+0x98>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <SD_ioctl+0x34>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d11 	.word	0x08005d11
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d43 	.word	0x08005d43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d0e:	e028      	b.n	8005d62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d10:	f107 0308 	add.w	r3, r7, #8
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff ff2d 	bl	8005b74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d1a:	6a3a      	ldr	r2, [r7, #32]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d26:	e01c      	b.n	8005d62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff ff21 	bl	8005b74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d40:	e00f      	b.n	8005d62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff ff14 	bl	8005b74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	0a5a      	lsrs	r2, r3, #9
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d5a:	e002      	b.n	8005d62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3730      	adds	r7, #48	; 0x30
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000009 	.word	0x20000009

08005d74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005d8a:	4b1f      	ldr	r3, [pc, #124]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005d8c:	7a5b      	ldrb	r3, [r3, #9]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d131      	bne.n	8005df8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005d94:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005d96:	7a5b      	ldrb	r3, [r3, #9]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005d9e:	2100      	movs	r1, #0
 8005da0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005da2:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005da4:	7a5b      	ldrb	r3, [r3, #9]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005db4:	7a5b      	ldrb	r3, [r3, #9]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005dbc:	4413      	add	r3, r2
 8005dbe:	79fa      	ldrb	r2, [r7, #7]
 8005dc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005dc4:	7a5b      	ldrb	r3, [r3, #9]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	b2d1      	uxtb	r1, r2
 8005dcc:	4a0e      	ldr	r2, [pc, #56]	; (8005e08 <FATFS_LinkDriverEx+0x94>)
 8005dce:	7251      	strb	r1, [r2, #9]
 8005dd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	3330      	adds	r3, #48	; 0x30
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	3301      	adds	r3, #1
 8005de0:	223a      	movs	r2, #58	; 0x3a
 8005de2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	3302      	adds	r3, #2
 8005de8:	222f      	movs	r2, #47	; 0x2f
 8005dea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3303      	adds	r3, #3
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	200000b4 	.word	0x200000b4

08005e0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005e16:	2200      	movs	r2, #0
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff ffaa 	bl	8005d74 <FATFS_LinkDriverEx>
 8005e20:	4603      	mov	r3, r0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <__libc_init_array>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4d0d      	ldr	r5, [pc, #52]	; (8005e64 <__libc_init_array+0x38>)
 8005e30:	4c0d      	ldr	r4, [pc, #52]	; (8005e68 <__libc_init_array+0x3c>)
 8005e32:	1b64      	subs	r4, r4, r5
 8005e34:	10a4      	asrs	r4, r4, #2
 8005e36:	2600      	movs	r6, #0
 8005e38:	42a6      	cmp	r6, r4
 8005e3a:	d109      	bne.n	8005e50 <__libc_init_array+0x24>
 8005e3c:	4d0b      	ldr	r5, [pc, #44]	; (8005e6c <__libc_init_array+0x40>)
 8005e3e:	4c0c      	ldr	r4, [pc, #48]	; (8005e70 <__libc_init_array+0x44>)
 8005e40:	f000 f820 	bl	8005e84 <_init>
 8005e44:	1b64      	subs	r4, r4, r5
 8005e46:	10a4      	asrs	r4, r4, #2
 8005e48:	2600      	movs	r6, #0
 8005e4a:	42a6      	cmp	r6, r4
 8005e4c:	d105      	bne.n	8005e5a <__libc_init_array+0x2e>
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e54:	4798      	blx	r3
 8005e56:	3601      	adds	r6, #1
 8005e58:	e7ee      	b.n	8005e38 <__libc_init_array+0xc>
 8005e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5e:	4798      	blx	r3
 8005e60:	3601      	adds	r6, #1
 8005e62:	e7f2      	b.n	8005e4a <__libc_init_array+0x1e>
 8005e64:	08005ef8 	.word	0x08005ef8
 8005e68:	08005ef8 	.word	0x08005ef8
 8005e6c:	08005ef8 	.word	0x08005ef8
 8005e70:	08005efc 	.word	0x08005efc

08005e74 <memset>:
 8005e74:	4402      	add	r2, r0
 8005e76:	4603      	mov	r3, r0
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <memset+0xa>
 8005e7c:	4770      	bx	lr
 8005e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e82:	e7f9      	b.n	8005e78 <memset+0x4>

08005e84 <_init>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr

08005e90 <_fini>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr
