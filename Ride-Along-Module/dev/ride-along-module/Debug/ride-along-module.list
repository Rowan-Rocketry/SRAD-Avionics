
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007678  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014f  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08007a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000239  20000070  08007a80  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  200002a9  08007a80  000202a9  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016368  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002535  00000000  00000000  0003640e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001168  00000000  00000000  00038948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001080  00000000  00000000  00039ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ea23  00000000  00000000  0003ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015d32  00000000  00000000  00069553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012bcbc  00000000  00000000  0007f285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001aaf41  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e40  00000000  00000000  001aaf94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	08007898 	.word	0x08007898

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	08007898 	.word	0x08007898

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fd37 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f82d 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f9c3 	bl	8000930 <MX_GPIO_Init>
  MX_TIM16_Init();
 80005aa:	f000 f94f 	bl	800084c <MX_TIM16_Init>
  MX_SPI1_Init();
 80005ae:	f000 f871 	bl	8000694 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005b2:	f000 f8dd 	bl	8000770 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f96f 	bl	8000898 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Test UART VCP
  uart_buffer_length = sprintf(uart_buffer, "UART VCP Test!\n");
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	490c      	ldr	r1, [pc, #48]	; (80005f0 <main+0x58>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f006 fceb 	bl	8006f9c <siprintf>
 80005c6:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, uart_buffer_length, 100);
 80005c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f107 0118 	add.w	r1, r7, #24
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x5c>)
 80005d4:	f005 ff6e 	bl	80064b4 <HAL_UART_Transmit>

	configureMS5607(&hspi1);
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <main+0x60>)
 80005da:	f000 fa51 	bl	8000a80 <configureMS5607>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	pressure = measurePressure();
 80005de:	f000 fa6b 	bl	8000ab8 <measurePressure>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <main+0x64>)
 80005e6:	6013      	str	r3, [r2, #0]
	writePressure();
 80005e8:	f000 fa28 	bl	8000a3c <writePressure>
	pressure = measurePressure();
 80005ec:	e7f7      	b.n	80005de <main+0x46>
 80005ee:	bf00      	nop
 80005f0:	080078b0 	.word	0x080078b0
 80005f4:	200001f8 	.word	0x200001f8
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	2000028c 	.word	0x2000028c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b09e      	sub	sp, #120	; 0x78
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2260      	movs	r2, #96	; 0x60
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fcbc 	bl	8006f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
 8000622:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000624:	2000      	movs	r0, #0
 8000626:	f001 f86f 	bl	8001708 <HAL_PWREx_ControlVoltageScaling>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000630:	f000 fa20 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000634:	2310      	movs	r3, #16
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000646:	2300      	movs	r3, #0
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f8e6 	bl	8001820 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800065a:	f000 fa0b 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	231f      	movs	r3, #31
 8000660:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f001 ffac 	bl	80025d8 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000686:	f000 f9f5 	bl	8000a74 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3778      	adds	r7, #120	; 0x78
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006a6:	4a31      	ldr	r2, [pc, #196]	; (800076c <MX_SPI1_Init+0xd8>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006ba:	2207      	movs	r2, #7
 80006bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_SPI1_Init+0xd4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_SPI1_Init+0xd4>)
 8000704:	2200      	movs	r2, #0
 8000706:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_SPI1_Init+0xd4>)
 800070a:	2200      	movs	r2, #0
 800070c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_SPI1_Init+0xd4>)
 8000710:	2200      	movs	r2, #0
 8000712:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_SPI1_Init+0xd4>)
 8000716:	2200      	movs	r2, #0
 8000718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_SPI1_Init+0xd4>)
 800071c:	2200      	movs	r2, #0
 800071e:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_SPI1_Init+0xd4>)
 8000722:	2200      	movs	r2, #0
 8000724:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_SPI1_Init+0xd4>)
 8000728:	2200      	movs	r2, #0
 800072a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_SPI1_Init+0xd4>)
 800072e:	f004 ff11 	bl	8005554 <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 8000738:	f000 f99c 	bl	8000a74 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_SPI1_Init+0xd4>)
 8000750:	f005 fccd 	bl	80060ee <HAL_SPIEx_SetConfigAutonomousMode>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 800075a:	f000 f98b 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000008c 	.word	0x2000008c
 800076c:	40013000 	.word	0x40013000

08000770 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000780:	4b30      	ldr	r3, [pc, #192]	; (8000844 <MX_SPI2_Init+0xd4>)
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <MX_SPI2_Init+0xd8>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_SPI2_Init+0xd4>)
 8000788:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800078c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_SPI2_Init+0xd4>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000794:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <MX_SPI2_Init+0xd4>)
 8000796:	2203      	movs	r2, #3
 8000798:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_SPI2_Init+0xd4>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI2_Init+0xd4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI2_Init+0xd4>)
 8000800:	2200      	movs	r2, #0
 8000802:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI2_Init+0xd4>)
 8000806:	2200      	movs	r2, #0
 8000808:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800080a:	480e      	ldr	r0, [pc, #56]	; (8000844 <MX_SPI2_Init+0xd4>)
 800080c:	f004 fea2 	bl	8005554 <HAL_SPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000816:	f000 f92d 	bl	8000a74 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800081e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000822:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_SPI2_Init+0xd4>)
 800082e:	f005 fc5e 	bl	80060ee <HAL_SPIEx_SetConfigAutonomousMode>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000838:	f000 f91c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000011c 	.word	0x2000011c
 8000848:	40003800 	.word	0x40003800

0800084c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_TIM16_Init+0x44>)
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <MX_TIM16_Init+0x48>)
 8000854:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_TIM16_Init+0x44>)
 8000858:	2203      	movs	r2, #3
 800085a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_TIM16_Init+0x44>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8219;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_TIM16_Init+0x44>)
 8000864:	f242 021b 	movw	r2, #8219	; 0x201b
 8000868:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_TIM16_Init+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_TIM16_Init+0x44>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_TIM16_Init+0x44>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_TIM16_Init+0x44>)
 800087e:	f005 fc77 	bl	8006170 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000888:	f000 f8f4 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200001ac 	.word	0x200001ac
 8000894:	40014400 	.word	0x40014400

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_USART1_UART_Init+0x90>)
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <MX_USART1_UART_Init+0x94>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008e2:	f005 fd97 	bl	8006414 <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f8c2 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_USART1_UART_Init+0x90>)
 80008f4:	f006 fa56 	bl	8006da4 <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008fe:	f000 f8b9 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_USART1_UART_Init+0x90>)
 8000906:	f006 fa8b 	bl	8006e20 <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f8b0 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_USART1_UART_Init+0x90>)
 8000916:	f006 fa0c 	bl	8006d32 <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f8a8 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200001f8 	.word	0x200001f8
 800092c:	40013800 	.word	0x40013800

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800094c:	4a37      	ldr	r2, [pc, #220]	; (8000a2c <MX_GPIO_Init+0xfc>)
 800094e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000952:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800095c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000964:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800096a:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <MX_GPIO_Init+0xfc>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <MX_GPIO_Init+0xfc>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_GPIO_Init+0xfc>)
 8000994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_GPIO_Init+0xfc>)
 80009a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <MX_GPIO_Init+0xfc>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_GPIO_Init+0xfc>)
 80009b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2102      	movs	r1, #2
 80009c2:	481b      	ldr	r0, [pc, #108]	; (8000a30 <MX_GPIO_Init+0x100>)
 80009c4:	f000 fe88 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2108      	movs	r1, #8
 80009cc:	4819      	ldr	r0, [pc, #100]	; (8000a34 <MX_GPIO_Init+0x104>)
 80009ce:	f000 fe83 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009d2:	2302      	movs	r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x100>)
 80009ea:	f000 fc9d 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80009ee:	2309      	movs	r3, #9
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_GPIO_Init+0x108>)
 8000a02:	f000 fc91 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a06:	2308      	movs	r3, #8
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x104>)
 8000a1e:	f000 fc83 	bl	8001328 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	46020c00 	.word	0x46020c00
 8000a30:	42021c00 	.word	0x42021c00
 8000a34:	42020000 	.word	0x42020000
 8000a38:	42020800 	.word	0x42020800

08000a3c <writePressure>:
		//writePressure();
	}
}

void writePressure()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0
	char uart_buffer[50];
	int uart_buffer_length;

	uart_buffer_length = sprintf(uart_buffer, "%d\n", pressure);
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <writePressure+0x2c>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	463b      	mov	r3, r7
 8000a48:	4908      	ldr	r1, [pc, #32]	; (8000a6c <writePressure+0x30>)
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 faa6 	bl	8006f9c <siprintf>
 8000a50:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, uart_buffer_length, 100);
 8000a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4639      	mov	r1, r7
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <writePressure+0x34>)
 8000a5c:	f005 fd2a 	bl	80064b4 <HAL_UART_Transmit>
}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000028c 	.word	0x2000028c
 8000a6c:	080078c0 	.word	0x080078c0
 8000a70:	200001f8 	.word	0x200001f8

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <configureMS5607>:
static const uint8_t CMD_MS5607_RESET = MS5607_RESET;

SPI_HandleTypeDef* spiMS5607;

void configureMS5607(SPI_HandleTypeDef* spi)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	disableMS5607();
 8000a88:	f000 f86a 	bl	8000b60 <disableMS5607>
	spiMS5607 = spi;
 8000a8c:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <configureMS5607+0x30>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]

	enableMS5607();
 8000a92:	f000 f859 	bl	8000b48 <enableMS5607>
	HAL_SPI_Transmit(spiMS5607, &CMD_MS5607_RESET, 1, 100);
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <configureMS5607+0x30>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4905      	ldr	r1, [pc, #20]	; (8000ab4 <configureMS5607+0x34>)
 8000aa0:	f004 fe6e 	bl	8005780 <HAL_SPI_Transmit>
	disableMS5607();
 8000aa4:	f000 f85c 	bl	8000b60 <disableMS5607>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000290 	.word	0x20000290
 8000ab4:	080078c9 	.word	0x080078c9

08000ab8 <measurePressure>:

uint32_t measurePressure()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	
	// 1. Send convert command over SPI1
	enableMS5607();
 8000abc:	f000 f844 	bl	8000b48 <enableMS5607>
	HAL_SPI_Transmit(spiMS5607, &CMD_MS5607_MEAS_PRES, 1, 100);
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <measurePressure+0x2c>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <measurePressure+0x30>)
 8000aca:	f004 fe59 	bl	8005780 <HAL_SPI_Transmit>
	disableMS5607();
 8000ace:	f000 f847 	bl	8000b60 <disableMS5607>

	// 2. Wait 9ms for conversion
	HAL_Delay(9);
 8000ad2:	2009      	movs	r0, #9
 8000ad4:	f000 fb20 	bl	8001118 <HAL_Delay>

	// 3. Read ADC result
	return readMS5607ADC();
 8000ad8:	f000 f808 	bl	8000aec <readMS5607ADC>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000290 	.word	0x20000290
 8000ae8:	080078c7 	.word	0x080078c7

08000aec <readMS5607ADC>:

uint32_t readMS5607ADC()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	uint8_t responseBuffer[] = {0,0,0};
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <readMS5607ADC+0x50>)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	6812      	ldr	r2, [r2, #0]
 8000af8:	4611      	mov	r1, r2
 8000afa:	8019      	strh	r1, [r3, #0]
 8000afc:	3302      	adds	r3, #2
 8000afe:	0c12      	lsrs	r2, r2, #16
 8000b00:	701a      	strb	r2, [r3, #0]
	
	enableMS5607();
 8000b02:	f000 f821 	bl	8000b48 <enableMS5607>
	HAL_SPI_Transmit(spiMS5607, &CMD_MS5607_READ_ADC, 1, 100);
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <readMS5607ADC+0x54>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <readMS5607ADC+0x58>)
 8000b10:	f004 fe36 	bl	8005780 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiMS5607, (uint8_t *)responseBuffer, 3, 100);
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <readMS5607ADC+0x54>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	1d39      	adds	r1, r7, #4
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	f005 f84d 	bl	8005bbc <HAL_SPI_Receive>
	disableMS5607();
 8000b22:	f000 f81d 	bl	8000b60 <disableMS5607>

	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
 8000b26:	793b      	ldrb	r3, [r7, #4]
 8000b28:	041a      	lsls	r2, r3, #16
 8000b2a:	797b      	ldrb	r3, [r7, #5]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	79ba      	ldrb	r2, [r7, #6]
 8000b32:	4313      	orrs	r3, r2
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	080078c4 	.word	0x080078c4
 8000b40:	20000290 	.word	0x20000290
 8000b44:	080078c8 	.word	0x080078c8

08000b48 <enableMS5607>:

void enableMS5607()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2108      	movs	r1, #8
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <enableMS5607+0x14>)
 8000b52:	f000 fdc1 	bl	80016d8 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	42020000 	.word	0x42020000

08000b60 <disableMS5607>:

void disableMS5607()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2108      	movs	r1, #8
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <disableMS5607+0x14>)
 8000b6a:	f000 fdb5 	bl	80016d8 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	42020000 	.word	0x42020000

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0be      	sub	sp, #248	; 0xf8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	22c0      	movs	r2, #192	; 0xc0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 f9ef 	bl	8006f8c <memset>
  if(hspi->Instance==SPI1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a6b      	ldr	r2, [pc, #428]	; (8000d60 <HAL_SPI_MspInit+0x1d8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d147      	bne.n	8000c48 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bb8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000bc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 f8d7 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000bdc:	f7ff ff4a 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be0:	4b60      	ldr	r3, [pc, #384]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000be2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000be6:	4a5f      	ldr	r2, [pc, #380]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000be8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000bf0:	4b5c      	ldr	r3, [pc, #368]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000bf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b59      	ldr	r3, [pc, #356]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c04:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c0e:	4b55      	ldr	r3, [pc, #340]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000c1c:	23c2      	movs	r3, #194	; 0xc2
 8000c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c34:	2305      	movs	r3, #5
 8000c36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4849      	ldr	r0, [pc, #292]	; (8000d68 <HAL_SPI_MspInit+0x1e0>)
 8000c42:	f000 fb71 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c46:	e086      	b.n	8000d56 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a47      	ldr	r2, [pc, #284]	; (8000d6c <HAL_SPI_MspInit+0x1e4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	f040 8081 	bne.w	8000d56 <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8000c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 f889 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 8000c78:	f7ff fefc 	bl	8000a74 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c7c:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c82:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000c8c:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ca0:	4a30      	ldr	r2, [pc, #192]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <HAL_SPI_MspInit+0x1dc>)
 8000cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481d      	ldr	r0, [pc, #116]	; (8000d70 <HAL_SPI_MspInit+0x1e8>)
 8000cfc:	f000 fb14 	bl	8001328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d00:	2304      	movs	r3, #4
 8000d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d18:	2305      	movs	r3, #5
 8000d1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4812      	ldr	r0, [pc, #72]	; (8000d70 <HAL_SPI_MspInit+0x1e8>)
 8000d26:	f000 faff 	bl	8001328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d44:	2305      	movs	r3, #5
 8000d46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <HAL_SPI_MspInit+0x1ec>)
 8000d52:	f000 fae9 	bl	8001328 <HAL_GPIO_Init>
}
 8000d56:	bf00      	nop
 8000d58:	37f8      	adds	r7, #248	; 0xf8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000
 8000d64:	46020c00 	.word	0x46020c00
 8000d68:	42020000 	.word	0x42020000
 8000d6c:	40003800 	.word	0x40003800
 8000d70:	42020800 	.word	0x42020800
 8000d74:	42020400 	.word	0x42020400

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10e      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_TIM_Base_MspInit+0x40>)
 8000d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d90:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_TIM_Base_MspInit+0x40>)
 8000d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d96:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <HAL_TIM_Base_MspInit+0x40>)
 8000d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40014400 	.word	0x40014400
 8000db8:	46020c00 	.word	0x46020c00

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ba      	sub	sp, #232	; 0xe8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	22c0      	movs	r2, #192	; 0xc0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f006 f8d5 	bl	8006f8c <memset>
  if(huart->Instance==USART1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <HAL_UART_MspInit+0xc4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d145      	bne.n	8000e78 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dec:	f04f 0201 	mov.w	r2, #1
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 ffbf 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e0c:	f7ff fe32 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0xc8>)
 8000e12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e16:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_UART_MspInit+0xc8>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0xc8>)
 8000e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0xc8>)
 8000e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_UART_MspInit+0xc8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0xc8>)
 8000e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e66:	2307      	movs	r3, #7
 8000e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_UART_MspInit+0xcc>)
 8000e74:	f000 fa58 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	37e8      	adds	r7, #232	; 0xe8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40013800 	.word	0x40013800
 8000e84:	46020c00 	.word	0x46020c00
 8000e88:	42020000 	.word	0x42020000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f8fe 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f006 f812 	bl	8006f38 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20040000 	.word	0x20040000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000294 	.word	0x20000294
 8000f48:	200002b0 	.word	0x200002b0

08000f4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <SystemInit+0x68>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <SystemInit+0x68>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <SystemInit+0x6c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <SystemInit+0x6c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <SystemInit+0x6c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <SystemInit+0x6c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <SystemInit+0x6c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <SystemInit+0x6c>)
 8000f7e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f82:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <SystemInit+0x6c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SystemInit+0x6c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <SystemInit+0x6c>)
 8000f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <SystemInit+0x6c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SystemInit+0x68>)
 8000fa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa6:	609a      	str	r2, [r3, #8]
  #endif
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	46020c00 	.word	0x46020c00

08000fbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff ffc4 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fea:	f005 ffab 	bl	8006f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fad3 	bl	8000598 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   r0, =_estack
 8000ff4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001000:	08007a10 	.word	0x08007a10
  ldr r2, =_sbss
 8001004:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001008:	200002a9 	.word	0x200002a9

0800100c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_IRQHandler>
	...

08001010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_Init+0x4c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_Init+0x4c>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f94f 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001026:	f001 fcc9 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800102a:	4602      	mov	r2, r0
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_Init+0x50>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	490b      	ldr	r1, [pc, #44]	; (8001064 <HAL_Init+0x54>)
 8001036:	5ccb      	ldrb	r3, [r1, r3]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x58>)
 800103e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001040:	200f      	movs	r0, #15
 8001042:	f000 f813 	bl	800106c <HAL_InitTick>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e002      	b.n	8001056 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fd92 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40022000 	.word	0x40022000
 8001060:	46020c00 	.word	0x46020c00
 8001064:	080078cc 	.word	0x080078cc
 8001068:	20000000 	.word	0x20000000

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_InitTick+0x60>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e021      	b.n	80010c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_InitTick+0x64>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f939 	bl	800130e <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	f000 f911 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x68>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000298 	.word	0x20000298

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000298 	.word	0x20000298

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff47 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff5e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff90 	bl	8001218 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5f 	bl	80011c4 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffb2 	bl	8001280 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800133a:	e1ba      	b.n	80016b2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 81aa 	beq.w	80016ac <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <HAL_GPIO_Init+0x188>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d15d      	bne.n	800141c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001366:	2201      	movs	r2, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	4013      	ands	r3, r2
 8001374:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	4313      	orrs	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001390:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x18c>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001398:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800139a:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <HAL_GPIO_Init+0x18c>)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	3208      	adds	r2, #8
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220b      	movs	r2, #11
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3208      	adds	r2, #8
 80013e6:	69f9      	ldr	r1, [r7, #28]
 80013e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	4013      	ands	r3, r2
 8001402:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2202      	movs	r2, #2
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	4313      	orrs	r3, r2
 8001412:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e067      	b.n	80014ec <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x104>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b12      	cmp	r3, #18
 800142a:	d145      	bne.n	80014b8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f003 020f 	and.w	r2, r3, #15
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	4313      	orrs	r3, r2
 8001468:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	69f9      	ldr	r1, [r7, #28]
 8001474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	4013      	ands	r3, r2
 800148e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e01e      	b.n	80014ec <HAL_GPIO_Init+0x1c4>
 80014ae:	bf00      	nop
 80014b0:	46020000 	.word	0x46020000
 80014b4:	08007924 	.word	0x08007924
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d00b      	beq.n	800150c <HAL_GPIO_Init+0x1e4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d007      	beq.n	800150c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001500:	2b11      	cmp	r3, #17
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b12      	cmp	r3, #18
 800150a:	d130      	bne.n	800156e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	4013      	ands	r3, r2
 8001522:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	4313      	orrs	r3, r2
 8001534:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001542:	2201      	movs	r2, #1
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	4013      	ands	r3, r2
 8001550:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 0201 	and.w	r2, r3, #1
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	4313      	orrs	r3, r2
 8001566:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d017      	beq.n	80015a6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	4013      	ands	r3, r2
 800158c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4313      	orrs	r3, r2
 800159e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d07c      	beq.n	80016ac <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80015b2:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3318      	adds	r3, #24
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	0a9a      	lsrs	r2, r3, #10
 80015da:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <HAL_GPIO_Init+0x3ac>)
 80015dc:	4013      	ands	r3, r2
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	00d2      	lsls	r2, r2, #3
 80015e6:	4093      	lsls	r3, r2
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80015ee:	4938      	ldr	r1, [pc, #224]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3318      	adds	r3, #24
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4013      	ands	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001620:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	4013      	ands	r3, r2
 8001634:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800164a:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 8001652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001656:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	4013      	ands	r3, r2
 8001660:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 8001680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001684:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4013      	ands	r3, r2
 800168e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_GPIO_Init+0x3a8>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f ae3d 	bne.w	800133c <HAL_GPIO_Init+0x14>
  }
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3724      	adds	r7, #36	; 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	46022000 	.word	0x46022000
 80016d4:	002f7f7f 	.word	0x002f7f7f

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001710:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001718:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d10b      	bne.n	800173a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d905      	bls.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e057      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d90a      	bls.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	60d3      	str	r3, [r2, #12]
 8001756:	e007      	b.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001760:	4925      	ldr	r1, [pc, #148]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	2232      	movs	r2, #50	; 0x32
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001786:	e002      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x98>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f3      	bne.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01b      	beq.n	80017de <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	2232      	movs	r2, #50	; 0x32
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80017c4:	e002      	b.n	80017cc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <HAL_PWREx_ControlVoltageScaling+0xd6>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f3      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e000      	b.n	80017ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	46020800 	.word	0x46020800
 80017fc:	20000000 	.word	0x20000000
 8001800:	10624dd3 	.word	0x10624dd3

08001804 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <HAL_PWREx_GetVoltageRange+0x18>)
 800180a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	46020800 	.word	0x46020800

08001820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f000 bec8 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b99      	ldr	r3, [pc, #612]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001844:	4b96      	ldr	r3, [pc, #600]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 816c 	beq.w	8001b34 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_RCC_OscConfig+0x52>
 8001862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001864:	2b0c      	cmp	r3, #12
 8001866:	f040 80de 	bne.w	8001a26 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	2b01      	cmp	r3, #1
 800186e:	f040 80da 	bne.w	8001a26 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f000 bea5 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_RCC_OscConfig+0x7a>
 8001890:	4b83      	ldr	r3, [pc, #524]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001898:	e005      	b.n	80018a6 <HAL_RCC_OscConfig+0x86>
 800189a:	4b81      	ldr	r3, [pc, #516]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800189c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d255      	bcs.n	8001956 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 f9df 	bl	8002c78 <RCC_SetFlashLatencyFromMSIRange>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f000 be82 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80018c6:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	4a75      	ldr	r2, [pc, #468]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018d0:	6093      	str	r3, [r2, #8]
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	4970      	ldr	r1, [pc, #448]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80018ec:	d309      	bcc.n	8001902 <HAL_RCC_OscConfig+0xe2>
 80018ee:	4b6c      	ldr	r3, [pc, #432]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f023 021f 	bic.w	r2, r3, #31
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4969      	ldr	r1, [pc, #420]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
 8001900:	e07e      	b.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	2b00      	cmp	r3, #0
 8001908:	da0a      	bge.n	8001920 <HAL_RCC_OscConfig+0x100>
 800190a:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	015b      	lsls	r3, r3, #5
 8001918:	4961      	ldr	r1, [pc, #388]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800191a:	4313      	orrs	r3, r2
 800191c:	60cb      	str	r3, [r1, #12]
 800191e:	e06f      	b.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d30a      	bcc.n	8001940 <HAL_RCC_OscConfig+0x120>
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	4959      	ldr	r1, [pc, #356]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800193a:	4313      	orrs	r3, r2
 800193c:	60cb      	str	r3, [r1, #12]
 800193e:	e05f      	b.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
 8001940:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	03db      	lsls	r3, r3, #15
 800194e:	4954      	ldr	r1, [pc, #336]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001950:	4313      	orrs	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
 8001954:	e054      	b.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001956:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800195c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001960:	6093      	str	r3, [r2, #8]
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	494c      	ldr	r1, [pc, #304]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800197c:	d309      	bcc.n	8001992 <HAL_RCC_OscConfig+0x172>
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f023 021f 	bic.w	r2, r3, #31
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4945      	ldr	r1, [pc, #276]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800198c:	4313      	orrs	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
 8001990:	e028      	b.n	80019e4 <HAL_RCC_OscConfig+0x1c4>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0a      	bge.n	80019b0 <HAL_RCC_OscConfig+0x190>
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	493d      	ldr	r1, [pc, #244]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
 80019ae:	e019      	b.n	80019e4 <HAL_RCC_OscConfig+0x1c4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b8:	d30a      	bcc.n	80019d0 <HAL_RCC_OscConfig+0x1b0>
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4935      	ldr	r1, [pc, #212]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
 80019ce:	e009      	b.n	80019e4 <HAL_RCC_OscConfig+0x1c4>
 80019d0:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	03db      	lsls	r3, r3, #15
 80019de:	4930      	ldr	r1, [pc, #192]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 f942 	bl	8002c78 <RCC_SetFlashLatencyFromMSIRange>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f000 bde5 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001a00:	f001 f8e4 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x284>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fb2f 	bl	800106c <HAL_InitTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 808a 	beq.w	8001b32 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a22:	f000 bdd2 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d066      	beq.n	8001afc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a3a:	f7ff fb61 	bl	8001100 <HAL_GetTick>
 8001a3e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a42:	f7ff fb5d 	bl	8001100 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d902      	bls.n	8001a56 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f000 bdba 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ef      	beq.n	8001a42 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a6c:	6093      	str	r3, [r2, #8]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4909      	ldr	r1, [pc, #36]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001a88:	d30e      	bcc.n	8001aa8 <HAL_RCC_OscConfig+0x288>
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f023 021f 	bic.w	r2, r3, #31
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4902      	ldr	r1, [pc, #8]	; (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
 8001a9c:	e04a      	b.n	8001b34 <HAL_RCC_OscConfig+0x314>
 8001a9e:	bf00      	nop
 8001aa0:	46020c00 	.word	0x46020c00
 8001aa4:	20000004 	.word	0x20000004
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da0a      	bge.n	8001ac6 <HAL_RCC_OscConfig+0x2a6>
 8001ab0:	4b98      	ldr	r3, [pc, #608]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	015b      	lsls	r3, r3, #5
 8001abe:	4995      	ldr	r1, [pc, #596]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
 8001ac4:	e036      	b.n	8001b34 <HAL_RCC_OscConfig+0x314>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ace:	d30a      	bcc.n	8001ae6 <HAL_RCC_OscConfig+0x2c6>
 8001ad0:	4b90      	ldr	r3, [pc, #576]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	498d      	ldr	r1, [pc, #564]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
 8001ae4:	e026      	b.n	8001b34 <HAL_RCC_OscConfig+0x314>
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	03db      	lsls	r3, r3, #15
 8001af4:	4987      	ldr	r1, [pc, #540]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
 8001afa:	e01b      	b.n	8001b34 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001afc:	4b85      	ldr	r3, [pc, #532]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a84      	ldr	r2, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b08:	f7ff fafa 	bl	8001100 <HAL_GetTick>
 8001b0c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b0e:	e009      	b.n	8001b24 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b10:	f7ff faf6 	bl	8001100 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d902      	bls.n	8001b24 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f000 bd53 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b24:	4b7b      	ldr	r3, [pc, #492]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ef      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 808b 	beq.w	8001c58 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_OscConfig+0x334>
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d17d      	bne.n	8001c58 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f000 bd34 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x35a>
 8001b6c:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a68      	ldr	r2, [pc, #416]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e041      	b.n	8001bfe <HAL_RCC_OscConfig+0x3de>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b82:	d112      	bne.n	8001baa <HAL_RCC_OscConfig+0x38a>
 8001b84:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a62      	ldr	r2, [pc, #392]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b60      	ldr	r3, [pc, #384]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5f      	ldr	r2, [pc, #380]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a5c      	ldr	r2, [pc, #368]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e029      	b.n	8001bfe <HAL_RCC_OscConfig+0x3de>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_OscConfig+0x3ba>
 8001bb4:	4b57      	ldr	r3, [pc, #348]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a56      	ldr	r2, [pc, #344]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b54      	ldr	r3, [pc, #336]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a53      	ldr	r2, [pc, #332]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b51      	ldr	r3, [pc, #324]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e011      	b.n	8001bfe <HAL_RCC_OscConfig+0x3de>
 8001bda:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a4d      	ldr	r2, [pc, #308]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a47      	ldr	r2, [pc, #284]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d014      	beq.n	8001c30 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001c06:	f7ff fa7b 	bl	8001100 <HAL_GetTick>
 8001c0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fa77 	bl	8001100 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d902      	bls.n	8001c22 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	f000 bcd4 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ef      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3ee>
 8001c2e:	e013      	b.n	8001c58 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001c30:	f7ff fa66 	bl	8001100 <HAL_GetTick>
 8001c34:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	e009      	b.n	8001c4c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fa62 	bl	8001100 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d902      	bls.n	8001c4c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f000 bcbf 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ef      	bne.n	8001c38 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d05f      	beq.n	8001d24 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x456>
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d114      	bne.n	8001c9a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d111      	bne.n	8001c9a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 bca3 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	4920      	ldr	r1, [pc, #128]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c98:	e044      	b.n	8001d24 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d024      	beq.n	8001cec <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cae:	f7ff fa27 	bl	8001100 <HAL_GetTick>
 8001cb2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	e009      	b.n	8001cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fa23 	bl	8001100 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d902      	bls.n	8001cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f000 bc80 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ef      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	490b      	ldr	r1, [pc, #44]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	610b      	str	r3, [r1, #16]
 8001cea:	e01b      	b.n	8001d24 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cf8:	f7ff fa02 	bl	8001100 <HAL_GetTick>
 8001cfc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d00:	f7ff f9fe 	bl	8001100 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d904      	bls.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	f000 bc5b 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
 8001d14:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d18:	4baf      	ldr	r3, [pc, #700]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ed      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80c8 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d38:	4ba7      	ldr	r3, [pc, #668]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d111      	bne.n	8001d6a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4ba4      	ldr	r3, [pc, #656]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4c:	4aa2      	ldr	r2, [pc, #648]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d56:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d6a:	4b9c      	ldr	r3, [pc, #624]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d119      	bne.n	8001daa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001d76:	4b99      	ldr	r3, [pc, #612]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	4a98      	ldr	r2, [pc, #608]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f9bd 	bl	8001100 <HAL_GetTick>
 8001d86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7ff f9b9 	bl	8001100 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d902      	bls.n	8001d9e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f000 bc16 	b.w	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d9e:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ef      	beq.n	8001d8a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d05f      	beq.n	8001e72 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d037      	beq.n	8001e38 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e3f4      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001dea:	4b7b      	ldr	r3, [pc, #492]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001df0:	4a79      	ldr	r2, [pc, #484]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001df2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001df6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001dfa:	f7ff f981 	bl	8001100 <HAL_GetTick>
 8001dfe:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff f97d 	bl	8001100 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e3da      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e14:	4b70      	ldr	r3, [pc, #448]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ef      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001e22:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4969      	ldr	r1, [pc, #420]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001e38:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e3e:	4a66      	ldr	r2, [pc, #408]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001e48:	f7ff f95a 	bl	8001100 <HAL_GetTick>
 8001e4c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff f956 	bl	8001100 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e3b3      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ef      	beq.n	8001e50 <HAL_RCC_OscConfig+0x630>
 8001e70:	e01b      	b.n	8001eaa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e78:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e7a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001e82:	f7ff f93d 	bl	8001100 <HAL_GetTick>
 8001e86:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff f939 	bl	8001100 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e396      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ef      	bne.n	8001e8a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eaa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8111 	beq.w	80020f2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d111      	bne.n	8001f08 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eea:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d118      	bne.n	8001f46 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f20:	f7ff f8ee 	bl	8001100 <HAL_GetTick>
 8001f24:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7ff f8ea 	bl	8001100 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e347      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_OscConfig+0x7bc>)
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01f      	beq.n	8001f92 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f74:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f90:	e00f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f98:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x7b8>)
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d057      	beq.n	800206a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001fba:	f7ff f8a1 	bl	8001100 <HAL_GetTick>
 8001fbe:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc0:	e00e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff f89d 	bl	8001100 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d905      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e2f8      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
 8001fd8:	46020c00 	.word	0x46020c00
 8001fdc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe0:	4b9c      	ldr	r3, [pc, #624]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8001fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0e9      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01b      	beq.n	8002032 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ffa:	4b96      	ldr	r3, [pc, #600]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8001ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002000:	4a94      	ldr	r2, [pc, #592]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002006:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7ff f878 	bl	8001100 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e2d3      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002022:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ed      	beq.n	800200c <HAL_RCC_OscConfig+0x7ec>
 8002030:	e053      	b.n	80020da <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002032:	4b88      	ldr	r3, [pc, #544]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002038:	4a86      	ldr	r2, [pc, #536]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 800203a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800203e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002042:	e00a      	b.n	800205a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff f85c 	bl	8001100 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e2b7      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800205a:	4b7e      	ldr	r3, [pc, #504]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 800205c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ed      	bne.n	8002044 <HAL_RCC_OscConfig+0x824>
 8002068:	e037      	b.n	80020da <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800206a:	f7ff f849 	bl	8001100 <HAL_GetTick>
 800206e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff f845 	bl	8001100 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e2a0      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002088:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 800208a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ed      	bne.n	8002072 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01a      	beq.n	80020da <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020a4:	4b6b      	ldr	r3, [pc, #428]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80020a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020aa:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80020ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7ff f823 	bl	8001100 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e27e      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020cc:	4b61      	ldr	r3, [pc, #388]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80020ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ed      	bne.n	80020b6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e8:	4a5a      	ldr	r2, [pc, #360]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d036      	beq.n	800216c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d019      	beq.n	800213a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002106:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a52      	ldr	r2, [pc, #328]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 800210c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002110:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002112:	f7fe fff5 	bl	8001100 <HAL_GetTick>
 8002116:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211a:	f7fe fff1 	bl	8001100 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e24e      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x8fa>
 8002138:	e018      	b.n	800216c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a45      	ldr	r2, [pc, #276]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002144:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002146:	f7fe ffdb 	bl	8001100 <HAL_GetTick>
 800214a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214e:	f7fe ffd7 	bl	8001100 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e234      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002160:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b00      	cmp	r3, #0
 8002176:	d036      	beq.n	80021e6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d019      	beq.n	80021b4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002180:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a33      	ldr	r2, [pc, #204]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800218c:	f7fe ffb8 	bl	8001100 <HAL_GetTick>
 8002190:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002194:	f7fe ffb4 	bl	8001100 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e211      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80021a6:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x974>
 80021b2:	e018      	b.n	80021e6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80021ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021c0:	f7fe ff9e 	bl	8001100 <HAL_GetTick>
 80021c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80021c8:	f7fe ff9a 	bl	8001100 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1f7      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d07f      	beq.n	80022f2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d062      	beq.n	80022c0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002204:	6093      	str	r3, [r2, #8]
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	4910      	ldr	r1, [pc, #64]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002214:	4313      	orrs	r3, r2
 8002216:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002220:	d309      	bcc.n	8002236 <HAL_RCC_OscConfig+0xa16>
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f023 021f 	bic.w	r2, r3, #31
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4909      	ldr	r1, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
 8002234:	e02a      	b.n	800228c <HAL_RCC_OscConfig+0xa6c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	da0c      	bge.n	8002258 <HAL_RCC_OscConfig+0xa38>
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	4901      	ldr	r1, [pc, #4]	; (8002254 <HAL_RCC_OscConfig+0xa34>)
 800224e:	4313      	orrs	r3, r2
 8002250:	60cb      	str	r3, [r1, #12]
 8002252:	e01b      	b.n	800228c <HAL_RCC_OscConfig+0xa6c>
 8002254:	46020c00 	.word	0x46020c00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d30a      	bcc.n	8002278 <HAL_RCC_OscConfig+0xa58>
 8002262:	4ba1      	ldr	r3, [pc, #644]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	029b      	lsls	r3, r3, #10
 8002270:	499d      	ldr	r1, [pc, #628]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002272:	4313      	orrs	r3, r2
 8002274:	60cb      	str	r3, [r1, #12]
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0xa6c>
 8002278:	4b9b      	ldr	r3, [pc, #620]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	03db      	lsls	r3, r3, #15
 8002286:	4998      	ldr	r1, [pc, #608]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002288:	4313      	orrs	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800228c:	4b96      	ldr	r3, [pc, #600]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a95      	ldr	r2, [pc, #596]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002292:	f043 0310 	orr.w	r3, r3, #16
 8002296:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002298:	f7fe ff32 	bl	8001100 <HAL_GetTick>
 800229c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80022a0:	f7fe ff2e 	bl	8001100 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e18b      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80022b2:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xa80>
 80022be:	e018      	b.n	80022f2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80022c0:	4b89      	ldr	r3, [pc, #548]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a88      	ldr	r2, [pc, #544]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80022c6:	f023 0310 	bic.w	r3, r3, #16
 80022ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80022cc:	f7fe ff18 	bl	8001100 <HAL_GetTick>
 80022d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80022d4:	f7fe ff14 	bl	8001100 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e171      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80022e6:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8166 	beq.w	80025c8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002302:	4b79      	ldr	r3, [pc, #484]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b0c      	cmp	r3, #12
 800230c:	f000 80f2 	beq.w	80024f4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	2b02      	cmp	r3, #2
 8002316:	f040 80c5 	bne.w	80024a4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002324:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002326:	f7fe feeb 	bl	8001100 <HAL_GetTick>
 800232a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fee7 	bl	8001100 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e144      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002340:	4b69      	ldr	r3, [pc, #420]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234c:	4b66      	ldr	r3, [pc, #408]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d111      	bne.n	800237e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800235c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002360:	4a61      	ldr	r2, [pc, #388]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800236c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCC_OscConfig+0xccc>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800238a:	d102      	bne.n	8002392 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_RCC_OscConfig+0xccc>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a55      	ldr	r2, [pc, #340]	; (80024ec <HAL_RCC_OscConfig+0xccc>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800239e:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0212      	lsls	r2, r2, #8
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023bc:	430a      	orrs	r2, r1
 80023be:	494a      	ldr	r1, [pc, #296]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	628b      	str	r3, [r1, #40]	; 0x28
 80023c4:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80023c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c8:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <HAL_RCC_OscConfig+0xcd0>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023d0:	3a01      	subs	r2, #1
 80023d2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023da:	3a01      	subs	r2, #1
 80023dc:	0252      	lsls	r2, r2, #9
 80023de:	b292      	uxth	r2, r2
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023e6:	3a01      	subs	r2, #1
 80023e8:	0412      	lsls	r2, r2, #16
 80023ea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80023f4:	3a01      	subs	r2, #1
 80023f6:	0612      	lsls	r2, r2, #24
 80023f8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80023fc:	430a      	orrs	r2, r1
 80023fe:	493a      	ldr	r1, [pc, #232]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002400:	4313      	orrs	r3, r2
 8002402:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002404:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	4a37      	ldr	r2, [pc, #220]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800240a:	f023 0310 	bic.w	r3, r3, #16
 800240e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	4a32      	ldr	r2, [pc, #200]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002420:	f043 0310 	orr.w	r3, r3, #16
 8002424:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f023 020c 	bic.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	492d      	ldr	r1, [pc, #180]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002434:	4313      	orrs	r3, r2
 8002436:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0xccc>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a29      	ldr	r2, [pc, #164]	; (80024ec <HAL_RCC_OscConfig+0xccc>)
 8002446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800244c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 800246a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800247c:	f7fe fe40 	bl	8001100 <HAL_GetTick>
 8002480:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe fe3c 	bl	8001100 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e099      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xc64>
 80024a2:	e091      	b.n	80025c8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80024aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024b0:	f7fe fe26 	bl	8001100 <HAL_GetTick>
 80024b4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fe22 	bl	8001100 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <HAL_RCC_OscConfig+0xcc8>)
 80024dc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80024e0:	f023 0303 	bic.w	r3, r3, #3
 80024e4:	6293      	str	r3, [r2, #40]	; 0x28
 80024e6:	e06f      	b.n	80025c8 <HAL_RCC_OscConfig+0xda8>
 80024e8:	46020c00 	.word	0x46020c00
 80024ec:	46020800 	.word	0x46020800
 80024f0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80024f4:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024fa:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	2b01      	cmp	r3, #1
 8002506:	d039      	beq.n	800257c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d132      	bne.n	800257c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d129      	bne.n	800257c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d122      	bne.n	800257c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002540:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d11a      	bne.n	800257c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	0a5b      	lsrs	r3, r3, #9
 800254a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d111      	bne.n	800257c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	0c1b      	lsrs	r3, r3, #16
 800255c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002564:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d108      	bne.n	800257c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	0e1b      	lsrs	r3, r3, #24
 800256e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e024      	b.n	80025ca <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	08db      	lsrs	r3, r3, #3
 8002586:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800258e:	429a      	cmp	r2, r3
 8002590:	d01a      	beq.n	80025c8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 8002598:	f023 0310 	bic.w	r3, r3, #16
 800259c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe fdaf 	bl	8001100 <HAL_GetTick>
 80025a2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80025a4:	bf00      	nop
 80025a6:	f7fe fdab 	bl	8001100 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d0f9      	beq.n	80025a6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_RCC_OscConfig+0xdb4>)
 80025c2:	f043 0310 	orr.w	r3, r3, #16
 80025c6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3738      	adds	r7, #56	; 0x38
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	46020c00 	.word	0x46020c00

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e1d9      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b9b      	ldr	r3, [pc, #620]	; (800285c <HAL_RCC_ClockConfig+0x284>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d910      	bls.n	800261c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b98      	ldr	r3, [pc, #608]	; (800285c <HAL_RCC_ClockConfig+0x284>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4996      	ldr	r1, [pc, #600]	; (800285c <HAL_RCC_ClockConfig+0x284>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b94      	ldr	r3, [pc, #592]	; (800285c <HAL_RCC_ClockConfig+0x284>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e1c1      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002634:	429a      	cmp	r2, r3
 8002636:	d908      	bls.n	800264a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002638:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	4986      	ldr	r1, [pc, #536]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002646:	4313      	orrs	r3, r2
 8002648:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002664:	429a      	cmp	r2, r3
 8002666:	d909      	bls.n	800267c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002668:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	497a      	ldr	r1, [pc, #488]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002678:	4313      	orrs	r3, r2
 800267a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4b74      	ldr	r3, [pc, #464]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002694:	429a      	cmp	r2, r3
 8002696:	d908      	bls.n	80026aa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002698:	4b71      	ldr	r3, [pc, #452]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	496e      	ldr	r1, [pc, #440]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	4b69      	ldr	r3, [pc, #420]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d908      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80026c6:	4b66      	ldr	r3, [pc, #408]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4963      	ldr	r1, [pc, #396]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80d2 	beq.w	800288a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d143      	bne.n	800277a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f2:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80026f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d110      	bne.n	8002722 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	4b57      	ldr	r3, [pc, #348]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002706:	4a56      	ldr	r2, [pc, #344]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002722:	f7fe fced 	bl	8001100 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002728:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <HAL_RCC_ClockConfig+0x28c>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00f      	beq.n	8002754 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002736:	f7fe fce3 	bl	8001100 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e12b      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCC_ClockConfig+0x28c>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	4a3f      	ldr	r2, [pc, #252]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002762:	f023 0304 	bic.w	r3, r3, #4
 8002766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d121      	bne.n	80027ba <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e112      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e106      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0fa      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0f2      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4926      	ldr	r1, [pc, #152]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80027cc:	f7fe fc98 	bl	8001100 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d112      	bne.n	8002800 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fc90 	bl	8001100 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0d6      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d1ee      	bne.n	80027dc <HAL_RCC_ClockConfig+0x204>
 80027fe:	e044      	b.n	800288a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d112      	bne.n	800282e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280a:	f7fe fc79 	bl	8001100 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0bf      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	d1ee      	bne.n	800280a <HAL_RCC_ClockConfig+0x232>
 800282c:	e02d      	b.n	800288a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d123      	bne.n	800287e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fc62 	bl	8001100 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0a8      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCC_ClockConfig+0x288>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ee      	bne.n	8002838 <HAL_RCC_ClockConfig+0x260>
 800285a:	e016      	b.n	800288a <HAL_RCC_ClockConfig+0x2b2>
 800285c:	40022000 	.word	0x40022000
 8002860:	46020c00 	.word	0x46020c00
 8002864:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fc4a 	bl	8001100 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e090      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800287e:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b04      	cmp	r3, #4
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d010      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d208      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	493d      	ldr	r1, [pc, #244]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <HAL_RCC_ClockConfig+0x3d4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d210      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_ClockConfig+0x3d4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 020f 	bic.w	r2, r3, #15
 80028ce:	4937      	ldr	r1, [pc, #220]	; (80029ac <HAL_RCC_ClockConfig+0x3d4>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b35      	ldr	r3, [pc, #212]	; (80029ac <HAL_RCC_ClockConfig+0x3d4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e05b      	b.n	80029a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002900:	429a      	cmp	r2, r3
 8002902:	d208      	bcs.n	8002916 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4925      	ldr	r1, [pc, #148]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002930:	429a      	cmp	r2, r3
 8002932:	d209      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	4919      	ldr	r1, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d010      	beq.n	8002976 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002960:	429a      	cmp	r2, r3
 8002962:	d208      	bcs.n	8002976 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	490d      	ldr	r1, [pc, #52]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 8002972:	4313      	orrs	r3, r2
 8002974:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002976:	f000 f821 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x3d0>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	490a      	ldr	r1, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x3d8>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x3dc>)
 800298e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x3e0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fb69 	bl	800106c <HAL_InitTick>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]

  return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	46020c00 	.word	0x46020c00
 80029ac:	40022000 	.word	0x40022000
 80029b0:	080078cc 	.word	0x080078cc
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b08b      	sub	sp, #44	; 0x2c
 80029c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ca:	4b7b      	ldr	r3, [pc, #492]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d4:	4b78      	ldr	r3, [pc, #480]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x34>
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d121      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d11e      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80029f0:	4b71      	ldr	r3, [pc, #452]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80029fc:	4b6e      	ldr	r3, [pc, #440]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a02:	0b1b      	lsrs	r3, r3, #12
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e005      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	0f1b      	lsrs	r3, r3, #28
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a18:	4a68      	ldr	r2, [pc, #416]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d110      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a2c:	e00d      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2e:	4b62      	ldr	r3, [pc, #392]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d102      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a3a:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	e004      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a46:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a48:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	f040 80ac 	bne.w	8002baa <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a52:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002a5c:	4b56      	ldr	r3, [pc, #344]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002a6a:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a76:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8086 	beq.w	8002ba6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xec>
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d022      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x130>
 8002aa6:	e043      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002bc4 <HAL_RCC_GetSysClockFreq+0x208>
 8002ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002aca:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ace:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002bc8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002aea:	e046      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002bc4 <HAL_RCC_GetSysClockFreq+0x208>
 8002afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b12:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002bc8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002b2e:	e024      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b58:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b5c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002bc8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b74:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002b78:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	0e1b      	lsrs	r3, r3, #24
 8002b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b84:	3301      	adds	r3, #1
 8002b86:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b9e:	ee17 3a90 	vmov	r3, s15
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	e001      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002baa:	6a3b      	ldr	r3, [r7, #32]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	372c      	adds	r7, #44	; 0x2c
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	46020c00 	.word	0x46020c00
 8002bbc:	080078e4 	.word	0x080078e4
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	4b742400 	.word	0x4b742400
 8002bc8:	46000000 	.word	0x46000000

08002bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bd0:	f7ff fef4 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <HAL_RCC_GetHCLKFreq+0x28>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4906      	ldr	r1, [pc, #24]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x30>)
 8002be8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x30>)
 8002bec:	681b      	ldr	r3, [r3, #0]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	46020c00 	.word	0x46020c00
 8002bf8:	080078cc 	.word	0x080078cc
 8002bfc:	20000000 	.word	0x20000000

08002c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002c04:	f7ff ffe2 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4903      	ldr	r1, [pc, #12]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	46020c00 	.word	0x46020c00
 8002c24:	080078dc 	.word	0x080078dc

08002c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002c2c:	f7ff ffce 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	46020c00 	.word	0x46020c00
 8002c4c:	080078dc 	.word	0x080078dc

08002c50 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002c54:	f7ff ffba 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	46020c00 	.word	0x46020c00
 8002c74:	080078dc 	.word	0x080078dc

08002c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c80:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c8e:	f7fe fdb9 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 8002c92:	6178      	str	r0, [r7, #20]
 8002c94:	e019      	b.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9c:	4a37      	ldr	r2, [pc, #220]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ca6:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cb4:	f7fe fda6 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 8002cb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc0:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cd0:	d003      	beq.n	8002cda <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cd8:	d109      	bne.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce0:	d202      	bcs.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002ce6:	e033      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002cec:	e030      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf4:	d208      	bcs.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d102      	bne.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002cfe:	2303      	movs	r3, #3
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	e025      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e035      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0e:	d90f      	bls.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d1c:	d902      	bls.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e015      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002d24:	2301      	movs	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	e012      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e00f      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d36:	d109      	bne.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3e:	d102      	bne.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002d40:	2301      	movs	r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e004      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002d46:	2302      	movs	r3, #2
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e001      	b.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 020f 	bic.w	r2, r3, #15
 8002d58:	4909      	ldr	r1, [pc, #36]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d001      	beq.n	8002d72 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	46020c00 	.word	0x46020c00
 8002d80:	40022000 	.word	0x40022000

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b0b6      	sub	sp, #216	; 0xd8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f002 0401 	and.w	r4, r2, #1
 8002da8:	2500      	movs	r5, #0
 8002daa:	ea54 0305 	orrs.w	r3, r4, r5
 8002dae:	d00b      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002db0:	4bc5      	ldr	r3, [pc, #788]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db6:	f023 0103 	bic.w	r1, r3, #3
 8002dba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc0:	4ac1      	ldr	r2, [pc, #772]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f002 0804 	and.w	r8, r2, #4
 8002dd4:	f04f 0900 	mov.w	r9, #0
 8002dd8:	ea58 0309 	orrs.w	r3, r8, r9
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002dde:	4bba      	ldr	r3, [pc, #744]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002de8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	4ab6      	ldr	r2, [pc, #728]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002df0:	430b      	orrs	r3, r1
 8002df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f002 0a08 	and.w	sl, r2, #8
 8002e02:	f04f 0b00 	mov.w	fp, #0
 8002e06:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e0a:	d00b      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002e0c:	4bae      	ldr	r3, [pc, #696]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	4aaa      	ldr	r2, [pc, #680]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f002 0310 	and.w	r3, r2, #16
 8002e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4313      	orrs	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002e44:	4ba0      	ldr	r3, [pc, #640]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	4a9c      	ldr	r2, [pc, #624]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e56:	430b      	orrs	r3, r1
 8002e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f002 0320 	and.w	r3, r2, #32
 8002e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002e7c:	4b92      	ldr	r3, [pc, #584]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e82:	f023 0107 	bic.w	r1, r3, #7
 8002e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	4a8e      	ldr	r2, [pc, #568]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eaa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002eb4:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eba:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec4:	4a80      	ldr	r2, [pc, #512]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002ee2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	d00b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002eec:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efc:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002efe:	430b      	orrs	r3, r1
 8002f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4313      	orrs	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002f24:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f34:	4a64      	ldr	r2, [pc, #400]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f36:	430b      	orrs	r3, r1
 8002f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002f56:	460b      	mov	r3, r1
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002f5c:	4b5a      	ldr	r3, [pc, #360]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a56      	ldr	r2, [pc, #344]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f8a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4313      	orrs	r3, r2
 8002f92:	d00b      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002f94:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f9a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa4:	4a48      	ldr	r2, [pc, #288]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fdc:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ff6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003000:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800300a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800300e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003010:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003012:	430b      	orrs	r3, r1
 8003014:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003024:	673b      	str	r3, [r7, #112]	; 0x70
 8003026:	2300      	movs	r3, #0
 8003028:	677b      	str	r3, [r7, #116]	; 0x74
 800302a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800302e:	460b      	mov	r3, r1
 8003030:	4313      	orrs	r3, r2
 8003032:	d04f      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d02d      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d827      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d02b      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003048:	2b60      	cmp	r3, #96	; 0x60
 800304a:	d823      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d006      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d81f      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d011      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800305c:	e01a      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800306a:	e01a      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800306c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003070:	3308      	adds	r3, #8
 8003072:	4618      	mov	r0, r3
 8003074:	f002 f93e 	bl	80052f4 <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800307e:	e010      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003084:	332c      	adds	r3, #44	; 0x2c
 8003086:	4618      	mov	r0, r3
 8003088:	f002 f9cc 	bl	8005424 <RCCEx_PLL3_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003092:	e006      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800309a:	e002      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 80030a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d110      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030b0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80030b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030bc:	4a02      	ldr	r2, [pc, #8]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030be:	430b      	orrs	r3, r1
 80030c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80030c6:	bf00      	nop
 80030c8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80030d0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80030d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80030e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030e2:	2300      	movs	r3, #0
 80030e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80030ea:	460b      	mov	r3, r1
 80030ec:	4313      	orrs	r3, r2
 80030ee:	d046      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80030f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030f8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80030fc:	d028      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80030fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003102:	d821      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003108:	d022      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800310a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800310e:	d81b      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003114:	d01c      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800311a:	d815      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800311c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	d80f      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d011      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d00e      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003132:	e009      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003138:	3308      	adds	r3, #8
 800313a:	4618      	mov	r0, r3
 800313c:	f002 f8da 	bl	80052f4 <RCCEx_PLL2_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003146:	e004      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003152:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800315a:	4bb6      	ldr	r3, [pc, #728]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800315c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003160:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003168:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800316c:	4ab1      	ldr	r2, [pc, #708]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800316e:	430b      	orrs	r3, r1
 8003170:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003174:	e003      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800317a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800317e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800318a:	663b      	str	r3, [r7, #96]	; 0x60
 800318c:	2300      	movs	r3, #0
 800318e:	667b      	str	r3, [r7, #100]	; 0x64
 8003190:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003194:	460b      	mov	r3, r1
 8003196:	4313      	orrs	r3, r2
 8003198:	d03e      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800319a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800319e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d81d      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031eb 	.word	0x080031eb
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031cf 	.word	0x080031cf
 80031b8:	080031eb 	.word	0x080031eb
 80031bc:	080031eb 	.word	0x080031eb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031c0:	4b9c      	ldr	r3, [pc, #624]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	4a9b      	ldr	r2, [pc, #620]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ca:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80031cc:	e00e      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d2:	332c      	adds	r3, #44	; 0x2c
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 f925 	bl	8005424 <RCCEx_PLL3_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80031e0:	e004      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80031e8:	e000      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80031ea:	bf00      	nop
    }
    if (ret == HAL_OK)
 80031ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80031f4:	4b8f      	ldr	r3, [pc, #572]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80031f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031fa:	f023 0107 	bic.w	r1, r3, #7
 80031fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	4a8b      	ldr	r2, [pc, #556]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003208:	430b      	orrs	r3, r1
 800320a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003214:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003224:	65bb      	str	r3, [r7, #88]	; 0x58
 8003226:	2300      	movs	r3, #0
 8003228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800322a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d04a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003240:	d028      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003246:	d821      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003248:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800324c:	d024      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800324e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003252:	d81b      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003258:	d00e      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800325a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800325e:	d815      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d110      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800326a:	4b72      	ldr	r3, [pc, #456]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	4a71      	ldr	r2, [pc, #452]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003276:	e012      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800327c:	332c      	adds	r3, #44	; 0x2c
 800327e:	4618      	mov	r0, r3
 8003280:	f002 f8d0 	bl	8005424 <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800328a:	e008      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003292:	e004      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003294:	bf00      	nop
 8003296:	e002      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800329c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800329e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80032a6:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80032b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	4a5e      	ldr	r2, [pc, #376]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80032c6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80032d6:	653b      	str	r3, [r7, #80]	; 0x50
 80032d8:	2300      	movs	r3, #0
 80032da:	657b      	str	r3, [r7, #84]	; 0x54
 80032dc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80032e0:	460b      	mov	r3, r1
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f000 80ba 	beq.w	800345c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d113      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80032fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003302:	4a4c      	ldr	r2, [pc, #304]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800330c:	4b49      	ldr	r3, [pc, #292]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800331a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003324:	4b44      	ldr	r3, [pc, #272]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	4a43      	ldr	r2, [pc, #268]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003330:	f7fd fee6 	bl	8001100 <HAL_GetTick>
 8003334:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003338:	e00b      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fd fee1 	bl	8001100 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d903      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003350:	e005      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003352:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ed      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800335e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d16a      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003366:	4b33      	ldr	r3, [pc, #204]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800336c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800337c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003380:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003388:	4293      	cmp	r3, r2
 800338a:	d01b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800338c:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800338e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800339c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033a0:	4a24      	ldr	r2, [pc, #144]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033aa:	4b22      	ldr	r3, [pc, #136]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033b0:	4a20      	ldr	r2, [pc, #128]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ba:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d019      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fe96 	bl	8001100 <HAL_GetTick>
 80033d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	e00d      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fd fe91 	bl	8001100 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033e4:	1ad2      	subs	r2, r2, r3
 80033e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d903      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 80033f4:	e006      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ea      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8003404:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800340e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003412:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800341a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800341e:	4a05      	ldr	r2, [pc, #20]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003420:	430b      	orrs	r3, r1
 8003422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003426:	e00d      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003428:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800342c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8003430:	e008      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003432:	bf00      	nop
 8003434:	46020c00 	.word	0x46020c00
 8003438:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003440:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003444:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4bb2      	ldr	r3, [pc, #712]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	4ab1      	ldr	r2, [pc, #708]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800345c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
 800346a:	2300      	movs	r3, #0
 800346c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003472:	460b      	mov	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	d042      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800347c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003480:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003484:	d022      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003486:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800348a:	d81b      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800348c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003490:	d011      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003496:	d815      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d019      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800349c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a0:	d110      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034a6:	3308      	adds	r3, #8
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 ff23 	bl	80052f4 <RCCEx_PLL2_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80034b4:	e00d      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b6:	4b98      	ldr	r3, [pc, #608]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	4a97      	ldr	r2, [pc, #604]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80034c2:	e006      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80034d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80034d2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80034da:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80034e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ec:	4a8a      	ldr	r2, [pc, #552]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80034ee:	430b      	orrs	r3, r1
 80034f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80034fa:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800350a:	643b      	str	r3, [r7, #64]	; 0x40
 800350c:	2300      	movs	r3, #0
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003514:	460b      	mov	r3, r1
 8003516:	4313      	orrs	r3, r2
 8003518:	d02d      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800351a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003526:	d00b      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352c:	d804      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	d007      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800353e:	e004      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003540:	bf00      	nop
 8003542:	e002      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003548:	bf00      	nop
    }
    if (ret == HAL_OK)
 800354a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003552:	4b71      	ldr	r3, [pc, #452]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003558:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800355c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	4a6c      	ldr	r2, [pc, #432]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003566:	430b      	orrs	r3, r1
 8003568:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003572:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003582:	63bb      	str	r3, [r7, #56]	; 0x38
 8003584:	2300      	movs	r3, #0
 8003586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003588:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800358c:	460b      	mov	r3, r1
 800358e:	4313      	orrs	r3, r2
 8003590:	d00c      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003592:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003594:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003598:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800359c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a4:	4a5c      	ldr	r2, [pc, #368]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035a6:	430b      	orrs	r3, r1
 80035a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80035ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ba:	2300      	movs	r3, #0
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
 80035be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80035c2:	460b      	mov	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	d019      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80035c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d4:	d105      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	4a4f      	ldr	r2, [pc, #316]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80035ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035f4:	4a48      	ldr	r2, [pc, #288]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80035fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003612:	460b      	mov	r3, r1
 8003614:	4313      	orrs	r3, r2
 8003616:	d00c      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003618:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800362a:	493b      	ldr	r1, [pc, #236]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003648:	460b      	mov	r3, r1
 800364a:	4313      	orrs	r3, r2
 800364c:	d00c      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800364e:	4b32      	ldr	r3, [pc, #200]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800365c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003660:	492d      	ldr	r1, [pc, #180]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800367e:	460b      	mov	r3, r1
 8003680:	4313      	orrs	r3, r2
 8003682:	d00c      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800368a:	f023 0218 	bic.w	r2, r3, #24
 800368e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003696:	4920      	ldr	r1, [pc, #128]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800369e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80036b4:	460b      	mov	r3, r1
 80036b6:	4313      	orrs	r3, r2
 80036b8:	d034      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	4a12      	ldr	r2, [pc, #72]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d2:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80036d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036e0:	d108      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e6:	3308      	adds	r3, #8
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fe03 	bl	80052f4 <RCCEx_PLL2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 80036f4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80036fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800370a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800370e:	4902      	ldr	r1, [pc, #8]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003716:	e005      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8003718:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003720:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800373a:	460b      	mov	r3, r1
 800373c:	4313      	orrs	r3, r2
 800373e:	d03a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800374c:	d00e      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800374e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003752:	d815      	bhi.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d017      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800375c:	d110      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800375e:	4b27      	ldr	r3, [pc, #156]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003768:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800376a:	e00e      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800376c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003770:	3308      	adds	r3, #8
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fdbe 	bl	80052f4 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800377e:	e004      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003786:	e000      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8003788:	bf00      	nop
    }
    if (ret == HAL_OK)
 800378a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003792:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003798:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800379c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a4:	4915      	ldr	r1, [pc, #84]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80037ac:	e003      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80037b2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80037cc:	460b      	mov	r3, r1
 80037ce:	4313      	orrs	r3, r2
 80037d0:	d00c      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80037d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037e4:	4905      	ldr	r1, [pc, #20]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80037ec:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	37d8      	adds	r7, #216	; 0xd8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	46020c00 	.word	0x46020c00

08003800 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003808:	4bad      	ldr	r3, [pc, #692]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003810:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003812:	4bab      	ldr	r3, [pc, #684]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800381c:	4ba8      	ldr	r3, [pc, #672]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3301      	adds	r3, #1
 8003828:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800382a:	4ba5      	ldr	r3, [pc, #660]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003836:	4ba2      	ldr	r3, [pc, #648]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	08db      	lsrs	r3, r3, #3
 800383c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8123 	beq.w	8003aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d062      	beq.n	8003926 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b03      	cmp	r3, #3
 8003864:	f200 8081 	bhi.w	800396a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d024      	beq.n	80038b8 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d17a      	bne.n	800396a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003886:	4b8e      	ldr	r3, [pc, #568]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003896:	ed97 6a02 	vldr	s12, [r7, #8]
 800389a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80038a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038b6:	e08f      	b.n	80039d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80038c4:	4b7e      	ldr	r3, [pc, #504]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	0f1b      	lsrs	r3, r3, #28
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	e006      	b.n	80038de <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80038d0:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80038d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	0f1b      	lsrs	r3, r3, #28
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	4a7b      	ldr	r2, [pc, #492]	; (8003acc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003904:	ed97 6a02 	vldr	s12, [r7, #8]
 8003908:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800390c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003918:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800391c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003920:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003924:	e058      	b.n	80039d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003930:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003938:	4b61      	ldr	r3, [pc, #388]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003948:	ed97 6a02 	vldr	s12, [r7, #8]
 800394c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003950:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003954:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003964:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003968:	e036      	b.n	80039d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800396a:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003976:	4b52      	ldr	r3, [pc, #328]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0f1b      	lsrs	r3, r3, #28
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003982:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	0f1b      	lsrs	r3, r3, #28
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	4a4e      	ldr	r2, [pc, #312]	; (8003acc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ba:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039d6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80039d8:	4b39      	ldr	r3, [pc, #228]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d017      	beq.n	8003a14 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039e4:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	0a5b      	lsrs	r3, r3, #9
 80039ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80039f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039fa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a0a:	ee17 2a90 	vmov	r2, s15
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e002      	b.n	8003a1a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003a1a:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a26:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4c:	ee17 2a90 	vmov	r2, s15
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e002      	b.n	8003a5c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d017      	beq.n	8003a98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	0e1b      	lsrs	r3, r3, #24
 8003a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a8e:	ee17 2a90 	vmov	r2, s15
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003a96:	e00c      	b.n	8003ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	bf00      	nop
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	46020c00 	.word	0x46020c00
 8003ac4:	4b742400 	.word	0x4b742400
 8003ac8:	46000000 	.word	0x46000000
 8003acc:	080078e4 	.word	0x080078e4

08003ad0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	; 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003ad8:	4bad      	ldr	r3, [pc, #692]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003ae2:	4bab      	ldr	r3, [pc, #684]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003aec:	4ba8      	ldr	r3, [pc, #672]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	3301      	adds	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003afa:	4ba5      	ldr	r3, [pc, #660]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003b06:	4ba2      	ldr	r3, [pc, #648]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8123 	beq.w	8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d062      	beq.n	8003bf6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	f200 8081 	bhi.w	8003c3a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d024      	beq.n	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d17a      	bne.n	8003c3a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b8e      	ldr	r3, [pc, #568]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b6a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b86:	e08f      	b.n	8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003b88:	4b81      	ldr	r3, [pc, #516]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003b94:	4b7e      	ldr	r3, [pc, #504]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	0f1b      	lsrs	r3, r3, #28
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	e006      	b.n	8003bae <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003ba0:	4b7b      	ldr	r3, [pc, #492]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	0f1b      	lsrs	r3, r3, #28
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	4a7b      	ldr	r2, [pc, #492]	; (8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bd8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf4:	e058      	b.n	8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c00:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c08:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c18:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c38:	e036      	b.n	8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003c3a:	4b55      	ldr	r3, [pc, #340]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003c46:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0f1b      	lsrs	r3, r3, #28
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003c52:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	4a4e      	ldr	r2, [pc, #312]	; (8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c8a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ca6:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003ca8:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d017      	beq.n	8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003cb4:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	0a5b      	lsrs	r3, r3, #9
 8003cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cda:	ee17 2a90 	vmov	r2, s15
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e002      	b.n	8003cea <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d017      	beq.n	8003d26 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d00:	ee07 3a90 	vmov	s15, r3
 8003d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d1c:	ee17 2a90 	vmov	r2, s15
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	0e1b      	lsrs	r3, r3, #24
 8003d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5e:	ee17 2a90 	vmov	r2, s15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d66:	e00c      	b.n	8003d82 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
}
 8003d6e:	e008      	b.n	8003d82 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
}
 8003d82:	bf00      	nop
 8003d84:	3724      	adds	r7, #36	; 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	46020c00 	.word	0x46020c00
 8003d94:	4b742400 	.word	0x4b742400
 8003d98:	46000000 	.word	0x46000000
 8003d9c:	080078e4 	.word	0x080078e4

08003da0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003da8:	4bad      	ldr	r3, [pc, #692]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003db2:	4bab      	ldr	r3, [pc, #684]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003dbc:	4ba8      	ldr	r3, [pc, #672]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003dca:	4ba5      	ldr	r3, [pc, #660]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003dd6:	4ba2      	ldr	r3, [pc, #648]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8123 	beq.w	8004040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d062      	beq.n	8003ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f200 8081 	bhi.w	8003f0a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d024      	beq.n	8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d17a      	bne.n	8003f0a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004064 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e26:	4b8e      	ldr	r3, [pc, #568]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e3a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003e56:	e08f      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e58:	4b81      	ldr	r3, [pc, #516]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8003e64:	4b7e      	ldr	r3, [pc, #504]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	0f1b      	lsrs	r3, r3, #28
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	e006      	b.n	8003e7e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8003e70:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	0f1b      	lsrs	r3, r3, #28
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	4a7b      	ldr	r2, [pc, #492]	; (800406c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e84:	ee07 3a90 	vmov	s15, r3
 8003e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	ee07 3a90 	vmov	s15, r3
 8003ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec4:	e058      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004064 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed8:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ee8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eec:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f08:	e036      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f0a:	4b55      	ldr	r3, [pc, #340]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8003f16:	4b52      	ldr	r3, [pc, #328]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0f1b      	lsrs	r3, r3, #28
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	e006      	b.n	8003f30 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	0f1b      	lsrs	r3, r3, #28
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4a4e      	ldr	r2, [pc, #312]	; (800406c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f5a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f76:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003f78:	4b39      	ldr	r3, [pc, #228]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	0a5b      	lsrs	r3, r3, #9
 8003f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003faa:	ee17 2a90 	vmov	r2, s15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e002      	b.n	8003fba <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d017      	beq.n	8003ff6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fec:	ee17 2a90 	vmov	r2, s15
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	0e1b      	lsrs	r3, r3, #24
 800400e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800401a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800401e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004022:	edd7 6a07 	vldr	s13, [r7, #28]
 8004026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800402a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800402e:	ee17 2a90 	vmov	r2, s15
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004036:	e00c      	b.n	8004052 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	e008      	b.n	8004052 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
}
 8004052:	bf00      	nop
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	46020c00 	.word	0x46020c00
 8004064:	4b742400 	.word	0x4b742400
 8004068:	46000000 	.word	0x46000000
 800406c:	080078e4 	.word	0x080078e4

08004070 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08e      	sub	sp, #56	; 0x38
 8004074:	af00      	add	r7, sp, #0
 8004076:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800407a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800407e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004082:	430b      	orrs	r3, r1
 8004084:	d145      	bne.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004086:	4b9b      	ldr	r3, [pc, #620]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800408c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004090:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004092:	4b98      	ldr	r3, [pc, #608]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d108      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a6:	d104      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80040a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
 80040ae:	f001 b912 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80040b2:	4b90      	ldr	r3, [pc, #576]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80040b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c0:	d114      	bne.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c8:	d110      	bne.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80040ca:	4b8a      	ldr	r3, [pc, #552]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80040cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d8:	d103      	bne.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80040da:	23fa      	movs	r3, #250	; 0xfa
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80040de:	f001 b8fa 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80040e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80040e8:	f001 b8f5 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80040ec:	4b81      	ldr	r3, [pc, #516]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f8:	d107      	bne.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004100:	d103      	bne.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004102:	4b7d      	ldr	r3, [pc, #500]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
 8004106:	f001 b8e6 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
 800410e:	f001 b8e2 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004116:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800411a:	430b      	orrs	r3, r1
 800411c:	d151      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800411e:	4b75      	ldr	r3, [pc, #468]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004120:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004124:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004128:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d035      	beq.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d841      	bhi.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2b60      	cmp	r3, #96	; 0x60
 800413a:	d02a      	beq.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	2b60      	cmp	r3, #96	; 0x60
 8004140:	d83b      	bhi.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d009      	beq.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d835      	bhi.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2b20      	cmp	r3, #32
 8004158:	d012      	beq.n	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800415a:	e02e      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800415c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fb4d 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800416a:	f001 b8b4 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800416e:	f107 0318 	add.w	r3, r7, #24
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fcac 	bl	8003ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800417c:	f001 b8ab 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004180:	f107 030c 	add.w	r3, r7, #12
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fe0b 	bl	8003da0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800418e:	f001 b8a2 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004192:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004198:	f001 b89d 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800419c:	4b55      	ldr	r3, [pc, #340]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d103      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80041aa:	4b54      	ldr	r3, [pc, #336]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80041ae:	f001 b892 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041b6:	f001 b88e 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041be:	f001 b88a 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80041c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80041ca:	430b      	orrs	r3, r1
 80041cc:	d126      	bne.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80041ce:	4b49      	ldr	r3, [pc, #292]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80041da:	4b46      	ldr	r3, [pc, #280]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d106      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80041ee:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
 80041f2:	f001 b870 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80041f6:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d107      	bne.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420a:	d103      	bne.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 800420c:	4b3c      	ldr	r3, [pc, #240]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
 8004210:	f001 b861 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
 8004218:	f001 b85d 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800421c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004220:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004224:	430b      	orrs	r3, r1
 8004226:	d171      	bne.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004228:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800422a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800422e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004232:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800423a:	d034      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004242:	d853      	bhi.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424a:	d00b      	beq.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004252:	d84b      	bhi.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004260:	d009      	beq.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004262:	e043      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fac9 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004272:	f001 b830 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004276:	f107 0318 	add.w	r3, r7, #24
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fc28 	bl	8003ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004284:	f001 b827 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004294:	d103      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800429a:	f001 b81c 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042a2:	f001 b818 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80042a6:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d118      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0e1b      	lsrs	r3, r3, #24
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	e006      	b.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80042cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	0e1b      	lsrs	r3, r3, #24
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80042da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80042e0:	f000 bff9 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e8:	f000 bff5 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042f0:	f000 bff1 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80042f4:	46020c00 	.word	0x46020c00
 80042f8:	0007a120 	.word	0x0007a120
 80042fc:	00f42400 	.word	0x00f42400
 8004300:	007a1200 	.word	0x007a1200
 8004304:	02dc6c00 	.word	0x02dc6c00
 8004308:	080078e4 	.word	0x080078e4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800430c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004310:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004314:	430b      	orrs	r3, r1
 8004316:	d17f      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004318:	4ba8      	ldr	r3, [pc, #672]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800431a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2b00      	cmp	r3, #0
 8004328:	d165      	bne.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800432a:	4ba4      	ldr	r3, [pc, #656]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800432c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004330:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004334:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800433c:	d034      	beq.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004344:	d853      	bhi.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800434c:	d00b      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004354:	d84b      	bhi.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2b00      	cmp	r3, #0
 800435a:	d016      	beq.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004362:	d009      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004364:	e043      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fa48 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004374:	f000 bfaf 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004378:	f107 0318 	add.w	r3, r7, #24
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fba7 	bl	8003ad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004386:	f000 bfa6 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800438a:	4b8c      	ldr	r3, [pc, #560]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004396:	d103      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8004398:	4b89      	ldr	r3, [pc, #548]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800439c:	f000 bf9b 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043a4:	f000 bf97 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80043a8:	4b84      	ldr	r3, [pc, #528]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d118      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80043b4:	4b81      	ldr	r3, [pc, #516]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80043c0:	4b7e      	ldr	r3, [pc, #504]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	0e1b      	lsrs	r3, r3, #24
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	e006      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80043cc:	4b7b      	ldr	r3, [pc, #492]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80043ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	0e1b      	lsrs	r3, r3, #24
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	4a7a      	ldr	r2, [pc, #488]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80043e2:	f000 bf78 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043ea:	f000 bf74 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043f2:	f000 bf70 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fc:	d108      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff f9fc 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
 800440c:	f000 bf63 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
 8004414:	f000 bf5f 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441c:	1e51      	subs	r1, r2, #1
 800441e:	430b      	orrs	r3, r1
 8004420:	d136      	bne.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004422:	4b66      	ldr	r3, [pc, #408]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004434:	f7fe fbf8 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 8004438:	6378      	str	r0, [r7, #52]	; 0x34
 800443a:	f000 bf4c 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d104      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004444:	f7fe faba 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004448:	6378      	str	r0, [r7, #52]	; 0x34
 800444a:	f000 bf44 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800444e:	4b5b      	ldr	r3, [pc, #364]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445a:	d106      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	2b02      	cmp	r3, #2
 8004460:	d103      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8004462:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	f000 bf36 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800446a:	4b54      	ldr	r3, [pc, #336]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800446c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d107      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	2b03      	cmp	r3, #3
 800447c:	d104      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	637b      	str	r3, [r7, #52]	; 0x34
 8004484:	f000 bf27 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
 800448c:	f000 bf23 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004494:	1f11      	subs	r1, r2, #4
 8004496:	430b      	orrs	r3, r1
 8004498:	d136      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800449a:	4b48      	ldr	r3, [pc, #288]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800449c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe fba8 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80044b0:	6378      	str	r0, [r7, #52]	; 0x34
 80044b2:	f000 bf10 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d104      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044bc:	f7fe fa7e 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 80044c0:	6378      	str	r0, [r7, #52]	; 0x34
 80044c2:	f000 bf08 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80044c6:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d106      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d103      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80044da:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
 80044de:	f000 befa 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80044e2:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80044e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d107      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2b30      	cmp	r3, #48	; 0x30
 80044f4:	d104      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 80044f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
 80044fc:	f000 beeb 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
 8004504:	f000 bee7 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800450c:	f1a2 0108 	sub.w	r1, r2, #8
 8004510:	430b      	orrs	r3, r1
 8004512:	d136      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800451a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800451e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004526:	f7fe fb6b 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 800452a:	6378      	str	r0, [r7, #52]	; 0x34
 800452c:	f000 bed3 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d104      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004536:	f7fe fa41 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800453a:	6378      	str	r0, [r7, #52]	; 0x34
 800453c:	f000 becb 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454c:	d106      	bne.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2b80      	cmp	r3, #128	; 0x80
 8004552:	d103      	bne.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8004554:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
 8004558:	f000 bebd 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800455e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d107      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	2bc0      	cmp	r3, #192	; 0xc0
 800456e:	d104      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8004570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	f000 beae 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
 800457e:	f000 beaa 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004586:	f1a2 0110 	sub.w	r1, r2, #16
 800458a:	430b      	orrs	r3, r1
 800458c:	d141      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80045a0:	f7fe fb2e 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 80045a4:	6378      	str	r0, [r7, #52]	; 0x34
 80045a6:	f000 be96 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b0:	d10c      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045b2:	f7fe fa03 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 80045b6:	6378      	str	r0, [r7, #52]	; 0x34
 80045b8:	f000 be8d 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80045bc:	46020c00 	.word	0x46020c00
 80045c0:	02dc6c00 	.word	0x02dc6c00
 80045c4:	080078e4 	.word	0x080078e4
 80045c8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80045cc:	4baa      	ldr	r3, [pc, #680]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d8:	d107      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e0:	d103      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80045e2:	4ba6      	ldr	r3, [pc, #664]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	f000 be76 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80045ea:	4ba3      	ldr	r3, [pc, #652]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80045ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d108      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fe:	d104      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8004600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
 8004606:	f000 be66 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
 800460e:	f000 be62 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004616:	f1a2 0120 	sub.w	r1, r2, #32
 800461a:	430b      	orrs	r3, r1
 800461c:	d158      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800461e:	4b96      	ldr	r3, [pc, #600]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004630:	f7fe fb0e 	bl	8002c50 <HAL_RCC_GetPCLK3Freq>
 8004634:	6378      	str	r0, [r7, #52]	; 0x34
 8004636:	f000 be4e 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	2b01      	cmp	r3, #1
 800463e:	d104      	bne.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004640:	f7fe f9bc 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004644:	6378      	str	r0, [r7, #52]	; 0x34
 8004646:	f000 be46 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800464a:	4b8b      	ldr	r3, [pc, #556]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004656:	d106      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	2b02      	cmp	r3, #2
 800465c:	d103      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800465e:	4b87      	ldr	r3, [pc, #540]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
 8004662:	f000 be38 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004666:	4b84      	ldr	r3, [pc, #528]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b02      	cmp	r3, #2
 8004672:	d107      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	2b03      	cmp	r3, #3
 8004678:	d104      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
 8004680:	f000 be29 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004684:	4b7c      	ldr	r3, [pc, #496]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d11b      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	2b04      	cmp	r3, #4
 8004694:	d118      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004696:	4b78      	ldr	r3, [pc, #480]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80046a2:	4b75      	ldr	r3, [pc, #468]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0e1b      	lsrs	r3, r3, #24
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80046ae:	4b72      	ldr	r3, [pc, #456]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80046b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	0e1b      	lsrs	r3, r3, #24
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	4a70      	ldr	r2, [pc, #448]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80046be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
 80046c4:	f000 be07 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
 80046cc:	f000 be03 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80046d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80046d8:	430b      	orrs	r3, r1
 80046da:	d16c      	bne.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80046dc:	4b66      	ldr	r3, [pc, #408]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80046de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046e2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ee:	d104      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046f0:	f7fe f964 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 80046f4:	6378      	str	r0, [r7, #52]	; 0x34
 80046f6:	f000 bdee 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004700:	d108      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004702:	f107 0318 	add.w	r3, r7, #24
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff f9e2 	bl	8003ad0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
 8004710:	f000 bde1 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800471a:	f7fe fa57 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 800471e:	6378      	str	r0, [r7, #52]	; 0x34
 8004720:	f000 bdd9 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800472a:	d122      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800472c:	4b52      	ldr	r3, [pc, #328]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b20      	cmp	r3, #32
 8004736:	d118      	bne.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004738:	4b4f      	ldr	r3, [pc, #316]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004744:	4b4c      	ldr	r3, [pc, #304]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	0e1b      	lsrs	r3, r3, #24
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	e006      	b.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004750:	4b49      	ldr	r3, [pc, #292]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	0e1b      	lsrs	r3, r3, #24
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	4a48      	ldr	r2, [pc, #288]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	f000 bdb6 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	f000 bdb2 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004772:	4b41      	ldr	r3, [pc, #260]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477e:	d107      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004786:	d103      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8004788:	4b3c      	ldr	r3, [pc, #240]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
 800478c:	f000 bda3 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004790:	4b39      	ldr	r3, [pc, #228]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479c:	d107      	bne.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a4:	d103      	bne.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80047a6:	4b35      	ldr	r3, [pc, #212]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
 80047aa:	f000 bd94 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
 80047b2:	f000 bd90 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80047b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ba:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80047be:	430b      	orrs	r3, r1
 80047c0:	d160      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80047c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d84c      	bhi.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004815 	.word	0x08004815
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	08004803 	.word	0x08004803
 80047e8:	0800481f 	.word	0x0800481f
 80047ec:	08004829 	.word	0x08004829
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f803 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047fe:	f000 bd6a 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004802:	f107 030c 	add.w	r3, r7, #12
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff faca 	bl	8003da0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004810:	f000 bd61 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004814:	f7fe f9da 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8004818:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800481a:	f000 bd5c 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800481e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004824:	f000 bd57 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b20      	cmp	r3, #32
 8004832:	d118      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004834:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	e006      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800484e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	0e1b      	lsrs	r3, r3, #24
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800485c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004862:	f000 bd38 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800486a:	f000 bd34 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004872:	f000 bd30 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004876:	bf00      	nop
 8004878:	46020c00 	.word	0x46020c00
 800487c:	00f42400 	.word	0x00f42400
 8004880:	080078e4 	.word	0x080078e4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004888:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800488c:	430b      	orrs	r3, r1
 800488e:	d167      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004890:	4ba0      	ldr	r3, [pc, #640]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004896:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800489a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048a2:	d036      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048aa:	d855      	bhi.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048b2:	d029      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048ba:	d84d      	bhi.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048c2:	d013      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ca:	d845      	bhi.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d015      	beq.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d8:	d13e      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe ff8e 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048e8:	f000 bcf5 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fa55 	bl	8003da0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048fa:	f000 bcec 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80048fe:	f7fe f965 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8004902:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004904:	f000 bce7 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004908:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800490e:	f000 bce2 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004912:	4b80      	ldr	r3, [pc, #512]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d118      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800491e:	4b7d      	ldr	r3, [pc, #500]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800492a:	4b7a      	ldr	r3, [pc, #488]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0e1b      	lsrs	r3, r3, #24
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	e006      	b.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8004936:	4b77      	ldr	r3, [pc, #476]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	0e1b      	lsrs	r3, r3, #24
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	4a74      	ldr	r2, [pc, #464]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800494c:	f000 bcc3 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004954:	f000 bcbf 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800495c:	f000 bcbb 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004964:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004968:	430b      	orrs	r3, r1
 800496a:	d14c      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800496c:	4b69      	ldr	r3, [pc, #420]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004972:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004976:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800497e:	f7fe f93f 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8004982:	6378      	str	r0, [r7, #52]	; 0x34
 8004984:	f000 bca7 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498e:	d104      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004990:	f7fe f814 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004994:	6378      	str	r0, [r7, #52]	; 0x34
 8004996:	f000 bc9e 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800499a:	4b5e      	ldr	r3, [pc, #376]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a6:	d107      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ae:	d103      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80049b0:	4b5a      	ldr	r3, [pc, #360]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
 80049b4:	f000 bc8f 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80049b8:	4b56      	ldr	r3, [pc, #344]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d11c      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ca:	d118      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049cc:	4b51      	ldr	r3, [pc, #324]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80049d8:	4b4e      	ldr	r3, [pc, #312]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	0e1b      	lsrs	r3, r3, #24
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	e006      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80049e4:	4b4b      	ldr	r3, [pc, #300]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80049e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	0e1b      	lsrs	r3, r3, #24
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	4a49      	ldr	r2, [pc, #292]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
 80049fa:	f000 bc6c 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
 8004a02:	f000 bc68 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a0a:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	d14c      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004a12:	4b40      	ldr	r3, [pc, #256]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a1c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a24:	f7fe f8ec 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8004a28:	6378      	str	r0, [r7, #52]	; 0x34
 8004a2a:	f000 bc54 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a34:	d104      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fd ffc1 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8004a3c:	f000 bc4b 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004a40:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a54:	d103      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5a:	f000 bc3c 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a70:	d118      	bne.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004a7e:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0e1b      	lsrs	r3, r3, #24
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	e006      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	0e1b      	lsrs	r3, r3, #24
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa0:	f000 bc19 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa8:	f000 bc15 	b.w	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	d157      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ab8:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004abe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac8:	d02a      	beq.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	2bc0      	cmp	r3, #192	; 0xc0
 8004ace:	d848      	bhi.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d00d      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d842      	bhi.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d011      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004ae8:	e03b      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004aea:	f7fe f8b1 	bl	8002c50 <HAL_RCC_GetPCLK3Freq>
 8004aee:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004af0:	e3f1      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d102      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b04:	e3e7      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b0a:	e3e4      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004b0c:	f7fd ff56 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004b10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004b12:	e3e0      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004b14:	46020c00 	.word	0x46020c00
 8004b18:	080078e4 	.word	0x080078e4
 8004b1c:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b20:	4ba3      	ldr	r3, [pc, #652]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d117      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b2c:	4ba0      	ldr	r3, [pc, #640]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8004b38:	4b9d      	ldr	r3, [pc, #628]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	0e1b      	lsrs	r3, r3, #24
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	e006      	b.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8004b44:	4b9a      	ldr	r3, [pc, #616]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	4a98      	ldr	r2, [pc, #608]	; (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b5a:	e3bc      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b60:	e3b9      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b66:	e3b6      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b6c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004b70:	430b      	orrs	r3, r1
 8004b72:	d147      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004b74:	4b8e      	ldr	r3, [pc, #568]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fe f83b 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	6378      	str	r0, [r7, #52]	; 0x34
 8004b8c:	e3a3      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b94:	d103      	bne.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fd ff11 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004b9a:	6378      	str	r0, [r7, #52]	; 0x34
 8004b9c:	e39b      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004b9e:	4b84      	ldr	r3, [pc, #528]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004baa:	d106      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb2:	d102      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8004bb4:	4b80      	ldr	r3, [pc, #512]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb8:	e38d      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004bba:	4b7d      	ldr	r3, [pc, #500]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d11b      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bcc:	d117      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bce:	4b78      	ldr	r3, [pc, #480]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8004bda:	4b75      	ldr	r3, [pc, #468]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0e1b      	lsrs	r3, r3, #24
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	0e1b      	lsrs	r3, r3, #24
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	4a6f      	ldr	r2, [pc, #444]	; (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	e36b      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	e368      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c08:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	d164      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004c10:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d120      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c22:	4b63      	ldr	r3, [pc, #396]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d117      	bne.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c2e:	4b60      	ldr	r3, [pc, #384]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0e1b      	lsrs	r3, r3, #24
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	e006      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004c46:	4b5a      	ldr	r3, [pc, #360]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c4c:	041b      	lsls	r3, r3, #16
 8004c4e:	0e1b      	lsrs	r3, r3, #24
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	4a57      	ldr	r2, [pc, #348]	; (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5c:	e33b      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
 8004c62:	e338      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004c64:	4b52      	ldr	r3, [pc, #328]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c72:	d112      	bne.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d10e      	bne.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c7c:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c8a:	d102      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8004c8c:	23fa      	movs	r3, #250	; 0xfa
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c90:	e321      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004c92:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c96:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c98:	e31d      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004c9a:	4b45      	ldr	r3, [pc, #276]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb4:	e30f      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cca:	d103      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8004ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd2:	e300      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	e2fd      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cde:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	d16a      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ce6:	4b32      	ldr	r3, [pc, #200]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d120      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d117      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004d10:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	0e1b      	lsrs	r3, r3, #24
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	e006      	b.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8004d1c:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d22:	041b      	lsls	r3, r3, #16
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
 8004d32:	e2d0      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
 8004d38:	e2cd      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d48:	d112      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d50:	d10e      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d52:	4b17      	ldr	r3, [pc, #92]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d60:	d102      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8004d62:	23fa      	movs	r3, #250	; 0xfa
 8004d64:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d66:	e2b6      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d6e:	e2b2      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d106      	bne.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d84:	d102      	bne.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8a:	e2a4      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d107      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da0:	d103      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
 8004da8:	e295      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	e292      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004db0:	46020c00 	.word	0x46020c00
 8004db4:	080078e4 	.word	0x080078e4
 8004db8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	d147      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004dc8:	4b9a      	ldr	r3, [pc, #616]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004dda:	f7fd ff11 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8004dde:	6378      	str	r0, [r7, #52]	; 0x34
 8004de0:	e279      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004de2:	4b94      	ldr	r3, [pc, #592]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df0:	d112      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004df8:	d10e      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dfa:	4b8e      	ldr	r3, [pc, #568]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e08:	d102      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8004e0a:	23fa      	movs	r3, #250	; 0xfa
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e0e:	e262      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004e10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004e16:	e25e      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004e18:	4b86      	ldr	r3, [pc, #536]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d106      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8004e2e:	4b82      	ldr	r3, [pc, #520]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
 8004e32:	e250      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004e34:	4b7f      	ldr	r3, [pc, #508]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d107      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e48:	d103      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e50:	e241      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
 8004e56:	e23e      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004e60:	430b      	orrs	r3, r1
 8004e62:	d12d      	bne.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004e64:	4b73      	ldr	r3, [pc, #460]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e6a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004e70:	4b70      	ldr	r3, [pc, #448]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8004e84:	4b6c      	ldr	r3, [pc, #432]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
 8004e88:	e225      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fcb2 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea0:	e219      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ea8:	d107      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eaa:	f107 0318 	add.w	r3, r7, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fe0e 	bl	8003ad0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb8:	e20d      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ebe:	e20a      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ec4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	d156      	bne.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004ecc:	4b59      	ldr	r3, [pc, #356]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ed2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ede:	d028      	beq.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ee6:	d845      	bhi.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eee:	d013      	beq.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ef6:	d83d      	bhi.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f04:	d004      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8004f06:	e035      	b.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7fd fe8e 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004f0e:	e1e2      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004f10:	f7fd fd54 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004f14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004f16:	e1de      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f18:	4b46      	ldr	r3, [pc, #280]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f24:	d102      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8004f26:	4b44      	ldr	r3, [pc, #272]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f2a:	e1d4      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f30:	e1d1      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f32:	4b40      	ldr	r3, [pc, #256]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d117      	bne.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f3e:	4b3d      	ldr	r3, [pc, #244]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8004f4a:	4b3a      	ldr	r3, [pc, #232]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0e1b      	lsrs	r3, r3, #24
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	0e1b      	lsrs	r3, r3, #24
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	4a35      	ldr	r2, [pc, #212]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8004f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f6c:	e1b3      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f72:	e1b0      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f78:	e1ad      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7e:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8004f82:	430b      	orrs	r3, r1
 8004f84:	d15c      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004f86:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f98:	d028      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fa0:	d845      	bhi.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fa8:	d013      	beq.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb0:	d83d      	bhi.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d004      	beq.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8004fc0:	e035      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004fc2:	f7fd fe1d 	bl	8002c00 <HAL_RCC_GetPCLK1Freq>
 8004fc6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fc8:	e185      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004fca:	f7fd fcf7 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8004fce:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fd0:	e181      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fd2:	4b18      	ldr	r3, [pc, #96]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fde:	d102      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8004fe0:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fe4:	e177      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fea:	e174      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fec:	4b11      	ldr	r3, [pc, #68]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d117      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	e006      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005010:	4b08      	ldr	r3, [pc, #32]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005026:	e156      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800502c:	e153      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005032:	e150      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005034:	46020c00 	.word	0x46020c00
 8005038:	00f42400 	.word	0x00f42400
 800503c:	080078e4 	.word	0x080078e4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005044:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005048:	430b      	orrs	r3, r1
 800504a:	d176      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800504c:	4ba4      	ldr	r3, [pc, #656]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800504e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005052:	f003 0318 	and.w	r3, r3, #24
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2b18      	cmp	r3, #24
 800505c:	d86a      	bhi.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	080050c9 	.word	0x080050c9
 8005068:	08005135 	.word	0x08005135
 800506c:	08005135 	.word	0x08005135
 8005070:	08005135 	.word	0x08005135
 8005074:	08005135 	.word	0x08005135
 8005078:	08005135 	.word	0x08005135
 800507c:	08005135 	.word	0x08005135
 8005080:	08005135 	.word	0x08005135
 8005084:	080050d1 	.word	0x080050d1
 8005088:	08005135 	.word	0x08005135
 800508c:	08005135 	.word	0x08005135
 8005090:	08005135 	.word	0x08005135
 8005094:	08005135 	.word	0x08005135
 8005098:	08005135 	.word	0x08005135
 800509c:	08005135 	.word	0x08005135
 80050a0:	08005135 	.word	0x08005135
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	08005135 	.word	0x08005135
 80050ac:	08005135 	.word	0x08005135
 80050b0:	08005135 	.word	0x08005135
 80050b4:	08005135 	.word	0x08005135
 80050b8:	08005135 	.word	0x08005135
 80050bc:	08005135 	.word	0x08005135
 80050c0:	08005135 	.word	0x08005135
 80050c4:	080050f3 	.word	0x080050f3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80050c8:	f7fd fdc2 	bl	8002c50 <HAL_RCC_GetPCLK3Freq>
 80050cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80050ce:	e102      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80050d0:	f7fd fc74 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 80050d4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80050d6:	e0fe      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050d8:	4b81      	ldr	r3, [pc, #516]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d102      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 80050e6:	4b7f      	ldr	r3, [pc, #508]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050ea:	e0f4      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050f0:	e0f1      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050f2:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d117      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050fe:	4b78      	ldr	r3, [pc, #480]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800510a:	4b75      	ldr	r3, [pc, #468]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	e006      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005116:	4b72      	ldr	r3, [pc, #456]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	0e1b      	lsrs	r3, r3, #24
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	4a70      	ldr	r2, [pc, #448]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800512c:	e0d3      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005132:	e0d0      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005138:	e0cd      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800513a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005142:	430b      	orrs	r3, r1
 8005144:	d155      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005146:	4b66      	ldr	r3, [pc, #408]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800514c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005150:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005158:	d013      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005160:	d844      	bhi.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005168:	d013      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005170:	d83c      	bhi.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2b00      	cmp	r3, #0
 8005176:	d014      	beq.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517e:	d014      	beq.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005180:	e034      	b.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005182:	f107 0318 	add.w	r3, r7, #24
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe fca2 	bl	8003ad0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005190:	e0a1      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe fb32 	bl	8003800 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051a0:	e099      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80051a2:	f7fd fc0b 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 80051a6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80051a8:	e095      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051aa:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d117      	bne.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 80051c2:	4b47      	ldr	r3, [pc, #284]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	0e1b      	lsrs	r3, r3, #24
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	e006      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 80051ce:	4b44      	ldr	r3, [pc, #272]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80051d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	0e1b      	lsrs	r3, r3, #24
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	4a42      	ldr	r2, [pc, #264]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051e4:	e077      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051ea:	e074      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051f0:	e071      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80051f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80051fa:	430b      	orrs	r3, r1
 80051fc:	d131      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80051fe:	4b38      	ldr	r3, [pc, #224]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005208:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800520a:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800520c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d106      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
 8005224:	e057      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005226:	4b2e      	ldr	r3, [pc, #184]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800522c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005234:	d112      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	d10e      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800523e:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800524c:	d102      	bne.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 800524e:	23fa      	movs	r3, #250	; 0xfa
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005252:	e040      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005254:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800525a:	e03c      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
 8005260:	e039      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005266:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800526a:	430b      	orrs	r3, r1
 800526c:	d131      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005270:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005274:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005278:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800527a:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	d105      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
 8005292:	e020      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005294:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a0:	d106      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d102      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
 80052ae:	e012      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052bc:	d106      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c4:	d102      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ca:	e004      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
 80052d0:	e001      	b.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3738      	adds	r7, #56	; 0x38
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	46020c00 	.word	0x46020c00
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	080078e4 	.word	0x080078e4
 80052ec:	02dc6c00 	.word	0x02dc6c00
 80052f0:	016e3600 	.word	0x016e3600

080052f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80052fc:	4b47      	ldr	r3, [pc, #284]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a46      	ldr	r2, [pc, #280]	; (800541c <RCCEx_PLL2_Config+0x128>)
 8005302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005306:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005308:	f7fb fefa 	bl	8001100 <HAL_GetTick>
 800530c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800530e:	e008      	b.n	8005322 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005310:	f7fb fef6 	bl	8001100 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e077      	b.n	8005412 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005322:	4b3e      	ldr	r3, [pc, #248]	; (800541c <RCCEx_PLL2_Config+0x128>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800532e:	4b3b      	ldr	r3, [pc, #236]	; (800541c <RCCEx_PLL2_Config+0x128>)
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6852      	ldr	r2, [r2, #4]
 8005342:	3a01      	subs	r2, #1
 8005344:	0212      	lsls	r2, r2, #8
 8005346:	430a      	orrs	r2, r1
 8005348:	4934      	ldr	r1, [pc, #208]	; (800541c <RCCEx_PLL2_Config+0x128>)
 800534a:	4313      	orrs	r3, r2
 800534c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800534e:	4b33      	ldr	r3, [pc, #204]	; (800541c <RCCEx_PLL2_Config+0x128>)
 8005350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005352:	4b33      	ldr	r3, [pc, #204]	; (8005420 <RCCEx_PLL2_Config+0x12c>)
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6892      	ldr	r2, [r2, #8]
 800535a:	3a01      	subs	r2, #1
 800535c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68d2      	ldr	r2, [r2, #12]
 8005364:	3a01      	subs	r2, #1
 8005366:	0252      	lsls	r2, r2, #9
 8005368:	b292      	uxth	r2, r2
 800536a:	4311      	orrs	r1, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6912      	ldr	r2, [r2, #16]
 8005370:	3a01      	subs	r2, #1
 8005372:	0412      	lsls	r2, r2, #16
 8005374:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6952      	ldr	r2, [r2, #20]
 800537e:	3a01      	subs	r2, #1
 8005380:	0612      	lsls	r2, r2, #24
 8005382:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005386:	430a      	orrs	r2, r1
 8005388:	4924      	ldr	r1, [pc, #144]	; (800541c <RCCEx_PLL2_Config+0x128>)
 800538a:	4313      	orrs	r3, r2
 800538c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800538e:	4b23      	ldr	r3, [pc, #140]	; (800541c <RCCEx_PLL2_Config+0x128>)
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	f023 020c 	bic.w	r2, r3, #12
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	4920      	ldr	r1, [pc, #128]	; (800541c <RCCEx_PLL2_Config+0x128>)
 800539c:	4313      	orrs	r3, r2
 800539e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80053a0:	4b1e      	ldr	r3, [pc, #120]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	491c      	ldr	r1, [pc, #112]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053b4:	f023 0310 	bic.w	r3, r3, #16
 80053b8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	69d2      	ldr	r2, [r2, #28]
 80053ca:	00d2      	lsls	r2, r2, #3
 80053cc:	4913      	ldr	r1, [pc, #76]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	4a11      	ldr	r2, [pc, #68]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053d8:	f043 0310 	orr.w	r3, r3, #16
 80053dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80053de:	4b0f      	ldr	r3, [pc, #60]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a0e      	ldr	r2, [pc, #56]	; (800541c <RCCEx_PLL2_Config+0x128>)
 80053e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ea:	f7fb fe89 	bl	8001100 <HAL_GetTick>
 80053ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053f0:	e008      	b.n	8005404 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053f2:	f7fb fe85 	bl	8001100 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e006      	b.n	8005412 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <RCCEx_PLL2_Config+0x128>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f0      	beq.n	80053f2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0

}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	46020c00 	.word	0x46020c00
 8005420:	80800000 	.word	0x80800000

08005424 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800542c:	4b47      	ldr	r3, [pc, #284]	; (800554c <RCCEx_PLL3_Config+0x128>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a46      	ldr	r2, [pc, #280]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005436:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005438:	f7fb fe62 	bl	8001100 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800543e:	e008      	b.n	8005452 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005440:	f7fb fe5e 	bl	8001100 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e077      	b.n	8005542 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005452:	4b3e      	ldr	r3, [pc, #248]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800545e:	4b3b      	ldr	r3, [pc, #236]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6852      	ldr	r2, [r2, #4]
 8005472:	3a01      	subs	r2, #1
 8005474:	0212      	lsls	r2, r2, #8
 8005476:	430a      	orrs	r2, r1
 8005478:	4934      	ldr	r1, [pc, #208]	; (800554c <RCCEx_PLL3_Config+0x128>)
 800547a:	4313      	orrs	r3, r2
 800547c:	630b      	str	r3, [r1, #48]	; 0x30
 800547e:	4b33      	ldr	r3, [pc, #204]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005482:	4b33      	ldr	r3, [pc, #204]	; (8005550 <RCCEx_PLL3_Config+0x12c>)
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	3a01      	subs	r2, #1
 800548c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68d2      	ldr	r2, [r2, #12]
 8005494:	3a01      	subs	r2, #1
 8005496:	0252      	lsls	r2, r2, #9
 8005498:	b292      	uxth	r2, r2
 800549a:	4311      	orrs	r1, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6912      	ldr	r2, [r2, #16]
 80054a0:	3a01      	subs	r2, #1
 80054a2:	0412      	lsls	r2, r2, #16
 80054a4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80054a8:	4311      	orrs	r1, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6952      	ldr	r2, [r2, #20]
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0612      	lsls	r2, r2, #24
 80054b2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80054b6:	430a      	orrs	r2, r1
 80054b8:	4924      	ldr	r1, [pc, #144]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80054be:	4b23      	ldr	r3, [pc, #140]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f023 020c 	bic.w	r2, r3, #12
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	4920      	ldr	r1, [pc, #128]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80054d0:	4b1e      	ldr	r3, [pc, #120]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	491c      	ldr	r1, [pc, #112]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054e4:	f023 0310 	bic.w	r3, r3, #16
 80054e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054ea:	4b18      	ldr	r3, [pc, #96]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	69d2      	ldr	r2, [r2, #28]
 80054fa:	00d2      	lsls	r2, r2, #3
 80054fc:	4913      	ldr	r1, [pc, #76]	; (800554c <RCCEx_PLL3_Config+0x128>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	4a11      	ldr	r2, [pc, #68]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005508:	f043 0310 	orr.w	r3, r3, #16
 800550c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005518:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800551a:	f7fb fdf1 	bl	8001100 <HAL_GetTick>
 800551e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005520:	e008      	b.n	8005534 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005522:	f7fb fded 	bl	8001100 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e006      	b.n	8005542 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <RCCEx_PLL3_Config+0x128>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	46020c00 	.word	0x46020c00
 8005550:	80800000 	.word	0x80800000

08005554 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0fb      	b.n	800575e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a7f      	ldr	r2, [pc, #508]	; (8005768 <HAL_SPI_Init+0x214>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_SPI_Init+0x26>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a7d      	ldr	r2, [pc, #500]	; (800576c <HAL_SPI_Init+0x218>)
 8005576:	4293      	cmp	r3, r2
 8005578:	e000      	b.n	800557c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800557a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a78      	ldr	r2, [pc, #480]	; (8005768 <HAL_SPI_Init+0x214>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_SPI_Init+0x42>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a76      	ldr	r2, [pc, #472]	; (800576c <HAL_SPI_Init+0x218>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d105      	bne.n	80055a2 <HAL_SPI_Init+0x4e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	d901      	bls.n	80055a2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e0dd      	b.n	800575e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fd88 	bl	80060b8 <SPI_GetPacketSize>
 80055a8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6e      	ldr	r2, [pc, #440]	; (8005768 <HAL_SPI_Init+0x214>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_SPI_Init+0x6a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a6c      	ldr	r2, [pc, #432]	; (800576c <HAL_SPI_Init+0x218>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d102      	bne.n	80055c4 <HAL_SPI_Init+0x70>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d816      	bhi.n	80055f2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80055c8:	4a69      	ldr	r2, [pc, #420]	; (8005770 <HAL_SPI_Init+0x21c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a68      	ldr	r2, [pc, #416]	; (8005774 <HAL_SPI_Init+0x220>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_SPI_Init+0x98>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a66      	ldr	r2, [pc, #408]	; (8005778 <HAL_SPI_Init+0x224>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_SPI_Init+0x98>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a65      	ldr	r2, [pc, #404]	; (800577c <HAL_SPI_Init+0x228>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d104      	bne.n	80055f6 <HAL_SPI_Init+0xa2>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d901      	bls.n	80055f6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e0b3      	b.n	800575e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fb fabc 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005632:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800563c:	d119      	bne.n	8005672 <HAL_SPI_Init+0x11e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005646:	d103      	bne.n	8005650 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10c      	bne.n	8005672 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800565c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005660:	d107      	bne.n	8005672 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005670:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00f      	beq.n	800569e <HAL_SPI_Init+0x14a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b06      	cmp	r3, #6
 8005684:	d90b      	bls.n	800569e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e007      	b.n	80056ae <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	ea42 0103 	orr.w	r1, r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571a:	ea42 0103 	orr.w	r1, r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	46002000 	.word	0x46002000
 800576c:	56002000 	.word	0x56002000
 8005770:	40013000 	.word	0x40013000
 8005774:	50013000 	.word	0x50013000
 8005778:	40003800 	.word	0x40003800
 800577c:	50003800 	.word	0x50003800

08005780 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3320      	adds	r3, #32
 8005796:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_SPI_Transmit+0x2a>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e203      	b.n	8005bb2 <HAL_SPI_Transmit+0x432>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b2:	f7fb fca5 	bl	8001100 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d007      	beq.n	80057d4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
 80057c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80057d0:	7efb      	ldrb	r3, [r7, #27]
 80057d2:	e1ee      	b.n	8005bb2 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Transmit+0x60>
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d107      	bne.n	80057f0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80057ec:	7efb      	ldrb	r3, [r7, #27]
 80057ee:	e1e0      	b.n	8005bb2 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2203      	movs	r2, #3
 80057f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005840:	d108      	bne.n	8005854 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e009      	b.n	8005868 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005866:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	88f9      	ldrh	r1, [r7, #6]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	430b      	orrs	r3, r1
 800587a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_SPI_Transmit+0x134>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058a2:	d107      	bne.n	80058b4 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	2b0f      	cmp	r3, #15
 80058ba:	d95b      	bls.n	8005974 <HAL_SPI_Transmit+0x1f4>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a8f      	ldr	r2, [pc, #572]	; (8005b00 <HAL_SPI_Transmit+0x380>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d04f      	beq.n	8005966 <HAL_SPI_Transmit+0x1e6>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a8e      	ldr	r2, [pc, #568]	; (8005b04 <HAL_SPI_Transmit+0x384>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d04a      	beq.n	8005966 <HAL_SPI_Transmit+0x1e6>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a8c      	ldr	r2, [pc, #560]	; (8005b08 <HAL_SPI_Transmit+0x388>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d045      	beq.n	8005966 <HAL_SPI_Transmit+0x1e6>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a8b      	ldr	r2, [pc, #556]	; (8005b0c <HAL_SPI_Transmit+0x38c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d147      	bne.n	8005974 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80058e4:	e03f      	b.n	8005966 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d114      	bne.n	800591e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800591c:	e023      	b.n	8005966 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591e:	f7fb fbef 	bl	8001100 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d803      	bhi.n	8005936 <HAL_SPI_Transmit+0x1b6>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005934:	d102      	bne.n	800593c <HAL_SPI_Transmit+0x1bc>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d114      	bne.n	8005966 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 faed 	bl	8005f1c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e125      	b.n	8005bb2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1b9      	bne.n	80058e6 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005972:	e0f8      	b.n	8005b66 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b07      	cmp	r3, #7
 800597a:	f240 80ed 	bls.w	8005b58 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800597e:	e05d      	b.n	8005a3c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d132      	bne.n	80059f4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d918      	bls.n	80059cc <HAL_SPI_Transmit+0x24c>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d014      	beq.n	80059cc <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b2:	1d1a      	adds	r2, r3, #4
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b02      	subs	r3, #2
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059ca:	e037      	b.n	8005a3c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d0:	881a      	ldrh	r2, [r3, #0]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059f2:	e023      	b.n	8005a3c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f4:	f7fb fb84 	bl	8001100 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d803      	bhi.n	8005a0c <HAL_SPI_Transmit+0x28c>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_Transmit+0x292>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d114      	bne.n	8005a3c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa82 	bl	8005f1c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0ba      	b.n	8005bb2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d19b      	bne.n	8005980 <HAL_SPI_Transmit+0x200>
 8005a48:	e08d      	b.n	8005b66 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d15b      	bne.n	8005b10 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d918      	bls.n	8005a96 <HAL_SPI_Transmit+0x316>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d914      	bls.n	8005a96 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7c:	1d1a      	adds	r2, r3, #4
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b04      	subs	r3, #4
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a94:	e060      	b.n	8005b58 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d917      	bls.n	8005ad2 <HAL_SPI_Transmit+0x352>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aae:	881a      	ldrh	r2, [r3, #0]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b02      	subs	r3, #2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005ad0:	e042      	b.n	8005b58 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3320      	adds	r3, #32
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005afc:	e02c      	b.n	8005b58 <HAL_SPI_Transmit+0x3d8>
 8005afe:	bf00      	nop
 8005b00:	40013000 	.word	0x40013000
 8005b04:	50013000 	.word	0x50013000
 8005b08:	40003800 	.word	0x40003800
 8005b0c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b10:	f7fb faf6 	bl	8001100 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d803      	bhi.n	8005b28 <HAL_SPI_Transmit+0x3a8>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b26:	d102      	bne.n	8005b2e <HAL_SPI_Transmit+0x3ae>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d114      	bne.n	8005b58 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f9f4 	bl	8005f1c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e02c      	b.n	8005bb2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f af72 	bne.w	8005a4a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2108      	movs	r1, #8
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fa73 	bl	800605c <SPI_WaitOnFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f9c5 	bl	8005f1c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8005bb0:	7efb      	ldrb	r3, [r7, #27]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop

08005bbc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3330      	adds	r3, #48	; 0x30
 8005bd6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_SPI_Receive+0x2a>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e18e      	b.n	8005f04 <HAL_SPI_Receive+0x348>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bee:	f7fb fa87 	bl	8001100 <HAL_GetTick>
 8005bf2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d007      	beq.n	8005c10 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005c00:	2302      	movs	r3, #2
 8005c02:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005c0c:	7ffb      	ldrb	r3, [r7, #31]
 8005c0e:	e179      	b.n	8005f04 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_SPI_Receive+0x60>
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005c28:	7ffb      	ldrb	r3, [r7, #31]
 8005c2a:	e16b      	b.n	8005f04 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005c7c:	d108      	bne.n	8005c90 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e009      	b.n	8005ca4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005ca2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	88f9      	ldrh	r1, [r7, #6]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_SPI_Receive+0x134>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cde:	d107      	bne.n	8005cf0 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b0f      	cmp	r3, #15
 8005cf6:	d95c      	bls.n	8005db2 <HAL_SPI_Receive+0x1f6>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a83      	ldr	r2, [pc, #524]	; (8005f0c <HAL_SPI_Receive+0x350>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d050      	beq.n	8005da4 <HAL_SPI_Receive+0x1e8>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a82      	ldr	r2, [pc, #520]	; (8005f10 <HAL_SPI_Receive+0x354>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d04b      	beq.n	8005da4 <HAL_SPI_Receive+0x1e8>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a80      	ldr	r2, [pc, #512]	; (8005f14 <HAL_SPI_Receive+0x358>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d046      	beq.n	8005da4 <HAL_SPI_Receive+0x1e8>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a7f      	ldr	r2, [pc, #508]	; (8005f18 <HAL_SPI_Receive+0x35c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d148      	bne.n	8005db2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005d20:	e040      	b.n	8005da4 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	f248 0308 	movw	r3, #32776	; 0x8008
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d014      	beq.n	8005d5c <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d3c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005d5a:	e023      	b.n	8005da4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d5c:	f7fb f9d0 	bl	8001100 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d803      	bhi.n	8005d74 <HAL_SPI_Receive+0x1b8>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d72:	d102      	bne.n	8005d7a <HAL_SPI_Receive+0x1be>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d114      	bne.n	8005da4 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f8ce 	bl	8005f1c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e0af      	b.n	8005f04 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1b8      	bne.n	8005d22 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005db0:	e095      	b.n	8005ede <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2b07      	cmp	r3, #7
 8005db8:	f240 808b 	bls.w	8005ed2 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005dbc:	e03f      	b.n	8005e3e <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d114      	bne.n	8005df6 <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	8812      	ldrh	r2, [r2, #0]
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005df4:	e023      	b.n	8005e3e <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df6:	f7fb f983 	bl	8001100 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d803      	bhi.n	8005e0e <HAL_SPI_Receive+0x252>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0c:	d102      	bne.n	8005e14 <HAL_SPI_Receive+0x258>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d114      	bne.n	8005e3e <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f881 	bl	8005f1c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e062      	b.n	8005f04 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1b9      	bne.n	8005dbe <HAL_SPI_Receive+0x202>
 8005e4a:	e048      	b.n	8005ede <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d117      	bne.n	8005e8a <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005e88:	e023      	b.n	8005ed2 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8a:	f7fb f939 	bl	8001100 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d803      	bhi.n	8005ea2 <HAL_SPI_Receive+0x2e6>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_Receive+0x2ec>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d114      	bne.n	8005ed2 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f837 	bl	8005f1c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e018      	b.n	8005f04 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1b6      	bne.n	8005e4c <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f81c 	bl	8005f1c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 8005f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40013000 	.word	0x40013000
 8005f10:	50013000 	.word	0x50013000
 8005f14:	40003800 	.word	0x40003800
 8005f18:	50003800 	.word	0x50003800

08005f1c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0210 	orr.w	r2, r2, #16
 8005f4a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d014      	beq.n	8005fb6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00f      	beq.n	8005fb6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0220 	orr.w	r2, r2, #32
 8005fb4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d014      	beq.n	8005fec <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00f      	beq.n	8005fec <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd2:	f043 0204 	orr.w	r2, r3, #4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00f      	beq.n	8006016 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ffc:	f043 0201 	orr.w	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006014:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00f      	beq.n	8006040 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006026:	f043 0208 	orr.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800606c:	e010      	b.n	8006090 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800606e:	f7fb f847 	bl	8001100 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d803      	bhi.n	8006086 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006084:	d102      	bne.n	800608c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e00f      	b.n	80060b0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d0df      	beq.n	800606e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	3307      	adds	r3, #7
 80060d6:	08db      	lsrs	r3, r3, #3
 80060d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	fb02 f303 	mul.w	r3, r2, r3
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d12e      	bne.n	8006162 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800610e:	2302      	movs	r3, #2
 8006110:	e028      	b.n	8006164 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800613e:	ea42 0103 	orr.w	r1, r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e049      	b.n	8006216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fa fdee 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f000 f836 	bl	8006220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a68      	ldr	r2, [pc, #416]	; (80063d4 <TIM_Base_SetConfig+0x1b4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d02b      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a67      	ldr	r2, [pc, #412]	; (80063d8 <TIM_Base_SetConfig+0x1b8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d027      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006246:	d023      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800624e:	d01f      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a62      	ldr	r2, [pc, #392]	; (80063dc <TIM_Base_SetConfig+0x1bc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d01b      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a61      	ldr	r2, [pc, #388]	; (80063e0 <TIM_Base_SetConfig+0x1c0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d017      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <TIM_Base_SetConfig+0x1c4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a5f      	ldr	r2, [pc, #380]	; (80063e8 <TIM_Base_SetConfig+0x1c8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00f      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a5e      	ldr	r2, [pc, #376]	; (80063ec <TIM_Base_SetConfig+0x1cc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00b      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a5d      	ldr	r2, [pc, #372]	; (80063f0 <TIM_Base_SetConfig+0x1d0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d007      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a5c      	ldr	r2, [pc, #368]	; (80063f4 <TIM_Base_SetConfig+0x1d4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0x70>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a5b      	ldr	r2, [pc, #364]	; (80063f8 <TIM_Base_SetConfig+0x1d8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a4b      	ldr	r2, [pc, #300]	; (80063d4 <TIM_Base_SetConfig+0x1b4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d043      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a4a      	ldr	r2, [pc, #296]	; (80063d8 <TIM_Base_SetConfig+0x1b8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03f      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d03b      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062c0:	d037      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a45      	ldr	r2, [pc, #276]	; (80063dc <TIM_Base_SetConfig+0x1bc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d033      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a44      	ldr	r2, [pc, #272]	; (80063e0 <TIM_Base_SetConfig+0x1c0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02f      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a43      	ldr	r2, [pc, #268]	; (80063e4 <TIM_Base_SetConfig+0x1c4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d02b      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a42      	ldr	r2, [pc, #264]	; (80063e8 <TIM_Base_SetConfig+0x1c8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d027      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a41      	ldr	r2, [pc, #260]	; (80063ec <TIM_Base_SetConfig+0x1cc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d023      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a40      	ldr	r2, [pc, #256]	; (80063f0 <TIM_Base_SetConfig+0x1d0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01f      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a3f      	ldr	r2, [pc, #252]	; (80063f4 <TIM_Base_SetConfig+0x1d4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01b      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a3e      	ldr	r2, [pc, #248]	; (80063f8 <TIM_Base_SetConfig+0x1d8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d017      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a3d      	ldr	r2, [pc, #244]	; (80063fc <TIM_Base_SetConfig+0x1dc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <TIM_Base_SetConfig+0x1e0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00f      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a3b      	ldr	r2, [pc, #236]	; (8006404 <TIM_Base_SetConfig+0x1e4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00b      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a3a      	ldr	r2, [pc, #232]	; (8006408 <TIM_Base_SetConfig+0x1e8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a39      	ldr	r2, [pc, #228]	; (800640c <TIM_Base_SetConfig+0x1ec>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_Base_SetConfig+0x112>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a38      	ldr	r2, [pc, #224]	; (8006410 <TIM_Base_SetConfig+0x1f0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d108      	bne.n	8006344 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <TIM_Base_SetConfig+0x1b4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d023      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <TIM_Base_SetConfig+0x1b8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d01f      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <TIM_Base_SetConfig+0x1d4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01b      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <TIM_Base_SetConfig+0x1d8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d017      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <TIM_Base_SetConfig+0x1dc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d013      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <TIM_Base_SetConfig+0x1e0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00f      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <TIM_Base_SetConfig+0x1e4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00b      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a19      	ldr	r2, [pc, #100]	; (8006408 <TIM_Base_SetConfig+0x1e8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d007      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a18      	ldr	r2, [pc, #96]	; (800640c <TIM_Base_SetConfig+0x1ec>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_Base_SetConfig+0x198>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a17      	ldr	r2, [pc, #92]	; (8006410 <TIM_Base_SetConfig+0x1f0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d103      	bne.n	80063c0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	615a      	str	r2, [r3, #20]
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	50012c00 	.word	0x50012c00
 80063dc:	40000400 	.word	0x40000400
 80063e0:	50000400 	.word	0x50000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	50000800 	.word	0x50000800
 80063ec:	40000c00 	.word	0x40000c00
 80063f0:	50000c00 	.word	0x50000c00
 80063f4:	40013400 	.word	0x40013400
 80063f8:	50013400 	.word	0x50013400
 80063fc:	40014000 	.word	0x40014000
 8006400:	50014000 	.word	0x50014000
 8006404:	40014400 	.word	0x40014400
 8006408:	50014400 	.word	0x50014400
 800640c:	40014800 	.word	0x40014800
 8006410:	50014800 	.word	0x50014800

08006414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e042      	b.n	80064ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7fa fcbf 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2224      	movs	r2, #36	; 0x24
 8006442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8ba 	bl	80065d0 <UART_SetConfig>
 800645c:	4603      	mov	r3, r0
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e022      	b.n	80064ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa46 	bl	8006900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 facd 	bl	8006a44 <UART_CheckIdleState>
 80064aa:	4603      	mov	r3, r0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	; 0x28
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d17b      	bne.n	80065c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_UART_Transmit+0x26>
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e074      	b.n	80065c8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2221      	movs	r2, #33	; 0x21
 80064ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ee:	f7fa fe07 	bl	8001100 <HAL_GetTick>
 80064f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650c:	d108      	bne.n	8006520 <HAL_UART_Transmit+0x6c>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	e003      	b.n	8006528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006528:	e030      	b.n	800658c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fb2f 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e03d      	b.n	80065c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006560:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	3302      	adds	r3, #2
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e007      	b.n	800657a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	781a      	ldrb	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	3301      	adds	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1c8      	bne.n	800652a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	2140      	movs	r1, #64	; 0x40
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 faf8 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e006      	b.n	80065c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d4:	b094      	sub	sp, #80	; 0x50
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	4b9b      	ldr	r3, [pc, #620]	; (8006854 <UART_SetConfig+0x284>)
 80065e6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	431a      	orrs	r2, r3
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4994      	ldr	r1, [pc, #592]	; (8006858 <UART_SetConfig+0x288>)
 8006608:	4019      	ands	r1, r3
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006610:	430b      	orrs	r3, r1
 8006612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	68d9      	ldr	r1, [r3, #12]
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	ea40 0301 	orr.w	r3, r0, r1
 800662a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b87      	ldr	r3, [pc, #540]	; (8006854 <UART_SetConfig+0x284>)
 8006638:	429a      	cmp	r2, r3
 800663a:	d009      	beq.n	8006650 <UART_SetConfig+0x80>
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b86      	ldr	r3, [pc, #536]	; (800685c <UART_SetConfig+0x28c>)
 8006642:	429a      	cmp	r2, r3
 8006644:	d004      	beq.n	8006650 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	4313      	orrs	r3, r2
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800665a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006664:	430b      	orrs	r3, r1
 8006666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	f023 000f 	bic.w	r0, r3, #15
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	ea40 0301 	orr.w	r3, r0, r1
 800667e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b76      	ldr	r3, [pc, #472]	; (8006860 <UART_SetConfig+0x290>)
 8006686:	429a      	cmp	r2, r3
 8006688:	d102      	bne.n	8006690 <UART_SetConfig+0xc0>
 800668a:	2301      	movs	r3, #1
 800668c:	64bb      	str	r3, [r7, #72]	; 0x48
 800668e:	e021      	b.n	80066d4 <UART_SetConfig+0x104>
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4b73      	ldr	r3, [pc, #460]	; (8006864 <UART_SetConfig+0x294>)
 8006696:	429a      	cmp	r2, r3
 8006698:	d102      	bne.n	80066a0 <UART_SetConfig+0xd0>
 800669a:	2304      	movs	r3, #4
 800669c:	64bb      	str	r3, [r7, #72]	; 0x48
 800669e:	e019      	b.n	80066d4 <UART_SetConfig+0x104>
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	4b70      	ldr	r3, [pc, #448]	; (8006868 <UART_SetConfig+0x298>)
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d102      	bne.n	80066b0 <UART_SetConfig+0xe0>
 80066aa:	2308      	movs	r3, #8
 80066ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ae:	e011      	b.n	80066d4 <UART_SetConfig+0x104>
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b6d      	ldr	r3, [pc, #436]	; (800686c <UART_SetConfig+0x29c>)
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d102      	bne.n	80066c0 <UART_SetConfig+0xf0>
 80066ba:	2310      	movs	r3, #16
 80066bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80066be:	e009      	b.n	80066d4 <UART_SetConfig+0x104>
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b63      	ldr	r3, [pc, #396]	; (8006854 <UART_SetConfig+0x284>)
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d102      	bne.n	80066d0 <UART_SetConfig+0x100>
 80066ca:	2320      	movs	r3, #32
 80066cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ce:	e001      	b.n	80066d4 <UART_SetConfig+0x104>
 80066d0:	2300      	movs	r3, #0
 80066d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b5e      	ldr	r3, [pc, #376]	; (8006854 <UART_SetConfig+0x284>)
 80066da:	429a      	cmp	r2, r3
 80066dc:	d004      	beq.n	80066e8 <UART_SetConfig+0x118>
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b5e      	ldr	r3, [pc, #376]	; (800685c <UART_SetConfig+0x28c>)
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d172      	bne.n	80067ce <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	2200      	movs	r2, #0
 80066ec:	623b      	str	r3, [r7, #32]
 80066ee:	627a      	str	r2, [r7, #36]	; 0x24
 80066f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80066f4:	f7fd fcbc 	bl	8004070 <HAL_RCCEx_GetPeriphCLKFreq>
 80066f8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80066fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80e7 	beq.w	80068d0 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	4a5a      	ldr	r2, [pc, #360]	; (8006870 <UART_SetConfig+0x2a0>)
 8006708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800670c:	461a      	mov	r2, r3
 800670e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006710:	fbb3 f3f2 	udiv	r3, r3, r2
 8006714:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006722:	429a      	cmp	r2, r3
 8006724:	d305      	bcc.n	8006732 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800672c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800672e:	429a      	cmp	r2, r3
 8006730:	d903      	bls.n	800673a <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006738:	e048      	b.n	80067cc <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673c:	2200      	movs	r2, #0
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	61fa      	str	r2, [r7, #28]
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	4a4a      	ldr	r2, [pc, #296]	; (8006870 <UART_SetConfig+0x2a0>)
 8006748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674c:	b29b      	uxth	r3, r3
 800674e:	2200      	movs	r2, #0
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	617a      	str	r2, [r7, #20]
 8006754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006758:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800675c:	f7f9 fd8c 	bl	8000278 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4610      	mov	r0, r2
 8006766:	4619      	mov	r1, r3
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	020b      	lsls	r3, r1, #8
 8006772:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006776:	0202      	lsls	r2, r0, #8
 8006778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677a:	6849      	ldr	r1, [r1, #4]
 800677c:	0849      	lsrs	r1, r1, #1
 800677e:	2000      	movs	r0, #0
 8006780:	460c      	mov	r4, r1
 8006782:	4605      	mov	r5, r0
 8006784:	eb12 0804 	adds.w	r8, r2, r4
 8006788:	eb43 0905 	adc.w	r9, r3, r5
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	60bb      	str	r3, [r7, #8]
 8006794:	60fa      	str	r2, [r7, #12]
 8006796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	f7f9 fd6b 	bl	8000278 <__aeabi_uldivmod>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4613      	mov	r3, r2
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b0:	d308      	bcc.n	80067c4 <UART_SetConfig+0x1f4>
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b8:	d204      	bcs.n	80067c4 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067c0:	60da      	str	r2, [r3, #12]
 80067c2:	e003      	b.n	80067cc <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80067ca:	e081      	b.n	80068d0 <UART_SetConfig+0x300>
 80067cc:	e080      	b.n	80068d0 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d6:	d14d      	bne.n	8006874 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80067d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067da:	2200      	movs	r2, #0
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067e4:	f7fd fc44 	bl	8004070 <HAL_RCCEx_GetPeriphCLKFreq>
 80067e8:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d06f      	beq.n	80068d0 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	4a1e      	ldr	r2, [pc, #120]	; (8006870 <UART_SetConfig+0x2a0>)
 80067f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006802:	005a      	lsls	r2, r3, #1
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	441a      	add	r2, r3
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d916      	bls.n	800684a <UART_SetConfig+0x27a>
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006822:	d212      	bcs.n	800684a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006826:	b29b      	uxth	r3, r3
 8006828:	f023 030f 	bic.w	r3, r3, #15
 800682c:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800682e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	b29b      	uxth	r3, r3
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	b29a      	uxth	r2, r3
 800683a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800683c:	4313      	orrs	r3, r2
 800683e:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006846:	60da      	str	r2, [r3, #12]
 8006848:	e042      	b.n	80068d0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006850:	e03e      	b.n	80068d0 <UART_SetConfig+0x300>
 8006852:	bf00      	nop
 8006854:	46002400 	.word	0x46002400
 8006858:	cfff69f3 	.word	0xcfff69f3
 800685c:	56002400 	.word	0x56002400
 8006860:	40013800 	.word	0x40013800
 8006864:	40004800 	.word	0x40004800
 8006868:	40004c00 	.word	0x40004c00
 800686c:	40005000 	.word	0x40005000
 8006870:	080079a4 	.word	0x080079a4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006876:	2200      	movs	r2, #0
 8006878:	469a      	mov	sl, r3
 800687a:	4693      	mov	fp, r2
 800687c:	4650      	mov	r0, sl
 800687e:	4659      	mov	r1, fp
 8006880:	f7fd fbf6 	bl	8004070 <HAL_RCCEx_GetPeriphCLKFreq>
 8006884:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d021      	beq.n	80068d0 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <UART_SetConfig+0x32c>)
 8006892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006896:	461a      	mov	r2, r3
 8006898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689a:	fbb3 f2f2 	udiv	r2, r3, r2
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	441a      	add	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	d909      	bls.n	80068ca <UART_SetConfig+0x2fa>
 80068b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d205      	bcs.n	80068ca <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	e002      	b.n	80068d0 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	2201      	movs	r2, #1
 80068d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	2201      	movs	r2, #1
 80068dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	2200      	movs	r2, #0
 80068e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	2200      	movs	r2, #0
 80068ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3750      	adds	r7, #80	; 0x50
 80068f4:	46bd      	mov	sp, r7
 80068f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068fa:	bf00      	nop
 80068fc:	080079a4 	.word	0x080079a4

08006900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069fe:	d10a      	bne.n	8006a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b098      	sub	sp, #96	; 0x60
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a54:	f7fa fb54 	bl	8001100 <HAL_GetTick>
 8006a58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d12f      	bne.n	8006ac8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f88e 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d022      	beq.n	8006ac8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a96:	653b      	str	r3, [r7, #80]	; 0x50
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e6      	bne.n	8006a82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e063      	b.n	8006b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d149      	bne.n	8006b6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f857 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d03c      	beq.n	8006b6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	623b      	str	r3, [r7, #32]
   return(result);
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e6      	bne.n	8006af0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b42:	61fa      	str	r2, [r7, #28]
 8006b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	69b9      	ldr	r1, [r7, #24]
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e012      	b.n	8006b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3758      	adds	r7, #88	; 0x58
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba8:	e049      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb0:	d045      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb2:	f7fa faa5 	bl	8001100 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d302      	bcc.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e048      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d031      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d110      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2208      	movs	r2, #8
 8006bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f838 	bl	8006c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e029      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c18:	d111      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f81e 	bl	8006c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e00f      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4013      	ands	r3, r2
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	bf0c      	ite	eq
 8006c4e:	2301      	moveq	r3, #1
 8006c50:	2300      	movne	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d0a6      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b095      	sub	sp, #84	; 0x54
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e6      	bne.n	8006c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e3      	bne.n	8006ca0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d118      	bne.n	8006d12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f023 0310 	bic.w	r3, r3, #16
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e6      	bne.n	8006ce0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d26:	bf00      	nop
 8006d28:	3754      	adds	r7, #84	; 0x54
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e027      	b.n	8006d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2224      	movs	r2, #36	; 0x24
 8006d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0201 	bic.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e02d      	b.n	8006e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f84f 	bl	8006e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e02d      	b.n	8006e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2224      	movs	r2, #36	; 0x24
 8006e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f811 	bl	8006e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d108      	bne.n	8006ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ebc:	e031      	b.n	8006f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	0e5b      	lsrs	r3, r3, #25
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	0f5b      	lsrs	r3, r3, #29
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	7b3a      	ldrb	r2, [r7, #12]
 8006eea:	4911      	ldr	r1, [pc, #68]	; (8006f30 <UARTEx_SetNbDataToProcess+0x94>)
 8006eec:	5c8a      	ldrb	r2, [r1, r2]
 8006eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ef2:	7b3a      	ldrb	r2, [r7, #12]
 8006ef4:	490f      	ldr	r1, [pc, #60]	; (8006f34 <UARTEx_SetNbDataToProcess+0x98>)
 8006ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	7b7a      	ldrb	r2, [r7, #13]
 8006f08:	4909      	ldr	r1, [pc, #36]	; (8006f30 <UARTEx_SetNbDataToProcess+0x94>)
 8006f0a:	5c8a      	ldrb	r2, [r1, r2]
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f10:	7b7a      	ldrb	r2, [r7, #13]
 8006f12:	4908      	ldr	r1, [pc, #32]	; (8006f34 <UARTEx_SetNbDataToProcess+0x98>)
 8006f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	080079bc 	.word	0x080079bc
 8006f34:	080079c4 	.word	0x080079c4

08006f38 <__errno>:
 8006f38:	4b01      	ldr	r3, [pc, #4]	; (8006f40 <__errno+0x8>)
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	2000000c 	.word	0x2000000c

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	; (8006f7c <__libc_init_array+0x38>)
 8006f48:	2600      	movs	r6, #0
 8006f4a:	4c0d      	ldr	r4, [pc, #52]	; (8006f80 <__libc_init_array+0x3c>)
 8006f4c:	1b64      	subs	r4, r4, r5
 8006f4e:	10a4      	asrs	r4, r4, #2
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	; (8006f84 <__libc_init_array+0x40>)
 8006f56:	2600      	movs	r6, #0
 8006f58:	4c0b      	ldr	r4, [pc, #44]	; (8006f88 <__libc_init_array+0x44>)
 8006f5a:	f000 fc9d 	bl	8007898 <_init>
 8006f5e:	1b64      	subs	r4, r4, r5
 8006f60:	10a4      	asrs	r4, r4, #2
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	4798      	blx	r3
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	3601      	adds	r6, #1
 8006f78:	4798      	blx	r3
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	08007a08 	.word	0x08007a08
 8006f80:	08007a08 	.word	0x08007a08
 8006f84:	08007a08 	.word	0x08007a08
 8006f88:	08007a0c 	.word	0x08007a0c

08006f8c <memset>:
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d100      	bne.n	8006f96 <memset+0xa>
 8006f94:	4770      	bx	lr
 8006f96:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9a:	e7f9      	b.n	8006f90 <memset+0x4>

08006f9c <siprintf>:
 8006f9c:	b40e      	push	{r1, r2, r3}
 8006f9e:	b500      	push	{lr}
 8006fa0:	b09c      	sub	sp, #112	; 0x70
 8006fa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fa8:	9002      	str	r0, [sp, #8]
 8006faa:	9006      	str	r0, [sp, #24]
 8006fac:	9107      	str	r1, [sp, #28]
 8006fae:	9104      	str	r1, [sp, #16]
 8006fb0:	4808      	ldr	r0, [pc, #32]	; (8006fd4 <siprintf+0x38>)
 8006fb2:	4909      	ldr	r1, [pc, #36]	; (8006fd8 <siprintf+0x3c>)
 8006fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb8:	9105      	str	r1, [sp, #20]
 8006fba:	a902      	add	r1, sp, #8
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	f000 f868 	bl	8007094 <_svfiprintf_r>
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	b01c      	add	sp, #112	; 0x70
 8006fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fd0:	b003      	add	sp, #12
 8006fd2:	4770      	bx	lr
 8006fd4:	2000000c 	.word	0x2000000c
 8006fd8:	ffff0208 	.word	0xffff0208

08006fdc <__ssputs_r>:
 8006fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe0:	688e      	ldr	r6, [r1, #8]
 8006fe2:	4682      	mov	sl, r0
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	4690      	mov	r8, r2
 8006fe8:	429e      	cmp	r6, r3
 8006fea:	461f      	mov	r7, r3
 8006fec:	d838      	bhi.n	8007060 <__ssputs_r+0x84>
 8006fee:	898a      	ldrh	r2, [r1, #12]
 8006ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ff4:	d032      	beq.n	800705c <__ssputs_r+0x80>
 8006ff6:	6825      	ldr	r5, [r4, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	6909      	ldr	r1, [r1, #16]
 8006ffc:	eba5 0901 	sub.w	r9, r5, r1
 8007000:	6965      	ldr	r5, [r4, #20]
 8007002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007006:	444b      	add	r3, r9
 8007008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800700c:	106d      	asrs	r5, r5, #1
 800700e:	429d      	cmp	r5, r3
 8007010:	bf38      	it	cc
 8007012:	461d      	movcc	r5, r3
 8007014:	0553      	lsls	r3, r2, #21
 8007016:	d531      	bpl.n	800707c <__ssputs_r+0xa0>
 8007018:	4629      	mov	r1, r5
 800701a:	f000 fb73 	bl	8007704 <_malloc_r>
 800701e:	4606      	mov	r6, r0
 8007020:	b950      	cbnz	r0, 8007038 <__ssputs_r+0x5c>
 8007022:	230c      	movs	r3, #12
 8007024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007028:	f8ca 3000 	str.w	r3, [sl]
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007032:	81a3      	strh	r3, [r4, #12]
 8007034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007038:	464a      	mov	r2, r9
 800703a:	6921      	ldr	r1, [r4, #16]
 800703c:	f000 face 	bl	80075dc <memcpy>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	6126      	str	r6, [r4, #16]
 800704e:	444e      	add	r6, r9
 8007050:	6165      	str	r5, [r4, #20]
 8007052:	eba5 0509 	sub.w	r5, r5, r9
 8007056:	6026      	str	r6, [r4, #0]
 8007058:	463e      	mov	r6, r7
 800705a:	60a5      	str	r5, [r4, #8]
 800705c:	42be      	cmp	r6, r7
 800705e:	d900      	bls.n	8007062 <__ssputs_r+0x86>
 8007060:	463e      	mov	r6, r7
 8007062:	4632      	mov	r2, r6
 8007064:	4641      	mov	r1, r8
 8007066:	6820      	ldr	r0, [r4, #0]
 8007068:	f000 fac5 	bl	80075f6 <memmove>
 800706c:	68a3      	ldr	r3, [r4, #8]
 800706e:	2000      	movs	r0, #0
 8007070:	1b9b      	subs	r3, r3, r6
 8007072:	60a3      	str	r3, [r4, #8]
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	4433      	add	r3, r6
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	e7db      	b.n	8007034 <__ssputs_r+0x58>
 800707c:	462a      	mov	r2, r5
 800707e:	f000 fbb5 	bl	80077ec <_realloc_r>
 8007082:	4606      	mov	r6, r0
 8007084:	2800      	cmp	r0, #0
 8007086:	d1e1      	bne.n	800704c <__ssputs_r+0x70>
 8007088:	6921      	ldr	r1, [r4, #16]
 800708a:	4650      	mov	r0, sl
 800708c:	f000 face 	bl	800762c <_free_r>
 8007090:	e7c7      	b.n	8007022 <__ssputs_r+0x46>
	...

08007094 <_svfiprintf_r>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	4698      	mov	r8, r3
 800709a:	898b      	ldrh	r3, [r1, #12]
 800709c:	b09d      	sub	sp, #116	; 0x74
 800709e:	4607      	mov	r7, r0
 80070a0:	061b      	lsls	r3, r3, #24
 80070a2:	460d      	mov	r5, r1
 80070a4:	4614      	mov	r4, r2
 80070a6:	d50e      	bpl.n	80070c6 <_svfiprintf_r+0x32>
 80070a8:	690b      	ldr	r3, [r1, #16]
 80070aa:	b963      	cbnz	r3, 80070c6 <_svfiprintf_r+0x32>
 80070ac:	2140      	movs	r1, #64	; 0x40
 80070ae:	f000 fb29 	bl	8007704 <_malloc_r>
 80070b2:	6028      	str	r0, [r5, #0]
 80070b4:	6128      	str	r0, [r5, #16]
 80070b6:	b920      	cbnz	r0, 80070c2 <_svfiprintf_r+0x2e>
 80070b8:	230c      	movs	r3, #12
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070c0:	e0d1      	b.n	8007266 <_svfiprintf_r+0x1d2>
 80070c2:	2340      	movs	r3, #64	; 0x40
 80070c4:	616b      	str	r3, [r5, #20]
 80070c6:	2300      	movs	r3, #0
 80070c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070cc:	f04f 0901 	mov.w	r9, #1
 80070d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007280 <_svfiprintf_r+0x1ec>
 80070d4:	9309      	str	r3, [sp, #36]	; 0x24
 80070d6:	2320      	movs	r3, #32
 80070d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070dc:	2330      	movs	r3, #48	; 0x30
 80070de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070e2:	4623      	mov	r3, r4
 80070e4:	469a      	mov	sl, r3
 80070e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ea:	b10a      	cbz	r2, 80070f0 <_svfiprintf_r+0x5c>
 80070ec:	2a25      	cmp	r2, #37	; 0x25
 80070ee:	d1f9      	bne.n	80070e4 <_svfiprintf_r+0x50>
 80070f0:	ebba 0b04 	subs.w	fp, sl, r4
 80070f4:	d00b      	beq.n	800710e <_svfiprintf_r+0x7a>
 80070f6:	465b      	mov	r3, fp
 80070f8:	4622      	mov	r2, r4
 80070fa:	4629      	mov	r1, r5
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7ff ff6d 	bl	8006fdc <__ssputs_r>
 8007102:	3001      	adds	r0, #1
 8007104:	f000 80aa 	beq.w	800725c <_svfiprintf_r+0x1c8>
 8007108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800710a:	445a      	add	r2, fp
 800710c:	9209      	str	r2, [sp, #36]	; 0x24
 800710e:	f89a 3000 	ldrb.w	r3, [sl]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80a2 	beq.w	800725c <_svfiprintf_r+0x1c8>
 8007118:	2300      	movs	r3, #0
 800711a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800711e:	f10a 0a01 	add.w	sl, sl, #1
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	9307      	str	r3, [sp, #28]
 8007126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800712a:	931a      	str	r3, [sp, #104]	; 0x68
 800712c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007130:	4654      	mov	r4, sl
 8007132:	2205      	movs	r2, #5
 8007134:	4852      	ldr	r0, [pc, #328]	; (8007280 <_svfiprintf_r+0x1ec>)
 8007136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713a:	f000 fa41 	bl	80075c0 <memchr>
 800713e:	9a04      	ldr	r2, [sp, #16]
 8007140:	b9d8      	cbnz	r0, 800717a <_svfiprintf_r+0xe6>
 8007142:	06d0      	lsls	r0, r2, #27
 8007144:	bf44      	itt	mi
 8007146:	2320      	movmi	r3, #32
 8007148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800714c:	0711      	lsls	r1, r2, #28
 800714e:	bf44      	itt	mi
 8007150:	232b      	movmi	r3, #43	; 0x2b
 8007152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007156:	f89a 3000 	ldrb.w	r3, [sl]
 800715a:	2b2a      	cmp	r3, #42	; 0x2a
 800715c:	d015      	beq.n	800718a <_svfiprintf_r+0xf6>
 800715e:	9a07      	ldr	r2, [sp, #28]
 8007160:	4654      	mov	r4, sl
 8007162:	2000      	movs	r0, #0
 8007164:	f04f 0c0a 	mov.w	ip, #10
 8007168:	4621      	mov	r1, r4
 800716a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800716e:	3b30      	subs	r3, #48	; 0x30
 8007170:	2b09      	cmp	r3, #9
 8007172:	d94e      	bls.n	8007212 <_svfiprintf_r+0x17e>
 8007174:	b1b0      	cbz	r0, 80071a4 <_svfiprintf_r+0x110>
 8007176:	9207      	str	r2, [sp, #28]
 8007178:	e014      	b.n	80071a4 <_svfiprintf_r+0x110>
 800717a:	eba0 0308 	sub.w	r3, r0, r8
 800717e:	46a2      	mov	sl, r4
 8007180:	fa09 f303 	lsl.w	r3, r9, r3
 8007184:	4313      	orrs	r3, r2
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	e7d2      	b.n	8007130 <_svfiprintf_r+0x9c>
 800718a:	9b03      	ldr	r3, [sp, #12]
 800718c:	1d19      	adds	r1, r3, #4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	9103      	str	r1, [sp, #12]
 8007194:	bfbb      	ittet	lt
 8007196:	425b      	neglt	r3, r3
 8007198:	f042 0202 	orrlt.w	r2, r2, #2
 800719c:	9307      	strge	r3, [sp, #28]
 800719e:	9307      	strlt	r3, [sp, #28]
 80071a0:	bfb8      	it	lt
 80071a2:	9204      	strlt	r2, [sp, #16]
 80071a4:	7823      	ldrb	r3, [r4, #0]
 80071a6:	2b2e      	cmp	r3, #46	; 0x2e
 80071a8:	d10c      	bne.n	80071c4 <_svfiprintf_r+0x130>
 80071aa:	7863      	ldrb	r3, [r4, #1]
 80071ac:	2b2a      	cmp	r3, #42	; 0x2a
 80071ae:	d135      	bne.n	800721c <_svfiprintf_r+0x188>
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	3402      	adds	r4, #2
 80071b4:	1d1a      	adds	r2, r3, #4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	9203      	str	r2, [sp, #12]
 80071bc:	bfb8      	it	lt
 80071be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071c2:	9305      	str	r3, [sp, #20]
 80071c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007290 <_svfiprintf_r+0x1fc>
 80071c8:	2203      	movs	r2, #3
 80071ca:	7821      	ldrb	r1, [r4, #0]
 80071cc:	4650      	mov	r0, sl
 80071ce:	f000 f9f7 	bl	80075c0 <memchr>
 80071d2:	b140      	cbz	r0, 80071e6 <_svfiprintf_r+0x152>
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	eba0 000a 	sub.w	r0, r0, sl
 80071da:	3401      	adds	r4, #1
 80071dc:	fa03 f000 	lsl.w	r0, r3, r0
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	4303      	orrs	r3, r0
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ea:	2206      	movs	r2, #6
 80071ec:	4825      	ldr	r0, [pc, #148]	; (8007284 <_svfiprintf_r+0x1f0>)
 80071ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071f2:	f000 f9e5 	bl	80075c0 <memchr>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d038      	beq.n	800726c <_svfiprintf_r+0x1d8>
 80071fa:	4b23      	ldr	r3, [pc, #140]	; (8007288 <_svfiprintf_r+0x1f4>)
 80071fc:	bb1b      	cbnz	r3, 8007246 <_svfiprintf_r+0x1b2>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	3307      	adds	r3, #7
 8007202:	f023 0307 	bic.w	r3, r3, #7
 8007206:	3308      	adds	r3, #8
 8007208:	9303      	str	r3, [sp, #12]
 800720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720c:	4433      	add	r3, r6
 800720e:	9309      	str	r3, [sp, #36]	; 0x24
 8007210:	e767      	b.n	80070e2 <_svfiprintf_r+0x4e>
 8007212:	fb0c 3202 	mla	r2, ip, r2, r3
 8007216:	460c      	mov	r4, r1
 8007218:	2001      	movs	r0, #1
 800721a:	e7a5      	b.n	8007168 <_svfiprintf_r+0xd4>
 800721c:	2300      	movs	r3, #0
 800721e:	3401      	adds	r4, #1
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	4619      	mov	r1, r3
 8007226:	9305      	str	r3, [sp, #20]
 8007228:	4620      	mov	r0, r4
 800722a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800722e:	3a30      	subs	r2, #48	; 0x30
 8007230:	2a09      	cmp	r2, #9
 8007232:	d903      	bls.n	800723c <_svfiprintf_r+0x1a8>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0c5      	beq.n	80071c4 <_svfiprintf_r+0x130>
 8007238:	9105      	str	r1, [sp, #20]
 800723a:	e7c3      	b.n	80071c4 <_svfiprintf_r+0x130>
 800723c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007240:	4604      	mov	r4, r0
 8007242:	2301      	movs	r3, #1
 8007244:	e7f0      	b.n	8007228 <_svfiprintf_r+0x194>
 8007246:	ab03      	add	r3, sp, #12
 8007248:	462a      	mov	r2, r5
 800724a:	a904      	add	r1, sp, #16
 800724c:	4638      	mov	r0, r7
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4b0e      	ldr	r3, [pc, #56]	; (800728c <_svfiprintf_r+0x1f8>)
 8007252:	e000      	b.n	8007256 <_svfiprintf_r+0x1c2>
 8007254:	bf00      	nop
 8007256:	1c42      	adds	r2, r0, #1
 8007258:	4606      	mov	r6, r0
 800725a:	d1d6      	bne.n	800720a <_svfiprintf_r+0x176>
 800725c:	89ab      	ldrh	r3, [r5, #12]
 800725e:	065b      	lsls	r3, r3, #25
 8007260:	f53f af2c 	bmi.w	80070bc <_svfiprintf_r+0x28>
 8007264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007266:	b01d      	add	sp, #116	; 0x74
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	ab03      	add	r3, sp, #12
 800726e:	462a      	mov	r2, r5
 8007270:	a904      	add	r1, sp, #16
 8007272:	4638      	mov	r0, r7
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <_svfiprintf_r+0x1f8>)
 8007278:	f000 f87c 	bl	8007374 <_printf_i>
 800727c:	e7eb      	b.n	8007256 <_svfiprintf_r+0x1c2>
 800727e:	bf00      	nop
 8007280:	080079cc 	.word	0x080079cc
 8007284:	080079d6 	.word	0x080079d6
 8007288:	00000000 	.word	0x00000000
 800728c:	08006fdd 	.word	0x08006fdd
 8007290:	080079d2 	.word	0x080079d2

08007294 <_printf_common>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	4616      	mov	r6, r2
 800729a:	4699      	mov	r9, r3
 800729c:	688a      	ldr	r2, [r1, #8]
 800729e:	4607      	mov	r7, r0
 80072a0:	690b      	ldr	r3, [r1, #16]
 80072a2:	460c      	mov	r4, r1
 80072a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	bfb8      	it	lt
 80072ac:	4613      	movlt	r3, r2
 80072ae:	6033      	str	r3, [r6, #0]
 80072b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b4:	b10a      	cbz	r2, 80072ba <_printf_common+0x26>
 80072b6:	3301      	adds	r3, #1
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	0699      	lsls	r1, r3, #26
 80072be:	bf42      	ittt	mi
 80072c0:	6833      	ldrmi	r3, [r6, #0]
 80072c2:	3302      	addmi	r3, #2
 80072c4:	6033      	strmi	r3, [r6, #0]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	f015 0506 	ands.w	r5, r5, #6
 80072cc:	d106      	bne.n	80072dc <_printf_common+0x48>
 80072ce:	f104 0a19 	add.w	sl, r4, #25
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	6832      	ldr	r2, [r6, #0]
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc29      	bgt.n	8007330 <_printf_common+0x9c>
 80072dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e0:	1e13      	subs	r3, r2, #0
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	bf18      	it	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	0692      	lsls	r2, r2, #26
 80072ea:	d42e      	bmi.n	800734a <_printf_common+0xb6>
 80072ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	3001      	adds	r0, #1
 80072f8:	d021      	beq.n	800733e <_printf_common+0xaa>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	341a      	adds	r4, #26
 80072fe:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007302:	f003 0306 	and.w	r3, r3, #6
 8007306:	6832      	ldr	r2, [r6, #0]
 8007308:	2600      	movs	r6, #0
 800730a:	2b04      	cmp	r3, #4
 800730c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007310:	bf08      	it	eq
 8007312:	1aad      	subeq	r5, r5, r2
 8007314:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007318:	bf14      	ite	ne
 800731a:	2500      	movne	r5, #0
 800731c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007320:	4293      	cmp	r3, r2
 8007322:	bfc4      	itt	gt
 8007324:	1a9b      	subgt	r3, r3, r2
 8007326:	18ed      	addgt	r5, r5, r3
 8007328:	42b5      	cmp	r5, r6
 800732a:	d11a      	bne.n	8007362 <_printf_common+0xce>
 800732c:	2000      	movs	r0, #0
 800732e:	e008      	b.n	8007342 <_printf_common+0xae>
 8007330:	2301      	movs	r3, #1
 8007332:	4652      	mov	r2, sl
 8007334:	4649      	mov	r1, r9
 8007336:	4638      	mov	r0, r7
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d103      	bne.n	8007346 <_printf_common+0xb2>
 800733e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	3501      	adds	r5, #1
 8007348:	e7c3      	b.n	80072d2 <_printf_common+0x3e>
 800734a:	18e1      	adds	r1, r4, r3
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	2030      	movs	r0, #48	; 0x30
 8007350:	3302      	adds	r3, #2
 8007352:	4422      	add	r2, r4
 8007354:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800735c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007360:	e7c4      	b.n	80072ec <_printf_common+0x58>
 8007362:	2301      	movs	r3, #1
 8007364:	4622      	mov	r2, r4
 8007366:	4649      	mov	r1, r9
 8007368:	4638      	mov	r0, r7
 800736a:	47c0      	blx	r8
 800736c:	3001      	adds	r0, #1
 800736e:	d0e6      	beq.n	800733e <_printf_common+0xaa>
 8007370:	3601      	adds	r6, #1
 8007372:	e7d9      	b.n	8007328 <_printf_common+0x94>

08007374 <_printf_i>:
 8007374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	7e0f      	ldrb	r7, [r1, #24]
 800737a:	4691      	mov	r9, r2
 800737c:	4680      	mov	r8, r0
 800737e:	460c      	mov	r4, r1
 8007380:	2f78      	cmp	r7, #120	; 0x78
 8007382:	469a      	mov	sl, r3
 8007384:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800738a:	d807      	bhi.n	800739c <_printf_i+0x28>
 800738c:	2f62      	cmp	r7, #98	; 0x62
 800738e:	d80a      	bhi.n	80073a6 <_printf_i+0x32>
 8007390:	2f00      	cmp	r7, #0
 8007392:	f000 80d8 	beq.w	8007546 <_printf_i+0x1d2>
 8007396:	2f58      	cmp	r7, #88	; 0x58
 8007398:	f000 80a3 	beq.w	80074e2 <_printf_i+0x16e>
 800739c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a4:	e03a      	b.n	800741c <_printf_i+0xa8>
 80073a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073aa:	2b15      	cmp	r3, #21
 80073ac:	d8f6      	bhi.n	800739c <_printf_i+0x28>
 80073ae:	a101      	add	r1, pc, #4	; (adr r1, 80073b4 <_printf_i+0x40>)
 80073b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b4:	0800740d 	.word	0x0800740d
 80073b8:	08007421 	.word	0x08007421
 80073bc:	0800739d 	.word	0x0800739d
 80073c0:	0800739d 	.word	0x0800739d
 80073c4:	0800739d 	.word	0x0800739d
 80073c8:	0800739d 	.word	0x0800739d
 80073cc:	08007421 	.word	0x08007421
 80073d0:	0800739d 	.word	0x0800739d
 80073d4:	0800739d 	.word	0x0800739d
 80073d8:	0800739d 	.word	0x0800739d
 80073dc:	0800739d 	.word	0x0800739d
 80073e0:	0800752d 	.word	0x0800752d
 80073e4:	08007451 	.word	0x08007451
 80073e8:	0800750f 	.word	0x0800750f
 80073ec:	0800739d 	.word	0x0800739d
 80073f0:	0800739d 	.word	0x0800739d
 80073f4:	0800754f 	.word	0x0800754f
 80073f8:	0800739d 	.word	0x0800739d
 80073fc:	08007451 	.word	0x08007451
 8007400:	0800739d 	.word	0x0800739d
 8007404:	0800739d 	.word	0x0800739d
 8007408:	08007517 	.word	0x08007517
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	1d1a      	adds	r2, r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	602a      	str	r2, [r5, #0]
 8007414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800741c:	2301      	movs	r3, #1
 800741e:	e0a3      	b.n	8007568 <_printf_i+0x1f4>
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	6829      	ldr	r1, [r5, #0]
 8007424:	0606      	lsls	r6, r0, #24
 8007426:	f101 0304 	add.w	r3, r1, #4
 800742a:	d50a      	bpl.n	8007442 <_printf_i+0xce>
 800742c:	680e      	ldr	r6, [r1, #0]
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	2e00      	cmp	r6, #0
 8007432:	da03      	bge.n	800743c <_printf_i+0xc8>
 8007434:	232d      	movs	r3, #45	; 0x2d
 8007436:	4276      	negs	r6, r6
 8007438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800743c:	485e      	ldr	r0, [pc, #376]	; (80075b8 <_printf_i+0x244>)
 800743e:	230a      	movs	r3, #10
 8007440:	e019      	b.n	8007476 <_printf_i+0x102>
 8007442:	680e      	ldr	r6, [r1, #0]
 8007444:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007448:	602b      	str	r3, [r5, #0]
 800744a:	bf18      	it	ne
 800744c:	b236      	sxthne	r6, r6
 800744e:	e7ef      	b.n	8007430 <_printf_i+0xbc>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	1d19      	adds	r1, r3, #4
 8007456:	6029      	str	r1, [r5, #0]
 8007458:	0601      	lsls	r1, r0, #24
 800745a:	d501      	bpl.n	8007460 <_printf_i+0xec>
 800745c:	681e      	ldr	r6, [r3, #0]
 800745e:	e002      	b.n	8007466 <_printf_i+0xf2>
 8007460:	0646      	lsls	r6, r0, #25
 8007462:	d5fb      	bpl.n	800745c <_printf_i+0xe8>
 8007464:	881e      	ldrh	r6, [r3, #0]
 8007466:	2f6f      	cmp	r7, #111	; 0x6f
 8007468:	4853      	ldr	r0, [pc, #332]	; (80075b8 <_printf_i+0x244>)
 800746a:	bf0c      	ite	eq
 800746c:	2308      	moveq	r3, #8
 800746e:	230a      	movne	r3, #10
 8007470:	2100      	movs	r1, #0
 8007472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007476:	6865      	ldr	r5, [r4, #4]
 8007478:	2d00      	cmp	r5, #0
 800747a:	60a5      	str	r5, [r4, #8]
 800747c:	bfa2      	ittt	ge
 800747e:	6821      	ldrge	r1, [r4, #0]
 8007480:	f021 0104 	bicge.w	r1, r1, #4
 8007484:	6021      	strge	r1, [r4, #0]
 8007486:	b90e      	cbnz	r6, 800748c <_printf_i+0x118>
 8007488:	2d00      	cmp	r5, #0
 800748a:	d04d      	beq.n	8007528 <_printf_i+0x1b4>
 800748c:	4615      	mov	r5, r2
 800748e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007492:	fb03 6711 	mls	r7, r3, r1, r6
 8007496:	5dc7      	ldrb	r7, [r0, r7]
 8007498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800749c:	4637      	mov	r7, r6
 800749e:	460e      	mov	r6, r1
 80074a0:	42bb      	cmp	r3, r7
 80074a2:	d9f4      	bls.n	800748e <_printf_i+0x11a>
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d10b      	bne.n	80074c0 <_printf_i+0x14c>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	07de      	lsls	r6, r3, #31
 80074ac:	d508      	bpl.n	80074c0 <_printf_i+0x14c>
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	6861      	ldr	r1, [r4, #4]
 80074b2:	4299      	cmp	r1, r3
 80074b4:	bfde      	ittt	le
 80074b6:	2330      	movle	r3, #48	; 0x30
 80074b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074c0:	1b52      	subs	r2, r2, r5
 80074c2:	6122      	str	r2, [r4, #16]
 80074c4:	464b      	mov	r3, r9
 80074c6:	aa03      	add	r2, sp, #12
 80074c8:	4621      	mov	r1, r4
 80074ca:	4640      	mov	r0, r8
 80074cc:	f8cd a000 	str.w	sl, [sp]
 80074d0:	f7ff fee0 	bl	8007294 <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d14c      	bne.n	8007572 <_printf_i+0x1fe>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074dc:	b004      	add	sp, #16
 80074de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e2:	4835      	ldr	r0, [pc, #212]	; (80075b8 <_printf_i+0x244>)
 80074e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074e8:	6829      	ldr	r1, [r5, #0]
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80074f0:	6029      	str	r1, [r5, #0]
 80074f2:	061d      	lsls	r5, r3, #24
 80074f4:	d514      	bpl.n	8007520 <_printf_i+0x1ac>
 80074f6:	07df      	lsls	r7, r3, #31
 80074f8:	bf44      	itt	mi
 80074fa:	f043 0320 	orrmi.w	r3, r3, #32
 80074fe:	6023      	strmi	r3, [r4, #0]
 8007500:	b91e      	cbnz	r6, 800750a <_printf_i+0x196>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	f023 0320 	bic.w	r3, r3, #32
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	2310      	movs	r3, #16
 800750c:	e7b0      	b.n	8007470 <_printf_i+0xfc>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	f043 0320 	orr.w	r3, r3, #32
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	2378      	movs	r3, #120	; 0x78
 8007518:	4828      	ldr	r0, [pc, #160]	; (80075bc <_printf_i+0x248>)
 800751a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800751e:	e7e3      	b.n	80074e8 <_printf_i+0x174>
 8007520:	0659      	lsls	r1, r3, #25
 8007522:	bf48      	it	mi
 8007524:	b2b6      	uxthmi	r6, r6
 8007526:	e7e6      	b.n	80074f6 <_printf_i+0x182>
 8007528:	4615      	mov	r5, r2
 800752a:	e7bb      	b.n	80074a4 <_printf_i+0x130>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	6826      	ldr	r6, [r4, #0]
 8007530:	1d18      	adds	r0, r3, #4
 8007532:	6961      	ldr	r1, [r4, #20]
 8007534:	6028      	str	r0, [r5, #0]
 8007536:	0635      	lsls	r5, r6, #24
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	d501      	bpl.n	8007540 <_printf_i+0x1cc>
 800753c:	6019      	str	r1, [r3, #0]
 800753e:	e002      	b.n	8007546 <_printf_i+0x1d2>
 8007540:	0670      	lsls	r0, r6, #25
 8007542:	d5fb      	bpl.n	800753c <_printf_i+0x1c8>
 8007544:	8019      	strh	r1, [r3, #0]
 8007546:	2300      	movs	r3, #0
 8007548:	4615      	mov	r5, r2
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	e7ba      	b.n	80074c4 <_printf_i+0x150>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	2100      	movs	r1, #0
 8007552:	1d1a      	adds	r2, r3, #4
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	681d      	ldr	r5, [r3, #0]
 8007558:	6862      	ldr	r2, [r4, #4]
 800755a:	4628      	mov	r0, r5
 800755c:	f000 f830 	bl	80075c0 <memchr>
 8007560:	b108      	cbz	r0, 8007566 <_printf_i+0x1f2>
 8007562:	1b40      	subs	r0, r0, r5
 8007564:	6060      	str	r0, [r4, #4]
 8007566:	6863      	ldr	r3, [r4, #4]
 8007568:	6123      	str	r3, [r4, #16]
 800756a:	2300      	movs	r3, #0
 800756c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007570:	e7a8      	b.n	80074c4 <_printf_i+0x150>
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	462a      	mov	r2, r5
 8007576:	4649      	mov	r1, r9
 8007578:	4640      	mov	r0, r8
 800757a:	47d0      	blx	sl
 800757c:	3001      	adds	r0, #1
 800757e:	d0ab      	beq.n	80074d8 <_printf_i+0x164>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	079b      	lsls	r3, r3, #30
 8007584:	d413      	bmi.n	80075ae <_printf_i+0x23a>
 8007586:	68e0      	ldr	r0, [r4, #12]
 8007588:	9b03      	ldr	r3, [sp, #12]
 800758a:	4298      	cmp	r0, r3
 800758c:	bfb8      	it	lt
 800758e:	4618      	movlt	r0, r3
 8007590:	e7a4      	b.n	80074dc <_printf_i+0x168>
 8007592:	2301      	movs	r3, #1
 8007594:	4632      	mov	r2, r6
 8007596:	4649      	mov	r1, r9
 8007598:	4640      	mov	r0, r8
 800759a:	47d0      	blx	sl
 800759c:	3001      	adds	r0, #1
 800759e:	d09b      	beq.n	80074d8 <_printf_i+0x164>
 80075a0:	3501      	adds	r5, #1
 80075a2:	68e3      	ldr	r3, [r4, #12]
 80075a4:	9903      	ldr	r1, [sp, #12]
 80075a6:	1a5b      	subs	r3, r3, r1
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	dcf2      	bgt.n	8007592 <_printf_i+0x21e>
 80075ac:	e7eb      	b.n	8007586 <_printf_i+0x212>
 80075ae:	2500      	movs	r5, #0
 80075b0:	f104 0619 	add.w	r6, r4, #25
 80075b4:	e7f5      	b.n	80075a2 <_printf_i+0x22e>
 80075b6:	bf00      	nop
 80075b8:	080079dd 	.word	0x080079dd
 80075bc:	080079ee 	.word	0x080079ee

080075c0 <memchr>:
 80075c0:	b2c9      	uxtb	r1, r1
 80075c2:	4402      	add	r2, r0
 80075c4:	b510      	push	{r4, lr}
 80075c6:	4290      	cmp	r0, r2
 80075c8:	4603      	mov	r3, r0
 80075ca:	d101      	bne.n	80075d0 <memchr+0x10>
 80075cc:	2300      	movs	r3, #0
 80075ce:	e003      	b.n	80075d8 <memchr+0x18>
 80075d0:	781c      	ldrb	r4, [r3, #0]
 80075d2:	3001      	adds	r0, #1
 80075d4:	428c      	cmp	r4, r1
 80075d6:	d1f6      	bne.n	80075c6 <memchr+0x6>
 80075d8:	4618      	mov	r0, r3
 80075da:	bd10      	pop	{r4, pc}

080075dc <memcpy>:
 80075dc:	440a      	add	r2, r1
 80075de:	1e43      	subs	r3, r0, #1
 80075e0:	4291      	cmp	r1, r2
 80075e2:	d100      	bne.n	80075e6 <memcpy+0xa>
 80075e4:	4770      	bx	lr
 80075e6:	b510      	push	{r4, lr}
 80075e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ec:	4291      	cmp	r1, r2
 80075ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f2:	d1f9      	bne.n	80075e8 <memcpy+0xc>
 80075f4:	bd10      	pop	{r4, pc}

080075f6 <memmove>:
 80075f6:	4288      	cmp	r0, r1
 80075f8:	b510      	push	{r4, lr}
 80075fa:	eb01 0402 	add.w	r4, r1, r2
 80075fe:	d902      	bls.n	8007606 <memmove+0x10>
 8007600:	4284      	cmp	r4, r0
 8007602:	4623      	mov	r3, r4
 8007604:	d807      	bhi.n	8007616 <memmove+0x20>
 8007606:	1e43      	subs	r3, r0, #1
 8007608:	42a1      	cmp	r1, r4
 800760a:	d008      	beq.n	800761e <memmove+0x28>
 800760c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007610:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007614:	e7f8      	b.n	8007608 <memmove+0x12>
 8007616:	4402      	add	r2, r0
 8007618:	4601      	mov	r1, r0
 800761a:	428a      	cmp	r2, r1
 800761c:	d100      	bne.n	8007620 <memmove+0x2a>
 800761e:	bd10      	pop	{r4, pc}
 8007620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007624:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007628:	e7f7      	b.n	800761a <memmove+0x24>
	...

0800762c <_free_r>:
 800762c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800762e:	2900      	cmp	r1, #0
 8007630:	d043      	beq.n	80076ba <_free_r+0x8e>
 8007632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007636:	1f0c      	subs	r4, r1, #4
 8007638:	9001      	str	r0, [sp, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfb8      	it	lt
 800763e:	18e4      	addlt	r4, r4, r3
 8007640:	f000 f914 	bl	800786c <__malloc_lock>
 8007644:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <_free_r+0x94>)
 8007646:	9801      	ldr	r0, [sp, #4]
 8007648:	6813      	ldr	r3, [r2, #0]
 800764a:	b933      	cbnz	r3, 800765a <_free_r+0x2e>
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	6014      	str	r4, [r2, #0]
 8007650:	b003      	add	sp, #12
 8007652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007656:	f000 b90f 	b.w	8007878 <__malloc_unlock>
 800765a:	42a3      	cmp	r3, r4
 800765c:	d908      	bls.n	8007670 <_free_r+0x44>
 800765e:	6825      	ldr	r5, [r4, #0]
 8007660:	1961      	adds	r1, r4, r5
 8007662:	428b      	cmp	r3, r1
 8007664:	bf01      	itttt	eq
 8007666:	6819      	ldreq	r1, [r3, #0]
 8007668:	685b      	ldreq	r3, [r3, #4]
 800766a:	1949      	addeq	r1, r1, r5
 800766c:	6021      	streq	r1, [r4, #0]
 800766e:	e7ed      	b.n	800764c <_free_r+0x20>
 8007670:	461a      	mov	r2, r3
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	b10b      	cbz	r3, 800767a <_free_r+0x4e>
 8007676:	42a3      	cmp	r3, r4
 8007678:	d9fa      	bls.n	8007670 <_free_r+0x44>
 800767a:	6811      	ldr	r1, [r2, #0]
 800767c:	1855      	adds	r5, r2, r1
 800767e:	42a5      	cmp	r5, r4
 8007680:	d10b      	bne.n	800769a <_free_r+0x6e>
 8007682:	6824      	ldr	r4, [r4, #0]
 8007684:	4421      	add	r1, r4
 8007686:	1854      	adds	r4, r2, r1
 8007688:	6011      	str	r1, [r2, #0]
 800768a:	42a3      	cmp	r3, r4
 800768c:	d1e0      	bne.n	8007650 <_free_r+0x24>
 800768e:	681c      	ldr	r4, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	4421      	add	r1, r4
 8007694:	6053      	str	r3, [r2, #4]
 8007696:	6011      	str	r1, [r2, #0]
 8007698:	e7da      	b.n	8007650 <_free_r+0x24>
 800769a:	d902      	bls.n	80076a2 <_free_r+0x76>
 800769c:	230c      	movs	r3, #12
 800769e:	6003      	str	r3, [r0, #0]
 80076a0:	e7d6      	b.n	8007650 <_free_r+0x24>
 80076a2:	6825      	ldr	r5, [r4, #0]
 80076a4:	1961      	adds	r1, r4, r5
 80076a6:	428b      	cmp	r3, r1
 80076a8:	bf02      	ittt	eq
 80076aa:	6819      	ldreq	r1, [r3, #0]
 80076ac:	685b      	ldreq	r3, [r3, #4]
 80076ae:	1949      	addeq	r1, r1, r5
 80076b0:	6063      	str	r3, [r4, #4]
 80076b2:	bf08      	it	eq
 80076b4:	6021      	streq	r1, [r4, #0]
 80076b6:	6054      	str	r4, [r2, #4]
 80076b8:	e7ca      	b.n	8007650 <_free_r+0x24>
 80076ba:	b003      	add	sp, #12
 80076bc:	bd30      	pop	{r4, r5, pc}
 80076be:	bf00      	nop
 80076c0:	2000029c 	.word	0x2000029c

080076c4 <sbrk_aligned>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	4e0e      	ldr	r6, [pc, #56]	; (8007700 <sbrk_aligned+0x3c>)
 80076c8:	460c      	mov	r4, r1
 80076ca:	4605      	mov	r5, r0
 80076cc:	6831      	ldr	r1, [r6, #0]
 80076ce:	b911      	cbnz	r1, 80076d6 <sbrk_aligned+0x12>
 80076d0:	f000 f8bc 	bl	800784c <_sbrk_r>
 80076d4:	6030      	str	r0, [r6, #0]
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 f8b7 	bl	800784c <_sbrk_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d00a      	beq.n	80076f8 <sbrk_aligned+0x34>
 80076e2:	1cc4      	adds	r4, r0, #3
 80076e4:	f024 0403 	bic.w	r4, r4, #3
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d007      	beq.n	80076fc <sbrk_aligned+0x38>
 80076ec:	1a21      	subs	r1, r4, r0
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 f8ac 	bl	800784c <_sbrk_r>
 80076f4:	3001      	adds	r0, #1
 80076f6:	d101      	bne.n	80076fc <sbrk_aligned+0x38>
 80076f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076fc:	4620      	mov	r0, r4
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	200002a0 	.word	0x200002a0

08007704 <_malloc_r>:
 8007704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007708:	1ccd      	adds	r5, r1, #3
 800770a:	4607      	mov	r7, r0
 800770c:	f025 0503 	bic.w	r5, r5, #3
 8007710:	3508      	adds	r5, #8
 8007712:	2d0c      	cmp	r5, #12
 8007714:	bf38      	it	cc
 8007716:	250c      	movcc	r5, #12
 8007718:	2d00      	cmp	r5, #0
 800771a:	db01      	blt.n	8007720 <_malloc_r+0x1c>
 800771c:	42a9      	cmp	r1, r5
 800771e:	d905      	bls.n	800772c <_malloc_r+0x28>
 8007720:	230c      	movs	r3, #12
 8007722:	2600      	movs	r6, #0
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	4630      	mov	r0, r6
 8007728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800772c:	4e2e      	ldr	r6, [pc, #184]	; (80077e8 <_malloc_r+0xe4>)
 800772e:	f000 f89d 	bl	800786c <__malloc_lock>
 8007732:	6833      	ldr	r3, [r6, #0]
 8007734:	461c      	mov	r4, r3
 8007736:	bb34      	cbnz	r4, 8007786 <_malloc_r+0x82>
 8007738:	4629      	mov	r1, r5
 800773a:	4638      	mov	r0, r7
 800773c:	f7ff ffc2 	bl	80076c4 <sbrk_aligned>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	4604      	mov	r4, r0
 8007744:	d14d      	bne.n	80077e2 <_malloc_r+0xde>
 8007746:	6834      	ldr	r4, [r6, #0]
 8007748:	4626      	mov	r6, r4
 800774a:	2e00      	cmp	r6, #0
 800774c:	d140      	bne.n	80077d0 <_malloc_r+0xcc>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	4631      	mov	r1, r6
 8007752:	4638      	mov	r0, r7
 8007754:	eb04 0803 	add.w	r8, r4, r3
 8007758:	f000 f878 	bl	800784c <_sbrk_r>
 800775c:	4580      	cmp	r8, r0
 800775e:	d13a      	bne.n	80077d6 <_malloc_r+0xd2>
 8007760:	6821      	ldr	r1, [r4, #0]
 8007762:	3503      	adds	r5, #3
 8007764:	4638      	mov	r0, r7
 8007766:	1a6d      	subs	r5, r5, r1
 8007768:	f025 0503 	bic.w	r5, r5, #3
 800776c:	3508      	adds	r5, #8
 800776e:	2d0c      	cmp	r5, #12
 8007770:	bf38      	it	cc
 8007772:	250c      	movcc	r5, #12
 8007774:	4629      	mov	r1, r5
 8007776:	f7ff ffa5 	bl	80076c4 <sbrk_aligned>
 800777a:	3001      	adds	r0, #1
 800777c:	d02b      	beq.n	80077d6 <_malloc_r+0xd2>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	442b      	add	r3, r5
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	e00e      	b.n	80077a4 <_malloc_r+0xa0>
 8007786:	6822      	ldr	r2, [r4, #0]
 8007788:	1b52      	subs	r2, r2, r5
 800778a:	d41e      	bmi.n	80077ca <_malloc_r+0xc6>
 800778c:	2a0b      	cmp	r2, #11
 800778e:	d916      	bls.n	80077be <_malloc_r+0xba>
 8007790:	1961      	adds	r1, r4, r5
 8007792:	42a3      	cmp	r3, r4
 8007794:	6025      	str	r5, [r4, #0]
 8007796:	bf18      	it	ne
 8007798:	6059      	strne	r1, [r3, #4]
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	bf08      	it	eq
 800779e:	6031      	streq	r1, [r6, #0]
 80077a0:	5162      	str	r2, [r4, r5]
 80077a2:	604b      	str	r3, [r1, #4]
 80077a4:	f104 060b 	add.w	r6, r4, #11
 80077a8:	4638      	mov	r0, r7
 80077aa:	f000 f865 	bl	8007878 <__malloc_unlock>
 80077ae:	1d23      	adds	r3, r4, #4
 80077b0:	f026 0607 	bic.w	r6, r6, #7
 80077b4:	1af2      	subs	r2, r6, r3
 80077b6:	d0b6      	beq.n	8007726 <_malloc_r+0x22>
 80077b8:	1b9b      	subs	r3, r3, r6
 80077ba:	50a3      	str	r3, [r4, r2]
 80077bc:	e7b3      	b.n	8007726 <_malloc_r+0x22>
 80077be:	6862      	ldr	r2, [r4, #4]
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	bf0c      	ite	eq
 80077c4:	6032      	streq	r2, [r6, #0]
 80077c6:	605a      	strne	r2, [r3, #4]
 80077c8:	e7ec      	b.n	80077a4 <_malloc_r+0xa0>
 80077ca:	4623      	mov	r3, r4
 80077cc:	6864      	ldr	r4, [r4, #4]
 80077ce:	e7b2      	b.n	8007736 <_malloc_r+0x32>
 80077d0:	4634      	mov	r4, r6
 80077d2:	6876      	ldr	r6, [r6, #4]
 80077d4:	e7b9      	b.n	800774a <_malloc_r+0x46>
 80077d6:	230c      	movs	r3, #12
 80077d8:	4638      	mov	r0, r7
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	f000 f84c 	bl	8007878 <__malloc_unlock>
 80077e0:	e7a1      	b.n	8007726 <_malloc_r+0x22>
 80077e2:	6025      	str	r5, [r4, #0]
 80077e4:	e7de      	b.n	80077a4 <_malloc_r+0xa0>
 80077e6:	bf00      	nop
 80077e8:	2000029c 	.word	0x2000029c

080077ec <_realloc_r>:
 80077ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f0:	4680      	mov	r8, r0
 80077f2:	4614      	mov	r4, r2
 80077f4:	460e      	mov	r6, r1
 80077f6:	b921      	cbnz	r1, 8007802 <_realloc_r+0x16>
 80077f8:	4611      	mov	r1, r2
 80077fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fe:	f7ff bf81 	b.w	8007704 <_malloc_r>
 8007802:	b92a      	cbnz	r2, 8007810 <_realloc_r+0x24>
 8007804:	4625      	mov	r5, r4
 8007806:	f7ff ff11 	bl	800762c <_free_r>
 800780a:	4628      	mov	r0, r5
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007810:	f000 f838 	bl	8007884 <_malloc_usable_size_r>
 8007814:	4284      	cmp	r4, r0
 8007816:	4607      	mov	r7, r0
 8007818:	d802      	bhi.n	8007820 <_realloc_r+0x34>
 800781a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800781e:	d812      	bhi.n	8007846 <_realloc_r+0x5a>
 8007820:	4621      	mov	r1, r4
 8007822:	4640      	mov	r0, r8
 8007824:	f7ff ff6e 	bl	8007704 <_malloc_r>
 8007828:	4605      	mov	r5, r0
 800782a:	2800      	cmp	r0, #0
 800782c:	d0ed      	beq.n	800780a <_realloc_r+0x1e>
 800782e:	42bc      	cmp	r4, r7
 8007830:	4622      	mov	r2, r4
 8007832:	4631      	mov	r1, r6
 8007834:	bf28      	it	cs
 8007836:	463a      	movcs	r2, r7
 8007838:	f7ff fed0 	bl	80075dc <memcpy>
 800783c:	4631      	mov	r1, r6
 800783e:	4640      	mov	r0, r8
 8007840:	f7ff fef4 	bl	800762c <_free_r>
 8007844:	e7e1      	b.n	800780a <_realloc_r+0x1e>
 8007846:	4635      	mov	r5, r6
 8007848:	e7df      	b.n	800780a <_realloc_r+0x1e>
	...

0800784c <_sbrk_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	2300      	movs	r3, #0
 8007850:	4d05      	ldr	r5, [pc, #20]	; (8007868 <_sbrk_r+0x1c>)
 8007852:	4604      	mov	r4, r0
 8007854:	4608      	mov	r0, r1
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	f7f9 fb42 	bl	8000ee0 <_sbrk>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_sbrk_r+0x1a>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_sbrk_r+0x1a>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	200002a4 	.word	0x200002a4

0800786c <__malloc_lock>:
 800786c:	4801      	ldr	r0, [pc, #4]	; (8007874 <__malloc_lock+0x8>)
 800786e:	f000 b811 	b.w	8007894 <__retarget_lock_acquire_recursive>
 8007872:	bf00      	nop
 8007874:	200002a8 	.word	0x200002a8

08007878 <__malloc_unlock>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__malloc_unlock+0x8>)
 800787a:	f000 b80c 	b.w	8007896 <__retarget_lock_release_recursive>
 800787e:	bf00      	nop
 8007880:	200002a8 	.word	0x200002a8

08007884 <_malloc_usable_size_r>:
 8007884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007888:	1f18      	subs	r0, r3, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	bfbc      	itt	lt
 800788e:	580b      	ldrlt	r3, [r1, r0]
 8007890:	18c0      	addlt	r0, r0, r3
 8007892:	4770      	bx	lr

08007894 <__retarget_lock_acquire_recursive>:
 8007894:	4770      	bx	lr

08007896 <__retarget_lock_release_recursive>:
 8007896:	4770      	bx	lr

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
