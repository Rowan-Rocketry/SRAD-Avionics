
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc7c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000295  0800deb4  0800deb4  0001deb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e14c  0800e14c  0001e14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e154  0800e154  0001e154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e158  0800e158  0001e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800e15c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000329  20000070  0800e1cc  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  20000399  0800e1cc  00020399  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002273a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b5e  00000000  00000000  000427e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b60  00000000  00000000  00046340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019d8  00000000  00000000  00047ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000321c6  00000000  00000000  00049878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002371d  00000000  00000000  0007ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135112  00000000  00000000  0009f15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d426d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000794c  00000000  00000000  001d42c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800de9c 	.word	0x0800de9c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800de9c 	.word	0x0800de9c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000298:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800029c:	f000 b982 	b.w	80005a4 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002be:	4604      	mov	r4, r0
 80002c0:	460f      	mov	r7, r1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0xa0>
 80002c6:	428a      	cmp	r2, r1
 80002c8:	4694      	mov	ip, r2
 80002ca:	d961      	bls.n	8000390 <__udivmoddi4+0xd8>
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	b143      	cbz	r3, 80002e4 <__udivmoddi4+0x2c>
 80002d2:	f1c3 0120 	rsb	r1, r3, #32
 80002d6:	409f      	lsls	r7, r3
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	409c      	lsls	r4, r3
 80002de:	fa20 f101 	lsr.w	r1, r0, r1
 80002e2:	430f      	orrs	r7, r1
 80002e4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002e8:	fa1f fe8c 	uxth.w	lr, ip
 80002ec:	0c22      	lsrs	r2, r4, #16
 80002ee:	fbb7 f6f1 	udiv	r6, r7, r1
 80002f2:	fb01 7716 	mls	r7, r1, r6, r7
 80002f6:	fb06 f00e 	mul.w	r0, r6, lr
 80002fa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fe:	4290      	cmp	r0, r2
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x5c>
 8000302:	eb1c 0202 	adds.w	r2, ip, r2
 8000306:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x5a>
 800030c:	4290      	cmp	r0, r2
 800030e:	f200 8137 	bhi.w	8000580 <__udivmoddi4+0x2c8>
 8000312:	463e      	mov	r6, r7
 8000314:	1a12      	subs	r2, r2, r0
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb2 f0f1 	udiv	r0, r2, r1
 800031c:	fb01 2210 	mls	r2, r1, r0, r2
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000328:	45a6      	cmp	lr, r4
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x86>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x84>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f200 811c 	bhi.w	8000574 <__udivmoddi4+0x2bc>
 800033c:	4610      	mov	r0, r2
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	eba4 040e 	sub.w	r4, r4, lr
 8000346:	2600      	movs	r6, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0x9a>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c5 4300 	strd	r4, r3, [r5]
 8000352:	4631      	mov	r1, r6
 8000354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000358:	428b      	cmp	r3, r1
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0xb8>
 800035c:	2d00      	cmp	r5, #0
 800035e:	f000 80fd 	beq.w	800055c <__udivmoddi4+0x2a4>
 8000362:	2600      	movs	r6, #0
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	4630      	mov	r0, r6
 800036a:	4631      	mov	r1, r6
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f683 	clz	r6, r3
 8000374:	2e00      	cmp	r6, #0
 8000376:	d14b      	bne.n	8000410 <__udivmoddi4+0x158>
 8000378:	428b      	cmp	r3, r1
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4630      	mov	r0, r6
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0e3      	beq.n	8000352 <__udivmoddi4+0x9a>
 800038a:	e9c5 4700 	strd	r4, r7, [r5]
 800038e:	e7e0      	b.n	8000352 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xdc>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809d 	bne.w	80004d8 <__udivmoddi4+0x220>
 800039e:	1a89      	subs	r1, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b297      	uxth	r7, r2
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f2fe 	udiv	r2, r1, lr
 80003ae:	fb0e 1112 	mls	r1, lr, r2, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb07 f002 	mul.w	r0, r7, r2
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4288      	cmp	r0, r1
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80cf 	beq.w	800057a <__udivmoddi4+0x2c2>
 80003dc:	4642      	mov	r2, r8
 80003de:	1a09      	subs	r1, r1, r0
 80003e0:	b2a4      	uxth	r4, r4
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f2:	42a7      	cmp	r7, r4
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x150>
 80003f6:	eb1c 0404 	adds.w	r4, ip, r4
 80003fa:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14e>
 8000400:	42a7      	cmp	r7, r4
 8000402:	f200 80b4 	bhi.w	800056e <__udivmoddi4+0x2b6>
 8000406:	4608      	mov	r0, r1
 8000408:	1be4      	subs	r4, r4, r7
 800040a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800040e:	e79b      	b.n	8000348 <__udivmoddi4+0x90>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa01 f406 	lsl.w	r4, r1, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	40f9      	lsrs	r1, r7
 8000420:	40b2      	lsls	r2, r6
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa20 f307 	lsr.w	r3, r0, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	431c      	orrs	r4, r3
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	0c20      	lsrs	r0, r4, #16
 800043a:	fbb1 f8f9 	udiv	r8, r1, r9
 800043e:	fb09 1118 	mls	r1, r9, r8, r1
 8000442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000446:	fb08 f00e 	mul.w	r0, r8, lr
 800044a:	4288      	cmp	r0, r1
 800044c:	d90f      	bls.n	800046e <__udivmoddi4+0x1b6>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	4288      	cmp	r0, r1
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ce>
 800046c:	46d0      	mov	r8, sl
 800046e:	1a09      	subs	r1, r1, r0
 8000470:	b2a4      	uxth	r4, r4
 8000472:	fbb1 f0f9 	udiv	r0, r1, r9
 8000476:	fb09 1110 	mls	r1, r9, r0, r1
 800047a:	fb00 fe0e 	mul.w	lr, r0, lr
 800047e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000482:	458e      	cmp	lr, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1de>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800048e:	d201      	bcs.n	8000494 <__udivmoddi4+0x1dc>
 8000490:	458e      	cmp	lr, r1
 8000492:	d87f      	bhi.n	8000594 <__udivmoddi4+0x2dc>
 8000494:	4620      	mov	r0, r4
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	fba0 9802 	umull	r9, r8, r0, r2
 80004a2:	4541      	cmp	r1, r8
 80004a4:	464c      	mov	r4, r9
 80004a6:	46c6      	mov	lr, r8
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0x1f8>
 80004aa:	d106      	bne.n	80004ba <__udivmoddi4+0x202>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d204      	bcs.n	80004ba <__udivmoddi4+0x202>
 80004b0:	3801      	subs	r0, #1
 80004b2:	ebb9 0402 	subs.w	r4, r9, r2
 80004b6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	d070      	beq.n	80005a0 <__udivmoddi4+0x2e8>
 80004be:	1b1a      	subs	r2, r3, r4
 80004c0:	eb61 010e 	sbc.w	r1, r1, lr
 80004c4:	fa22 f306 	lsr.w	r3, r2, r6
 80004c8:	fa01 f707 	lsl.w	r7, r1, r7
 80004cc:	40f1      	lsrs	r1, r6
 80004ce:	2600      	movs	r6, #0
 80004d0:	431f      	orrs	r7, r3
 80004d2:	e9c5 7100 	strd	r7, r1, [r5]
 80004d6:	e73c      	b.n	8000352 <__udivmoddi4+0x9a>
 80004d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004dc:	f1c3 0020 	rsb	r0, r3, #32
 80004e0:	fa01 f203 	lsl.w	r2, r1, r3
 80004e4:	fa21 f600 	lsr.w	r6, r1, r0
 80004e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ec:	fa24 f100 	lsr.w	r1, r4, r0
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	409c      	lsls	r4, r3
 80004f6:	4311      	orrs	r1, r2
 80004f8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004fc:	0c0a      	lsrs	r2, r1, #16
 80004fe:	fb0e 6610 	mls	r6, lr, r0, r6
 8000502:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000506:	fb00 f607 	mul.w	r6, r0, r7
 800050a:	4296      	cmp	r6, r2
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x274>
 800050e:	eb1c 0202 	adds.w	r2, ip, r2
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	4296      	cmp	r6, r2
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x272>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d6>
 800052a:	4640      	mov	r0, r8
 800052c:	1b92      	subs	r2, r2, r6
 800052e:	b289      	uxth	r1, r1
 8000530:	fbb2 f6fe 	udiv	r6, r2, lr
 8000534:	fb0e 2216 	mls	r2, lr, r6, r2
 8000538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800053c:	fb06 f207 	mul.w	r2, r6, r7
 8000540:	428a      	cmp	r2, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x29c>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x29a>
 800054e:	428a      	cmp	r2, r1
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2e2>
 8000552:	4646      	mov	r6, r8
 8000554:	1a89      	subs	r1, r1, r2
 8000556:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055a:	e725      	b.n	80003a8 <__udivmoddi4+0xf0>
 800055c:	462e      	mov	r6, r5
 800055e:	4628      	mov	r0, r5
 8000560:	e6f7      	b.n	8000352 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb61 0303 	sbc.w	r3, r1, r3
 8000568:	2001      	movs	r0, #1
 800056a:	461f      	mov	r7, r3
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xce>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e749      	b.n	8000408 <__udivmoddi4+0x150>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e1      	b.n	800033e <__udivmoddi4+0x86>
 800057a:	3a02      	subs	r2, #2
 800057c:	4461      	add	r1, ip
 800057e:	e72e      	b.n	80003de <__udivmoddi4+0x126>
 8000580:	3e02      	subs	r6, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c6      	b.n	8000314 <__udivmoddi4+0x5c>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b6>
 800058e:	3802      	subs	r0, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x274>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	e77d      	b.n	8000496 <__udivmoddi4+0x1de>
 800059a:	3e02      	subs	r6, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x29c>
 80005a0:	462e      	mov	r6, r5
 80005a2:	e6d6      	b.n	8000352 <__udivmoddi4+0x9a>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <LSM6DSL_config>:

static float accelSensitivity;
static float gyroSensitivity;

void LSM6DSL_config(LSM6DSL_HandleTypeDef* LSM6DSL_initStruct)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	config = LSM6DSL_initStruct;
 80005b0:	4a36      	ldr	r2, [pc, #216]	; (800068c <LSM6DSL_config+0xe4>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]

	switch (config->accelFullScale)
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <LSM6DSL_config+0xe4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7adb      	ldrb	r3, [r3, #11]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d828      	bhi.n	8000612 <LSM6DSL_config+0x6a>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <LSM6DSL_config+0x20>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005f5 	.word	0x080005f5
 80005cc:	08000613 	.word	0x08000613
 80005d0:	08000613 	.word	0x08000613
 80005d4:	08000613 	.word	0x08000613
 80005d8:	0800060d 	.word	0x0800060d
 80005dc:	08000613 	.word	0x08000613
 80005e0:	08000613 	.word	0x08000613
 80005e4:	08000613 	.word	0x08000613
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	08000613 	.word	0x08000613
 80005f0:	08000605 	.word	0x08000605
	{
		case LSM6DSL_ACCEL_FS_PM_2:
			accelSensitivity = 0.061f;
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <LSM6DSL_config+0xe8>)
 80005f6:	4a27      	ldr	r2, [pc, #156]	; (8000694 <LSM6DSL_config+0xec>)
 80005f8:	601a      	str	r2, [r3, #0]
			break;
 80005fa:	e00a      	b.n	8000612 <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_4:
			accelSensitivity = 0.122f;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <LSM6DSL_config+0xe8>)
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <LSM6DSL_config+0xf0>)
 8000600:	601a      	str	r2, [r3, #0]
			break;
 8000602:	e006      	b.n	8000612 <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_8:
			accelSensitivity = 0.244f;
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <LSM6DSL_config+0xe8>)
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <LSM6DSL_config+0xf4>)
 8000608:	601a      	str	r2, [r3, #0]
			break;
 800060a:	e002      	b.n	8000612 <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_16:
			accelSensitivity = 0.488f;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <LSM6DSL_config+0xe8>)
 800060e:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <LSM6DSL_config+0xf8>)
 8000610:	601a      	str	r2, [r3, #0]
	}

	switch (config->gyroFullScale)
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <LSM6DSL_config+0xe4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7b1b      	ldrb	r3, [r3, #12]
 8000618:	2b0c      	cmp	r3, #12
 800061a:	d831      	bhi.n	8000680 <LSM6DSL_config+0xd8>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <LSM6DSL_config+0x7c>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000661 	.word	0x08000661
 8000628:	08000681 	.word	0x08000681
 800062c:	08000659 	.word	0x08000659
 8000630:	08000681 	.word	0x08000681
 8000634:	08000669 	.word	0x08000669
 8000638:	08000681 	.word	0x08000681
 800063c:	08000681 	.word	0x08000681
 8000640:	08000681 	.word	0x08000681
 8000644:	08000671 	.word	0x08000671
 8000648:	08000681 	.word	0x08000681
 800064c:	08000681 	.word	0x08000681
 8000650:	08000681 	.word	0x08000681
 8000654:	08000679 	.word	0x08000679
	{
		case LSM6DSL_GYRO_FS_PM_125:
			gyroSensitivity = 4.375f;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <LSM6DSL_config+0xfc>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <LSM6DSL_config+0x100>)
 800065c:	601a      	str	r2, [r3, #0]
			break;
 800065e:	e00f      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_250:	
			gyroSensitivity = 8.75f;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <LSM6DSL_config+0xfc>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <LSM6DSL_config+0x104>)
 8000664:	601a      	str	r2, [r3, #0]
			break;
 8000666:	e00b      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_500:	
			gyroSensitivity = 17.50f;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <LSM6DSL_config+0xfc>)
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <LSM6DSL_config+0x108>)
 800066c:	601a      	str	r2, [r3, #0]
			break;
 800066e:	e007      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_1000:	
			gyroSensitivity = 35.0f;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <LSM6DSL_config+0xfc>)
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <LSM6DSL_config+0x10c>)
 8000674:	601a      	str	r2, [r3, #0]
			break;
 8000676:	e003      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_2000:	
			gyroSensitivity = 70.0f;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <LSM6DSL_config+0xfc>)
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <LSM6DSL_config+0x110>)
 800067c:	601a      	str	r2, [r3, #0]
	}
}
 800067e:	e7ff      	b.n	8000680 <LSM6DSL_config+0xd8>
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000008c 	.word	0x2000008c
 8000690:	200000a0 	.word	0x200000a0
 8000694:	3d79db23 	.word	0x3d79db23
 8000698:	3df9db23 	.word	0x3df9db23
 800069c:	3e79db23 	.word	0x3e79db23
 80006a0:	3ef9db23 	.word	0x3ef9db23
 80006a4:	200000a4 	.word	0x200000a4
 80006a8:	408c0000 	.word	0x408c0000
 80006ac:	410c0000 	.word	0x410c0000
 80006b0:	418c0000 	.word	0x418c0000
 80006b4:	420c0000 	.word	0x420c0000
 80006b8:	428c0000 	.word	0x428c0000

080006bc <LSM6DSL_getAccel>:

	return buffer.result;
}

void LSM6DSL_getAccel(int16_t* dest)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	dest[0] = accel[0];
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <LSM6DSL_getAccel+0x38>)
 80006c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	801a      	strh	r2, [r3, #0]
	dest[1] = accel[1];
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3302      	adds	r3, #2
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <LSM6DSL_getAccel+0x38>)
 80006d4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80006d8:	801a      	strh	r2, [r3, #0]
	dest[2] = accel[2];
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3304      	adds	r3, #4
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <LSM6DSL_getAccel+0x38>)
 80006e0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80006e4:	801a      	strh	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000090 	.word	0x20000090

080006f8 <LSM6DSL_getGyro>:

void LSM6DSL_getGyro(int16_t* dest)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	dest[0] = gyro[0];
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <LSM6DSL_getGyro+0x38>)
 8000702:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	801a      	strh	r2, [r3, #0]
	dest[1] = gyro[1];
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3302      	adds	r3, #2
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <LSM6DSL_getGyro+0x38>)
 8000710:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000714:	801a      	strh	r2, [r3, #0]
	dest[2] = gyro[2];
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3304      	adds	r3, #4
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <LSM6DSL_getGyro+0x38>)
 800071c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000720:	801a      	strh	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000098 	.word	0x20000098

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	f5ad 6de0 	sub.w	sp, sp, #1792	; 0x700
 800073a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f001 fa9c 	bl	8001c78 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4bb1      	ldr	r3, [pc, #708]	; (8000a08 <main+0x2d4>)
 8000742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000746:	4ab0      	ldr	r2, [pc, #704]	; (8000a08 <main+0x2d4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000750:	4bad      	ldr	r3, [pc, #692]	; (8000a08 <main+0x2d4>)
 8000752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000756:	f003 0204 	and.w	r2, r3, #4
 800075a:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800075e:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8000768:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800076c:	681b      	ldr	r3, [r3, #0]

  // Configure MS5607
	MS5607_HandleTypeDef ms5607Config = {0};
 800076e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  	ms5607Config.spi = &hspi1;
 800077c:	4ba3      	ldr	r3, [pc, #652]	; (8000a0c <main+0x2d8>)
 800077e:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
  	ms5607Config.timer = &htim16;
 8000782:	4ba3      	ldr	r3, [pc, #652]	; (8000a10 <main+0x2dc>)
 8000784:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
  	ms5607Config.csPort = GPIOA;
 8000788:	4ba2      	ldr	r3, [pc, #648]	; (8000a14 <main+0x2e0>)
 800078a:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
  	ms5607Config.csPin = GPIO_PIN_3;
 800078e:	2308      	movs	r3, #8
 8000790:	f8a7 36b4 	strh.w	r3, [r7, #1716]	; 0x6b4
  	ms5607Config.osr = MS5607_OSR_1024;
 8000794:	2304      	movs	r3, #4
 8000796:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
	MS5607_config(&ms5607Config);
 800079a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fbd0 	bl	8000f44 <MS5607_config>

	LSM6DSL_HandleTypeDef lsm6dslConfig = {0};
 80007a4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
	lsm6dslConfig.spi = &hspi2;
 80007b2:	4b99      	ldr	r3, [pc, #612]	; (8000a18 <main+0x2e4>)
 80007b4:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
	lsm6dslConfig.csPort = GPIOH;
 80007b8:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <main+0x2e8>)
 80007ba:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
	lsm6dslConfig.csPin = GPIO_PIN_1;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8a7 36a0 	strh.w	r3, [r7, #1696]	; 0x6a0
	lsm6dslConfig.outputDataRate = LSM6DSL_ODR_104_HZ;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	f887 36a2 	strb.w	r3, [r7, #1698]	; 0x6a2
	lsm6dslConfig.accelFullScale = LSM6DSL_ACCEL_FS_PM_16;
 80007ca:	2304      	movs	r3, #4
 80007cc:	f887 36a3 	strb.w	r3, [r7, #1699]	; 0x6a3
	lsm6dslConfig.gyroFullScale = LSM6DSL_GYRO_FS_PM_500;
 80007d0:	2304      	movs	r3, #4
 80007d2:	f887 36a4 	strb.w	r3, [r7, #1700]	; 0x6a4
	LSM6DSL_config(&lsm6dslConfig);
 80007d6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fee4 	bl	80005a8 <LSM6DSL_config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f934 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 fafe 	bl	8000de4 <MX_GPIO_Init>
  MX_TIM16_Init();
 80007e8:	f000 fa84 	bl	8000cf4 <MX_TIM16_Init>
  MX_SPI1_Init();
 80007ec:	f000 f9a6 	bl	8000b3c <MX_SPI1_Init>
  MX_SPI2_Init();
 80007f0:	f000 fa12 	bl	8000c18 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80007f4:	f000 faaa 	bl	8000d4c <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007f8:	f000 f982 	bl	8000b00 <MX_SDMMC1_SD_Init>

	int16_t accel[3];
	int16_t gyro[3];
	
	// Test MicroSD card write
	MX_FATFS_Init();
 80007fc:	f009 fe34 	bl	800a468 <MX_FATFS_Init>
	UINT bytesWritten;
	uint8_t sdBuffer[_MAX_SS];

	//res = disk_initialize(0);

	res = f_mkfs("", FM_ANY, 0, sdBuffer, sizeof(sdBuffer));
 8000800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	9200      	str	r2, [sp, #0]
 800080a:	2200      	movs	r2, #0
 800080c:	2107      	movs	r1, #7
 800080e:	4884      	ldr	r0, [pc, #528]	; (8000a20 <main+0x2ec>)
 8000810:	f00c fa0c 	bl	800cc2c <f_mkfs>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 36f7 	strb.w	r3, [r7, #1783]	; 0x6f7
	if (res != FR_OK)
 800081a:	f897 36f7 	ldrb.w	r3, [r7, #1783]	; 0x6f7
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <main+0xf2>
	{
		Error_Handler();
 8000822:	f000 fb89 	bl	8000f38 <Error_Handler>
	}

	res = f_mount(&fs, ":0", 1);
 8000826:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800082a:	2201      	movs	r2, #1
 800082c:	497d      	ldr	r1, [pc, #500]	; (8000a24 <main+0x2f0>)
 800082e:	4618      	mov	r0, r3
 8000830:	f00b fd40 	bl	800c2b4 <f_mount>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 36f7 	strb.w	r3, [r7, #1783]	; 0x6f7
	if (res != FR_OK)
 800083a:	f897 36f7 	ldrb.w	r3, [r7, #1783]	; 0x6f7
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <main+0x112>
	{
		Error_Handler();
 8000842:	f000 fb79 	bl	8000f38 <Error_Handler>
	}

	char label[16];
	res = f_getlabel("", label, 0);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	4874      	ldr	r0, [pc, #464]	; (8000a20 <main+0x2ec>)
 8000850:	f00c f951 	bl	800caf6 <f_getlabel>
 8000854:	4603      	mov	r3, r0
 8000856:	f887 36f7 	strb.w	r3, [r7, #1783]	; 0x6f7
	if (res != FR_OK)
 800085a:	f897 36f7 	ldrb.w	r3, [r7, #1783]	; 0x6f7
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <main+0x132>
	{
		Error_Handler();
 8000862:	f000 fb69 	bl	8000f38 <Error_Handler>
	}

	uartBufferLen = sprintf(uartBuffer, "%s\n", label);
 8000866:	f107 0214 	add.w	r2, r7, #20
 800086a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800086e:	496e      	ldr	r1, [pc, #440]	; (8000a28 <main+0x2f4>)
 8000870:	4618      	mov	r0, r3
 8000872:	f00c fe95 	bl	800d5a0 <siprintf>
 8000876:	f8c7 06f0 	str.w	r0, [r7, #1776]	; 0x6f0
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 800087a:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	4869      	ldr	r0, [pc, #420]	; (8000a2c <main+0x2f8>)
 8000888:	f008 fae2 	bl	8008e50 <HAL_UART_Transmit>

	res = f_open(&file, "hello.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800088c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000890:	220a      	movs	r2, #10
 8000892:	4967      	ldr	r1, [pc, #412]	; (8000a30 <main+0x2fc>)
 8000894:	4618      	mov	r0, r3
 8000896:	f00b fd53 	bl	800c340 <f_open>
 800089a:	4603      	mov	r3, r0
 800089c:	f887 36f7 	strb.w	r3, [r7, #1783]	; 0x6f7
	if (res != FR_OK)
 80008a0:	f897 36f7 	ldrb.w	r3, [r7, #1783]	; 0x6f7
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <main+0x178>
	{
		Error_Handler();
 80008a8:	f000 fb46 	bl	8000f38 <Error_Handler>
	}

	const char* fileContents = "Hello world!\n";
 80008ac:	4b61      	ldr	r3, [pc, #388]	; (8000a34 <main+0x300>)
 80008ae:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
	res = f_write(&file, fileContents, strlen(fileContents), &bytesWritten);
 80008b2:	f8d7 06ec 	ldr.w	r0, [r7, #1772]	; 0x6ec
 80008b6:	f7ff fcdf 	bl	8000278 <strlen>
 80008ba:	4602      	mov	r2, r0
 80008bc:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80008c0:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80008c4:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 80008c8:	f00b fef8 	bl	800c6bc <f_write>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 36f7 	strb.w	r3, [r7, #1783]	; 0x6f7
	if (res != FR_OK || bytesWritten != strlen(fileContents))
 80008d2:	f897 36f7 	ldrb.w	r3, [r7, #1783]	; 0x6f7
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10b      	bne.n	80008f2 <main+0x1be>
 80008da:	f8d7 06ec 	ldr.w	r0, [r7, #1772]	; 0x6ec
 80008de:	f7ff fccb 	bl	8000278 <strlen>
 80008e2:	4602      	mov	r2, r0
 80008e4:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80008e8:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d001      	beq.n	80008f6 <main+0x1c2>
	{
		Error_Handler();
 80008f2:	f000 fb21 	bl	8000f38 <Error_Handler>
	}

	f_close(&file);
 80008f6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80008fa:	4618      	mov	r0, r3
 80008fc:	f00c f8d1 	bl	800caa2 <f_close>
	f_mount(NULL, "", 1);
 8000900:	2201      	movs	r2, #1
 8000902:	4947      	ldr	r1, [pc, #284]	; (8000a20 <main+0x2ec>)
 8000904:	2000      	movs	r0, #0
 8000906:	f00b fcd5 	bl	800c2b4 <f_mount>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	//writePressure();
	if (MS5607_getState() == MS5607_IDLE)
 800090a:	f000 febd 	bl	8001688 <MS5607_getState>
 800090e:	4603      	mov	r3, r0
 8000910:	2b03      	cmp	r3, #3
 8000912:	d16d      	bne.n	80009f0 <main+0x2bc>
	{
		// Get result of digital read
		MS5607_RawVal rawVals = MS5607_getRawValues();
 8000914:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8000918:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fe95 	bl	800164c <MS5607_getRawValues>

		// Compensate digital reading
		MS5607_CompVal compVals = MS5607_getCompValues(&rawVals);
 8000922:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8000926:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 800092a:	f107 0208 	add.w	r2, r7, #8
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fb5d 	bl	8000ff0 <MS5607_getCompValues>


		uartBufferLen = sprintf(uartBuffer, "Time: %d\n", HAL_GetTick());
 8000936:	f001 fa17 	bl	8001d68 <HAL_GetTick>
 800093a:	4602      	mov	r2, r0
 800093c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8000940:	493d      	ldr	r1, [pc, #244]	; (8000a38 <main+0x304>)
 8000942:	4618      	mov	r0, r3
 8000944:	f00c fe2c 	bl	800d5a0 <siprintf>
 8000948:	f8c7 06f0 	str.w	r0, [r7, #1776]	; 0x6f0
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 800094c:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	4834      	ldr	r0, [pc, #208]	; (8000a2c <main+0x2f8>)
 800095a:	f008 fa79 	bl	8008e50 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Pres: %d\n", pressure);
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <main+0x308>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8000966:	4936      	ldr	r1, [pc, #216]	; (8000a40 <main+0x30c>)
 8000968:	4618      	mov	r0, r3
 800096a:	f00c fe19 	bl	800d5a0 <siprintf>
 800096e:	f8c7 06f0 	str.w	r0, [r7, #1776]	; 0x6f0
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000972:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 8000976:	b29a      	uxth	r2, r3
 8000978:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	482b      	ldr	r0, [pc, #172]	; (8000a2c <main+0x2f8>)
 8000980:	f008 fa66 	bl	8008e50 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Accel: %d %d %d\n", accel[0], accel[1], accel[2]);
 8000984:	f9b7 3690 	ldrsh.w	r3, [r7, #1680]	; 0x690
 8000988:	461a      	mov	r2, r3
 800098a:	f9b7 3692 	ldrsh.w	r3, [r7, #1682]	; 0x692
 800098e:	4619      	mov	r1, r3
 8000990:	f9b7 3694 	ldrsh.w	r3, [r7, #1684]	; 0x694
 8000994:	f507 60d7 	add.w	r0, r7, #1720	; 0x6b8
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	460b      	mov	r3, r1
 800099c:	4929      	ldr	r1, [pc, #164]	; (8000a44 <main+0x310>)
 800099e:	f00c fdff 	bl	800d5a0 <siprintf>
 80009a2:	f8c7 06f0 	str.w	r0, [r7, #1776]	; 0x6f0
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 80009a6:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	481e      	ldr	r0, [pc, #120]	; (8000a2c <main+0x2f8>)
 80009b4:	f008 fa4c 	bl	8008e50 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Gyro: %d %d %d\n", accel[0], accel[1], accel[2]);
 80009b8:	f9b7 3690 	ldrsh.w	r3, [r7, #1680]	; 0x690
 80009bc:	461a      	mov	r2, r3
 80009be:	f9b7 3692 	ldrsh.w	r3, [r7, #1682]	; 0x692
 80009c2:	4619      	mov	r1, r3
 80009c4:	f9b7 3694 	ldrsh.w	r3, [r7, #1684]	; 0x694
 80009c8:	f507 60d7 	add.w	r0, r7, #1720	; 0x6b8
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	460b      	mov	r3, r1
 80009d0:	491d      	ldr	r1, [pc, #116]	; (8000a48 <main+0x314>)
 80009d2:	f00c fde5 	bl	800d5a0 <siprintf>
 80009d6:	f8c7 06f0 	str.w	r0, [r7, #1776]	; 0x6f0
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 80009da:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <main+0x2f8>)
 80009e8:	f008 fa32 	bl	8008e50 <HAL_UART_Transmit>

		// Measure again
		MS5607_readUncompPres();
 80009ec:	f000 fd7c 	bl	80014e8 <MS5607_readUncompPres>
	}
	LSM6DSL_getAccel(accel);
 80009f0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe61 	bl	80006bc <LSM6DSL_getAccel>
	LSM6DSL_getGyro(gyro);
 80009fa:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe7a 	bl	80006f8 <LSM6DSL_getGyro>
	if (MS5607_getState() == MS5607_IDLE)
 8000a04:	e781      	b.n	800090a <main+0x1d6>
 8000a06:	bf00      	nop
 8000a08:	46020c00 	.word	0x46020c00
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	20000244 	.word	0x20000244
 8000a14:	42020000 	.word	0x42020000
 8000a18:	200001b4 	.word	0x200001b4
 8000a1c:	42021c00 	.word	0x42021c00
 8000a20:	0800deb4 	.word	0x0800deb4
 8000a24:	0800deb8 	.word	0x0800deb8
 8000a28:	0800debc 	.word	0x0800debc
 8000a2c:	20000290 	.word	0x20000290
 8000a30:	0800dec0 	.word	0x0800dec0
 8000a34:	0800decc 	.word	0x0800decc
 8000a38:	0800dedc 	.word	0x0800dedc
 8000a3c:	20000324 	.word	0x20000324
 8000a40:	0800dee8 	.word	0x0800dee8
 8000a44:	0800def4 	.word	0x0800def4
 8000a48:	0800df08 	.word	0x0800df08

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09e      	sub	sp, #120	; 0x78
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0318 	add.w	r3, r7, #24
 8000a56:	2260      	movs	r2, #96	; 0x60
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00c fd98 	bl	800d590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000a70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a74:	f001 fca8 	bl	80023c8 <HAL_PWREx_ControlVoltageScaling>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000a7e:	f000 fa5b 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000aa0:	231e      	movs	r3, #30
 8000aa2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 6;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000aac:	2306      	movs	r3, #6
 8000aae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fd0f 	bl	80024e0 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ac8:	f000 fa36 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	231f      	movs	r3, #31
 8000ace:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000ad8:	2370      	movs	r3, #112	; 0x70
 8000ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000adc:	2370      	movs	r3, #112	; 0x70
 8000ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 fbd5 	bl	8003298 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000af4:	f000 fa20 	bl	8000f38 <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3778      	adds	r7, #120	; 0x78
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_SDMMC1_SD_Init+0x34>)
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <MX_SDMMC1_SD_Init+0x38>)
 8000b08:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_SDMMC1_SD_Init+0x34>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_SDMMC1_SD_Init+0x34>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_SDMMC1_SD_Init+0x34>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <MX_SDMMC1_SD_Init+0x34>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <MX_SDMMC1_SD_Init+0x34>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000a8 	.word	0x200000a8
 8000b38:	420c8000 	.word	0x420c8000

08000b3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b4e:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <MX_SPI1_Init+0xd8>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b62:	2207      	movs	r2, #7
 8000b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd4:	480e      	ldr	r0, [pc, #56]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bd6:	f006 fecf 	bl	8007978 <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 8000be0:	f000 f9aa 	bl	8000f38 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000be8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bec:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_SPI1_Init+0xd4>)
 8000bf8:	f007 fc8b 	bl	8008512 <HAL_SPIEx_SetConfigAutonomousMode>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 8000c02:	f000 f999 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000124 	.word	0x20000124
 8000c14:	40013000 	.word	0x40013000

08000c18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c2a:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <MX_SPI2_Init+0xd8>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c36:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c3c:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c3e:	2203      	movs	r2, #3
 8000c40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000cb4:	f006 fe60 	bl	8007978 <HAL_SPI_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000cbe:	f000 f93b 	bl	8000f38 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000cc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cca:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_SPI2_Init+0xd4>)
 8000cd6:	f007 fc1c 	bl	8008512 <HAL_SPIEx_SetConfigAutonomousMode>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000ce0:	f000 f92a 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001b4 	.word	0x200001b4
 8000cf0:	40003800 	.word	0x40003800

08000cf4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	uint16_t ms5607MeasurementDelay = MS5607_getMeasurementDelay();
 8000cfa:	f000 fcb9 	bl	8001670 <MS5607_getMeasurementDelay>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <MX_TIM16_Init+0x54>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40-1;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d0a:	2227      	movs	r2, #39	; 0x27
 8000d0c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = ms5607MeasurementDelay;
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d18:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_TIM16_Init+0x50>)
 8000d2e:	f007 fc31 	bl	8008594 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM16_Init+0x48>
  {
    Error_Handler();
 8000d38:	f000 f8fe 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000244 	.word	0x20000244
 8000d48:	40014400 	.word	0x40014400

08000d4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000d96:	f008 f80b 	bl	8008db0 <HAL_UART_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 f8ca 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000da8:	f008 fcca 	bl	8009740 <HAL_UARTEx_SetTxFifoThreshold>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f000 f8c1 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000dba:	f008 fcff 	bl	80097bc <HAL_UARTEx_SetRxFifoThreshold>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f000 f8b8 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_USART1_UART_Init+0x90>)
 8000dca:	f008 fc80 	bl	80096ce <HAL_UARTEx_DisableFifoMode>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 f8b0 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000290 	.word	0x20000290
 8000de0:	40013800 	.word	0x40013800

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <MX_GPIO_Init+0x118>)
 8000dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e00:	4a3e      	ldr	r2, [pc, #248]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e0a:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	4b38      	ldr	r3, [pc, #224]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e1e:	4a37      	ldr	r2, [pc, #220]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e28:	4b34      	ldr	r3, [pc, #208]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e3c:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e78:	4a20      	ldr	r2, [pc, #128]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_GPIO_Init+0x118>)
 8000e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2102      	movs	r1, #2
 8000e94:	481a      	ldr	r0, [pc, #104]	; (8000f00 <MX_GPIO_Init+0x11c>)
 8000e96:	f001 fa7f 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	4819      	ldr	r0, [pc, #100]	; (8000f04 <MX_GPIO_Init+0x120>)
 8000ea0:	f001 fa7a 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <MX_GPIO_Init+0x11c>)
 8000ebc:	f001 f894 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8000ec0:	2309      	movs	r3, #9
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_GPIO_Init+0x124>)
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	; (8000f0c <MX_GPIO_Init+0x128>)
 8000ed4:	f001 f888 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_GPIO_Init+0x120>)
 8000ef0:	f001 f87a 	bl	8001fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	46020c00 	.word	0x46020c00
 8000f00:	42021c00 	.word	0x42021c00
 8000f04:	42020000 	.word	0x42020000
 8000f08:	10110000 	.word	0x10110000
 8000f0c:	42020800 	.word	0x42020800

08000f10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d104      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f22:	f007 fc2f 	bl	8008784 <HAL_TIM_Base_Stop_IT>
		MS5607_TimerCallback();
 8000f26:	f000 fb6f 	bl	8001608 <MS5607_TimerCallback>
		//pressure = readMS5607ADC();
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000244 	.word	0x20000244

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <MS5607_config>:
static uint16_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_config(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	config = MS5607_initStruct;
 8000f4c:	4a24      	ldr	r2, [pc, #144]	; (8000fe0 <MS5607_config+0x9c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MS5607_config+0x9c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	7b9b      	ldrb	r3, [r3, #14]
 8000f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MS5607_config+0xa0>)
 8000f60:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MS5607_config+0x9c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	7b9b      	ldrb	r3, [r3, #14]
 8000f68:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MS5607_config+0xa4>)
 8000f70:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MS5607_config+0x9c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	7b9b      	ldrb	r3, [r3, #14]
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d82b      	bhi.n	8000fd4 <MS5607_config+0x90>
 8000f7c:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <MS5607_config+0x40>)
 8000f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f82:	bf00      	nop
 8000f84:	08000fa9 	.word	0x08000fa9
 8000f88:	08000fd5 	.word	0x08000fd5
 8000f8c:	08000fb1 	.word	0x08000fb1
 8000f90:	08000fd5 	.word	0x08000fd5
 8000f94:	08000fb9 	.word	0x08000fb9
 8000f98:	08000fd5 	.word	0x08000fd5
 8000f9c:	08000fc1 	.word	0x08000fc1
 8000fa0:	08000fd5 	.word	0x08000fd5
 8000fa4:	08000fcb 	.word	0x08000fcb
	{
		case MS5607_OSR_256:
			measurementDelay = 50;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MS5607_config+0xa8>)
 8000faa:	2232      	movs	r2, #50	; 0x32
 8000fac:	801a      	strh	r2, [r3, #0]
			break;
 8000fae:	e011      	b.n	8000fd4 <MS5607_config+0x90>
		case MS5607_OSR_512:
			measurementDelay = 110;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MS5607_config+0xa8>)
 8000fb2:	226e      	movs	r2, #110	; 0x6e
 8000fb4:	801a      	strh	r2, [r3, #0]
			break;
 8000fb6:	e00d      	b.n	8000fd4 <MS5607_config+0x90>
		case MS5607_OSR_1024:
			measurementDelay = 210;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MS5607_config+0xa8>)
 8000fba:	22d2      	movs	r2, #210	; 0xd2
 8000fbc:	801a      	strh	r2, [r3, #0]
			break;
 8000fbe:	e009      	b.n	8000fd4 <MS5607_config+0x90>
		case MS5607_OSR_2048:
			measurementDelay = 410;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MS5607_config+0xa8>)
 8000fc2:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8000fc6:	801a      	strh	r2, [r3, #0]
			break;
 8000fc8:	e004      	b.n	8000fd4 <MS5607_config+0x90>
		case MS5607_OSR_4096:
			measurementDelay = 822;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MS5607_config+0xa8>)
 8000fcc:	f240 3236 	movw	r2, #822	; 0x336
 8000fd0:	801a      	strh	r2, [r3, #0]
	}

}
 8000fd2:	e7ff      	b.n	8000fd4 <MS5607_config+0x90>
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	20000328 	.word	0x20000328
 8000fe4:	20000344 	.word	0x20000344
 8000fe8:	20000345 	.word	0x20000345
 8000fec:	20000342 	.word	0x20000342

08000ff0 <MS5607_getCompValues>:
		promDataPtr[promAddr-1] = ((uint8_t)responseBuffer[0]<<8) | (uint8_t)responseBuffer[1];
	}
}

MS5607_CompVal MS5607_getCompValues(MS5607_RawVal* rawVals)
{
 8000ff0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ff4:	b0d5      	sub	sp, #340	; 0x154
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000ffc:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
	MS5607_CompVal compVals;

	uint32_t digTemp = rawVals->temp;
 8001000:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint32_t digPres = rawVals->pres;
 800100a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	// dT = D2 - TREF
	int32_t deltaTemp = digTemp - ((int32_t)promData.tRef << 8);
 8001014:	4baf      	ldr	r3, [pc, #700]	; (80012d4 <MS5607_getCompValues+0x2e4>)
 8001016:	891b      	ldrh	r3, [r3, #8]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	461a      	mov	r2, r3
 800101c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	
	// TEMP = 20°C + dT*TEMPSENS
	int32_t temp1 = 2000 + deltaTemp*((int32_t)promData.tempSens << 23);
 8001026:	4bab      	ldr	r3, [pc, #684]	; (80012d4 <MS5607_getCompValues+0x2e4>)
 8001028:	895b      	ldrh	r3, [r3, #10]
 800102a:	05da      	lsls	r2, r3, #23
 800102c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001038:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	// OFF = OFFT1 + TCO*dT
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 800103c:	4ba5      	ldr	r3, [pc, #660]	; (80012d4 <MS5607_getCompValues+0x2e4>)
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	b29b      	uxth	r3, r3
 8001042:	2200      	movs	r2, #0
 8001044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001048:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800104c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8001050:	460b      	mov	r3, r1
 8001052:	0bdb      	lsrs	r3, r3, #15
 8001054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001058:	460b      	mov	r3, r1
 800105a:	045b      	lsls	r3, r3, #17
 800105c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				   + (((int64_t)promData.tco*deltaTemp) >> 6);
 8001060:	4b9c      	ldr	r3, [pc, #624]	; (80012d4 <MS5607_getCompValues+0x2e4>)
 8001062:	88db      	ldrh	r3, [r3, #6]
 8001064:	b29b      	uxth	r3, r3
 8001066:	2200      	movs	r2, #0
 8001068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800106c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001070:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001074:	17da      	asrs	r2, r3, #31
 8001076:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800107a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800107e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001082:	460b      	mov	r3, r1
 8001084:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001088:	fb02 f203 	mul.w	r2, r2, r3
 800108c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001090:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8
 8001094:	4601      	mov	r1, r0
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	4413      	add	r3, r2
 800109c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80010a0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80010a4:	fba2 4501 	umull	r4, r5, r2, r1
 80010a8:	442b      	add	r3, r5
 80010aa:	461d      	mov	r5, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	09a2      	lsrs	r2, r4, #6
 80010b6:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80010ba:	11ab      	asrs	r3, r5, #6
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 80010bc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80010c0:	4621      	mov	r1, r4
 80010c2:	1889      	adds	r1, r1, r2
 80010c4:	6339      	str	r1, [r7, #48]	; 0x30
 80010c6:	4629      	mov	r1, r5
 80010c8:	eb43 0101 	adc.w	r1, r3, r1
 80010cc:	6379      	str	r1, [r7, #52]	; 0x34
 80010ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010d2:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	
	// SENS = SENST1 + TCS* dT
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <MS5607_getCompValues+0x2e4>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80010e6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80010ea:	460b      	mov	r3, r1
 80010ec:	0c1b      	lsrs	r3, r3, #16
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80010f2:	460b      	mov	r3, r1
 80010f4:	041b      	lsls	r3, r3, #16
 80010f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						+ (((int64_t)promData.tcs*deltaTemp) >> 7);
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <MS5607_getCompValues+0x2e4>)
 80010fc:	889b      	ldrh	r3, [r3, #4]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	2200      	movs	r2, #0
 8001102:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001106:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800110a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800110e:	17da      	asrs	r2, r3, #31
 8001110:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001114:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001118:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800111c:	460b      	mov	r3, r1
 800111e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001122:	4622      	mov	r2, r4
 8001124:	fb02 f203 	mul.w	r2, r2, r3
 8001128:	e9c7 453a 	strd	r4, r5, [r7, #232]	; 0xe8
 800112c:	462b      	mov	r3, r5
 800112e:	4604      	mov	r4, r0
 8001130:	460d      	mov	r5, r1
 8001132:	4621      	mov	r1, r4
 8001134:	fb01 f303 	mul.w	r3, r1, r3
 8001138:	4413      	add	r3, r2
 800113a:	4622      	mov	r2, r4
 800113c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001140:	fba2 ab01 	umull	sl, fp, r2, r1
 8001144:	445b      	add	r3, fp
 8001146:	469b      	mov	fp, r3
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	ea4f 12da 	mov.w	r2, sl, lsr #7
 8001154:	ea42 624b 	orr.w	r2, r2, fp, lsl #25
 8001158:	ea4f 13eb 	mov.w	r3, fp, asr #7
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 800115c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001160:	4621      	mov	r1, r4
 8001162:	1889      	adds	r1, r1, r2
 8001164:	62b9      	str	r1, [r7, #40]	; 0x28
 8001166:	4629      	mov	r1, r5
 8001168:	eb43 0101 	adc.w	r1, r3, r1
 800116c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800116e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001172:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

	// Second order compensation
	if (temp1 < 2000)
 8001176:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800117a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800117e:	f280 8159 	bge.w	8001434 <MS5607_getCompValues+0x444>
	{
		int32_t temp2 = (deltaTemp*deltaTemp) >> 31;
 8001182:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001186:	fb03 f303 	mul.w	r3, r3, r3
 800118a:	17db      	asrs	r3, r3, #31
 800118c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		int32_t temp2000 = temp1 - 2000;
 8001190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001194:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001198:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		int64_t offset2 = 61*((int64_t)temp2000 * (int64_t)temp2000) >> 4;
 800119c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011a0:	17da      	asrs	r2, r3, #31
 80011a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80011aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ae:	17da      	asrs	r2, r3, #31
 80011b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011b8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011bc:	462b      	mov	r3, r5
 80011be:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
 80011c2:	4652      	mov	r2, sl
 80011c4:	fb02 f203 	mul.w	r2, r2, r3
 80011c8:	465b      	mov	r3, fp
 80011ca:	4621      	mov	r1, r4
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	4622      	mov	r2, r4
 80011d4:	4651      	mov	r1, sl
 80011d6:	fba2 1201 	umull	r1, r2, r2, r1
 80011da:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80011de:	460a      	mov	r2, r1
 80011e0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80011e4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80011e8:	4413      	add	r3, r2
 80011ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80011ee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80011f2:	4622      	mov	r2, r4
 80011f4:	462b      	mov	r3, r5
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	f04f 0100 	mov.w	r1, #0
 80011fe:	0119      	lsls	r1, r3, #4
 8001200:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001204:	0110      	lsls	r0, r2, #4
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4621      	mov	r1, r4
 800120c:	ebb2 0801 	subs.w	r8, r2, r1
 8001210:	4629      	mov	r1, r5
 8001212:	eb63 0901 	sbc.w	r9, r3, r1
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8001222:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001226:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800122a:	4690      	mov	r8, r2
 800122c:	4699      	mov	r9, r3
 800122e:	4623      	mov	r3, r4
 8001230:	eb18 0303 	adds.w	r3, r8, r3
 8001234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001238:	462b      	mov	r3, r5
 800123a:	eb49 0303 	adc.w	r3, r9, r3
 800123e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800124e:	4621      	mov	r1, r4
 8001250:	090a      	lsrs	r2, r1, #4
 8001252:	4629      	mov	r1, r5
 8001254:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001258:	4629      	mov	r1, r5
 800125a:	110b      	asrs	r3, r1, #4
 800125c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		int64_t sense2 = ((int64_t)temp2000 * (int64_t)temp2000) << 1;
 8001260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001264:	17da      	asrs	r2, r3, #31
 8001266:	67bb      	str	r3, [r7, #120]	; 0x78
 8001268:	67fa      	str	r2, [r7, #124]	; 0x7c
 800126a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800126e:	17da      	asrs	r2, r3, #31
 8001270:	673b      	str	r3, [r7, #112]	; 0x70
 8001272:	677a      	str	r2, [r7, #116]	; 0x74
 8001274:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001278:	462b      	mov	r3, r5
 800127a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800127e:	4642      	mov	r2, r8
 8001280:	fb02 f203 	mul.w	r2, r2, r3
 8001284:	464b      	mov	r3, r9
 8001286:	4621      	mov	r1, r4
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	4413      	add	r3, r2
 800128e:	4622      	mov	r2, r4
 8001290:	4641      	mov	r1, r8
 8001292:	fba2 1201 	umull	r1, r2, r2, r1
 8001296:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800129a:	460a      	mov	r2, r1
 800129c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80012a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012a4:	4413      	add	r3, r2
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80012aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80012ae:	460b      	mov	r3, r1
 80012b0:	18db      	adds	r3, r3, r3
 80012b2:	623b      	str	r3, [r7, #32]
 80012b4:	4613      	mov	r3, r2
 80012b6:	eb42 0303 	adc.w	r3, r2, r3
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80012c0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		if (temp1 < -1500)
 80012c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <MS5607_getCompValues+0x2e8>)
 80012ca:	429a      	cmp	r2, r3
 80012cc:	f280 8091 	bge.w	80013f2 <MS5607_getCompValues+0x402>
 80012d0:	e004      	b.n	80012dc <MS5607_getCompValues+0x2ec>
 80012d2:	bf00      	nop
 80012d4:	2000032c 	.word	0x2000032c
 80012d8:	fffffa24 	.word	0xfffffa24
		{
			int32_t temp1500 = temp1 + 1500;
 80012dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012e0:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80012e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			offset2 += 15 * ((int64_t)temp1500 * (int64_t)temp1500);
 80012e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012ec:	17da      	asrs	r2, r3, #31
 80012ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80012f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012f6:	17da      	asrs	r2, r3, #31
 80012f8:	663b      	str	r3, [r7, #96]	; 0x60
 80012fa:	667a      	str	r2, [r7, #100]	; 0x64
 80012fc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001300:	462b      	mov	r3, r5
 8001302:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001306:	4642      	mov	r2, r8
 8001308:	fb02 f203 	mul.w	r2, r2, r3
 800130c:	464b      	mov	r3, r9
 800130e:	4621      	mov	r1, r4
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	4413      	add	r3, r2
 8001316:	4622      	mov	r2, r4
 8001318:	4641      	mov	r1, r8
 800131a:	fba2 1201 	umull	r1, r2, r2, r1
 800131e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001322:	460a      	mov	r2, r1
 8001324:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001328:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800132c:	4413      	add	r3, r2
 800132e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001332:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001336:	4622      	mov	r2, r4
 8001338:	462b      	mov	r3, r5
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	0119      	lsls	r1, r3, #4
 8001344:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001348:	0110      	lsls	r0, r2, #4
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4621      	mov	r1, r4
 8001350:	1a51      	subs	r1, r2, r1
 8001352:	65b9      	str	r1, [r7, #88]	; 0x58
 8001354:	4629      	mov	r1, r5
 8001356:	eb63 0301 	sbc.w	r3, r3, r1
 800135a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800135c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001360:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001364:	4621      	mov	r1, r4
 8001366:	1851      	adds	r1, r2, r1
 8001368:	61b9      	str	r1, [r7, #24]
 800136a:	4629      	mov	r1, r5
 800136c:	eb43 0101 	adc.w	r1, r3, r1
 8001370:	61f9      	str	r1, [r7, #28]
 8001372:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001376:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			sense2 += ((int64_t)temp1500 * (int64_t)temp1500) << 3;
 800137a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800137e:	17da      	asrs	r2, r3, #31
 8001380:	653b      	str	r3, [r7, #80]	; 0x50
 8001382:	657a      	str	r2, [r7, #84]	; 0x54
 8001384:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001388:	17da      	asrs	r2, r3, #31
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
 800138c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800138e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001392:	462b      	mov	r3, r5
 8001394:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001398:	4642      	mov	r2, r8
 800139a:	fb02 f203 	mul.w	r2, r2, r3
 800139e:	464b      	mov	r3, r9
 80013a0:	4621      	mov	r1, r4
 80013a2:	fb01 f303 	mul.w	r3, r1, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	4622      	mov	r2, r4
 80013aa:	4641      	mov	r1, r8
 80013ac:	fba2 1201 	umull	r1, r2, r2, r1
 80013b0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013b4:	460a      	mov	r2, r1
 80013b6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80013ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013be:	4413      	add	r3, r2
 80013c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013c4:	f04f 0000 	mov.w	r0, #0
 80013c8:	f04f 0100 	mov.w	r1, #0
 80013cc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80013d0:	462b      	mov	r3, r5
 80013d2:	00d9      	lsls	r1, r3, #3
 80013d4:	4623      	mov	r3, r4
 80013d6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80013da:	4623      	mov	r3, r4
 80013dc:	00d8      	lsls	r0, r3, #3
 80013de:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80013e2:	1814      	adds	r4, r2, r0
 80013e4:	613c      	str	r4, [r7, #16]
 80013e6:	414b      	adcs	r3, r1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013ee:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
		}

		temp1 -= temp2;
 80013f2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		offset -= offset2;
 8001400:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001404:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001408:	1a84      	subs	r4, r0, r2
 800140a:	60bc      	str	r4, [r7, #8]
 800140c:	eb61 0303 	sbc.w	r3, r1, r3
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001416:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		sensitivity -= sense2;
 800141a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800141e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001422:	1a84      	subs	r4, r0, r2
 8001424:	603c      	str	r4, [r7, #0]
 8001426:	eb61 0303 	sbc.w	r3, r1, r3
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001430:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	}

	// Populate and return the compensated values
	compVals.pres = (((int64_t)(digPres*sensitivity) >> 21) - offset) >> 15;
 8001434:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001438:	2200      	movs	r2, #0
 800143a:	643b      	str	r3, [r7, #64]	; 0x40
 800143c:	647a      	str	r2, [r7, #68]	; 0x44
 800143e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001442:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001446:	462a      	mov	r2, r5
 8001448:	fb02 f203 	mul.w	r2, r2, r3
 800144c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001450:	4621      	mov	r1, r4
 8001452:	fb01 f303 	mul.w	r3, r1, r3
 8001456:	4413      	add	r3, r2
 8001458:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800145c:	4621      	mov	r1, r4
 800145e:	fba2 1201 	umull	r1, r2, r2, r1
 8001462:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001466:	460a      	mov	r2, r1
 8001468:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800146c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001470:	4413      	add	r3, r2
 8001472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001482:	4621      	mov	r1, r4
 8001484:	0d4a      	lsrs	r2, r1, #21
 8001486:	4629      	mov	r1, r5
 8001488:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800148c:	4629      	mov	r1, r5
 800148e:	154b      	asrs	r3, r1, #21
 8001490:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001494:	1a14      	subs	r4, r2, r0
 8001496:	63bc      	str	r4, [r7, #56]	; 0x38
 8001498:	eb63 0301 	sbc.w	r3, r3, r1
 800149c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80014aa:	4621      	mov	r1, r4
 80014ac:	0bca      	lsrs	r2, r1, #15
 80014ae:	4629      	mov	r1, r5
 80014b0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80014b4:	4629      	mov	r1, r5
 80014b6:	13cb      	asrs	r3, r1, #15
 80014b8:	4613      	mov	r3, r2
 80014ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	compVals.temp = temp1;
 80014be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	return compVals;
 80014c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014ca:	461a      	mov	r2, r3
 80014cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80014d8:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80014dc:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80014e0:	46bd      	mov	sp, r7
 80014e2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80014e6:	4770      	bx	lr

080014e8 <MS5607_readUncompPres>:

void MS5607_readUncompPres()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	state = MS5607_PRES_READ;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MS5607_readUncompPres+0x34>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 80014f2:	f000 f869 	bl	80015c8 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MS5607_readUncompPres+0x38>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	2201      	movs	r2, #1
 8001500:	4908      	ldr	r1, [pc, #32]	; (8001524 <MS5607_readUncompPres+0x3c>)
 8001502:	f006 fb4f 	bl	8007ba4 <HAL_SPI_Transmit>
	MS5607_disable();
 8001506:	f000 f86f 	bl	80015e8 <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <MS5607_readUncompPres+0x38>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	f007 f897 	bl	8008644 <HAL_TIM_Base_Start_IT>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000340 	.word	0x20000340
 8001520:	20000328 	.word	0x20000328
 8001524:	20000344 	.word	0x20000344

08001528 <MS5607_readUncompTemp>:

void MS5607_readUncompTemp()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	state = MS5607_TEMP_READ;
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MS5607_readUncompTemp+0x34>)
 800152e:	2202      	movs	r2, #2
 8001530:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 8001532:	f000 f849 	bl	80015c8 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasureTemp, 1, 100);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MS5607_readUncompTemp+0x38>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	2201      	movs	r2, #1
 8001540:	4908      	ldr	r1, [pc, #32]	; (8001564 <MS5607_readUncompTemp+0x3c>)
 8001542:	f006 fb2f 	bl	8007ba4 <HAL_SPI_Transmit>
	MS5607_disable();
 8001546:	f000 f84f 	bl	80015e8 <MS5607_disable>
	
	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <MS5607_readUncompTemp+0x38>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f007 f877 	bl	8008644 <HAL_TIM_Base_Start_IT>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000340 	.word	0x20000340
 8001560:	20000328 	.word	0x20000328
 8001564:	20000345 	.word	0x20000345

08001568 <MS5607_readADC>:

uint32_t MS5607_readADC()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	// 3-byte SPI response buffer for 24-bit ADC read
	uint8_t responseBuffer[] = {0,0,0};
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MS5607_readADC+0x54>)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	4611      	mov	r1, r2
 8001576:	8019      	strh	r1, [r3, #0]
 8001578:	3302      	adds	r3, #2
 800157a:	0c12      	lsrs	r2, r2, #16
 800157c:	701a      	strb	r2, [r3, #0]
	
	MS5607_enable();
 800157e:	f000 f823 	bl	80015c8 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_READ_ADC, 1, 100);
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MS5607_readADC+0x58>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	2201      	movs	r2, #1
 800158c:	490d      	ldr	r1, [pc, #52]	; (80015c4 <MS5607_readADC+0x5c>)
 800158e:	f006 fb09 	bl	8007ba4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(config->spi, (uint8_t *)responseBuffer, 3, 100);
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MS5607_readADC+0x58>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	1d39      	adds	r1, r7, #4
 800159a:	2364      	movs	r3, #100	; 0x64
 800159c:	2203      	movs	r2, #3
 800159e:	f006 fd1f 	bl	8007fe0 <HAL_SPI_Receive>
	MS5607_disable();
 80015a2:	f000 f821 	bl	80015e8 <MS5607_disable>

	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
 80015a6:	793b      	ldrb	r3, [r7, #4]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	797b      	ldrb	r3, [r7, #5]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	4313      	orrs	r3, r2
 80015b0:	79ba      	ldrb	r2, [r7, #6]
 80015b2:	4313      	orrs	r3, r2
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800df18 	.word	0x0800df18
 80015c0:	20000328 	.word	0x20000328
 80015c4:	0800df60 	.word	0x0800df60

080015c8 <MS5607_enable>:

void MS5607_enable()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <MS5607_enable+0x1c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6898      	ldr	r0, [r3, #8]
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <MS5607_enable+0x1c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	899b      	ldrh	r3, [r3, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	f000 fedc 	bl	8002398 <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000328 	.word	0x20000328

080015e8 <MS5607_disable>:

void MS5607_disable()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <MS5607_disable+0x1c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6898      	ldr	r0, [r3, #8]
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <MS5607_disable+0x1c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	899b      	ldrh	r3, [r3, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f000 fecc 	bl	8002398 <HAL_GPIO_WritePin>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000328 	.word	0x20000328

08001608 <MS5607_TimerCallback>:

void MS5607_TimerCallback()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	uint32_t adcReading = MS5607_readADC();
 800160e:	f7ff ffab 	bl	8001568 <MS5607_readADC>
 8001612:	6078      	str	r0, [r7, #4]
	
	if (state == MS5607_PRES_READ)
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MS5607_TimerCallback+0x3c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <MS5607_TimerCallback+0x20>
	{
		rawValues.pres = adcReading;
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <MS5607_TimerCallback+0x40>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6053      	str	r3, [r2, #4]
		MS5607_readUncompTemp();
 8001622:	f7ff ff81 	bl	8001528 <MS5607_readUncompTemp>
	else if (state == MS5607_TEMP_READ)
	{
		rawValues.temp = adcReading;
		state = MS5607_IDLE;
	}
}
 8001626:	e009      	b.n	800163c <MS5607_TimerCallback+0x34>
	else if (state == MS5607_TEMP_READ)
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MS5607_TimerCallback+0x3c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d105      	bne.n	800163c <MS5607_TimerCallback+0x34>
		rawValues.temp = adcReading;
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <MS5607_TimerCallback+0x40>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
		state = MS5607_IDLE;
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <MS5607_TimerCallback+0x3c>)
 8001638:	2203      	movs	r2, #3
 800163a:	701a      	strb	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000340 	.word	0x20000340
 8001648:	20000338 	.word	0x20000338

0800164c <MS5607_getRawValues>:

MS5607_RawVal MS5607_getRawValues()
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	return rawValues;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <MS5607_getRawValues+0x20>)
 8001658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800165c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000338 	.word	0x20000338

08001670 <MS5607_getMeasurementDelay>:

uint16_t MS5607_getMeasurementDelay()
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	return measurementDelay;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <MS5607_getMeasurementDelay+0x14>)
 8001676:	881b      	ldrh	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000342 	.word	0x20000342

08001688 <MS5607_getState>:

MS5607_MeasureState MS5607_getState()
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return state;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <MS5607_getState+0x14>)
 800168e:	781b      	ldrb	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000340 	.word	0x20000340

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0bc      	sub	sp, #240	; 0xf0
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	22c0      	movs	r2, #192	; 0xc0
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00b ff5d 	bl	800d590 <memset>
  if(hsd->Instance==SDMMC1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a39      	ldr	r2, [pc, #228]	; (80017c0 <HAL_SD_MspInit+0x110>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d16b      	bne.n	80017b8 <HAL_SD_MspInit+0x108>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80016e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 80016ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 f9a3 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001704:	f7ff fc18 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_SD_MspInit+0x114>)
 800170a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <HAL_SD_MspInit+0x114>)
 8001710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001714:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_SD_MspInit+0x114>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_SD_MspInit+0x114>)
 8001728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172c:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <HAL_SD_MspInit+0x114>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_SD_MspInit+0x114>)
 8001738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_SD_MspInit+0x114>)
 8001746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174a:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_SD_MspInit+0x114>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_SD_MspInit+0x114>)
 8001756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001762:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800177c:	230c      	movs	r3, #12
 800177e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001786:	4619      	mov	r1, r3
 8001788:	480f      	ldr	r0, [pc, #60]	; (80017c8 <HAL_SD_MspInit+0x118>)
 800178a:	f000 fc2d 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800178e:	2304      	movs	r3, #4
 8001790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017a6:	230c      	movs	r3, #12
 80017a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <HAL_SD_MspInit+0x11c>)
 80017b4:	f000 fc18 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	37f0      	adds	r7, #240	; 0xf0
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	420c8000 	.word	0x420c8000
 80017c4:	46020c00 	.word	0x46020c00
 80017c8:	42020800 	.word	0x42020800
 80017cc:	42020c00 	.word	0x42020c00

080017d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0be      	sub	sp, #248	; 0xf8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	22c0      	movs	r2, #192	; 0xc0
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00b fecd 	bl	800d590 <memset>
  if(hspi->Instance==SPI1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6b      	ldr	r2, [pc, #428]	; (80019a8 <HAL_SPI_MspInit+0x1d8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d147      	bne.n	8001890 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001800:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800180c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	4618      	mov	r0, r3
 800181a:	f002 f913 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001824:	f7ff fb88 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001828:	4b60      	ldr	r3, [pc, #384]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 800182a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800182e:	4a5f      	ldr	r2, [pc, #380]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 8001830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001834:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001838:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 800183a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 8001848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001856:	4b55      	ldr	r3, [pc, #340]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 8001858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001864:	23c2      	movs	r3, #194	; 0xc2
 8001866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187c:	2305      	movs	r3, #5
 800187e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001886:	4619      	mov	r1, r3
 8001888:	4849      	ldr	r0, [pc, #292]	; (80019b0 <HAL_SPI_MspInit+0x1e0>)
 800188a:	f000 fbad 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800188e:	e086      	b.n	800199e <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a47      	ldr	r2, [pc, #284]	; (80019b4 <HAL_SPI_MspInit+0x1e4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	f040 8081 	bne.w	800199e <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800189c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80018a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 f8c5 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 80018c0:	f7ff fb3a 	bl	8000f38 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 80018c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018ca:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 80018d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 80018e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e8:	4a30      	ldr	r2, [pc, #192]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 80018f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 8001902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001906:	4a29      	ldr	r2, [pc, #164]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_SPI_MspInit+0x1dc>)
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001936:	2303      	movs	r3, #3
 8001938:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001940:	4619      	mov	r1, r3
 8001942:	481d      	ldr	r0, [pc, #116]	; (80019b8 <HAL_SPI_MspInit+0x1e8>)
 8001944:	f000 fb50 	bl	8001fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001948:	2304      	movs	r3, #4
 800194a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001960:	2305      	movs	r3, #5
 8001962:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001966:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800196a:	4619      	mov	r1, r3
 800196c:	4812      	ldr	r0, [pc, #72]	; (80019b8 <HAL_SPI_MspInit+0x1e8>)
 800196e:	f000 fb3b 	bl	8001fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800198c:	2305      	movs	r3, #5
 800198e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001996:	4619      	mov	r1, r3
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <HAL_SPI_MspInit+0x1ec>)
 800199a:	f000 fb25 	bl	8001fe8 <HAL_GPIO_Init>
}
 800199e:	bf00      	nop
 80019a0:	37f8      	adds	r7, #248	; 0xf8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40013000 	.word	0x40013000
 80019ac:	46020c00 	.word	0x46020c00
 80019b0:	42020000 	.word	0x42020000
 80019b4:	40003800 	.word	0x40003800
 80019b8:	42020800 	.word	0x42020800
 80019bc:	42020400 	.word	0x42020400

080019c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_TIM_Base_MspInit+0x48>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d116      	bne.n	8001a00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_TIM_Base_MspInit+0x4c>)
 80019d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0x4c>)
 80019da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019de:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_Base_MspInit+0x4c>)
 80019e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2046      	movs	r0, #70	; 0x46
 80019f6:	f000 fac2 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80019fa:	2046      	movs	r0, #70	; 0x46
 80019fc:	f000 fad9 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40014400 	.word	0x40014400
 8001a0c:	46020c00 	.word	0x46020c00

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0ba      	sub	sp, #232	; 0xe8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	22c0      	movs	r2, #192	; 0xc0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00b fdad 	bl	800d590 <memset>
  if(huart->Instance==USART1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_UART_MspInit+0xc4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d145      	bne.n	8001acc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a40:	f04f 0201 	mov.w	r2, #1
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fff5 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a60:	f7ff fa6a 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_UART_MspInit+0xc8>)
 8001a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aba:	2307      	movs	r3, #7
 8001abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_UART_MspInit+0xcc>)
 8001ac8:	f000 fa8e 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	37e8      	adds	r7, #232	; 0xe8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	46020c00 	.word	0x46020c00
 8001adc:	42020000 	.word	0x42020000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 f908 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM16_IRQHandler+0x10>)
 8001b3a:	f006 fe52 	bl	80087e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000244 	.word	0x20000244

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f00b fce0 	bl	800d53c <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20040000 	.word	0x20040000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000348 	.word	0x20000348
 8001bb0:	200003a0 	.word	0x200003a0

08001bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <SystemInit+0x68>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <SystemInit+0x68>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <SystemInit+0x6c>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <SystemInit+0x6c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <SystemInit+0x6c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <SystemInit+0x6c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <SystemInit+0x6c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <SystemInit+0x6c>)
 8001be6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bea:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <SystemInit+0x6c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <SystemInit+0x6c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <SystemInit+0x6c>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <SystemInit+0x6c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SystemInit+0x68>)
 8001c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	46020c00 	.word	0x46020c00

08001c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c28:	f7ff ffc4 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <LoopForever+0xe>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <LoopForever+0x16>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c52:	f00b fc79 	bl	800d548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c56:	f7fe fd6d 	bl	8000734 <main>

08001c5a <LoopForever>:

LoopForever:
    b LoopForever
 8001c5a:	e7fe      	b.n	8001c5a <LoopForever>
  ldr   r0, =_estack
 8001c5c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c68:	0800e15c 	.word	0x0800e15c
  ldr r2, =_sbss
 8001c6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c70:	20000399 	.word	0x20000399

08001c74 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_Init+0x4c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_Init+0x4c>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f96d 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c8e:	f001 fcf5 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_Init+0x50>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	490b      	ldr	r1, [pc, #44]	; (8001ccc <HAL_Init+0x54>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <HAL_Init+0x58>)
 8001ca6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca8:	200f      	movs	r0, #15
 8001caa:	f000 f813 	bl	8001cd4 <HAL_InitTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e002      	b.n	8001cbe <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fcf2 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	46020c00 	.word	0x46020c00
 8001ccc:	0800df64 	.word	0x0800df64
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_InitTick+0x60>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e021      	b.n	8001d2c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_InitTick+0x64>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_InitTick+0x60>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f965 	bl	8001fce <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1c:	f000 f92f 	bl	8001f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x68>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	2000034c 	.word	0x2000034c

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000034c 	.word	0x2000034c

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff40 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff90 	bl	8001ebc <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5f 	bl	8001e68 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff33 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa4 	bl	8001f24 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ffa:	e1ba      	b.n	8002372 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 81aa 	beq.w	800236c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a55      	ldr	r2, [pc, #340]	; (8002170 <HAL_GPIO_Init+0x188>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d15d      	bne.n	80020dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	4013      	ands	r3, r2
 8002034:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	4313      	orrs	r3, r2
 8002048:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x18c>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002058:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800205a:	4a46      	ldr	r2, [pc, #280]	; (8002174 <HAL_GPIO_Init+0x18c>)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	3208      	adds	r2, #8
 800206e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002072:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	4013      	ands	r3, r2
 8002088:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220b      	movs	r2, #11
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	4313      	orrs	r3, r2
 800209c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69f9      	ldr	r1, [r7, #28]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2202      	movs	r2, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e067      	b.n	80021ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x104>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b12      	cmp	r3, #18
 80020ea:	d145      	bne.n	8002178 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	4013      	ands	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	4313      	orrs	r3, r2
 8002128:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	69f9      	ldr	r1, [r7, #28]
 8002134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4013      	ands	r3, r2
 800214e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	4313      	orrs	r3, r2
 8002164:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e01e      	b.n	80021ac <HAL_GPIO_Init+0x1c4>
 800216e:	bf00      	nop
 8002170:	46020000 	.word	0x46020000
 8002174:	0800dfbc 	.word	0x0800dfbc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	4013      	ands	r3, r2
 800218e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d00b      	beq.n	80021cc <HAL_GPIO_Init+0x1e4>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d007      	beq.n	80021cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c0:	2b11      	cmp	r3, #17
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b12      	cmp	r3, #18
 80021ca:	d130      	bne.n	800222e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002202:	2201      	movs	r2, #1
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	4013      	ands	r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0201 	and.w	r2, r3, #1
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	4313      	orrs	r3, r2
 8002226:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d017      	beq.n	8002266 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	4013      	ands	r3, r2
 800224c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4313      	orrs	r3, r2
 800225e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d07c      	beq.n	800236c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002272:	4a47      	ldr	r2, [pc, #284]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3318      	adds	r3, #24
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	4013      	ands	r3, r2
 8002294:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0a9a      	lsrs	r2, r3, #10
 800229a:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <HAL_GPIO_Init+0x3ac>)
 800229c:	4013      	ands	r3, r2
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	f002 0203 	and.w	r2, r2, #3
 80022a4:	00d2      	lsls	r2, r2, #3
 80022a6:	4093      	lsls	r3, r2
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022ae:	4938      	ldr	r1, [pc, #224]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3318      	adds	r3, #24
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022bc:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80022e0:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022e6:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 8002312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002316:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43db      	mvns	r3, r3
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	4013      	ands	r3, r2
 8002320:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 8002340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002344:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	4013      	ands	r3, r2
 800234e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_GPIO_Init+0x3a8>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	f47f ae3d 	bne.w	8001ffc <HAL_GPIO_Init+0x14>
  }
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3724      	adds	r7, #36	; 0x24
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	46022000 	.word	0x46022000
 8002394:	002f7f7f 	.word	0x002f7f7f

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80023d0:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10b      	bne.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e8:	d905      	bls.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a32      	ldr	r2, [pc, #200]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e057      	b.n	80024aa <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d90a      	bls.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002414:	60d3      	str	r3, [r2, #12]
 8002416:	e007      	b.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002420:	4925      	ldr	r1, [pc, #148]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002428:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	2232      	movs	r2, #50	; 0x32
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002446:	e002      	b.n	800244e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3b01      	subs	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x98>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f3      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01b      	beq.n	800249e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2232      	movs	r2, #50	; 0x32
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	3301      	adds	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002484:	e002      	b.n	800248c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3b01      	subs	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f3      	bne.n	8002486 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e000      	b.n	80024aa <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	46020800 	.word	0x46020800
 80024bc:	20000000 	.word	0x20000000
 80024c0:	10624dd3 	.word	0x10624dd3

080024c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <HAL_PWREx_GetVoltageRange+0x18>)
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	46020800 	.word	0x46020800

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08e      	sub	sp, #56	; 0x38
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f000 bec8 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fa:	4b99      	ldr	r3, [pc, #612]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002504:	4b96      	ldr	r3, [pc, #600]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 816c 	beq.w	80027f4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_RCC_OscConfig+0x52>
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	2b0c      	cmp	r3, #12
 8002526:	f040 80de 	bne.w	80026e6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 80da 	bne.w	80026e6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f000 bea5 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002544:	4b86      	ldr	r3, [pc, #536]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_RCC_OscConfig+0x7a>
 8002550:	4b83      	ldr	r3, [pc, #524]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002558:	e005      	b.n	8002566 <HAL_RCC_OscConfig+0x86>
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800255c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002566:	4293      	cmp	r3, r2
 8002568:	d255      	bcs.n	8002616 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	4618      	mov	r0, r3
 8002576:	f001 f9df 	bl	8003938 <RCC_SetFlashLatencyFromMSIRange>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f000 be82 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4a75      	ldr	r2, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800258c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002590:	6093      	str	r3, [r2, #8]
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	4970      	ldr	r1, [pc, #448]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025ac:	d309      	bcc.n	80025c2 <HAL_RCC_OscConfig+0xe2>
 80025ae:	4b6c      	ldr	r3, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 021f 	bic.w	r2, r3, #31
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4969      	ldr	r1, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
 80025c0:	e07e      	b.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da0a      	bge.n	80025e0 <HAL_RCC_OscConfig+0x100>
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	4961      	ldr	r1, [pc, #388]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	60cb      	str	r3, [r1, #12]
 80025de:	e06f      	b.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d30a      	bcc.n	8002600 <HAL_RCC_OscConfig+0x120>
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	029b      	lsls	r3, r3, #10
 80025f8:	4959      	ldr	r1, [pc, #356]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
 80025fe:	e05f      	b.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
 8002600:	4b57      	ldr	r3, [pc, #348]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	03db      	lsls	r3, r3, #15
 800260e:	4954      	ldr	r1, [pc, #336]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002610:	4313      	orrs	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
 8002614:	e054      	b.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002616:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a51      	ldr	r2, [pc, #324]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800261c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002620:	6093      	str	r3, [r2, #8]
 8002622:	4b4f      	ldr	r3, [pc, #316]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	494c      	ldr	r1, [pc, #304]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800263c:	d309      	bcc.n	8002652 <HAL_RCC_OscConfig+0x172>
 800263e:	4b48      	ldr	r3, [pc, #288]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 021f 	bic.w	r2, r3, #31
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4945      	ldr	r1, [pc, #276]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800264c:	4313      	orrs	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
 8002650:	e028      	b.n	80026a4 <HAL_RCC_OscConfig+0x1c4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	da0a      	bge.n	8002670 <HAL_RCC_OscConfig+0x190>
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	015b      	lsls	r3, r3, #5
 8002668:	493d      	ldr	r1, [pc, #244]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
 800266e:	e019      	b.n	80026a4 <HAL_RCC_OscConfig+0x1c4>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d30a      	bcc.n	8002690 <HAL_RCC_OscConfig+0x1b0>
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	029b      	lsls	r3, r3, #10
 8002688:	4935      	ldr	r1, [pc, #212]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800268a:	4313      	orrs	r3, r2
 800268c:	60cb      	str	r3, [r1, #12]
 800268e:	e009      	b.n	80026a4 <HAL_RCC_OscConfig+0x1c4>
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	03db      	lsls	r3, r3, #15
 800269e:	4930      	ldr	r1, [pc, #192]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f942 	bl	8003938 <RCC_SetFlashLatencyFromMSIRange>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f000 bde5 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80026c0:	f001 f8e4 	bl	800388c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x284>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fb03 	bl	8001cd4 <HAL_InitTick>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80026d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 808a 	beq.w	80027f2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80026de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026e2:	f000 bdd2 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d066      	beq.n	80027bc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026fa:	f7ff fb35 	bl	8001d68 <HAL_GetTick>
 80026fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002700:	e009      	b.n	8002716 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002702:	f7ff fb31 	bl	8001d68 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d902      	bls.n	8002716 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	f000 bdba 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ef      	beq.n	8002702 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002728:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800272c:	6093      	str	r3, [r2, #8]
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	4909      	ldr	r1, [pc, #36]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002748:	d30e      	bcc.n	8002768 <HAL_RCC_OscConfig+0x288>
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f023 021f 	bic.w	r2, r3, #31
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4902      	ldr	r1, [pc, #8]	; (8002760 <HAL_RCC_OscConfig+0x280>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
 800275c:	e04a      	b.n	80027f4 <HAL_RCC_OscConfig+0x314>
 800275e:	bf00      	nop
 8002760:	46020c00 	.word	0x46020c00
 8002764:	20000004 	.word	0x20000004
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	da0a      	bge.n	8002786 <HAL_RCC_OscConfig+0x2a6>
 8002770:	4b98      	ldr	r3, [pc, #608]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	015b      	lsls	r3, r3, #5
 800277e:	4995      	ldr	r1, [pc, #596]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
 8002784:	e036      	b.n	80027f4 <HAL_RCC_OscConfig+0x314>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278e:	d30a      	bcc.n	80027a6 <HAL_RCC_OscConfig+0x2c6>
 8002790:	4b90      	ldr	r3, [pc, #576]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	498d      	ldr	r1, [pc, #564]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60cb      	str	r3, [r1, #12]
 80027a4:	e026      	b.n	80027f4 <HAL_RCC_OscConfig+0x314>
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	03db      	lsls	r3, r3, #15
 80027b4:	4987      	ldr	r1, [pc, #540]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60cb      	str	r3, [r1, #12]
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80027bc:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a84      	ldr	r2, [pc, #528]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027c8:	f7ff face 	bl	8001d68 <HAL_GetTick>
 80027cc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80027ce:	e009      	b.n	80027e4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d0:	f7ff faca 	bl	8001d68 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	f000 bd53 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80027e4:	4b7b      	ldr	r3, [pc, #492]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ef      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 808b 	beq.w	8002918 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	2b08      	cmp	r3, #8
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x334>
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d109      	bne.n	8002822 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	2b03      	cmp	r3, #3
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d17d      	bne.n	8002918 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f000 bd34 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x35a>
 800282c:	4b69      	ldr	r3, [pc, #420]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e041      	b.n	80028be <HAL_RCC_OscConfig+0x3de>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002842:	d112      	bne.n	800286a <HAL_RCC_OscConfig+0x38a>
 8002844:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a62      	ldr	r2, [pc, #392]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b60      	ldr	r3, [pc, #384]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a5f      	ldr	r2, [pc, #380]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5c      	ldr	r2, [pc, #368]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e029      	b.n	80028be <HAL_RCC_OscConfig+0x3de>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002872:	d112      	bne.n	800289a <HAL_RCC_OscConfig+0x3ba>
 8002874:	4b57      	ldr	r3, [pc, #348]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a56      	ldr	r2, [pc, #344]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a53      	ldr	r2, [pc, #332]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a50      	ldr	r2, [pc, #320]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e011      	b.n	80028be <HAL_RCC_OscConfig+0x3de>
 800289a:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a47      	ldr	r2, [pc, #284]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d014      	beq.n	80028f0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80028c6:	f7ff fa4f 	bl	8001d68 <HAL_GetTick>
 80028ca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ce:	f7ff fa4b 	bl	8001d68 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	; 0x64
 80028da:	d902      	bls.n	80028e2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	f000 bcd4 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ef      	beq.n	80028ce <HAL_RCC_OscConfig+0x3ee>
 80028ee:	e013      	b.n	8002918 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80028f0:	f7ff fa3a 	bl	8001d68 <HAL_GetTick>
 80028f4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f6:	e009      	b.n	800290c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7ff fa36 	bl	8001d68 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d902      	bls.n	800290c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	f000 bcbf 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ef      	bne.n	80028f8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05f      	beq.n	80029e4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	2b04      	cmp	r3, #4
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x456>
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	2b0c      	cmp	r3, #12
 800292e:	d114      	bne.n	800295a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b02      	cmp	r3, #2
 8002934:	d111      	bne.n	800295a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f000 bca3 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	4920      	ldr	r1, [pc, #128]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002958:	e044      	b.n	80029e4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d024      	beq.n	80029ac <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800296e:	f7ff f9fb 	bl	8001d68 <HAL_GetTick>
 8002972:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	e009      	b.n	800298a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff f9f7 	bl	8001d68 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d902      	bls.n	800298a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	f000 bc80 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ef      	beq.n	8002976 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	490b      	ldr	r1, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	610b      	str	r3, [r1, #16]
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80029b8:	f7ff f9d6 	bl	8001d68 <HAL_GetTick>
 80029bc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c0:	f7ff f9d2 	bl	8001d68 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d904      	bls.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f000 bc5b 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
 80029d4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d8:	4baf      	ldr	r3, [pc, #700]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ed      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80c8 	beq.w	8002b82 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f8:	4ba7      	ldr	r3, [pc, #668]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d111      	bne.n	8002a2a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4ba4      	ldr	r3, [pc, #656]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0c:	4aa2      	ldr	r2, [pc, #648]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a16:	4ba0      	ldr	r3, [pc, #640]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a2a:	4b9c      	ldr	r3, [pc, #624]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d119      	bne.n	8002a6a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a36:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	4a98      	ldr	r2, [pc, #608]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7ff f991 	bl	8001d68 <HAL_GetTick>
 8002a46:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a48:	e009      	b.n	8002a5e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7ff f98d 	bl	8001d68 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d902      	bls.n	8002a5e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f000 bc16 	b.w	800328a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a5e:	4b8f      	ldr	r3, [pc, #572]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ef      	beq.n	8002a4a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d05f      	beq.n	8002b32 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a78:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d037      	beq.n	8002af8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e3f4      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ab0:	4a79      	ldr	r2, [pc, #484]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002ab2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002aba:	f7ff f955 	bl	8001d68 <HAL_GetTick>
 8002abe:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff f951 	bl	8001d68 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e3da      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ef      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002ae2:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ae8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4969      	ldr	r1, [pc, #420]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002af8:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002afe:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002b08:	f7ff f92e 	bl	8001d68 <HAL_GetTick>
 8002b0c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b10:	f7ff f92a 	bl	8001d68 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b05      	cmp	r3, #5
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e3b3      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCC_OscConfig+0x630>
 8002b30:	e01b      	b.n	8002b6a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002b32:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b38:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b3a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002b3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002b42:	f7ff f911 	bl	8001d68 <HAL_GetTick>
 8002b46:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7ff f90d 	bl	8001d68 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e396      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b5c:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b78:	4a47      	ldr	r2, [pc, #284]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8111 	beq.w	8002db2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002baa:	4a3b      	ldr	r2, [pc, #236]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002bac:	f043 0304 	orr.w	r3, r3, #4
 8002bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002bb4:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d118      	bne.n	8002c06 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	4a30      	ldr	r2, [pc, #192]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be0:	f7ff f8c2 	bl	8001d68 <HAL_GetTick>
 8002be4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7ff f8be 	bl	8001d68 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e347      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bfa:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <HAL_RCC_OscConfig+0x7bc>)
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01f      	beq.n	8002c52 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c24:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c3e:	e018      	b.n	8002c72 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c46:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c50:	e00f      	b.n	8002c72 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c58:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c68:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <HAL_RCC_OscConfig+0x7b8>)
 8002c6a:	f023 0304 	bic.w	r3, r3, #4
 8002c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d057      	beq.n	8002d2a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f875 	bl	8001d68 <HAL_GetTick>
 8002c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c80:	e00e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7ff f871 	bl	8001d68 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d905      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e2f8      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
 8002c98:	46020c00 	.word	0x46020c00
 8002c9c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca0:	4b9c      	ldr	r3, [pc, #624]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0e9      	beq.n	8002c82 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cba:	4b96      	ldr	r3, [pc, #600]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc0:	4a94      	ldr	r2, [pc, #592]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f84c 	bl	8001d68 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e2d3      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ce2:	4b8c      	ldr	r3, [pc, #560]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ed      	beq.n	8002ccc <HAL_RCC_OscConfig+0x7ec>
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cf2:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf8:	4a86      	ldr	r2, [pc, #536]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7ff f830 	bl	8001d68 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e2b7      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d1a:	4b7e      	ldr	r3, [pc, #504]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ed      	bne.n	8002d04 <HAL_RCC_OscConfig+0x824>
 8002d28:	e037      	b.n	8002d9a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002d2a:	f7ff f81d 	bl	8001d68 <HAL_GetTick>
 8002d2e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7ff f819 	bl	8001d68 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e2a0      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d48:	4b72      	ldr	r3, [pc, #456]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ed      	bne.n	8002d32 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002d56:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01a      	beq.n	8002d9a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d64:	4b6b      	ldr	r3, [pc, #428]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d6a:	4a6a      	ldr	r2, [pc, #424]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fff7 	bl	8001d68 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e27e      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d8c:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ed      	bne.n	8002d76 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da8:	4a5a      	ldr	r2, [pc, #360]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d036      	beq.n	8002e2c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d019      	beq.n	8002dfa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002dc6:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dd2:	f7fe ffc9 	bl	8001d68 <HAL_GetTick>
 8002dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dda:	f7fe ffc5 	bl	8001d68 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e24e      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002dec:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x8fa>
 8002df8:	e018      	b.n	8002e2c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002dfa:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a45      	ldr	r2, [pc, #276]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e06:	f7fe ffaf 	bl	8001d68 <HAL_GetTick>
 8002e0a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0e:	f7fe ffab 	bl	8001d68 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e234      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e20:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d036      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d019      	beq.n	8002e74 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002e40:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e4c:	f7fe ff8c 	bl	8001d68 <HAL_GetTick>
 8002e50:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e54:	f7fe ff88 	bl	8001d68 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e211      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x974>
 8002e72:	e018      	b.n	8002ea6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e80:	f7fe ff72 	bl	8001d68 <HAL_GetTick>
 8002e84:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e88:	f7fe ff6e 	bl	8001d68 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1f7      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d07f      	beq.n	8002fb2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d062      	beq.n	8002f80 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002eba:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ec0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ec4:	6093      	str	r3, [r2, #8]
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	4910      	ldr	r1, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002ee0:	d309      	bcc.n	8002ef6 <HAL_RCC_OscConfig+0xa16>
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 021f 	bic.w	r2, r3, #31
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4909      	ldr	r1, [pc, #36]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
 8002ef4:	e02a      	b.n	8002f4c <HAL_RCC_OscConfig+0xa6c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da0c      	bge.n	8002f18 <HAL_RCC_OscConfig+0xa38>
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	4901      	ldr	r1, [pc, #4]	; (8002f14 <HAL_RCC_OscConfig+0xa34>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60cb      	str	r3, [r1, #12]
 8002f12:	e01b      	b.n	8002f4c <HAL_RCC_OscConfig+0xa6c>
 8002f14:	46020c00 	.word	0x46020c00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d30a      	bcc.n	8002f38 <HAL_RCC_OscConfig+0xa58>
 8002f22:	4ba1      	ldr	r3, [pc, #644]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	499d      	ldr	r1, [pc, #628]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60cb      	str	r3, [r1, #12]
 8002f36:	e009      	b.n	8002f4c <HAL_RCC_OscConfig+0xa6c>
 8002f38:	4b9b      	ldr	r3, [pc, #620]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	03db      	lsls	r3, r3, #15
 8002f46:	4998      	ldr	r1, [pc, #608]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a95      	ldr	r2, [pc, #596]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f52:	f043 0310 	orr.w	r3, r3, #16
 8002f56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f58:	f7fe ff06 	bl	8001d68 <HAL_GetTick>
 8002f5c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f60:	f7fe ff02 	bl	8001d68 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e18b      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xa80>
 8002f7e:	e018      	b.n	8002fb2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002f80:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a88      	ldr	r2, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002f86:	f023 0310 	bic.w	r3, r3, #16
 8002f8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f8c:	f7fe feec 	bl	8001d68 <HAL_GetTick>
 8002f90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f94:	f7fe fee8 	bl	8001d68 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e171      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002fa6:	4b80      	ldr	r3, [pc, #512]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8166 	beq.w	8003288 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc2:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	f000 80f2 	beq.w	80031b4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f040 80c5 	bne.w	8003164 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8002fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002fe6:	f7fe febf 	bl	8001d68 <HAL_GetTick>
 8002fea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe febb 	bl	8001d68 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e144      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003000:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d111      	bne.n	800303e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800301c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003020:	4a61      	ldr	r2, [pc, #388]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800303e:	4b5b      	ldr	r3, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0xccc>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003046:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304a:	d102      	bne.n	8003052 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003052:	4b56      	ldr	r3, [pc, #344]	; (80031ac <HAL_RCC_OscConfig+0xccc>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4a55      	ldr	r2, [pc, #340]	; (80031ac <HAL_RCC_OscConfig+0xccc>)
 8003058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800305e:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003072:	3a01      	subs	r2, #1
 8003074:	0212      	lsls	r2, r2, #8
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800307c:	430a      	orrs	r2, r1
 800307e:	494a      	ldr	r1, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	628b      	str	r3, [r1, #40]	; 0x28
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003088:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <HAL_RCC_OscConfig+0xcd0>)
 800308a:	4013      	ands	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003090:	3a01      	subs	r2, #1
 8003092:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800309a:	3a01      	subs	r2, #1
 800309c:	0252      	lsls	r2, r2, #9
 800309e:	b292      	uxth	r2, r2
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0412      	lsls	r2, r2, #16
 80030aa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030b4:	3a01      	subs	r2, #1
 80030b6:	0612      	lsls	r2, r2, #24
 80030b8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80030bc:	430a      	orrs	r2, r1
 80030be:	493a      	ldr	r1, [pc, #232]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80030da:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	4a32      	ldr	r2, [pc, #200]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030e0:	f043 0310 	orr.w	r3, r3, #16
 80030e4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f023 020c 	bic.w	r2, r3, #12
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	492d      	ldr	r1, [pc, #180]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80030f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_RCC_OscConfig+0xccc>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_RCC_OscConfig+0xccc>)
 8003106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800310c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311a:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800312a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800313c:	f7fe fe14 	bl	8001d68 <HAL_GetTick>
 8003140:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fe10 	bl	8001d68 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e099      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xc64>
 8003162:	e091      	b.n	8003288 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800316a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003170:	f7fe fdfa 	bl	8001d68 <HAL_GetTick>
 8003174:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fdf6 	bl	8001d68 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e07f      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_RCC_OscConfig+0xcc8>)
 800319c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80031a0:	f023 0303 	bic.w	r3, r3, #3
 80031a4:	6293      	str	r3, [r2, #40]	; 0x28
 80031a6:	e06f      	b.n	8003288 <HAL_RCC_OscConfig+0xda8>
 80031a8:	46020c00 	.word	0x46020c00
 80031ac:	46020800 	.word	0x46020800
 80031b0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80031b4:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d039      	beq.n	800323c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0203 	and.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d132      	bne.n	800323c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d129      	bne.n	800323c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d122      	bne.n	800323c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d11a      	bne.n	800323c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	0a5b      	lsrs	r3, r3, #9
 800320a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d111      	bne.n	800323c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003224:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d108      	bne.n	800323c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	0e1b      	lsrs	r3, r3, #24
 800322e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e024      	b.n	800328a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	08db      	lsrs	r3, r3, #3
 8003246:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800324e:	429a      	cmp	r2, r3
 8003250:	d01a      	beq.n	8003288 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 8003258:	f023 0310 	bic.w	r3, r3, #16
 800325c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fe fd83 	bl	8001d68 <HAL_GetTick>
 8003262:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003264:	bf00      	nop
 8003266:	f7fe fd7f 	bl	8001d68 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	4293      	cmp	r3, r2
 8003270:	d0f9      	beq.n	8003266 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <HAL_RCC_OscConfig+0xdb4>)
 8003282:	f043 0310 	orr.w	r3, r3, #16
 8003286:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3738      	adds	r7, #56	; 0x38
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	46020c00 	.word	0x46020c00

08003298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e1d9      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b9b      	ldr	r3, [pc, #620]	; (800351c <HAL_RCC_ClockConfig+0x284>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d910      	bls.n	80032dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b98      	ldr	r3, [pc, #608]	; (800351c <HAL_RCC_ClockConfig+0x284>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	4996      	ldr	r1, [pc, #600]	; (800351c <HAL_RCC_ClockConfig+0x284>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b94      	ldr	r3, [pc, #592]	; (800351c <HAL_RCC_ClockConfig+0x284>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e1c1      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d908      	bls.n	800330a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80032f8:	4b89      	ldr	r3, [pc, #548]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4986      	ldr	r1, [pc, #536]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003306:	4313      	orrs	r3, r2
 8003308:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003324:	429a      	cmp	r2, r3
 8003326:	d909      	bls.n	800333c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003328:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	497a      	ldr	r1, [pc, #488]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003338:	4313      	orrs	r3, r2
 800333a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	4b74      	ldr	r3, [pc, #464]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003354:	429a      	cmp	r2, r3
 8003356:	d908      	bls.n	800336a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003358:	4b71      	ldr	r3, [pc, #452]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	496e      	ldr	r1, [pc, #440]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003366:	4313      	orrs	r3, r2
 8003368:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d010      	beq.n	8003398 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	4b69      	ldr	r3, [pc, #420]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	429a      	cmp	r2, r3
 8003384:	d908      	bls.n	8003398 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003386:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f023 020f 	bic.w	r2, r3, #15
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	4963      	ldr	r1, [pc, #396]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003394:	4313      	orrs	r3, r2
 8003396:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80d2 	beq.w	800354a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d143      	bne.n	800343a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b5b      	ldr	r3, [pc, #364]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80033b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d110      	bne.n	80033e2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	4b57      	ldr	r3, [pc, #348]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	4a56      	ldr	r2, [pc, #344]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80033d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80033e2:	f7fe fcc1 	bl	8001d68 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80033e8:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_RCC_ClockConfig+0x28c>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00f      	beq.n	8003414 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80033f6:	f7fe fcb7 	bl	8001d68 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e12b      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003408:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCC_ClockConfig+0x28c>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	4a3f      	ldr	r2, [pc, #252]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003422:	f023 0304 	bic.w	r3, r3, #4
 8003426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d121      	bne.n	800347a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e112      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003442:	4b37      	ldr	r3, [pc, #220]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d115      	bne.n	800347a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e106      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800345a:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0fa      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800346a:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0f2      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4926      	ldr	r1, [pc, #152]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003488:	4313      	orrs	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800348c:	f7fe fc6c 	bl	8001d68 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d112      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fe fc64 	bl	8001d68 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0d6      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b2:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d1ee      	bne.n	800349c <HAL_RCC_ClockConfig+0x204>
 80034be:	e044      	b.n	800354a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d112      	bne.n	80034ee <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ca:	f7fe fc4d 	bl	8001d68 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0bf      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_ClockConfig+0x232>
 80034ec:	e02d      	b.n	800354a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d123      	bne.n	800353e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fe fc36 	bl	8001d68 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0a8      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_ClockConfig+0x288>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1ee      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x260>
 800351a:	e016      	b.n	800354a <HAL_RCC_ClockConfig+0x2b2>
 800351c:	40022000 	.word	0x40022000
 8003520:	46020c00 	.word	0x46020c00
 8003524:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe fc1e 	bl	8001d68 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e090      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b04      	cmp	r3, #4
 8003548:	d1ee      	bne.n	8003528 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	429a      	cmp	r2, r3
 8003564:	d208      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003566:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 020f 	bic.w	r2, r3, #15
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	493d      	ldr	r1, [pc, #244]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCC_ClockConfig+0x3d4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d210      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_ClockConfig+0x3d4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 020f 	bic.w	r2, r3, #15
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_RCC_ClockConfig+0x3d4>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_RCC_ClockConfig+0x3d4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e05b      	b.n	8003660 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d208      	bcs.n	80035d6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4925      	ldr	r1, [pc, #148]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d012      	beq.n	8003608 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d209      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80035f4:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	4919      	ldr	r1, [pc, #100]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003620:	429a      	cmp	r2, r3
 8003622:	d208      	bcs.n	8003636 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	490d      	ldr	r1, [pc, #52]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003636:	f000 f821 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCC_ClockConfig+0x3d0>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x3d8>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x3dc>)
 800364e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x3e0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe fb3d 	bl	8001cd4 <HAL_InitTick>
 800365a:	4603      	mov	r3, r0
 800365c:	73fb      	strb	r3, [r7, #15]

  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	46020c00 	.word	0x46020c00
 800366c:	40022000 	.word	0x40022000
 8003670:	0800df64 	.word	0x0800df64
 8003674:	20000000 	.word	0x20000000
 8003678:	20000004 	.word	0x20000004

0800367c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	b08b      	sub	sp, #44	; 0x2c
 8003680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800368a:	4b7b      	ldr	r3, [pc, #492]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003694:	4b78      	ldr	r3, [pc, #480]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x34>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d121      	bne.n	80036ee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d11e      	bne.n	80036ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80036b0:	4b71      	ldr	r3, [pc, #452]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80036bc:	4b6e      	ldr	r3, [pc, #440]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036c2:	0b1b      	lsrs	r3, r3, #12
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	0f1b      	lsrs	r3, r3, #28
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036d8:	4a68      	ldr	r2, [pc, #416]	; (800387c <HAL_RCC_GetSysClockFreq+0x200>)
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d110      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036ec:	e00d      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d102      	bne.n	8003700 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036fa:	4b61      	ldr	r3, [pc, #388]	; (8003880 <HAL_RCC_GetSysClockFreq+0x204>)
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	e004      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d101      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003706:	4b5e      	ldr	r3, [pc, #376]	; (8003880 <HAL_RCC_GetSysClockFreq+0x204>)
 8003708:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	f040 80ac 	bne.w	800386a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003712:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800372a:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003736:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	08db      	lsrs	r3, r3, #3
 800373c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8086 	beq.w	8003866 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d003      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0xec>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d022      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x130>
 8003766:	e043      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003884 <HAL_RCC_GetSysClockFreq+0x208>
 8003776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377a:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800378a:	ed97 6a01 	vldr	s12, [r7, #4]
 800378e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003888 <HAL_RCC_GetSysClockFreq+0x20c>
 8003792:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003796:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800379a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80037aa:	e046      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003884 <HAL_RCC_GetSysClockFreq+0x208>
 80037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80037d2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003888 <HAL_RCC_GetSysClockFreq+0x20c>
 80037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80037ee:	e024      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003818:	ed97 6a01 	vldr	s12, [r7, #4]
 800381c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003888 <HAL_RCC_GetSysClockFreq+0x20c>
 8003820:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003824:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800382c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003834:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003838:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	0e1b      	lsrs	r3, r3, #24
 8003840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003844:	3301      	adds	r3, #1
 8003846:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003852:	edd7 6a07 	vldr	s13, [r7, #28]
 8003856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800385a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385e:	ee17 3a90 	vmov	r3, s15
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	e001      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800386a:	6a3b      	ldr	r3, [r7, #32]
}
 800386c:	4618      	mov	r0, r3
 800386e:	372c      	adds	r7, #44	; 0x2c
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	46020c00 	.word	0x46020c00
 800387c:	0800df7c 	.word	0x0800df7c
 8003880:	00f42400 	.word	0x00f42400
 8003884:	4b742400 	.word	0x4b742400
 8003888:	46000000 	.word	0x46000000

0800388c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003890:	f7ff fef4 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_RCC_GetHCLKFreq+0x28>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	4906      	ldr	r1, [pc, #24]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80038a0:	5ccb      	ldrb	r3, [r1, r3]
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <HAL_RCC_GetHCLKFreq+0x30>)
 80038a8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCC_GetHCLKFreq+0x30>)
 80038ac:	681b      	ldr	r3, [r3, #0]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	46020c00 	.word	0x46020c00
 80038b8:	0800df64 	.word	0x0800df64
 80038bc:	20000000 	.word	0x20000000

080038c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80038c4:	f7ff ffe2 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	46020c00 	.word	0x46020c00
 80038e4:	0800df74 	.word	0x0800df74

080038e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80038ec:	f7ff ffce 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	46020c00 	.word	0x46020c00
 800390c:	0800df74 	.word	0x0800df74

08003910 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003914:	f7ff ffba 	bl	800388c <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK3Freq+0x20>)
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	46020c00 	.word	0x46020c00
 8003934:	0800df74 	.word	0x0800df74

08003938 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003940:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800394e:	f7fe fdb9 	bl	80024c4 <HAL_PWREx_GetVoltageRange>
 8003952:	6178      	str	r0, [r7, #20]
 8003954:	e019      	b.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395c:	4a37      	ldr	r2, [pc, #220]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003966:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003974:	f7fe fda6 	bl	80024c4 <HAL_PWREx_GetVoltageRange>
 8003978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800397c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003980:	4a2e      	ldr	r2, [pc, #184]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003982:	f023 0304 	bic.w	r3, r3, #4
 8003986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003990:	d003      	beq.n	800399a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003998:	d109      	bne.n	80039ae <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a0:	d202      	bcs.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80039a2:	2301      	movs	r3, #1
 80039a4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80039a6:	e033      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80039ac:	e030      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b4:	d208      	bcs.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d102      	bne.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80039be:	2303      	movs	r3, #3
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e025      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e035      	b.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ce:	d90f      	bls.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039dc:	d902      	bls.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e015      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80039e4:	2301      	movs	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e012      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e00f      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f6:	d109      	bne.n	8003a0c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d102      	bne.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003a00:	2301      	movs	r3, #1
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	e004      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003a06:	2302      	movs	r3, #2
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e001      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 020f 	bic.w	r2, r3, #15
 8003a18:	4909      	ldr	r1, [pc, #36]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d001      	beq.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	46020c00 	.word	0x46020c00
 8003a40:	40022000 	.word	0x40022000

08003a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b0b6      	sub	sp, #216	; 0xd8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f002 0401 	and.w	r4, r2, #1
 8003a68:	2500      	movs	r5, #0
 8003a6a:	ea54 0305 	orrs.w	r3, r4, r5
 8003a6e:	d00b      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003a70:	4bc5      	ldr	r3, [pc, #788]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a76:	f023 0103 	bic.w	r1, r3, #3
 8003a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	4ac1      	ldr	r2, [pc, #772]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 0804 	and.w	r8, r2, #4
 8003a94:	f04f 0900 	mov.w	r9, #0
 8003a98:	ea58 0309 	orrs.w	r3, r8, r9
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a9e:	4bba      	ldr	r3, [pc, #744]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	4ab6      	ldr	r2, [pc, #728]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f002 0a08 	and.w	sl, r2, #8
 8003ac2:	f04f 0b00 	mov.w	fp, #0
 8003ac6:	ea5a 030b 	orrs.w	r3, sl, fp
 8003aca:	d00b      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003acc:	4bae      	ldr	r3, [pc, #696]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	4aaa      	ldr	r2, [pc, #680]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f002 0310 	and.w	r3, r2, #16
 8003af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003afa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003afe:	460b      	mov	r3, r1
 8003b00:	4313      	orrs	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003b04:	4ba0      	ldr	r3, [pc, #640]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	4a9c      	ldr	r2, [pc, #624]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b16:	430b      	orrs	r3, r1
 8003b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f002 0320 	and.w	r3, r2, #32
 8003b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b3c:	4b92      	ldr	r3, [pc, #584]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b42:	f023 0107 	bic.w	r1, r3, #7
 8003b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	4a8e      	ldr	r2, [pc, #568]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b6a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b74:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b7a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b84:	4a80      	ldr	r2, [pc, #512]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b86:	430b      	orrs	r3, r1
 8003b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ba2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d00b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003bac:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bbc:	4a72      	ldr	r2, [pc, #456]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003be4:	4b68      	ldr	r3, [pc, #416]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf4:	4a64      	ldr	r2, [pc, #400]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c1c:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c22:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003c54:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c5a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c64:	4a48      	ldr	r2, [pc, #288]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c66:	430b      	orrs	r3, r1
 8003c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c8c:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c92:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003c96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9c:	4a3a      	ldr	r2, [pc, #232]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cb6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003cc0:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd0:	4a2d      	ldr	r2, [pc, #180]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	677b      	str	r3, [r7, #116]	; 0x74
 8003cea:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d04f      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	2b80      	cmp	r3, #128	; 0x80
 8003cfe:	d02d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d827      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d02b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d823      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d006      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d81f      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d011      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003d1c:	e01a      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d2a:	e01a      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d30:	3308      	adds	r3, #8
 8003d32:	4618      	mov	r0, r3
 8003d34:	f002 f93e 	bl	8005fb4 <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d3e:	e010      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d44:	332c      	adds	r3, #44	; 0x2c
 8003d46:	4618      	mov	r0, r3
 8003d48:	f002 f9cc 	bl	80060e4 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d52:	e006      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d62:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d110      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d70:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003d74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	4a02      	ldr	r2, [pc, #8]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003d86:	bf00      	nop
 8003d88:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003d90:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da2:	2300      	movs	r3, #0
 8003da4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003da6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003daa:	460b      	mov	r3, r1
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d046      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003db8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dbe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003dc2:	d821      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc8:	d022      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dce:	d81b      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003dd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dd4:	d01c      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dda:	d815      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d008      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de6:	d80f      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d011      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d00e      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003df2:	e009      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003df8:	3308      	adds	r3, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 f8da 	bl	8005fb4 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e06:	e004      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e0e:	e000      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e12:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003e1a:	4bb6      	ldr	r3, [pc, #728]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e2c:	4ab1      	ldr	r2, [pc, #708]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e34:	e003      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e36:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e3a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e54:	460b      	mov	r3, r1
 8003e56:	4313      	orrs	r3, r2
 8003e58:	d03e      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d81d      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003eab 	.word	0x08003eab
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e8f 	.word	0x08003e8f
 8003e78:	08003eab 	.word	0x08003eab
 8003e7c:	08003eab 	.word	0x08003eab
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e80:	4b9c      	ldr	r3, [pc, #624]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	4a9b      	ldr	r2, [pc, #620]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003e8c:	e00e      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e92:	332c      	adds	r3, #44	; 0x2c
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 f925 	bl	80060e4 <RCCEx_PLL3_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003eaa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003eac:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003eb4:	4b8f      	ldr	r3, [pc, #572]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003eb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003eba:	f023 0107 	bic.w	r1, r3, #7
 8003ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec6:	4a8b      	ldr	r2, [pc, #556]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003ed4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003ee4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	d04a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f00:	d028      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f06:	d821      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f0c:	d024      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f12:	d81b      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f18:	d00e      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f1e:	d815      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d110      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f2a:	4b72      	ldr	r3, [pc, #456]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	4a71      	ldr	r2, [pc, #452]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f36:	e012      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f3c:	332c      	adds	r3, #44	; 0x2c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f002 f8d0 	bl	80060e4 <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003f4a:	e008      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f54:	bf00      	nop
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f5e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003f66:	4b63      	ldr	r3, [pc, #396]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f86:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	2300      	movs	r3, #0
 8003f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f9c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f000 80ba 	beq.w	800411c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d113      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fcc:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003fe4:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd feba 	bl	8001d68 <HAL_GetTick>
 8003ff4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ff8:	e00b      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fd feb5 	bl	8001d68 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d903      	bls.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004010:	e005      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ed      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800401e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d16a      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004026:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800402c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004030:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800403c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004040:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004048:	4293      	cmp	r3, r2
 800404a:	d01b      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800404e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800405c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004060:	4a24      	ldr	r2, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004066:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800406c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004070:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800407c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004080:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d019      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fe6a 	bl	8001d68 <HAL_GetTick>
 8004094:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004098:	e00d      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fd fe65 	bl	8001d68 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040a4:	1ad2      	subs	r2, r2, r3
 80040a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d903      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ea      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80040c4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10d      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040de:	4a05      	ldr	r2, [pc, #20]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040e0:	430b      	orrs	r3, r1
 80040e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040e6:	e00d      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040e8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80040ec:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80040f0:	e008      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80040f2:	bf00      	nop
 80040f4:	46020c00 	.word	0x46020c00
 80040f8:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004100:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004104:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4bb2      	ldr	r3, [pc, #712]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004112:	4ab1      	ldr	r2, [pc, #708]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800411c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004128:	64bb      	str	r3, [r7, #72]	; 0x48
 800412a:	2300      	movs	r3, #0
 800412c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004132:	460b      	mov	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	d042      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800413c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004140:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004144:	d022      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004146:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800414a:	d81b      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800414c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004150:	d011      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8004152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004156:	d815      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d019      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800415c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004160:	d110      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004166:	3308      	adds	r3, #8
 8004168:	4618      	mov	r0, r3
 800416a:	f001 ff23 	bl	8005fb4 <RCCEx_PLL2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004174:	e00d      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004176:	4b98      	ldr	r3, [pc, #608]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	4a97      	ldr	r2, [pc, #604]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800417c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004180:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004182:	e006      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800418a:	e002      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004190:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004192:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800419a:	4b8f      	ldr	r3, [pc, #572]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800419c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ac:	4a8a      	ldr	r2, [pc, #552]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041ae:	430b      	orrs	r3, r1
 80041b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041ba:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40
 80041cc:	2300      	movs	r3, #0
 80041ce:	647b      	str	r3, [r7, #68]	; 0x44
 80041d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d02d      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80041da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e6:	d00b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d804      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	d007      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004200:	bf00      	nop
 8004202:	e002      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004208:	bf00      	nop
    }
    if (ret == HAL_OK)
 800420a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004212:	4b71      	ldr	r3, [pc, #452]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004214:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004218:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a6c      	ldr	r2, [pc, #432]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004226:	430b      	orrs	r3, r1
 8004228:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004232:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004242:	63bb      	str	r3, [r7, #56]	; 0x38
 8004244:	2300      	movs	r3, #0
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004248:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800424c:	460b      	mov	r3, r1
 800424e:	4313      	orrs	r3, r2
 8004250:	d00c      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004252:	4b61      	ldr	r3, [pc, #388]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004258:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800425c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004264:	4a5c      	ldr	r2, [pc, #368]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004266:	430b      	orrs	r3, r1
 8004268:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800426c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
 800427a:	2300      	movs	r3, #0
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
 800427e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004282:	460b      	mov	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	d019      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800428c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004294:	d105      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004296:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	4a4f      	ldr	r2, [pc, #316]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80042a2:	4b4d      	ldr	r3, [pc, #308]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042a8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80042ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b4:	4a48      	ldr	r2, [pc, #288]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80042bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d00c      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80042d8:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042ea:	493b      	ldr	r1, [pc, #236]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80042f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
 8004304:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004308:	460b      	mov	r3, r1
 800430a:	4313      	orrs	r3, r2
 800430c:	d00c      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800430e:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800431c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004320:	492d      	ldr	r1, [pc, #180]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d00c      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800434a:	f023 0218 	bic.w	r2, r3, #24
 800434e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004356:	4920      	ldr	r1, [pc, #128]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800435e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d034      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800437a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800437e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004386:	d105      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800438e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004392:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004398:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800439c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043a0:	d108      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043a6:	3308      	adds	r3, #8
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fe03 	bl	8005fb4 <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 80043b4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043ce:	4902      	ldr	r1, [pc, #8]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80043d6:	e005      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80043d8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80043e0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80043e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d03a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440c:	d00e      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800440e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004412:	d815      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d017      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800441c:	d110      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004428:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800442a:	e00e      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800442c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004430:	3308      	adds	r3, #8
 8004432:	4618      	mov	r0, r3
 8004434:	f001 fdbe 	bl	8005fb4 <RCCEx_PLL2_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800443e:	e004      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004448:	bf00      	nop
    }
    if (ret == HAL_OK)
 800444a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004452:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004458:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800445c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004464:	4915      	ldr	r1, [pc, #84]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004472:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	2300      	movs	r3, #0
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	e9d7 1200 	ldrd	r1, r2, [r7]
 800448c:	460b      	mov	r3, r1
 800448e:	4313      	orrs	r3, r2
 8004490:	d00c      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004498:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800449c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044a4:	4905      	ldr	r1, [pc, #20]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80044ac:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	37d8      	adds	r7, #216	; 0xd8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ba:	bf00      	nop
 80044bc:	46020c00 	.word	0x46020c00

080044c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80044c8:	4bad      	ldr	r3, [pc, #692]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80044d2:	4bab      	ldr	r3, [pc, #684]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80044dc:	4ba8      	ldr	r3, [pc, #672]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	3301      	adds	r3, #1
 80044e8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80044ea:	4ba5      	ldr	r3, [pc, #660]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80044f6:	4ba2      	ldr	r3, [pc, #648]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	08db      	lsrs	r3, r3, #3
 80044fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8123 	beq.w	8004760 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d062      	beq.n	80045e6 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b03      	cmp	r3, #3
 8004524:	f200 8081 	bhi.w	800462a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d024      	beq.n	8004578 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d17a      	bne.n	800462a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004784 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b8e      	ldr	r3, [pc, #568]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004556:	ed97 6a02 	vldr	s12, [r7, #8]
 800455a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004788 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004576:	e08f      	b.n	8004698 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004578:	4b81      	ldr	r3, [pc, #516]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8004584:	4b7e      	ldr	r3, [pc, #504]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	0f1b      	lsrs	r3, r3, #28
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	e006      	b.n	800459e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8004590:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	0f1b      	lsrs	r3, r3, #28
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a7b      	ldr	r2, [pc, #492]	; (800478c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80045a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80045c8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004788 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80045cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e4:	e058      	b.n	8004698 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004784 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80045f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f8:	4b61      	ldr	r3, [pc, #388]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004608:	ed97 6a02 	vldr	s12, [r7, #8]
 800460c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004788 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004610:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004614:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004628:	e036      	b.n	8004698 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800462a:	4b55      	ldr	r3, [pc, #340]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8004636:	4b52      	ldr	r3, [pc, #328]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0f1b      	lsrs	r3, r3, #28
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	e006      	b.n	8004650 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8004642:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	0f1b      	lsrs	r3, r3, #28
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	4a4e      	ldr	r2, [pc, #312]	; (800478c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a02 	vldr	s12, [r7, #8]
 800467a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004788 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004696:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004698:	4b39      	ldr	r3, [pc, #228]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046a4:	4b36      	ldr	r3, [pc, #216]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	0a5b      	lsrs	r3, r3, #9
 80046aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80046b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ba:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046be:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ca:	ee17 2a90 	vmov	r2, s15
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e002      	b.n	80046da <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80046da:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d017      	beq.n	8004716 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046e6:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80046f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046fc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004700:	edd7 6a07 	vldr	s13, [r7, #28]
 8004704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470c:	ee17 2a90 	vmov	r2, s15
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	e002      	b.n	800471c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d017      	beq.n	8004758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472c:	0e1b      	lsrs	r3, r3, #24
 800472e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800473a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800473e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004742:	edd7 6a07 	vldr	s13, [r7, #28]
 8004746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004756:	e00c      	b.n	8004772 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
}
 800475e:	e008      	b.n	8004772 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	bf00      	nop
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	46020c00 	.word	0x46020c00
 8004784:	4b742400 	.word	0x4b742400
 8004788:	46000000 	.word	0x46000000
 800478c:	0800df7c 	.word	0x0800df7c

08004790 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004798:	4bad      	ldr	r3, [pc, #692]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80047a2:	4bab      	ldr	r3, [pc, #684]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80047ac:	4ba8      	ldr	r3, [pc, #672]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	3301      	adds	r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80047ba:	4ba5      	ldr	r3, [pc, #660]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80047c6:	4ba2      	ldr	r3, [pc, #648]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8123 	beq.w	8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d062      	beq.n	80048b6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	f200 8081 	bhi.w	80048fa <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d024      	beq.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d17a      	bne.n	80048fa <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b8e      	ldr	r3, [pc, #568]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004826:	ed97 6a02 	vldr	s12, [r7, #8]
 800482a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004846:	e08f      	b.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004848:	4b81      	ldr	r3, [pc, #516]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8004854:	4b7e      	ldr	r3, [pc, #504]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	0f1b      	lsrs	r3, r3, #28
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	e006      	b.n	800486e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8004860:	4b7b      	ldr	r3, [pc, #492]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004866:	041b      	lsls	r3, r3, #16
 8004868:	0f1b      	lsrs	r3, r3, #28
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	4a7b      	ldr	r2, [pc, #492]	; (8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004894:	ed97 6a02 	vldr	s12, [r7, #8]
 8004898:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800489c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b4:	e058      	b.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80048c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c8:	4b61      	ldr	r3, [pc, #388]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80048dc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80048e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f8:	e036      	b.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80048fa:	4b55      	ldr	r3, [pc, #340]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8004906:	4b52      	ldr	r3, [pc, #328]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	0f1b      	lsrs	r3, r3, #28
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	e006      	b.n	8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8004912:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	0f1b      	lsrs	r3, r3, #28
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	4a4e      	ldr	r2, [pc, #312]	; (8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a02 	vldr	s12, [r7, #8]
 800494a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004966:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004968:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d017      	beq.n	80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	0a5b      	lsrs	r3, r3, #9
 800497a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800498a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800498e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499a:	ee17 2a90 	vmov	r2, s15
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e002      	b.n	80049aa <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80049aa:	4b29      	ldr	r3, [pc, #164]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d017      	beq.n	80049e6 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049b6:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80049c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049dc:	ee17 2a90 	vmov	r2, s15
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	605a      	str	r2, [r3, #4]
 80049e4:	e002      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80049ec:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d017      	beq.n	8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	0e1b      	lsrs	r3, r3, #24
 80049fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1e:	ee17 2a90 	vmov	r2, s15
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a26:	e00c      	b.n	8004a42 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
}
 8004a2e:	e008      	b.n	8004a42 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	609a      	str	r2, [r3, #8]
}
 8004a42:	bf00      	nop
 8004a44:	3724      	adds	r7, #36	; 0x24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	46020c00 	.word	0x46020c00
 8004a54:	4b742400 	.word	0x4b742400
 8004a58:	46000000 	.word	0x46000000
 8004a5c:	0800df7c 	.word	0x0800df7c

08004a60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004a68:	4bad      	ldr	r3, [pc, #692]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004a72:	4bab      	ldr	r3, [pc, #684]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004a7c:	4ba8      	ldr	r3, [pc, #672]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	3301      	adds	r3, #1
 8004a88:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004a8a:	4ba5      	ldr	r3, [pc, #660]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004a96:	4ba2      	ldr	r3, [pc, #648]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8123 	beq.w	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d062      	beq.n	8004b86 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	f200 8081 	bhi.w	8004bca <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d024      	beq.n	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d17a      	bne.n	8004bca <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b8e      	ldr	r3, [pc, #568]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004afa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004b16:	e08f      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b18:	4b81      	ldr	r3, [pc, #516]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004b24:	4b7e      	ldr	r3, [pc, #504]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	0f1b      	lsrs	r3, r3, #28
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	e006      	b.n	8004b3e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004b30:	4b7b      	ldr	r3, [pc, #492]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	0f1b      	lsrs	r3, r3, #28
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	4a7b      	ldr	r2, [pc, #492]	; (8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b64:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b68:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b84:	e058      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b90:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ba8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bac:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc8:	e036      	b.n	8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004bca:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004bd6:	4b52      	ldr	r3, [pc, #328]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0f1b      	lsrs	r3, r3, #28
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004be2:	4b4f      	ldr	r3, [pc, #316]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	0f1b      	lsrs	r3, r3, #28
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	4a4e      	ldr	r2, [pc, #312]	; (8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c36:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d017      	beq.n	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c44:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c6a:	ee17 2a90 	vmov	r2, s15
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004c7a:	4b29      	ldr	r3, [pc, #164]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d017      	beq.n	8004cb6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c86:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004c98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c9c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cac:	ee17 2a90 	vmov	r2, s15
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	e002      	b.n	8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004cbc:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d017      	beq.n	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	0e1b      	lsrs	r3, r3, #24
 8004cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cde:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cee:	ee17 2a90 	vmov	r2, s15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004cf6:	e00c      	b.n	8004d12 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
}
 8004cfe:	e008      	b.n	8004d12 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	3724      	adds	r7, #36	; 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	46020c00 	.word	0x46020c00
 8004d24:	4b742400 	.word	0x4b742400
 8004d28:	46000000 	.word	0x46000000
 8004d2c:	0800df7c 	.word	0x0800df7c

08004d30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08e      	sub	sp, #56	; 0x38
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d3e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004d42:	430b      	orrs	r3, r1
 8004d44:	d145      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d46:	4b9b      	ldr	r3, [pc, #620]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004d52:	4b98      	ldr	r3, [pc, #608]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d108      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d66:	d104      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6e:	f001 b912 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004d72:	4b90      	ldr	r3, [pc, #576]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d80:	d114      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d88:	d110      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d8a:	4b8a      	ldr	r3, [pc, #552]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d98:	d103      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004d9a:	23fa      	movs	r3, #250	; 0xfa
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d9e:	f001 b8fa 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004da2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004da8:	f001 b8f5 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004dac:	4b81      	ldr	r3, [pc, #516]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db8:	d107      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc0:	d103      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004dc2:	4b7d      	ldr	r3, [pc, #500]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	f001 b8e6 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dce:	f001 b8e2 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	d151      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004dde:	4b75      	ldr	r3, [pc, #468]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004de0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004de4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d035      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d841      	bhi.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2b60      	cmp	r3, #96	; 0x60
 8004dfa:	d02a      	beq.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2b60      	cmp	r3, #96	; 0x60
 8004e00:	d83b      	bhi.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d009      	beq.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d835      	bhi.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d012      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e1a:	e02e      	b.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fb4d 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e2a:	f001 b8b4 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e2e:	f107 0318 	add.w	r3, r7, #24
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fcac 	bl	8004790 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e3c:	f001 b8ab 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fe0b 	bl	8004a60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e4e:	f001 b8a2 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e52:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e58:	f001 b89d 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e5c:	4b55      	ldr	r3, [pc, #340]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d103      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004e6a:	4b54      	ldr	r3, [pc, #336]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e6e:	f001 b892 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e76:	f001 b88e 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e7e:	f001 b88a 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e86:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	d126      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004e8e:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e98:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004e9a:	4b46      	ldr	r3, [pc, #280]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004eae:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb2:	f001 b870 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004eb6:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eca:	d103      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004ecc:	4b3c      	ldr	r3, [pc, #240]	; (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed0:	f001 b861 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed8:	f001 b85d 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee0:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	d171      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004ee8:	4b32      	ldr	r3, [pc, #200]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004ef2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004efa:	d034      	beq.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f02:	d853      	bhi.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0a:	d00b      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f12:	d84b      	bhi.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f20:	d009      	beq.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004f22:	e043      	b.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fac9 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f32:	f001 b830 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f36:	f107 0318 	add.w	r3, r7, #24
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fc28 	bl	8004790 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f44:	f001 b827 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f54:	d103      	bne.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f5a:	f001 b81c 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f62:	f001 b818 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f66:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d118      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0e1b      	lsrs	r3, r3, #24
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	0e1b      	lsrs	r3, r3, #24
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fa0:	f000 bff9 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fa8:	f000 bff5 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fb0:	f000 bff1 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004fb4:	46020c00 	.word	0x46020c00
 8004fb8:	0007a120 	.word	0x0007a120
 8004fbc:	00f42400 	.word	0x00f42400
 8004fc0:	007a1200 	.word	0x007a1200
 8004fc4:	02dc6c00 	.word	0x02dc6c00
 8004fc8:	0800df7c 	.word	0x0800df7c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	d17f      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004fd8:	4ba8      	ldr	r3, [pc, #672]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004fda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d165      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004fea:	4ba4      	ldr	r3, [pc, #656]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ff0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ffc:	d034      	beq.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005004:	d853      	bhi.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800500c:	d00b      	beq.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005014:	d84b      	bhi.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	2b00      	cmp	r3, #0
 800501a:	d016      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005022:	d009      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005024:	e043      	b.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fa48 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005034:	f000 bfaf 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005038:	f107 0318 	add.w	r3, r7, #24
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fba7 	bl	8004790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005046:	f000 bfa6 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800504a:	4b8c      	ldr	r3, [pc, #560]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005056:	d103      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8005058:	4b89      	ldr	r3, [pc, #548]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800505c:	f000 bf9b 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005064:	f000 bf97 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005068:	4b84      	ldr	r3, [pc, #528]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b20      	cmp	r3, #32
 8005072:	d118      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005074:	4b81      	ldr	r3, [pc, #516]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005080:	4b7e      	ldr	r3, [pc, #504]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	e006      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 800508c:	4b7b      	ldr	r3, [pc, #492]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800508e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	0e1b      	lsrs	r3, r3, #24
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	4a7a      	ldr	r2, [pc, #488]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80050a2:	f000 bf78 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050aa:	f000 bf74 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050b2:	f000 bf70 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050bc:	d108      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff f9fc 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34
 80050cc:	f000 bf63 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
 80050d4:	f000 bf5f 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80050d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050dc:	1e51      	subs	r1, r2, #1
 80050de:	430b      	orrs	r3, r1
 80050e0:	d136      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80050e2:	4b66      	ldr	r3, [pc, #408]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80050f4:	f7fe fbf8 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 80050f8:	6378      	str	r0, [r7, #52]	; 0x34
 80050fa:	f000 bf4c 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	d104      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005104:	f7fe faba 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005108:	6378      	str	r0, [r7, #52]	; 0x34
 800510a:	f000 bf44 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800510e:	4b5b      	ldr	r3, [pc, #364]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511a:	d106      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	2b02      	cmp	r3, #2
 8005120:	d103      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8005122:	4b59      	ldr	r3, [pc, #356]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
 8005126:	f000 bf36 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800512a:	4b54      	ldr	r3, [pc, #336]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800512c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d107      	bne.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	2b03      	cmp	r3, #3
 800513c:	d104      	bne.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 800513e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
 8005144:	f000 bf27 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	637b      	str	r3, [r7, #52]	; 0x34
 800514c:	f000 bf23 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005154:	1f11      	subs	r1, r2, #4
 8005156:	430b      	orrs	r3, r1
 8005158:	d136      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800515a:	4b48      	ldr	r3, [pc, #288]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800515c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005160:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005164:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800516c:	f7fe fba8 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8005170:	6378      	str	r0, [r7, #52]	; 0x34
 8005172:	f000 bf10 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	2b10      	cmp	r3, #16
 800517a:	d104      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800517c:	f7fe fa7e 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005180:	6378      	str	r0, [r7, #52]	; 0x34
 8005182:	f000 bf08 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005186:	4b3d      	ldr	r3, [pc, #244]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005192:	d106      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	2b20      	cmp	r3, #32
 8005198:	d103      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 800519a:	4b3b      	ldr	r3, [pc, #236]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	f000 befa 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d107      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2b30      	cmp	r3, #48	; 0x30
 80051b4:	d104      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 80051b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
 80051bc:	f000 beeb 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
 80051c4:	f000 bee7 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80051c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051cc:	f1a2 0108 	sub.w	r1, r2, #8
 80051d0:	430b      	orrs	r3, r1
 80051d2:	d136      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80051d4:	4b29      	ldr	r3, [pc, #164]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051de:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051e6:	f7fe fb6b 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 80051ea:	6378      	str	r0, [r7, #52]	; 0x34
 80051ec:	f000 bed3 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d104      	bne.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fe fa41 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80051fa:	6378      	str	r0, [r7, #52]	; 0x34
 80051fc:	f000 becb 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005200:	4b1e      	ldr	r3, [pc, #120]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520c:	d106      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	2b80      	cmp	r3, #128	; 0x80
 8005212:	d103      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8005214:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
 8005218:	f000 bebd 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800521c:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800521e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b02      	cmp	r3, #2
 8005228:	d107      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	2bc0      	cmp	r3, #192	; 0xc0
 800522e:	d104      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8005230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
 8005236:	f000 beae 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
 800523e:	f000 beaa 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005246:	f1a2 0110 	sub.w	r1, r2, #16
 800524a:	430b      	orrs	r3, r1
 800524c:	d141      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005258:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe fb2e 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8005264:	6378      	str	r0, [r7, #52]	; 0x34
 8005266:	f000 be96 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005270:	d10c      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005272:	f7fe fa03 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005276:	6378      	str	r0, [r7, #52]	; 0x34
 8005278:	f000 be8d 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800527c:	46020c00 	.word	0x46020c00
 8005280:	02dc6c00 	.word	0x02dc6c00
 8005284:	0800df7c 	.word	0x0800df7c
 8005288:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800528c:	4baa      	ldr	r3, [pc, #680]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005298:	d107      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a0:	d103      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80052a2:	4ba6      	ldr	r3, [pc, #664]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
 80052a6:	f000 be76 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80052aa:	4ba3      	ldr	r3, [pc, #652]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d108      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052be:	d104      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 80052c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
 80052c6:	f000 be66 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
 80052ce:	f000 be62 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80052d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d6:	f1a2 0120 	sub.w	r1, r2, #32
 80052da:	430b      	orrs	r3, r1
 80052dc:	d158      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80052de:	4b96      	ldr	r3, [pc, #600]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80052f0:	f7fe fb0e 	bl	8003910 <HAL_RCC_GetPCLK3Freq>
 80052f4:	6378      	str	r0, [r7, #52]	; 0x34
 80052f6:	f000 be4e 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d104      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005300:	f7fe f9bc 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005304:	6378      	str	r0, [r7, #52]	; 0x34
 8005306:	f000 be46 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800530a:	4b8b      	ldr	r3, [pc, #556]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d106      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2b02      	cmp	r3, #2
 800531c:	d103      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800531e:	4b87      	ldr	r3, [pc, #540]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
 8005322:	f000 be38 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005326:	4b84      	ldr	r3, [pc, #528]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d107      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	2b03      	cmp	r3, #3
 8005338:	d104      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800533a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
 8005340:	f000 be29 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005344:	4b7c      	ldr	r3, [pc, #496]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b20      	cmp	r3, #32
 800534e:	d11b      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	2b04      	cmp	r3, #4
 8005354:	d118      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005356:	4b78      	ldr	r3, [pc, #480]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8005362:	4b75      	ldr	r3, [pc, #468]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0e1b      	lsrs	r3, r3, #24
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	e006      	b.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800536e:	4b72      	ldr	r3, [pc, #456]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	0e1b      	lsrs	r3, r3, #24
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	4a70      	ldr	r2, [pc, #448]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800537e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
 8005384:	f000 be07 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
 800538c:	f000 be03 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005394:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005398:	430b      	orrs	r3, r1
 800539a:	d16c      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800539c:	4b66      	ldr	r3, [pc, #408]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800539e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053a2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	d104      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053b0:	f7fe f964 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80053b4:	6378      	str	r0, [r7, #52]	; 0x34
 80053b6:	f000 bdee 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c0:	d108      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c2:	f107 0318 	add.w	r3, r7, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff f9e2 	bl	8004790 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
 80053d0:	f000 bde1 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80053da:	f7fe fa57 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80053de:	6378      	str	r0, [r7, #52]	; 0x34
 80053e0:	f000 bdd9 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80053ea:	d122      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d118      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053f8:	4b4f      	ldr	r3, [pc, #316]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005404:	4b4c      	ldr	r3, [pc, #304]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	e006      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005410:	4b49      	ldr	r3, [pc, #292]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	0e1b      	lsrs	r3, r3, #24
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	4a48      	ldr	r2, [pc, #288]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
 8005426:	f000 bdb6 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
 800542e:	f000 bdb2 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005432:	4b41      	ldr	r3, [pc, #260]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800543e:	d107      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005446:	d103      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8005448:	4b3c      	ldr	r3, [pc, #240]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800544a:	637b      	str	r3, [r7, #52]	; 0x34
 800544c:	f000 bda3 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005450:	4b39      	ldr	r3, [pc, #228]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d107      	bne.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005464:	d103      	bne.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8005466:	4b35      	ldr	r3, [pc, #212]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
 800546a:	f000 bd94 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
 8005472:	f000 bd90 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800547e:	430b      	orrs	r3, r1
 8005480:	d160      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005482:	4b2d      	ldr	r3, [pc, #180]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	2b04      	cmp	r3, #4
 8005492:	d84c      	bhi.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054d5 	.word	0x080054d5
 80054a0:	080054b1 	.word	0x080054b1
 80054a4:	080054c3 	.word	0x080054c3
 80054a8:	080054df 	.word	0x080054df
 80054ac:	080054e9 	.word	0x080054e9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f803 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054be:	f000 bd6a 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff faca 	bl	8004a60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d0:	f000 bd61 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80054d4:	f7fe f9da 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80054d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80054da:	f000 bd5c 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80054de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e4:	f000 bd57 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054e8:	4b13      	ldr	r3, [pc, #76]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d118      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054f4:	4b10      	ldr	r3, [pc, #64]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005500:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	e006      	b.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800550e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	4a09      	ldr	r2, [pc, #36]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800551c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005522:	f000 bd38 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800552a:	f000 bd34 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005532:	f000 bd30 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005536:	bf00      	nop
 8005538:	46020c00 	.word	0x46020c00
 800553c:	00f42400 	.word	0x00f42400
 8005540:	0800df7c 	.word	0x0800df7c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005548:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800554c:	430b      	orrs	r3, r1
 800554e:	d167      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005550:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005556:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800555a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005562:	d036      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800556a:	d855      	bhi.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005572:	d029      	beq.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800557a:	d84d      	bhi.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005582:	d013      	beq.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800558a:	d845      	bhi.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d015      	beq.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d13e      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800559a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe ff8e 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055a8:	f000 bcf5 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ac:	f107 030c 	add.w	r3, r7, #12
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fa55 	bl	8004a60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ba:	f000 bcec 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80055be:	f7fe f965 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80055c2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80055c4:	f000 bce7 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80055c8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ce:	f000 bce2 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055d2:	4b80      	ldr	r3, [pc, #512]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d118      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055de:	4b7d      	ldr	r3, [pc, #500]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80055ea:	4b7a      	ldr	r3, [pc, #488]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0e1b      	lsrs	r3, r3, #24
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	e006      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80055f6:	4b77      	ldr	r3, [pc, #476]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	0e1b      	lsrs	r3, r3, #24
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	4a74      	ldr	r2, [pc, #464]	; (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800560c:	f000 bcc3 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005614:	f000 bcbf 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800561c:	f000 bcbb 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005624:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005628:	430b      	orrs	r3, r1
 800562a:	d14c      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800562c:	4b69      	ldr	r3, [pc, #420]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800562e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005632:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005636:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800563e:	f7fe f93f 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8005642:	6378      	str	r0, [r7, #52]	; 0x34
 8005644:	f000 bca7 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564e:	d104      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005650:	f7fe f814 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005654:	6378      	str	r0, [r7, #52]	; 0x34
 8005656:	f000 bc9e 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800565a:	4b5e      	ldr	r3, [pc, #376]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d107      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566e:	d103      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8005670:	4b5a      	ldr	r3, [pc, #360]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
 8005674:	f000 bc8f 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005678:	4b56      	ldr	r3, [pc, #344]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b20      	cmp	r3, #32
 8005682:	d11c      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800568a:	d118      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800568c:	4b51      	ldr	r3, [pc, #324]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005698:	4b4e      	ldr	r3, [pc, #312]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0e1b      	lsrs	r3, r3, #24
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	e006      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80056a4:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	0e1b      	lsrs	r3, r3, #24
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	4a49      	ldr	r2, [pc, #292]	; (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80056b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	f000 bc6c 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	f000 bc68 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80056c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ca:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80056ce:	430b      	orrs	r3, r1
 80056d0:	d14c      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80056d2:	4b40      	ldr	r3, [pc, #256]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056e4:	f7fe f8ec 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 80056e8:	6378      	str	r0, [r7, #52]	; 0x34
 80056ea:	f000 bc54 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	d104      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056f6:	f7fd ffc1 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80056fa:	6378      	str	r0, [r7, #52]	; 0x34
 80056fc:	f000 bc4b 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005700:	4b34      	ldr	r3, [pc, #208]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d107      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d103      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
 800571a:	f000 bc3c 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800571e:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b20      	cmp	r3, #32
 8005728:	d11c      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005730:	d118      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005732:	4b28      	ldr	r3, [pc, #160]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800573e:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	0e1b      	lsrs	r3, r3, #24
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	e006      	b.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800574c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005750:	041b      	lsls	r3, r3, #16
 8005752:	0e1b      	lsrs	r3, r3, #24
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800575a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
 8005760:	f000 bc19 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
 8005768:	f000 bc15 	b.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800576c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005770:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005774:	430b      	orrs	r3, r1
 8005776:	d157      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005778:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800577a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800577e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005782:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	2bc0      	cmp	r3, #192	; 0xc0
 8005788:	d02a      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2bc0      	cmp	r3, #192	; 0xc0
 800578e:	d848      	bhi.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d00d      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	d842      	bhi.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d011      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80057a8:	e03b      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80057aa:	f7fe f8b1 	bl	8003910 <HAL_RCC_GetPCLK3Freq>
 80057ae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80057b0:	e3f1      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057be:	d102      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057c4:	e3e7      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057ca:	e3e4      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80057cc:	f7fd ff56 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80057d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80057d2:	e3e0      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80057d4:	46020c00 	.word	0x46020c00
 80057d8:	0800df7c 	.word	0x0800df7c
 80057dc:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80057e0:	4ba3      	ldr	r3, [pc, #652]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d117      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057ec:	4ba0      	ldr	r3, [pc, #640]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80057f8:	4b9d      	ldr	r3, [pc, #628]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	0e1b      	lsrs	r3, r3, #24
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	e006      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8005804:	4b9a      	ldr	r3, [pc, #616]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	0e1b      	lsrs	r3, r3, #24
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	4a98      	ldr	r2, [pc, #608]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800581a:	e3bc      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005820:	e3b9      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005826:	e3b6      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800582c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005830:	430b      	orrs	r3, r1
 8005832:	d147      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005834:	4b8e      	ldr	r3, [pc, #568]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800583a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800583e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005846:	f7fe f83b 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 800584a:	6378      	str	r0, [r7, #52]	; 0x34
 800584c:	e3a3      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005854:	d103      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005856:	f7fd ff11 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800585a:	6378      	str	r0, [r7, #52]	; 0x34
 800585c:	e39b      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800585e:	4b84      	ldr	r3, [pc, #528]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586a:	d106      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005872:	d102      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8005874:	4b80      	ldr	r3, [pc, #512]	; (8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
 8005878:	e38d      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800587a:	4b7d      	ldr	r3, [pc, #500]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d11b      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800588c:	d117      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800588e:	4b78      	ldr	r3, [pc, #480]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 800589a:	4b75      	ldr	r3, [pc, #468]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	0e1b      	lsrs	r3, r3, #24
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80058a6:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	0e1b      	lsrs	r3, r3, #24
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	4a6f      	ldr	r2, [pc, #444]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80058b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
 80058bc:	e36b      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
 80058c2:	e368      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80058c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80058cc:	430b      	orrs	r3, r1
 80058ce:	d164      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80058d0:	4b67      	ldr	r3, [pc, #412]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d120      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058e2:	4b63      	ldr	r3, [pc, #396]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d117      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058ee:	4b60      	ldr	r3, [pc, #384]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 80058fa:	4b5d      	ldr	r3, [pc, #372]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	0e1b      	lsrs	r3, r3, #24
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005906:	4b5a      	ldr	r3, [pc, #360]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	0e1b      	lsrs	r3, r3, #24
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	4a57      	ldr	r2, [pc, #348]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
 800591c:	e33b      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
 8005922:	e338      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005924:	4b52      	ldr	r3, [pc, #328]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800592a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800592e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005932:	d112      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593a:	d10e      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800593c:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800593e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d102      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 800594c:	23fa      	movs	r3, #250	; 0xfa
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005950:	e321      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005952:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005958:	e31d      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800595a:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005966:	d106      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596e:	d102      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8005970:	4b41      	ldr	r3, [pc, #260]	; (8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
 8005974:	e30f      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005976:	4b3e      	ldr	r3, [pc, #248]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b02      	cmp	r3, #2
 8005982:	d107      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598a:	d103      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 800598c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
 8005992:	e300      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
 8005998:	e2fd      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800599a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800599e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80059a2:	430b      	orrs	r3, r1
 80059a4:	d16a      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80059a6:	4b32      	ldr	r3, [pc, #200]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d120      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059b8:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d117      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059c4:	4b2a      	ldr	r3, [pc, #168]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80059d0:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	0e1b      	lsrs	r3, r3, #24
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	e006      	b.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80059dc:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	0e1b      	lsrs	r3, r3, #24
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
 80059f2:	e2d0      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	e2cd      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a08:	d112      	bne.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a10:	d10e      	bne.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a12:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a20:	d102      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005a22:	23fa      	movs	r3, #250	; 0xfa
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a26:	e2b6      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a2e:	e2b2      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a44:	d102      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005a46:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4a:	e2a4      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005a4c:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d107      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a60:	d103      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
 8005a68:	e295      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6e:	e292      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005a70:	46020c00 	.word	0x46020c00
 8005a74:	0800df7c 	.word	0x0800df7c
 8005a78:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a80:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005a84:	430b      	orrs	r3, r1
 8005a86:	d147      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005a88:	4b9a      	ldr	r3, [pc, #616]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005a92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a9a:	f7fd ff11 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8005a9e:	6378      	str	r0, [r7, #52]	; 0x34
 8005aa0:	e279      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005aa2:	4b94      	ldr	r3, [pc, #592]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab0:	d112      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ab8:	d10e      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aba:	4b8e      	ldr	r3, [pc, #568]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ac8:	d102      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005aca:	23fa      	movs	r3, #250	; 0xfa
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ace:	e262      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005ad0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ad6:	e25e      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005ad8:	4b86      	ldr	r3, [pc, #536]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005aec:	d102      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005aee:	4b82      	ldr	r3, [pc, #520]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
 8005af2:	e250      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005af4:	4b7f      	ldr	r3, [pc, #508]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d107      	bne.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b08:	d103      	bne.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b10:	e241      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
 8005b16:	e23e      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b1c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005b20:	430b      	orrs	r3, r1
 8005b22:	d12d      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005b24:	4b73      	ldr	r3, [pc, #460]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b2a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005b30:	4b70      	ldr	r3, [pc, #448]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b3c:	d105      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005b44:	4b6c      	ldr	r3, [pc, #432]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
 8005b48:	e225      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b50:	d107      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fcb2 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b60:	e219      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b68:	d107      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fe0e 	bl	8004790 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
 8005b78:	e20d      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7e:	e20a      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b84:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	d156      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005b8c:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b96:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b9e:	d028      	beq.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ba6:	d845      	bhi.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bae:	d013      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bb6:	d83d      	bhi.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc4:	d004      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005bc6:	e035      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fd fe8e 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 8005bcc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005bce:	e1e2      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005bd0:	f7fd fd54 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005bd4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005bd6:	e1de      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bd8:	4b46      	ldr	r3, [pc, #280]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be4:	d102      	bne.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005be6:	4b44      	ldr	r3, [pc, #272]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bea:	e1d4      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bf0:	e1d1      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005bf2:	4b40      	ldr	r3, [pc, #256]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d117      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005bfe:	4b3d      	ldr	r3, [pc, #244]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	0e1b      	lsrs	r3, r3, #24
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	e006      	b.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005c16:	4b37      	ldr	r3, [pc, #220]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	0e1b      	lsrs	r3, r3, #24
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c2c:	e1b3      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c32:	e1b0      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c38:	e1ad      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c3e:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005c42:	430b      	orrs	r3, r1
 8005c44:	d15c      	bne.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005c46:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c50:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c58:	d028      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c60:	d845      	bhi.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c68:	d013      	beq.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c70:	d83d      	bhi.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7e:	d004      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005c80:	e035      	b.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005c82:	f7fd fe1d 	bl	80038c0 <HAL_RCC_GetPCLK1Freq>
 8005c86:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c88:	e185      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c8a:	f7fd fcf7 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005c8e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c90:	e181      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9e:	d102      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005ca0:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ca4:	e177      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005caa:	e174      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d117      	bne.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	0e1b      	lsrs	r3, r3, #24
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	e006      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	0e1b      	lsrs	r3, r3, #24
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	4a07      	ldr	r2, [pc, #28]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ce6:	e156      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cec:	e153      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf2:	e150      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005cf4:	46020c00 	.word	0x46020c00
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	0800df7c 	.word	0x0800df7c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d04:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	d176      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005d0c:	4ba4      	ldr	r3, [pc, #656]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d12:	f003 0318 	and.w	r3, r3, #24
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	2b18      	cmp	r3, #24
 8005d1c:	d86a      	bhi.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005df5 	.word	0x08005df5
 8005d2c:	08005df5 	.word	0x08005df5
 8005d30:	08005df5 	.word	0x08005df5
 8005d34:	08005df5 	.word	0x08005df5
 8005d38:	08005df5 	.word	0x08005df5
 8005d3c:	08005df5 	.word	0x08005df5
 8005d40:	08005df5 	.word	0x08005df5
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005df5 	.word	0x08005df5
 8005d4c:	08005df5 	.word	0x08005df5
 8005d50:	08005df5 	.word	0x08005df5
 8005d54:	08005df5 	.word	0x08005df5
 8005d58:	08005df5 	.word	0x08005df5
 8005d5c:	08005df5 	.word	0x08005df5
 8005d60:	08005df5 	.word	0x08005df5
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005df5 	.word	0x08005df5
 8005d6c:	08005df5 	.word	0x08005df5
 8005d70:	08005df5 	.word	0x08005df5
 8005d74:	08005df5 	.word	0x08005df5
 8005d78:	08005df5 	.word	0x08005df5
 8005d7c:	08005df5 	.word	0x08005df5
 8005d80:	08005df5 	.word	0x08005df5
 8005d84:	08005db3 	.word	0x08005db3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005d88:	f7fd fdc2 	bl	8003910 <HAL_RCC_GetPCLK3Freq>
 8005d8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d8e:	e102      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005d90:	f7fd fc74 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005d94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d96:	e0fe      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d98:	4b81      	ldr	r3, [pc, #516]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da4:	d102      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005da6:	4b7f      	ldr	r3, [pc, #508]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005daa:	e0f4      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db0:	e0f1      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005db2:	4b7b      	ldr	r3, [pc, #492]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d117      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005dbe:	4b78      	ldr	r3, [pc, #480]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005dca:	4b75      	ldr	r3, [pc, #468]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	0e1b      	lsrs	r3, r3, #24
 8005dd0:	f003 030f 	and.w	r3, r3, #15
 8005dd4:	e006      	b.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005dd6:	4b72      	ldr	r3, [pc, #456]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	0e1b      	lsrs	r3, r3, #24
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	4a70      	ldr	r2, [pc, #448]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dec:	e0d3      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005df2:	e0d0      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005df8:	e0cd      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfe:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005e02:	430b      	orrs	r3, r1
 8005e04:	d155      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e06:	4b66      	ldr	r3, [pc, #408]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e18:	d013      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e20:	d844      	bhi.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e28:	d013      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e30:	d83c      	bhi.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d014      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3e:	d014      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005e40:	e034      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e42:	f107 0318 	add.w	r3, r7, #24
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fe fca2 	bl	8004790 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e50:	e0a1      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fb32 	bl	80044c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e60:	e099      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005e62:	f7fd fc0b 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8005e66:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e68:	e095      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e6a:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d117      	bne.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e76:	4b4a      	ldr	r3, [pc, #296]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	0e1b      	lsrs	r3, r3, #24
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005e8e:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e94:	041b      	lsls	r3, r3, #16
 8005e96:	0e1b      	lsrs	r3, r3, #24
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	4a42      	ldr	r2, [pc, #264]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ea4:	e077      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eaa:	e074      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb0:	e071      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	d131      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005ebe:	4b38      	ldr	r3, [pc, #224]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005eca:	4b35      	ldr	r3, [pc, #212]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee4:	e057      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005ee6:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef4:	d112      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efc:	d10e      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005efe:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f0c:	d102      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005f0e:	23fa      	movs	r3, #250	; 0xfa
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f12:	e040      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f1a:	e03c      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f20:	e039      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f26:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	d131      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005f2e:	4b1c      	ldr	r3, [pc, #112]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005f3a:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f46:	d105      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005f4e:	4b17      	ldr	r3, [pc, #92]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
 8005f52:	e020      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005f54:	4b12      	ldr	r3, [pc, #72]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f60:	d106      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f68:	d102      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6e:	e012      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7c:	d106      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	d102      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005f86:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
 8005f8a:	e004      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f90:	e001      	b.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3738      	adds	r7, #56	; 0x38
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	46020c00 	.word	0x46020c00
 8005fa4:	00f42400 	.word	0x00f42400
 8005fa8:	0800df7c 	.word	0x0800df7c
 8005fac:	02dc6c00 	.word	0x02dc6c00
 8005fb0:	016e3600 	.word	0x016e3600

08005fb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005fbc:	4b47      	ldr	r3, [pc, #284]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a46      	ldr	r2, [pc, #280]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8005fc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fc8:	f7fb fece 	bl	8001d68 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fce:	e008      	b.n	8005fe2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fd0:	f7fb feca 	bl	8001d68 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e077      	b.n	80060d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fe2:	4b3e      	ldr	r3, [pc, #248]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005fee:	4b3b      	ldr	r3, [pc, #236]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6852      	ldr	r2, [r2, #4]
 8006002:	3a01      	subs	r2, #1
 8006004:	0212      	lsls	r2, r2, #8
 8006006:	430a      	orrs	r2, r1
 8006008:	4934      	ldr	r1, [pc, #208]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 800600a:	4313      	orrs	r3, r2
 800600c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800600e:	4b33      	ldr	r3, [pc, #204]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8006010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006012:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <RCCEx_PLL2_Config+0x12c>)
 8006014:	4013      	ands	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	3a01      	subs	r2, #1
 800601c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	68d2      	ldr	r2, [r2, #12]
 8006024:	3a01      	subs	r2, #1
 8006026:	0252      	lsls	r2, r2, #9
 8006028:	b292      	uxth	r2, r2
 800602a:	4311      	orrs	r1, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6912      	ldr	r2, [r2, #16]
 8006030:	3a01      	subs	r2, #1
 8006032:	0412      	lsls	r2, r2, #16
 8006034:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006038:	4311      	orrs	r1, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6952      	ldr	r2, [r2, #20]
 800603e:	3a01      	subs	r2, #1
 8006040:	0612      	lsls	r2, r2, #24
 8006042:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006046:	430a      	orrs	r2, r1
 8006048:	4924      	ldr	r1, [pc, #144]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 800604a:	4313      	orrs	r3, r2
 800604c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800604e:	4b23      	ldr	r3, [pc, #140]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	f023 020c 	bic.w	r2, r3, #12
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	4920      	ldr	r1, [pc, #128]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 800605c:	4313      	orrs	r3, r2
 800605e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006060:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	491c      	ldr	r1, [pc, #112]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 800606a:	4313      	orrs	r3, r2
 800606c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800606e:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	4a1a      	ldr	r2, [pc, #104]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8006074:	f023 0310 	bic.w	r3, r3, #16
 8006078:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800607a:	4b18      	ldr	r3, [pc, #96]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006082:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	69d2      	ldr	r2, [r2, #28]
 800608a:	00d2      	lsls	r2, r2, #3
 800608c:	4913      	ldr	r1, [pc, #76]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 800608e:	4313      	orrs	r3, r2
 8006090:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	4a11      	ldr	r2, [pc, #68]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 8006098:	f043 0310 	orr.w	r3, r3, #16
 800609c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 80060a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060aa:	f7fb fe5d 	bl	8001d68 <HAL_GetTick>
 80060ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060b0:	e008      	b.n	80060c4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060b2:	f7fb fe59 	bl	8001d68 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e006      	b.n	80060d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <RCCEx_PLL2_Config+0x128>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f0      	beq.n	80060b2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0

}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	46020c00 	.word	0x46020c00
 80060e0:	80800000 	.word	0x80800000

080060e4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80060ec:	4b47      	ldr	r3, [pc, #284]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a46      	ldr	r2, [pc, #280]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80060f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060f8:	f7fb fe36 	bl	8001d68 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060fe:	e008      	b.n	8006112 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006100:	f7fb fe32 	bl	8001d68 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e077      	b.n	8006202 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006112:	4b3e      	ldr	r3, [pc, #248]	; (800620c <RCCEx_PLL3_Config+0x128>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800611e:	4b3b      	ldr	r3, [pc, #236]	; (800620c <RCCEx_PLL3_Config+0x128>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6811      	ldr	r1, [r2, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6852      	ldr	r2, [r2, #4]
 8006132:	3a01      	subs	r2, #1
 8006134:	0212      	lsls	r2, r2, #8
 8006136:	430a      	orrs	r2, r1
 8006138:	4934      	ldr	r1, [pc, #208]	; (800620c <RCCEx_PLL3_Config+0x128>)
 800613a:	4313      	orrs	r3, r2
 800613c:	630b      	str	r3, [r1, #48]	; 0x30
 800613e:	4b33      	ldr	r3, [pc, #204]	; (800620c <RCCEx_PLL3_Config+0x128>)
 8006140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006142:	4b33      	ldr	r3, [pc, #204]	; (8006210 <RCCEx_PLL3_Config+0x12c>)
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6892      	ldr	r2, [r2, #8]
 800614a:	3a01      	subs	r2, #1
 800614c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68d2      	ldr	r2, [r2, #12]
 8006154:	3a01      	subs	r2, #1
 8006156:	0252      	lsls	r2, r2, #9
 8006158:	b292      	uxth	r2, r2
 800615a:	4311      	orrs	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6912      	ldr	r2, [r2, #16]
 8006160:	3a01      	subs	r2, #1
 8006162:	0412      	lsls	r2, r2, #16
 8006164:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006168:	4311      	orrs	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6952      	ldr	r2, [r2, #20]
 800616e:	3a01      	subs	r2, #1
 8006170:	0612      	lsls	r2, r2, #24
 8006172:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006176:	430a      	orrs	r2, r1
 8006178:	4924      	ldr	r1, [pc, #144]	; (800620c <RCCEx_PLL3_Config+0x128>)
 800617a:	4313      	orrs	r3, r2
 800617c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800617e:	4b23      	ldr	r3, [pc, #140]	; (800620c <RCCEx_PLL3_Config+0x128>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	f023 020c 	bic.w	r2, r3, #12
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	4920      	ldr	r1, [pc, #128]	; (800620c <RCCEx_PLL3_Config+0x128>)
 800618c:	4313      	orrs	r3, r2
 800618e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006190:	4b1e      	ldr	r3, [pc, #120]	; (800620c <RCCEx_PLL3_Config+0x128>)
 8006192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	491c      	ldr	r1, [pc, #112]	; (800620c <RCCEx_PLL3_Config+0x128>)
 800619a:	4313      	orrs	r3, r2
 800619c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800619e:	4b1b      	ldr	r3, [pc, #108]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	4a1a      	ldr	r2, [pc, #104]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061a4:	f023 0310 	bic.w	r3, r3, #16
 80061a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	69d2      	ldr	r2, [r2, #28]
 80061ba:	00d2      	lsls	r2, r2, #3
 80061bc:	4913      	ldr	r1, [pc, #76]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80061c2:	4b12      	ldr	r3, [pc, #72]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	4a11      	ldr	r2, [pc, #68]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061c8:	f043 0310 	orr.w	r3, r3, #16
 80061cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a0e      	ldr	r2, [pc, #56]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061da:	f7fb fdc5 	bl	8001d68 <HAL_GetTick>
 80061de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061e0:	e008      	b.n	80061f4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061e2:	f7fb fdc1 	bl	8001d68 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e006      	b.n	8006202 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <RCCEx_PLL3_Config+0x128>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	46020c00 	.word	0x46020c00
 8006210:	80800000 	.word	0x80800000

08006214 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	; 0x28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e075      	b.n	8006312 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fb fa39 	bl	80016b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2204      	movs	r2, #4
 8006242:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f868 	bl	800631c <HAL_SD_InitCard>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e05d      	b.n	8006312 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006256:	f107 0308 	add.w	r3, r7, #8
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fdb5 	bl	8006dcc <HAL_SD_GetCardStatus>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e052      	b.n	8006312 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800626c:	7e3b      	ldrb	r3, [r7, #24]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006272:	7e7b      	ldrb	r3, [r7, #25]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10a      	bne.n	8006296 <HAL_SD_Init+0x82>
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <HAL_SD_Init+0x78>
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006292:	659a      	str	r2, [r3, #88]	; 0x58
 8006294:	e00b      	b.n	80062ae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	2b01      	cmp	r3, #1
 800629c:	d104      	bne.n	80062a8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062a4:	659a      	str	r2, [r3, #88]	; 0x58
 80062a6:	e002      	b.n	80062ae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fe73 	bl	8006fa0 <HAL_SD_ConfigWideBusOperation>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e026      	b.n	8006312 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80062c4:	f7fb fd50 	bl	8001d68 <HAL_GetTick>
 80062c8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80062ca:	e011      	b.n	80062f0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80062cc:	f7fb fd4c 	bl	8001d68 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062da:	d109      	bne.n	80062f0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e010      	b.n	8006312 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 ff67 	bl	80071c4 <HAL_SD_GetCardState>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d1e7      	bne.n	80062cc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3728      	adds	r7, #40	; 0x28
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b08d      	sub	sp, #52	; 0x34
 8006320:	af02      	add	r7, sp, #8
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006330:	2300      	movs	r3, #0
 8006332:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006334:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006338:	f04f 0100 	mov.w	r1, #0
 800633c:	f7fe fcf8 	bl	8004d30 <HAL_RCCEx_GetPeriphCLKFreq>
 8006340:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006356:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e070      	b.n	800643e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	4a39      	ldr	r2, [pc, #228]	; (8006448 <HAL_SD_InitCard+0x12c>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681c      	ldr	r4, [r3, #0]
 800636e:	466a      	mov	r2, sp
 8006370:	f107 0318 	add.w	r3, r7, #24
 8006374:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006378:	e882 0003 	stmia.w	r2, {r0, r1}
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006382:	4620      	mov	r0, r4
 8006384:	f003 faa6 	bl	80098d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f003 fae9 	bl	8009964 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80063aa:	4a28      	ldr	r2, [pc, #160]	; (800644c <HAL_SD_InitCard+0x130>)
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fb fce3 	bl	8001d80 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fff0 	bl	80073a0 <SD_PowerON>
 80063c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e02e      	b.n	800643e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 ff0f 	bl	8007204 <SD_InitCard>
 80063e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e01b      	b.n	800643e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800640e:	4618      	mov	r0, r3
 8006410:	f003 fb3e 	bl	8009a90 <SDMMC_CmdBlockLength>
 8006414:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00f      	beq.n	800643c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0b      	ldr	r2, [pc, #44]	; (8006450 <HAL_SD_InitCard+0x134>)
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	372c      	adds	r7, #44	; 0x2c
 8006442:	46bd      	mov	sp, r7
 8006444:	bd90      	pop	{r4, r7, pc}
 8006446:	bf00      	nop
 8006448:	014f8b59 	.word	0x014f8b59
 800644c:	00012110 	.word	0x00012110
 8006450:	1fe00fff 	.word	0x1fe00fff

08006454 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b092      	sub	sp, #72	; 0x48
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006462:	f7fb fc81 	bl	8001d68 <HAL_GetTick>
 8006466:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e167      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b01      	cmp	r3, #1
 8006490:	f040 815a 	bne.w	8006748 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800649a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	441a      	add	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d907      	bls.n	80064b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e14e      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2203      	movs	r2, #3
 80064bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2200      	movs	r2, #0
 80064c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d002      	beq.n	80064d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	025b      	lsls	r3, r3, #9
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	025b      	lsls	r3, r3, #9
 80064e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80064e2:	2390      	movs	r3, #144	; 0x90
 80064e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80064e6:	2302      	movs	r3, #2
 80064e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f107 0214 	add.w	r2, r7, #20
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f003 fa9b 	bl	8009a38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006510:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d90a      	bls.n	800652e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2202      	movs	r2, #2
 800651c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006524:	4618      	mov	r0, r3
 8006526:	f003 faf9 	bl	8009b1c <SDMMC_CmdReadMultiBlock>
 800652a:	6478      	str	r0, [r7, #68]	; 0x44
 800652c:	e009      	b.n	8006542 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800653a:	4618      	mov	r0, r3
 800653c:	f003 facb 	bl	8009ad6 <SDMMC_CmdReadSingleBlock>
 8006540:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006544:	2b00      	cmp	r3, #0
 8006546:	d012      	beq.n	800656e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a84      	ldr	r2, [pc, #528]	; (8006760 <HAL_SD_ReadBlocks+0x30c>)
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006556:	431a      	orrs	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e0f3      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006572:	e058      	b.n	8006626 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d033      	beq.n	80065ea <HAL_SD_ReadBlocks+0x196>
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	2b1f      	cmp	r3, #31
 8006586:	d930      	bls.n	80065ea <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006588:	2300      	movs	r3, #0
 800658a:	643b      	str	r3, [r7, #64]	; 0x40
 800658c:	e027      	b.n	80065de <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f003 f9c8 	bl	8009928 <SDMMC_ReadFIFO>
 8006598:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	b2da      	uxtb	r2, r3
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	3301      	adds	r3, #1
 80065a6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	3301      	adds	r3, #1
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c4:	3301      	adds	r3, #1
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	0e1b      	lsrs	r3, r3, #24
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	3301      	adds	r3, #1
 80065d6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80065d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065da:	3301      	adds	r3, #1
 80065dc:	643b      	str	r3, [r7, #64]	; 0x40
 80065de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e0:	2b07      	cmp	r3, #7
 80065e2:	d9d4      	bls.n	800658e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	3b20      	subs	r3, #32
 80065e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80065ea:	f7fb fbbd 	bl	8001d68 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d902      	bls.n	8006600 <HAL_SD_ReadBlocks+0x1ac>
 80065fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d112      	bne.n	8006626 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a56      	ldr	r2, [pc, #344]	; (8006760 <HAL_SD_ReadBlocks+0x30c>)
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e097      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006630:	2b00      	cmp	r3, #0
 8006632:	d09f      	beq.n	8006574 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006642:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d022      	beq.n	8006698 <HAL_SD_ReadBlocks+0x244>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d91f      	bls.n	8006698 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	2b03      	cmp	r3, #3
 800665e:	d01b      	beq.n	8006698 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f003 fac3 	bl	8009bf0 <SDMMC_CmdStopTransfer>
 800666a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800666c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666e:	2b00      	cmp	r3, #0
 8006670:	d012      	beq.n	8006698 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a3a      	ldr	r2, [pc, #232]	; (8006760 <HAL_SD_ReadBlocks+0x30c>)
 8006678:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800667e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006680:	431a      	orrs	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e05e      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d012      	beq.n	80066cc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2d      	ldr	r2, [pc, #180]	; (8006760 <HAL_SD_ReadBlocks+0x30c>)
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	f043 0208 	orr.w	r2, r3, #8
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e044      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d012      	beq.n	8006700 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a20      	ldr	r2, [pc, #128]	; (8006760 <HAL_SD_ReadBlocks+0x30c>)
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	f043 0202 	orr.w	r2, r3, #2
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e02a      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d012      	beq.n	8006734 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a13      	ldr	r2, [pc, #76]	; (8006760 <HAL_SD_ReadBlocks+0x30c>)
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671a:	f043 0220 	orr.w	r2, r3, #32
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e010      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <HAL_SD_ReadBlocks+0x310>)
 800673a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e006      	b.n	8006756 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3748      	adds	r7, #72	; 0x48
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	1fe00fff 	.word	0x1fe00fff
 8006764:	18000f3a 	.word	0x18000f3a

08006768 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b092      	sub	sp, #72	; 0x48
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006776:	f7fb faf7 	bl	8001d68 <HAL_GetTick>
 800677a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d107      	bne.n	800679a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e16b      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	f040 815e 	bne.w	8006a64 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	441a      	add	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d907      	bls.n	80067cc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e152      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2203      	movs	r2, #3
 80067d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2200      	movs	r2, #0
 80067da:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d002      	beq.n	80067ea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	025b      	lsls	r3, r3, #9
 80067e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	025b      	lsls	r3, r3, #9
 80067f4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067f6:	2390      	movs	r3, #144	; 0x90
 80067f8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067fe:	2300      	movs	r3, #0
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006802:	2300      	movs	r3, #0
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f107 0218 	add.w	r2, r7, #24
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f003 f911 	bl	8009a38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006824:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d90a      	bls.n	8006842 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006838:	4618      	mov	r0, r3
 800683a:	f003 f9b5 	bl	8009ba8 <SDMMC_CmdWriteMultiBlock>
 800683e:	6478      	str	r0, [r7, #68]	; 0x44
 8006840:	e009      	b.n	8006856 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2210      	movs	r2, #16
 8006846:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800684e:	4618      	mov	r0, r3
 8006850:	f003 f987 	bl	8009b62 <SDMMC_CmdWriteSingleBlock>
 8006854:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006858:	2b00      	cmp	r3, #0
 800685a:	d012      	beq.n	8006882 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a86      	ldr	r2, [pc, #536]	; (8006a7c <HAL_SD_WriteBlocks+0x314>)
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686a:	431a      	orrs	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e0f7      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006886:	e05c      	b.n	8006942 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d037      	beq.n	8006906 <HAL_SD_WriteBlocks+0x19e>
 8006896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006898:	2b1f      	cmp	r3, #31
 800689a:	d934      	bls.n	8006906 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800689c:	2300      	movs	r3, #0
 800689e:	643b      	str	r3, [r7, #64]	; 0x40
 80068a0:	e02b      	b.n	80068fa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	3301      	adds	r3, #1
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	021a      	lsls	r2, r3, #8
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80068ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068bc:	3301      	adds	r3, #1
 80068be:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80068c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	041a      	lsls	r2, r3, #16
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	3301      	adds	r3, #1
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	061a      	lsls	r2, r3, #24
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	3301      	adds	r3, #1
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f107 0214 	add.w	r2, r7, #20
 80068ec:	4611      	mov	r1, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 f827 	bl	8009942 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80068f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f6:	3301      	adds	r3, #1
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
 80068fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068fc:	2b07      	cmp	r3, #7
 80068fe:	d9d0      	bls.n	80068a2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	3b20      	subs	r3, #32
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006906:	f7fb fa2f 	bl	8001d68 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006912:	429a      	cmp	r2, r3
 8006914:	d902      	bls.n	800691c <HAL_SD_WriteBlocks+0x1b4>
 8006916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006918:	2b00      	cmp	r3, #0
 800691a:	d112      	bne.n	8006942 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a56      	ldr	r2, [pc, #344]	; (8006a7c <HAL_SD_WriteBlocks+0x314>)
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692a:	431a      	orrs	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e097      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006948:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800694c:	2b00      	cmp	r3, #0
 800694e:	d09b      	beq.n	8006888 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d022      	beq.n	80069b4 <HAL_SD_WriteBlocks+0x24c>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d91f      	bls.n	80069b4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	2b03      	cmp	r3, #3
 800697a:	d01b      	beq.n	80069b4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f003 f935 	bl	8009bf0 <SDMMC_CmdStopTransfer>
 8006986:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800698a:	2b00      	cmp	r3, #0
 800698c:	d012      	beq.n	80069b4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a3a      	ldr	r2, [pc, #232]	; (8006a7c <HAL_SD_WriteBlocks+0x314>)
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e05e      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d012      	beq.n	80069e8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2d      	ldr	r2, [pc, #180]	; (8006a7c <HAL_SD_WriteBlocks+0x314>)
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	f043 0208 	orr.w	r2, r3, #8
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e044      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d012      	beq.n	8006a1c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a20      	ldr	r2, [pc, #128]	; (8006a7c <HAL_SD_WriteBlocks+0x314>)
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a02:	f043 0202 	orr.w	r2, r3, #2
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e02a      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d012      	beq.n	8006a50 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <HAL_SD_WriteBlocks+0x314>)
 8006a30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a36:	f043 0210 	orr.w	r2, r3, #16
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e010      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <HAL_SD_WriteBlocks+0x318>)
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	e006      	b.n	8006a72 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
  }
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3748      	adds	r7, #72	; 0x48
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	1fe00fff 	.word	0x1fe00fff
 8006a80:	18000f3a 	.word	0x18000f3a

08006a84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a92:	0f9b      	lsrs	r3, r3, #30
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9e:	0e9b      	lsrs	r3, r3, #26
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac2:	0c1b      	lsrs	r3, r3, #16
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae4:	0d1b      	lsrs	r3, r3, #20
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af0:	0c1b      	lsrs	r3, r3, #16
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b02:	0bdb      	lsrs	r3, r3, #15
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b14:	0b9b      	lsrs	r3, r3, #14
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	0b5b      	lsrs	r3, r3, #13
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b38:	0b1b      	lsrs	r3, r3, #12
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d163      	bne.n	8006c1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b58:	009a      	lsls	r2, r3, #2
 8006b5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b5e:	4013      	ands	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006b64:	0f92      	lsrs	r2, r2, #30
 8006b66:	431a      	orrs	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b70:	0edb      	lsrs	r3, r3, #27
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b82:	0e1b      	lsrs	r3, r3, #24
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b94:	0d5b      	lsrs	r3, r3, #21
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba6:	0c9b      	lsrs	r3, r3, #18
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb8:	0bdb      	lsrs	r3, r3, #15
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	7e1b      	ldrb	r3, [r3, #24]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	3302      	adds	r3, #2
 8006bdc:	2201      	movs	r2, #1
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006be6:	fb03 f202 	mul.w	r2, r3, r2
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	7a1b      	ldrb	r3, [r3, #8]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006c08:	0a52      	lsrs	r2, r2, #9
 8006c0a:	fb03 f202 	mul.w	r2, r3, r2
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c18:	655a      	str	r2, [r3, #84]	; 0x54
 8006c1a:	e031      	b.n	8006c80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d11d      	bne.n	8006c60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	431a      	orrs	r2, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	029a      	lsls	r2, r3, #10
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c54:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
 8006c5e:	e00f      	b.n	8006c80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a58      	ldr	r2, [pc, #352]	; (8006dc8 <HAL_SD_GetCardCSD+0x344>)
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e09d      	b.n	8006dbc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c84:	0b9b      	lsrs	r3, r3, #14
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb8:	0fdb      	lsrs	r3, r3, #31
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cc4:	0f5b      	lsrs	r3, r3, #29
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cd6:	0e9b      	lsrs	r3, r3, #26
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce8:	0d9b      	lsrs	r3, r3, #22
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfa:	0d5b      	lsrs	r3, r3, #21
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d2a:	0bdb      	lsrs	r3, r3, #15
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d3e:	0b9b      	lsrs	r3, r3, #14
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d52:	0b5b      	lsrs	r3, r3, #13
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d66:	0b1b      	lsrs	r3, r3, #12
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7a:	0a9b      	lsrs	r3, r3, #10
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d8e:	0a1b      	lsrs	r3, r3, #8
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	1fe00fff 	.word	0x1fe00fff

08006dcc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b094      	sub	sp, #80	; 0x50
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d101      	bne.n	8006dec <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0a7      	b.n	8006f3c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006dec:	f107 0308 	add.w	r3, r7, #8
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fb62 	bl	80074bc <SD_SendSDStatus>
 8006df8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d011      	beq.n	8006e24 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a4f      	ldr	r2, [pc, #316]	; (8006f44 <HAL_SD_GetCardStatus+0x178>)
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006e22:	e070      	b.n	8006f06 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	099b      	lsrs	r3, r3, #6
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	0e1b      	lsrs	r3, r3, #24
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	061a      	lsls	r2, r3, #24
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e6a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e74:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	0d1b      	lsrs	r3, r3, #20
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	0a9b      	lsrs	r3, r3, #10
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	0a1b      	lsrs	r3, r3, #8
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	091b      	lsrs	r3, r3, #4
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	0e1b      	lsrs	r3, r3, #24
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f002 fdbe 	bl	8009a90 <SDMMC_CmdBlockLength>
 8006f14:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00d      	beq.n	8006f38 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a08      	ldr	r2, [pc, #32]	; (8006f44 <HAL_SD_GetCardStatus+0x178>)
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f28:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006f38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3750      	adds	r7, #80	; 0x50
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	1fe00fff 	.word	0x1fe00fff

08006f48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b08d      	sub	sp, #52	; 0x34
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d02e      	beq.n	800701e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc6:	d106      	bne.n	8006fd6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	635a      	str	r2, [r3, #52]	; 0x34
 8006fd4:	e029      	b.n	800702a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fdc:	d10a      	bne.n	8006ff4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fb64 	bl	80076ac <SD_WideBus_Enable>
 8006fe4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8006ff2:	e01a      	b.n	800702a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fba1 	bl	8007742 <SD_WideBus_Disable>
 8007000:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	635a      	str	r2, [r3, #52]	; 0x34
 800700e:	e00c      	b.n	800702a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007014:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	635a      	str	r2, [r3, #52]	; 0x34
 800701c:	e005      	b.n	800702a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007022:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a5f      	ldr	r2, [pc, #380]	; (80071b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007038:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007040:	e096      	b.n	8007170 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007042:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007046:	f04f 0100 	mov.w	r1, #0
 800704a:	f7fd fe71 	bl	8004d30 <HAL_RCCEx_GetPeriphCLKFreq>
 800704e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8083 	beq.w	800715e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695a      	ldr	r2, [r3, #20]
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4950      	ldr	r1, [pc, #320]	; (80071b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007076:	fba1 1303 	umull	r1, r3, r1, r3
 800707a:	0e1b      	lsrs	r3, r3, #24
 800707c:	429a      	cmp	r2, r3
 800707e:	d303      	bcc.n	8007088 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	e05a      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007090:	d103      	bne.n	800709a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	61bb      	str	r3, [r7, #24]
 8007098:	e051      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d126      	bne.n	80070f2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10e      	bne.n	80070ca <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	4a43      	ldr	r2, [pc, #268]	; (80071bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d906      	bls.n	80070c2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4a40      	ldr	r2, [pc, #256]	; (80071b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	0e5b      	lsrs	r3, r3, #25
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	e03d      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	e039      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	4a39      	ldr	r2, [pc, #228]	; (80071bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d906      	bls.n	80070ea <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4a36      	ldr	r2, [pc, #216]	; (80071b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80070e0:	fba2 2303 	umull	r2, r3, r2, r3
 80070e4:	0e5b      	lsrs	r3, r3, #25
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	e029      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	e025      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10e      	bne.n	8007118 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4a30      	ldr	r2, [pc, #192]	; (80071c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d906      	bls.n	8007110 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4a2c      	ldr	r2, [pc, #176]	; (80071b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	0e1b      	lsrs	r3, r3, #24
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	e016      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e012      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d906      	bls.n	8007138 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800712e:	fba2 2303 	umull	r2, r3, r2, r3
 8007132:	0e1b      	lsrs	r3, r3, #24
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	e002      	b.n	800713e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681c      	ldr	r4, [r3, #0]
 8007142:	466a      	mov	r2, sp
 8007144:	f107 0314 	add.w	r3, r7, #20
 8007148:	e893 0003 	ldmia.w	r3, {r0, r1}
 800714c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007150:	f107 0308 	add.w	r3, r7, #8
 8007154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007156:	4620      	mov	r0, r4
 8007158:	f002 fbbc 	bl	80098d4 <SDMMC_Init>
 800715c:	e008      	b.n	8007170 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007162:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007178:	4618      	mov	r0, r3
 800717a:	f002 fc89 	bl	8009a90 <SDMMC_CmdBlockLength>
 800717e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00c      	beq.n	80071a0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800718c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	372c      	adds	r7, #44	; 0x2c
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd90      	pop	{r4, r7, pc}
 80071b4:	1fe00fff 	.word	0x1fe00fff
 80071b8:	55e63b89 	.word	0x55e63b89
 80071bc:	02faf080 	.word	0x02faf080
 80071c0:	017d7840 	.word	0x017d7840

080071c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80071d0:	f107 030c 	add.w	r3, r7, #12
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa40 	bl	800765c <SD_SendStatus>
 80071dc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	0a5b      	lsrs	r3, r3, #9
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80071fa:	693b      	ldr	r3, [r7, #16]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b090      	sub	sp, #64	; 0x40
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007210:	f7fa fdaa 	bl	8001d68 <HAL_GetTick>
 8007214:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f002 fbb3 	bl	8009986 <SDMMC_GetPowerState>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007226:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800722a:	e0b5      	b.n	8007398 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	2b03      	cmp	r3, #3
 8007232:	d02e      	beq.n	8007292 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f002 fdfe 	bl	8009e3a <SDMMC_CmdSendCID>
 800723e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <SD_InitCard+0x46>
    {
      return errorstate;
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	e0a6      	b.n	8007398 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f002 fbde 	bl	8009a12 <SDMMC_GetResponse>
 8007256:	4602      	mov	r2, r0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2104      	movs	r1, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f002 fbd5 	bl	8009a12 <SDMMC_GetResponse>
 8007268:	4602      	mov	r2, r0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2108      	movs	r1, #8
 8007274:	4618      	mov	r0, r3
 8007276:	f002 fbcc 	bl	8009a12 <SDMMC_GetResponse>
 800727a:	4602      	mov	r2, r0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	210c      	movs	r1, #12
 8007286:	4618      	mov	r0, r3
 8007288:	f002 fbc3 	bl	8009a12 <SDMMC_GetResponse>
 800728c:	4602      	mov	r2, r0
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	2b03      	cmp	r3, #3
 8007298:	d01d      	beq.n	80072d6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800729a:	e019      	b.n	80072d0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f107 020a 	add.w	r2, r7, #10
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 fe06 	bl	8009eb8 <SDMMC_CmdSetRelAdd>
 80072ac:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	e06f      	b.n	8007398 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80072b8:	f7fa fd56 	bl	8001d68 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d902      	bls.n	80072d0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80072ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072ce:	e063      	b.n	8007398 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80072d0:	897b      	ldrh	r3, [r7, #10]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0e2      	beq.n	800729c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d036      	beq.n	800734c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80072de:	897b      	ldrh	r3, [r7, #10]
 80072e0:	461a      	mov	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f002 fdc0 	bl	8009e78 <SDMMC_CmdSendCSD>
 80072f8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <SD_InitCard+0x100>
    {
      return errorstate;
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	e049      	b.n	8007398 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2100      	movs	r1, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f002 fb81 	bl	8009a12 <SDMMC_GetResponse>
 8007310:	4602      	mov	r2, r0
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2104      	movs	r1, #4
 800731c:	4618      	mov	r0, r3
 800731e:	f002 fb78 	bl	8009a12 <SDMMC_GetResponse>
 8007322:	4602      	mov	r2, r0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2108      	movs	r1, #8
 800732e:	4618      	mov	r0, r3
 8007330:	f002 fb6f 	bl	8009a12 <SDMMC_GetResponse>
 8007334:	4602      	mov	r2, r0
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	210c      	movs	r1, #12
 8007340:	4618      	mov	r0, r3
 8007342:	f002 fb66 	bl	8009a12 <SDMMC_GetResponse>
 8007346:	4602      	mov	r2, r0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2104      	movs	r1, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f002 fb5d 	bl	8009a12 <SDMMC_GetResponse>
 8007358:	4603      	mov	r3, r0
 800735a:	0d1a      	lsrs	r2, r3, #20
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007360:	f107 030c 	add.w	r3, r7, #12
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff fb8c 	bl	8006a84 <HAL_SD_GetCardCSD>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007372:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007376:	e00f      	b.n	8007398 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f002 fc6f 	bl	8009c68 <SDMMC_CmdSelDesel>
 800738a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <SD_InitCard+0x192>
  {
    return errorstate;
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	e000      	b.n	8007398 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3740      	adds	r7, #64	; 0x40
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f002 fc78 	bl	8009cae <SDMMC_CmdGoIdleState>
 80073be:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <SD_PowerON+0x2a>
  {
    return errorstate;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	e072      	b.n	80074b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f002 fc8b 	bl	8009cea <SDMMC_CmdOperCond>
 80073d4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073dc:	d10d      	bne.n	80073fa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f002 fc60 	bl	8009cae <SDMMC_CmdGoIdleState>
 80073ee:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <SD_PowerON+0x60>
    {
      return errorstate;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	e05a      	b.n	80074b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007404:	2b01      	cmp	r3, #1
 8007406:	d137      	bne.n	8007478 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f002 fc8b 	bl	8009d2a <SDMMC_CmdAppCommand>
 8007414:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d02d      	beq.n	8007478 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800741c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007420:	e046      	b.n	80074b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2100      	movs	r1, #0
 8007428:	4618      	mov	r0, r3
 800742a:	f002 fc7e 	bl	8009d2a <SDMMC_CmdAppCommand>
 800742e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	e03a      	b.n	80074b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	491e      	ldr	r1, [pc, #120]	; (80074b8 <SD_PowerON+0x118>)
 8007440:	4618      	mov	r0, r3
 8007442:	f002 fc95 	bl	8009d70 <SDMMC_CmdAppOperCommand>
 8007446:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800744e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007452:	e02d      	b.n	80074b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2100      	movs	r1, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f002 fad9 	bl	8009a12 <SDMMC_GetResponse>
 8007460:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	0fdb      	lsrs	r3, r3, #31
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <SD_PowerON+0xce>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <SD_PowerON+0xd0>
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]

    count++;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	3301      	adds	r3, #1
 8007476:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800747e:	4293      	cmp	r3, r2
 8007480:	d802      	bhi.n	8007488 <SD_PowerON+0xe8>
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0cc      	beq.n	8007422 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800748e:	4293      	cmp	r3, r2
 8007490:	d902      	bls.n	8007498 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007496:	e00b      	b.n	80074b0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	c1100000 	.word	0xc1100000

080074bc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08c      	sub	sp, #48	; 0x30
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80074c6:	f7fa fc4f 	bl	8001d68 <HAL_GetTick>
 80074ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f002 fa9b 	bl	8009a12 <SDMMC_GetResponse>
 80074dc:	4603      	mov	r3, r0
 80074de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074e6:	d102      	bne.n	80074ee <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80074e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074ec:	e0b0      	b.n	8007650 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2140      	movs	r1, #64	; 0x40
 80074f4:	4618      	mov	r0, r3
 80074f6:	f002 facb 	bl	8009a90 <SDMMC_CmdBlockLength>
 80074fa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	e0a0      	b.n	8007650 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f002 fc05 	bl	8009d2a <SDMMC_CmdAppCommand>
 8007520:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	e08d      	b.n	8007650 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007538:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800753a:	2340      	movs	r3, #64	; 0x40
 800753c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800753e:	2360      	movs	r3, #96	; 0x60
 8007540:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007542:	2302      	movs	r3, #2
 8007544:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007546:	2300      	movs	r3, #0
 8007548:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800754a:	2301      	movs	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f107 0208 	add.w	r2, r7, #8
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f002 fa6d 	bl	8009a38 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f002 fced 	bl	8009f42 <SDMMC_CmdStatusRegister>
 8007568:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d02b      	beq.n	80075c8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	e069      	b.n	8007650 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d013      	beq.n	80075b2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800758a:	2300      	movs	r3, #0
 800758c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800758e:	e00d      	b.n	80075ac <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f002 f9c7 	bl	8009928 <SDMMC_ReadFIFO>
 800759a:	4602      	mov	r2, r0
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	601a      	str	r2, [r3, #0]
        pData++;
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	3304      	adds	r3, #4
 80075a4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	3301      	adds	r3, #1
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	2b07      	cmp	r3, #7
 80075b0:	d9ee      	bls.n	8007590 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075b2:	f7fa fbd9 	bl	8001d68 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c0:	d102      	bne.n	80075c8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075c6:	e043      	b.n	8007650 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0d2      	beq.n	800757c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80075e4:	2308      	movs	r3, #8
 80075e6:	e033      	b.n	8007650 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	e02a      	b.n	8007650 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b00      	cmp	r3, #0
 8007606:	d017      	beq.n	8007638 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007608:	2320      	movs	r3, #32
 800760a:	e021      	b.n	8007650 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f002 f989 	bl	8009928 <SDMMC_ReadFIFO>
 8007616:	4602      	mov	r2, r0
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	601a      	str	r2, [r3, #0]
    pData++;
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	3304      	adds	r3, #4
 8007620:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007622:	f7fa fba1 	bl	8001d68 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007630:	d102      	bne.n	8007638 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007636:	e00b      	b.n	8007650 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e2      	bne.n	800760c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a03      	ldr	r2, [pc, #12]	; (8007658 <SD_SendSDStatus+0x19c>)
 800764c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3730      	adds	r7, #48	; 0x30
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	18000f3a 	.word	0x18000f3a

0800765c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800766c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007670:	e018      	b.n	80076a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767a:	041b      	lsls	r3, r3, #16
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f002 fc3c 	bl	8009efc <SDMMC_CmdSendStatus>
 8007684:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <SD_SendStatus+0x34>
  {
    return errorstate;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	e009      	b.n	80076a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2100      	movs	r1, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f002 f9bb 	bl	8009a12 <SDMMC_GetResponse>
 800769c:	4602      	mov	r2, r0
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	2300      	movs	r3, #0
 80076ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f002 f9a5 	bl	8009a12 <SDMMC_GetResponse>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076d2:	d102      	bne.n	80076da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076d8:	e02f      	b.n	800773a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f879 	bl	80077d8 <SD_FindSCR>
 80076e6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	e023      	b.n	800773a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01c      	beq.n	8007736 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	4619      	mov	r1, r3
 8007708:	4610      	mov	r0, r2
 800770a:	f002 fb0e 	bl	8009d2a <SDMMC_CmdAppCommand>
 800770e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	e00f      	b.n	800773a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2102      	movs	r1, #2
 8007720:	4618      	mov	r0, r3
 8007722:	f002 fb45 	bl	8009db0 <SDMMC_CmdBusWidth>
 8007726:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	e003      	b.n	800773a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007732:	2300      	movs	r3, #0
 8007734:	e001      	b.n	800773a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007736:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f002 f95a 	bl	8009a12 <SDMMC_GetResponse>
 800775e:	4603      	mov	r3, r0
 8007760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007768:	d102      	bne.n	8007770 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800776a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800776e:	e02f      	b.n	80077d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f82e 	bl	80077d8 <SD_FindSCR>
 800777c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	e023      	b.n	80077d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01c      	beq.n	80077cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f002 fac3 	bl	8009d2a <SDMMC_CmdAppCommand>
 80077a4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	e00f      	b.n	80077d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f002 fafa 	bl	8009db0 <SDMMC_CmdBusWidth>
 80077bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	e003      	b.n	80077d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	e001      	b.n	80077d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08e      	sub	sp, #56	; 0x38
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077e2:	f7fa fac1 	bl	8001d68 <HAL_GetTick>
 80077e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80077ec:	2300      	movs	r3, #0
 80077ee:	60bb      	str	r3, [r7, #8]
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2108      	movs	r1, #8
 80077fe:	4618      	mov	r0, r3
 8007800:	f002 f946 	bl	8009a90 <SDMMC_CmdBlockLength>
 8007804:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <SD_FindSCR+0x38>
  {
    return errorstate;
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	e0ad      	b.n	800796c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007818:	041b      	lsls	r3, r3, #16
 800781a:	4619      	mov	r1, r3
 800781c:	4610      	mov	r0, r2
 800781e:	f002 fa84 	bl	8009d2a <SDMMC_CmdAppCommand>
 8007822:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <SD_FindSCR+0x56>
  {
    return errorstate;
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	e09e      	b.n	800796c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800782e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007832:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007834:	2308      	movs	r3, #8
 8007836:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007838:	2330      	movs	r3, #48	; 0x30
 800783a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800783c:	2302      	movs	r3, #2
 800783e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007840:	2300      	movs	r3, #0
 8007842:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007844:	2301      	movs	r3, #1
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f107 0210 	add.w	r2, r7, #16
 8007850:	4611      	mov	r1, r2
 8007852:	4618      	mov	r0, r3
 8007854:	f002 f8f0 	bl	8009a38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f002 faca 	bl	8009df6 <SDMMC_CmdSendSCR>
 8007862:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d027      	beq.n	80078ba <SD_FindSCR+0xe2>
  {
    return errorstate;
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	e07e      	b.n	800796c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d113      	bne.n	80078a4 <SD_FindSCR+0xcc>
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787e:	2b00      	cmp	r3, #0
 8007880:	d110      	bne.n	80078a4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f002 f84e 	bl	8009928 <SDMMC_ReadFIFO>
 800788c:	4603      	mov	r3, r0
 800788e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f002 f847 	bl	8009928 <SDMMC_ReadFIFO>
 800789a:	4603      	mov	r3, r0
 800789c:	60fb      	str	r3, [r7, #12]
      index++;
 800789e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a0:	3301      	adds	r3, #1
 80078a2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80078a4:	f7fa fa60 	bl	8001d68 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b2:	d102      	bne.n	80078ba <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80078b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078b8:	e058      	b.n	800796c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c0:	f240 532a 	movw	r3, #1322	; 0x52a
 80078c4:	4013      	ands	r3, r2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0d1      	beq.n	800786e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2208      	movs	r2, #8
 80078de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80078e0:	2308      	movs	r3, #8
 80078e2:	e043      	b.n	800796c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2202      	movs	r2, #2
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80078fa:	2302      	movs	r3, #2
 80078fc:	e036      	b.n	800796c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2220      	movs	r2, #32
 8007912:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007914:	2320      	movs	r3, #32
 8007916:	e029      	b.n	800796c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a15      	ldr	r2, [pc, #84]	; (8007974 <SD_FindSCR+0x19c>)
 800791e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	061a      	lsls	r2, r3, #24
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800792c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007936:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	0e1b      	lsrs	r3, r3, #24
 800793c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	601a      	str	r2, [r3, #0]
    scr++;
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	3304      	adds	r3, #4
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	061a      	lsls	r2, r3, #24
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007954:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800795e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	0e1b      	lsrs	r3, r3, #24
 8007964:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3738      	adds	r7, #56	; 0x38
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	18000f3a 	.word	0x18000f3a

08007978 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e0fb      	b.n	8007b82 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a7f      	ldr	r2, [pc, #508]	; (8007b8c <HAL_SPI_Init+0x214>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d004      	beq.n	800799e <HAL_SPI_Init+0x26>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a7d      	ldr	r2, [pc, #500]	; (8007b90 <HAL_SPI_Init+0x218>)
 800799a:	4293      	cmp	r3, r2
 800799c:	e000      	b.n	80079a0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800799e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a78      	ldr	r2, [pc, #480]	; (8007b8c <HAL_SPI_Init+0x214>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d004      	beq.n	80079ba <HAL_SPI_Init+0x42>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a76      	ldr	r2, [pc, #472]	; (8007b90 <HAL_SPI_Init+0x218>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d105      	bne.n	80079c6 <HAL_SPI_Init+0x4e>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b0f      	cmp	r3, #15
 80079c0:	d901      	bls.n	80079c6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e0dd      	b.n	8007b82 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fd88 	bl	80084dc <SPI_GetPacketSize>
 80079cc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a6e      	ldr	r2, [pc, #440]	; (8007b8c <HAL_SPI_Init+0x214>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_SPI_Init+0x6a>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a6c      	ldr	r2, [pc, #432]	; (8007b90 <HAL_SPI_Init+0x218>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d102      	bne.n	80079e8 <HAL_SPI_Init+0x70>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d816      	bhi.n	8007a16 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079ec:	4a69      	ldr	r2, [pc, #420]	; (8007b94 <HAL_SPI_Init+0x21c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00e      	beq.n	8007a10 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a68      	ldr	r2, [pc, #416]	; (8007b98 <HAL_SPI_Init+0x220>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_SPI_Init+0x98>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a66      	ldr	r2, [pc, #408]	; (8007b9c <HAL_SPI_Init+0x224>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_SPI_Init+0x98>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a65      	ldr	r2, [pc, #404]	; (8007ba0 <HAL_SPI_Init+0x228>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d104      	bne.n	8007a1a <HAL_SPI_Init+0xa2>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d901      	bls.n	8007a1a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e0b3      	b.n	8007b82 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7f9 fece 	bl	80017d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a60:	d119      	bne.n	8007a96 <HAL_SPI_Init+0x11e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6a:	d103      	bne.n	8007a74 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10c      	bne.n	8007a96 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a84:	d107      	bne.n	8007a96 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00f      	beq.n	8007ac2 <HAL_SPI_Init+0x14a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	2b06      	cmp	r3, #6
 8007aa8:	d90b      	bls.n	8007ac2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	e007      	b.n	8007ad2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ad0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	431a      	orrs	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae4:	ea42 0103 	orr.w	r1, r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3e:	ea42 0103 	orr.w	r1, r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	46002000 	.word	0x46002000
 8007b90:	56002000 	.word	0x56002000
 8007b94:	40013000 	.word	0x40013000
 8007b98:	50013000 	.word	0x50013000
 8007b9c:	40003800 	.word	0x40003800
 8007ba0:	50003800 	.word	0x50003800

08007ba4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3320      	adds	r3, #32
 8007bba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_SPI_Transmit+0x2a>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e203      	b.n	8007fd6 <HAL_SPI_Transmit+0x432>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bd6:	f7fa f8c7 	bl	8001d68 <HAL_GetTick>
 8007bda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d007      	beq.n	8007bf8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
 8007bea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007bf4:	7efb      	ldrb	r3, [r7, #27]
 8007bf6:	e1ee      	b.n	8007fd6 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_SPI_Transmit+0x60>
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d107      	bne.n	8007c14 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007c10:	7efb      	ldrb	r3, [r7, #27]
 8007c12:	e1e0      	b.n	8007fd6 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2203      	movs	r2, #3
 8007c18:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007c64:	d108      	bne.n	8007c78 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e009      	b.n	8007c8c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007c8a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	88f9      	ldrh	r1, [r7, #6]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10c      	bne.n	8007cd8 <HAL_SPI_Transmit+0x134>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cc6:	d107      	bne.n	8007cd8 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	d95b      	bls.n	8007d98 <HAL_SPI_Transmit+0x1f4>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a8f      	ldr	r2, [pc, #572]	; (8007f24 <HAL_SPI_Transmit+0x380>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d04f      	beq.n	8007d8a <HAL_SPI_Transmit+0x1e6>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a8e      	ldr	r2, [pc, #568]	; (8007f28 <HAL_SPI_Transmit+0x384>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d04a      	beq.n	8007d8a <HAL_SPI_Transmit+0x1e6>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a8c      	ldr	r2, [pc, #560]	; (8007f2c <HAL_SPI_Transmit+0x388>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d045      	beq.n	8007d8a <HAL_SPI_Transmit+0x1e6>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a8b      	ldr	r2, [pc, #556]	; (8007f30 <HAL_SPI_Transmit+0x38c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d147      	bne.n	8007d98 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d08:	e03f      	b.n	8007d8a <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d114      	bne.n	8007d42 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d28:	1d1a      	adds	r2, r3, #4
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007d40:	e023      	b.n	8007d8a <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d42:	f7fa f811 	bl	8001d68 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d803      	bhi.n	8007d5a <HAL_SPI_Transmit+0x1b6>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d58:	d102      	bne.n	8007d60 <HAL_SPI_Transmit+0x1bc>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d114      	bne.n	8007d8a <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 faed 	bl	8008340 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e125      	b.n	8007fd6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1b9      	bne.n	8007d0a <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007d96:	e0f8      	b.n	8007f8a <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b07      	cmp	r3, #7
 8007d9e:	f240 80ed 	bls.w	8007f7c <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007da2:	e05d      	b.n	8007e60 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d132      	bne.n	8007e18 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d918      	bls.n	8007df0 <HAL_SPI_Transmit+0x24c>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d014      	beq.n	8007df0 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6812      	ldr	r2, [r2, #0]
 8007dd0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b02      	subs	r3, #2
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007dee:	e037      	b.n	8007e60 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df4:	881a      	ldrh	r2, [r3, #0]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dfe:	1c9a      	adds	r2, r3, #2
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007e16:	e023      	b.n	8007e60 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e18:	f7f9 ffa6 	bl	8001d68 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d803      	bhi.n	8007e30 <HAL_SPI_Transmit+0x28c>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e2e:	d102      	bne.n	8007e36 <HAL_SPI_Transmit+0x292>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d114      	bne.n	8007e60 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 fa82 	bl	8008340 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e0ba      	b.n	8007fd6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d19b      	bne.n	8007da4 <HAL_SPI_Transmit+0x200>
 8007e6c:	e08d      	b.n	8007f8a <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d15b      	bne.n	8007f34 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d918      	bls.n	8007eba <HAL_SPI_Transmit+0x316>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d914      	bls.n	8007eba <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea0:	1d1a      	adds	r2, r3, #4
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b04      	subs	r3, #4
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007eb8:	e060      	b.n	8007f7c <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d917      	bls.n	8007ef6 <HAL_SPI_Transmit+0x352>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d013      	beq.n	8007ef6 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed2:	881a      	ldrh	r2, [r3, #0]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007edc:	1c9a      	adds	r2, r3, #2
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b02      	subs	r3, #2
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007ef4:	e042      	b.n	8007f7c <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3320      	adds	r3, #32
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007f20:	e02c      	b.n	8007f7c <HAL_SPI_Transmit+0x3d8>
 8007f22:	bf00      	nop
 8007f24:	40013000 	.word	0x40013000
 8007f28:	50013000 	.word	0x50013000
 8007f2c:	40003800 	.word	0x40003800
 8007f30:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f34:	f7f9 ff18 	bl	8001d68 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d803      	bhi.n	8007f4c <HAL_SPI_Transmit+0x3a8>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f4a:	d102      	bne.n	8007f52 <HAL_SPI_Transmit+0x3ae>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d114      	bne.n	8007f7c <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f9f4 	bl	8008340 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e02c      	b.n	8007fd6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f47f af72 	bne.w	8007e6e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2200      	movs	r2, #0
 8007f92:	2108      	movs	r1, #8
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fa73 	bl	8008480 <SPI_WaitOnFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d007      	beq.n	8007fb0 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa6:	f043 0220 	orr.w	r2, r3, #32
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f9c5 	bl	8008340 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e000      	b.n	8007fd6 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8007fd4:	7efb      	ldrb	r3, [r7, #27]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop

08007fe0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	4613      	mov	r3, r2
 8007fee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3330      	adds	r3, #48	; 0x30
 8007ffa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <HAL_SPI_Receive+0x2a>
 8008006:	2302      	movs	r3, #2
 8008008:	e18e      	b.n	8008328 <HAL_SPI_Receive+0x348>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008012:	f7f9 fea9 	bl	8001d68 <HAL_GetTick>
 8008016:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b01      	cmp	r3, #1
 8008022:	d007      	beq.n	8008034 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8008024:	2302      	movs	r3, #2
 8008026:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008030:	7ffb      	ldrb	r3, [r7, #31]
 8008032:	e179      	b.n	8008328 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_SPI_Receive+0x60>
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d107      	bne.n	8008050 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800804c:	7ffb      	ldrb	r3, [r7, #31]
 800804e:	e16b      	b.n	8008328 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2204      	movs	r2, #4
 8008054:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	88fa      	ldrh	r2, [r7, #6]
 8008072:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80080a0:	d108      	bne.n	80080b4 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e009      	b.n	80080c8 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80080c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	0c1b      	lsrs	r3, r3, #16
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	88f9      	ldrh	r1, [r7, #6]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	430b      	orrs	r3, r1
 80080da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0201 	orr.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10c      	bne.n	8008114 <HAL_SPI_Receive+0x134>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008102:	d107      	bne.n	8008114 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008112:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	2b0f      	cmp	r3, #15
 800811a:	d95c      	bls.n	80081d6 <HAL_SPI_Receive+0x1f6>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a83      	ldr	r2, [pc, #524]	; (8008330 <HAL_SPI_Receive+0x350>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d050      	beq.n	80081c8 <HAL_SPI_Receive+0x1e8>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a82      	ldr	r2, [pc, #520]	; (8008334 <HAL_SPI_Receive+0x354>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d04b      	beq.n	80081c8 <HAL_SPI_Receive+0x1e8>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a80      	ldr	r2, [pc, #512]	; (8008338 <HAL_SPI_Receive+0x358>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d046      	beq.n	80081c8 <HAL_SPI_Receive+0x1e8>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a7f      	ldr	r2, [pc, #508]	; (800833c <HAL_SPI_Receive+0x35c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d148      	bne.n	80081d6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008144:	e040      	b.n	80081c8 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	f248 0308 	movw	r3, #32776	; 0x8008
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d014      	beq.n	8008180 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008160:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008166:	1d1a      	adds	r2, r3, #4
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29a      	uxth	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800817e:	e023      	b.n	80081c8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008180:	f7f9 fdf2 	bl	8001d68 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d803      	bhi.n	8008198 <HAL_SPI_Receive+0x1b8>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008196:	d102      	bne.n	800819e <HAL_SPI_Receive+0x1be>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d114      	bne.n	80081c8 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f8ce 	bl	8008340 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e0af      	b.n	8008328 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1b8      	bne.n	8008146 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80081d4:	e095      	b.n	8008302 <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2b07      	cmp	r3, #7
 80081dc:	f240 808b 	bls.w	80082f6 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80081e0:	e03f      	b.n	8008262 <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d114      	bne.n	800821a <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	8812      	ldrh	r2, [r2, #0]
 80081f8:	b292      	uxth	r2, r2
 80081fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008200:	1c9a      	adds	r2, r3, #2
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008218:	e023      	b.n	8008262 <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800821a:	f7f9 fda5 	bl	8001d68 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d803      	bhi.n	8008232 <HAL_SPI_Receive+0x252>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008230:	d102      	bne.n	8008238 <HAL_SPI_Receive+0x258>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d114      	bne.n	8008262 <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f881 	bl	8008340 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e062      	b.n	8008328 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1b9      	bne.n	80081e2 <HAL_SPI_Receive+0x202>
 800826e:	e048      	b.n	8008302 <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d117      	bne.n	80082ae <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828a:	7812      	ldrb	r2, [r2, #0]
 800828c:	b2d2      	uxtb	r2, r2
 800828e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80082ac:	e023      	b.n	80082f6 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ae:	f7f9 fd5b 	bl	8001d68 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d803      	bhi.n	80082c6 <HAL_SPI_Receive+0x2e6>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c4:	d102      	bne.n	80082cc <HAL_SPI_Receive+0x2ec>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d114      	bne.n	80082f6 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f837 	bl	8008340 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e018      	b.n	8008328 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1b6      	bne.n	8008270 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 f81c 	bl	8008340 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 8008326:	7ffb      	ldrb	r3, [r7, #31]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3720      	adds	r7, #32
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40013000 	.word	0x40013000
 8008334:	50013000 	.word	0x50013000
 8008338:	40003800 	.word	0x40003800
 800833c:	50003800 	.word	0x50003800

08008340 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0208 	orr.w	r2, r2, #8
 800835e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0210 	orr.w	r2, r2, #16
 800836e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0201 	bic.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800838e:	f023 0303 	bic.w	r3, r3, #3
 8008392:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80083a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d014      	beq.n	80083da <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00f      	beq.n	80083da <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	699a      	ldr	r2, [r3, #24]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f042 0220 	orr.w	r2, r2, #32
 80083d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d014      	beq.n	8008410 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00f      	beq.n	8008410 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f6:	f043 0204 	orr.w	r2, r3, #4
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800840e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00f      	beq.n	800843a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008420:	f043 0201 	orr.w	r2, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008438:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00f      	beq.n	8008464 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800844a:	f043 0208 	orr.w	r2, r3, #8
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008462:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	4613      	mov	r3, r2
 800848e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008490:	e010      	b.n	80084b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008492:	f7f9 fc69 	bl	8001d68 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d803      	bhi.n	80084aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a8:	d102      	bne.n	80084b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e00f      	b.n	80084d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	695a      	ldr	r2, [r3, #20]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	4013      	ands	r3, r2
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bf0c      	ite	eq
 80084c4:	2301      	moveq	r3, #1
 80084c6:	2300      	movne	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d0df      	beq.n	8008492 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	3301      	adds	r3, #1
 80084ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	3307      	adds	r3, #7
 80084fa:	08db      	lsrs	r3, r3, #3
 80084fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	fb02 f303 	mul.w	r3, r2, r3
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b01      	cmp	r3, #1
 8008526:	d12e      	bne.n	8008586 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008532:	2302      	movs	r3, #2
 8008534:	e028      	b.n	8008588 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0201 	bic.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008562:	ea42 0103 	orr.w	r1, r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	e000      	b.n	8008588 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
  }
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e049      	b.n	800863a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f9 fa00 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f000 faac 	bl	8008b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	d001      	beq.n	800865c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e072      	b.n	8008742 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a35      	ldr	r2, [pc, #212]	; (8008750 <HAL_TIM_Base_Start_IT+0x10c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d040      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a34      	ldr	r2, [pc, #208]	; (8008754 <HAL_TIM_Base_Start_IT+0x110>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d03b      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008690:	d036      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800869a:	d031      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a2d      	ldr	r2, [pc, #180]	; (8008758 <HAL_TIM_Base_Start_IT+0x114>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d02c      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a2c      	ldr	r2, [pc, #176]	; (800875c <HAL_TIM_Base_Start_IT+0x118>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d027      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a2a      	ldr	r2, [pc, #168]	; (8008760 <HAL_TIM_Base_Start_IT+0x11c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d022      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a29      	ldr	r2, [pc, #164]	; (8008764 <HAL_TIM_Base_Start_IT+0x120>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d01d      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a27      	ldr	r2, [pc, #156]	; (8008768 <HAL_TIM_Base_Start_IT+0x124>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d018      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a26      	ldr	r2, [pc, #152]	; (800876c <HAL_TIM_Base_Start_IT+0x128>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d013      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a24      	ldr	r2, [pc, #144]	; (8008770 <HAL_TIM_Base_Start_IT+0x12c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00e      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a23      	ldr	r2, [pc, #140]	; (8008774 <HAL_TIM_Base_Start_IT+0x130>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d009      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a21      	ldr	r2, [pc, #132]	; (8008778 <HAL_TIM_Base_Start_IT+0x134>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0xbc>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a20      	ldr	r2, [pc, #128]	; (800877c <HAL_TIM_Base_Start_IT+0x138>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d115      	bne.n	800872c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	4b1e      	ldr	r3, [pc, #120]	; (8008780 <HAL_TIM_Base_Start_IT+0x13c>)
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b06      	cmp	r3, #6
 8008710:	d015      	beq.n	800873e <HAL_TIM_Base_Start_IT+0xfa>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008718:	d011      	beq.n	800873e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0201 	orr.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800872a:	e008      	b.n	800873e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0201 	orr.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	e000      	b.n	8008740 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800873e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40012c00 	.word	0x40012c00
 8008754:	50012c00 	.word	0x50012c00
 8008758:	40000400 	.word	0x40000400
 800875c:	50000400 	.word	0x50000400
 8008760:	40000800 	.word	0x40000800
 8008764:	50000800 	.word	0x50000800
 8008768:	40000c00 	.word	0x40000c00
 800876c:	50000c00 	.word	0x50000c00
 8008770:	40013400 	.word	0x40013400
 8008774:	50013400 	.word	0x50013400
 8008778:	40014000 	.word	0x40014000
 800877c:	50014000 	.word	0x50014000
 8008780:	00010007 	.word	0x00010007

08008784 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0201 	bic.w	r2, r2, #1
 800879a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6a1a      	ldr	r2, [r3, #32]
 80087a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80087a6:	4013      	ands	r3, r2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10f      	bne.n	80087cc <HAL_TIM_Base_Stop_IT+0x48>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6a1a      	ldr	r2, [r3, #32]
 80087b2:	f244 4344 	movw	r3, #17476	; 0x4444
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d107      	bne.n	80087cc <HAL_TIM_Base_Stop_IT+0x48>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0201 	bic.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d122      	bne.n	800883e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b02      	cmp	r3, #2
 8008804:	d11b      	bne.n	800883e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f06f 0202 	mvn.w	r2, #2
 800880e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	f003 0303 	and.w	r3, r3, #3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f965 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 800882a:	e005      	b.n	8008838 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f957 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f968 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b04      	cmp	r3, #4
 800884a:	d122      	bne.n	8008892 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b04      	cmp	r3, #4
 8008858:	d11b      	bne.n	8008892 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f06f 0204 	mvn.w	r2, #4
 8008862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f93b 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 800887e:	e005      	b.n	800888c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f92d 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f93e 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d122      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b08      	cmp	r3, #8
 80088ac:	d11b      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f06f 0208 	mvn.w	r2, #8
 80088b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2204      	movs	r2, #4
 80088bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f911 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 80088d2:	e005      	b.n	80088e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f903 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f914 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d122      	bne.n	800893a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d11b      	bne.n	800893a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f06f 0210 	mvn.w	r2, #16
 800890a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2208      	movs	r2, #8
 8008910:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f8e7 	bl	8008af4 <HAL_TIM_IC_CaptureCallback>
 8008926:	e005      	b.n	8008934 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f8d9 	bl	8008ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f8ea 	bl	8008b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b01      	cmp	r3, #1
 8008946:	d10e      	bne.n	8008966 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b01      	cmp	r3, #1
 8008954:	d107      	bne.n	8008966 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f06f 0201 	mvn.w	r2, #1
 800895e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7f8 fad5 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d10e      	bne.n	8008992 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800897e:	2b80      	cmp	r3, #128	; 0x80
 8008980:	d107      	bne.n	8008992 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800898a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f9d3 	bl	8008d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a0:	d10e      	bne.n	80089c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ac:	2b80      	cmp	r3, #128	; 0x80
 80089ae:	d107      	bne.n	80089c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f9c6 	bl	8008d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d10e      	bne.n	80089ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d8:	2b40      	cmp	r3, #64	; 0x40
 80089da:	d107      	bne.n	80089ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f898 	bl	8008b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d10e      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d107      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f06f 0220 	mvn.w	r2, #32
 8008a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f986 	bl	8008d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a26:	d10f      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a36:	d107      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f98c 	bl	8008d60 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a56:	d10f      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a66:	d107      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f97e 	bl	8008d74 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a86:	d10f      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a96:	d107      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f970 	bl	8008d88 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ab6:	d10f      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ac6:	d107      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f962 	bl	8008d9c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a68      	ldr	r2, [pc, #416]	; (8008ce4 <TIM_Base_SetConfig+0x1b4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d02b      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a67      	ldr	r2, [pc, #412]	; (8008ce8 <TIM_Base_SetConfig+0x1b8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d027      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b56:	d023      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b5e:	d01f      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a62      	ldr	r2, [pc, #392]	; (8008cec <TIM_Base_SetConfig+0x1bc>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d01b      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a61      	ldr	r2, [pc, #388]	; (8008cf0 <TIM_Base_SetConfig+0x1c0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d017      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a60      	ldr	r2, [pc, #384]	; (8008cf4 <TIM_Base_SetConfig+0x1c4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d013      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a5f      	ldr	r2, [pc, #380]	; (8008cf8 <TIM_Base_SetConfig+0x1c8>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00f      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a5e      	ldr	r2, [pc, #376]	; (8008cfc <TIM_Base_SetConfig+0x1cc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00b      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a5d      	ldr	r2, [pc, #372]	; (8008d00 <TIM_Base_SetConfig+0x1d0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d007      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a5c      	ldr	r2, [pc, #368]	; (8008d04 <TIM_Base_SetConfig+0x1d4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_Base_SetConfig+0x70>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a5b      	ldr	r2, [pc, #364]	; (8008d08 <TIM_Base_SetConfig+0x1d8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d108      	bne.n	8008bb2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a4b      	ldr	r2, [pc, #300]	; (8008ce4 <TIM_Base_SetConfig+0x1b4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d043      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a4a      	ldr	r2, [pc, #296]	; (8008ce8 <TIM_Base_SetConfig+0x1b8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d03f      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc8:	d03b      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd0:	d037      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a45      	ldr	r2, [pc, #276]	; (8008cec <TIM_Base_SetConfig+0x1bc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d033      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a44      	ldr	r2, [pc, #272]	; (8008cf0 <TIM_Base_SetConfig+0x1c0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d02f      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a43      	ldr	r2, [pc, #268]	; (8008cf4 <TIM_Base_SetConfig+0x1c4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d02b      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a42      	ldr	r2, [pc, #264]	; (8008cf8 <TIM_Base_SetConfig+0x1c8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d027      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a41      	ldr	r2, [pc, #260]	; (8008cfc <TIM_Base_SetConfig+0x1cc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d023      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a40      	ldr	r2, [pc, #256]	; (8008d00 <TIM_Base_SetConfig+0x1d0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d01f      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a3f      	ldr	r2, [pc, #252]	; (8008d04 <TIM_Base_SetConfig+0x1d4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d01b      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a3e      	ldr	r2, [pc, #248]	; (8008d08 <TIM_Base_SetConfig+0x1d8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d017      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a3d      	ldr	r2, [pc, #244]	; (8008d0c <TIM_Base_SetConfig+0x1dc>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d013      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a3c      	ldr	r2, [pc, #240]	; (8008d10 <TIM_Base_SetConfig+0x1e0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00f      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a3b      	ldr	r2, [pc, #236]	; (8008d14 <TIM_Base_SetConfig+0x1e4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00b      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a3a      	ldr	r2, [pc, #232]	; (8008d18 <TIM_Base_SetConfig+0x1e8>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d007      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a39      	ldr	r2, [pc, #228]	; (8008d1c <TIM_Base_SetConfig+0x1ec>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d003      	beq.n	8008c42 <TIM_Base_SetConfig+0x112>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a38      	ldr	r2, [pc, #224]	; (8008d20 <TIM_Base_SetConfig+0x1f0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d108      	bne.n	8008c54 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ce4 <TIM_Base_SetConfig+0x1b4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d023      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a19      	ldr	r2, [pc, #100]	; (8008ce8 <TIM_Base_SetConfig+0x1b8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d01f      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	; (8008d04 <TIM_Base_SetConfig+0x1d4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d01b      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a1d      	ldr	r2, [pc, #116]	; (8008d08 <TIM_Base_SetConfig+0x1d8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d017      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1c      	ldr	r2, [pc, #112]	; (8008d0c <TIM_Base_SetConfig+0x1dc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <TIM_Base_SetConfig+0x1e0>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00f      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1a      	ldr	r2, [pc, #104]	; (8008d14 <TIM_Base_SetConfig+0x1e4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00b      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <TIM_Base_SetConfig+0x1e8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a18      	ldr	r2, [pc, #96]	; (8008d1c <TIM_Base_SetConfig+0x1ec>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_Base_SetConfig+0x198>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a17      	ldr	r2, [pc, #92]	; (8008d20 <TIM_Base_SetConfig+0x1f0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d103      	bne.n	8008cd0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	615a      	str	r2, [r3, #20]
}
 8008cd6:	bf00      	nop
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40012c00 	.word	0x40012c00
 8008ce8:	50012c00 	.word	0x50012c00
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	50000400 	.word	0x50000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	50000800 	.word	0x50000800
 8008cfc:	40000c00 	.word	0x40000c00
 8008d00:	50000c00 	.word	0x50000c00
 8008d04:	40013400 	.word	0x40013400
 8008d08:	50013400 	.word	0x50013400
 8008d0c:	40014000 	.word	0x40014000
 8008d10:	50014000 	.word	0x50014000
 8008d14:	40014400 	.word	0x40014400
 8008d18:	50014400 	.word	0x50014400
 8008d1c:	40014800 	.word	0x40014800
 8008d20:	50014800 	.word	0x50014800

08008d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e042      	b.n	8008e48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d106      	bne.n	8008dda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7f8 fe1b 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2224      	movs	r2, #36	; 0x24
 8008dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f8ba 	bl	8008f6c <UART_SetConfig>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e022      	b.n	8008e48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa46 	bl	800929c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0201 	orr.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 facd 	bl	80093e0 <UART_CheckIdleState>
 8008e46:	4603      	mov	r3, r0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	d17b      	bne.n	8008f62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_UART_Transmit+0x26>
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e074      	b.n	8008f64 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2221      	movs	r2, #33	; 0x21
 8008e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e8a:	f7f8 ff6d 	bl	8001d68 <HAL_GetTick>
 8008e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea8:	d108      	bne.n	8008ebc <HAL_UART_Transmit+0x6c>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	61bb      	str	r3, [r7, #24]
 8008eba:	e003      	b.n	8008ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ec4:	e030      	b.n	8008f28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2180      	movs	r1, #128	; 0x80
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fb2f 	bl	8009534 <UART_WaitOnFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e03d      	b.n	8008f64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10b      	bne.n	8008f06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008efc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	3302      	adds	r3, #2
 8008f02:	61bb      	str	r3, [r7, #24]
 8008f04:	e007      	b.n	8008f16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	781a      	ldrb	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	3301      	adds	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1c8      	bne.n	8008ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2140      	movs	r1, #64	; 0x40
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 faf8 	bl	8009534 <UART_WaitOnFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d005      	beq.n	8008f56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e006      	b.n	8008f64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e000      	b.n	8008f64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008f62:	2302      	movs	r3, #2
  }
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f70:	b094      	sub	sp, #80	; 0x50
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	4b9b      	ldr	r3, [pc, #620]	; (80091f0 <UART_SetConfig+0x284>)
 8008f82:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4994      	ldr	r1, [pc, #592]	; (80091f4 <UART_SetConfig+0x288>)
 8008fa4:	4019      	ands	r1, r3
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fac:	430b      	orrs	r3, r1
 8008fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	68d9      	ldr	r1, [r3, #12]
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	ea40 0301 	orr.w	r3, r0, r1
 8008fc6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b87      	ldr	r3, [pc, #540]	; (80091f0 <UART_SetConfig+0x284>)
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d009      	beq.n	8008fec <UART_SetConfig+0x80>
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4b86      	ldr	r3, [pc, #536]	; (80091f8 <UART_SetConfig+0x28c>)
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d004      	beq.n	8008fec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	6a1a      	ldr	r2, [r3, #32]
 8008fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008ff6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009000:	430b      	orrs	r3, r1
 8009002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	f023 000f 	bic.w	r0, r3, #15
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	ea40 0301 	orr.w	r3, r0, r1
 800901a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	4b76      	ldr	r3, [pc, #472]	; (80091fc <UART_SetConfig+0x290>)
 8009022:	429a      	cmp	r2, r3
 8009024:	d102      	bne.n	800902c <UART_SetConfig+0xc0>
 8009026:	2301      	movs	r3, #1
 8009028:	64bb      	str	r3, [r7, #72]	; 0x48
 800902a:	e021      	b.n	8009070 <UART_SetConfig+0x104>
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	4b73      	ldr	r3, [pc, #460]	; (8009200 <UART_SetConfig+0x294>)
 8009032:	429a      	cmp	r2, r3
 8009034:	d102      	bne.n	800903c <UART_SetConfig+0xd0>
 8009036:	2304      	movs	r3, #4
 8009038:	64bb      	str	r3, [r7, #72]	; 0x48
 800903a:	e019      	b.n	8009070 <UART_SetConfig+0x104>
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	4b70      	ldr	r3, [pc, #448]	; (8009204 <UART_SetConfig+0x298>)
 8009042:	429a      	cmp	r2, r3
 8009044:	d102      	bne.n	800904c <UART_SetConfig+0xe0>
 8009046:	2308      	movs	r3, #8
 8009048:	64bb      	str	r3, [r7, #72]	; 0x48
 800904a:	e011      	b.n	8009070 <UART_SetConfig+0x104>
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <UART_SetConfig+0x29c>)
 8009052:	429a      	cmp	r2, r3
 8009054:	d102      	bne.n	800905c <UART_SetConfig+0xf0>
 8009056:	2310      	movs	r3, #16
 8009058:	64bb      	str	r3, [r7, #72]	; 0x48
 800905a:	e009      	b.n	8009070 <UART_SetConfig+0x104>
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	4b63      	ldr	r3, [pc, #396]	; (80091f0 <UART_SetConfig+0x284>)
 8009062:	429a      	cmp	r2, r3
 8009064:	d102      	bne.n	800906c <UART_SetConfig+0x100>
 8009066:	2320      	movs	r3, #32
 8009068:	64bb      	str	r3, [r7, #72]	; 0x48
 800906a:	e001      	b.n	8009070 <UART_SetConfig+0x104>
 800906c:	2300      	movs	r3, #0
 800906e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b5e      	ldr	r3, [pc, #376]	; (80091f0 <UART_SetConfig+0x284>)
 8009076:	429a      	cmp	r2, r3
 8009078:	d004      	beq.n	8009084 <UART_SetConfig+0x118>
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4b5e      	ldr	r3, [pc, #376]	; (80091f8 <UART_SetConfig+0x28c>)
 8009080:	429a      	cmp	r2, r3
 8009082:	d172      	bne.n	800916a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009086:	2200      	movs	r2, #0
 8009088:	623b      	str	r3, [r7, #32]
 800908a:	627a      	str	r2, [r7, #36]	; 0x24
 800908c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009090:	f7fb fe4e 	bl	8004d30 <HAL_RCCEx_GetPeriphCLKFreq>
 8009094:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 80e7 	beq.w	800926c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	4a5a      	ldr	r2, [pc, #360]	; (800920c <UART_SetConfig+0x2a0>)
 80090a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090a8:	461a      	mov	r2, r3
 80090aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	685a      	ldr	r2, [r3, #4]
 80090b6:	4613      	mov	r3, r2
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	4413      	add	r3, r2
 80090bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090be:	429a      	cmp	r2, r3
 80090c0:	d305      	bcc.n	80090ce <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d903      	bls.n	80090d6 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090d4:	e048      	b.n	8009168 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d8:	2200      	movs	r2, #0
 80090da:	61bb      	str	r3, [r7, #24]
 80090dc:	61fa      	str	r2, [r7, #28]
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	4a4a      	ldr	r2, [pc, #296]	; (800920c <UART_SetConfig+0x2a0>)
 80090e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2200      	movs	r2, #0
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	617a      	str	r2, [r7, #20]
 80090f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090f8:	f7f7 f8c6 	bl	8000288 <__aeabi_uldivmod>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4610      	mov	r0, r2
 8009102:	4619      	mov	r1, r3
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	020b      	lsls	r3, r1, #8
 800910e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009112:	0202      	lsls	r2, r0, #8
 8009114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009116:	6849      	ldr	r1, [r1, #4]
 8009118:	0849      	lsrs	r1, r1, #1
 800911a:	2000      	movs	r0, #0
 800911c:	460c      	mov	r4, r1
 800911e:	4605      	mov	r5, r0
 8009120:	eb12 0804 	adds.w	r8, r2, r4
 8009124:	eb43 0905 	adc.w	r9, r3, r5
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	60fa      	str	r2, [r7, #12]
 8009132:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009136:	4640      	mov	r0, r8
 8009138:	4649      	mov	r1, r9
 800913a:	f7f7 f8a5 	bl	8000288 <__aeabi_uldivmod>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4613      	mov	r3, r2
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800914c:	d308      	bcc.n	8009160 <UART_SetConfig+0x1f4>
 800914e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009154:	d204      	bcs.n	8009160 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	e003      	b.n	8009168 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009166:	e081      	b.n	800926c <UART_SetConfig+0x300>
 8009168:	e080      	b.n	800926c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009172:	d14d      	bne.n	8009210 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009176:	2200      	movs	r2, #0
 8009178:	603b      	str	r3, [r7, #0]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009180:	f7fb fdd6 	bl	8004d30 <HAL_RCCEx_GetPeriphCLKFreq>
 8009184:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009188:	2b00      	cmp	r3, #0
 800918a:	d06f      	beq.n	800926c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	4a1e      	ldr	r2, [pc, #120]	; (800920c <UART_SetConfig+0x2a0>)
 8009192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009196:	461a      	mov	r2, r3
 8009198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919a:	fbb3 f3f2 	udiv	r3, r3, r2
 800919e:	005a      	lsls	r2, r3, #1
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	085b      	lsrs	r3, r3, #1
 80091a6:	441a      	add	r2, r3
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	2b0f      	cmp	r3, #15
 80091b6:	d916      	bls.n	80091e6 <UART_SetConfig+0x27a>
 80091b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091be:	d212      	bcs.n	80091e6 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f023 030f 	bic.w	r3, r3, #15
 80091c8:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80091d8:	4313      	orrs	r3, r2
 80091da:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80091e2:	60da      	str	r2, [r3, #12]
 80091e4:	e042      	b.n	800926c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80091ec:	e03e      	b.n	800926c <UART_SetConfig+0x300>
 80091ee:	bf00      	nop
 80091f0:	46002400 	.word	0x46002400
 80091f4:	cfff69f3 	.word	0xcfff69f3
 80091f8:	56002400 	.word	0x56002400
 80091fc:	40013800 	.word	0x40013800
 8009200:	40004800 	.word	0x40004800
 8009204:	40004c00 	.word	0x40004c00
 8009208:	40005000 	.word	0x40005000
 800920c:	0800e03c 	.word	0x0800e03c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009212:	2200      	movs	r2, #0
 8009214:	469a      	mov	sl, r3
 8009216:	4693      	mov	fp, r2
 8009218:	4650      	mov	r0, sl
 800921a:	4659      	mov	r1, fp
 800921c:	f7fb fd88 	bl	8004d30 <HAL_RCCEx_GetPeriphCLKFreq>
 8009220:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d021      	beq.n	800926c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	4a1a      	ldr	r2, [pc, #104]	; (8009298 <UART_SetConfig+0x32c>)
 800922e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009232:	461a      	mov	r2, r3
 8009234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009236:	fbb3 f2f2 	udiv	r2, r3, r2
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	441a      	add	r2, r3
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	fbb2 f3f3 	udiv	r3, r2, r3
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800924c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924e:	2b0f      	cmp	r3, #15
 8009250:	d909      	bls.n	8009266 <UART_SetConfig+0x2fa>
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009258:	d205      	bcs.n	8009266 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800925a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925c:	b29a      	uxth	r2, r3
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60da      	str	r2, [r3, #12]
 8009264:	e002      	b.n	800926c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2201      	movs	r2, #1
 8009270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	2201      	movs	r2, #1
 8009278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	2200      	movs	r2, #0
 8009280:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	2200      	movs	r2, #0
 8009286:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009288:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800928c:	4618      	mov	r0, r3
 800928e:	3750      	adds	r7, #80	; 0x50
 8009290:	46bd      	mov	sp, r7
 8009292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009296:	bf00      	nop
 8009298:	0800e03c 	.word	0x0800e03c

0800929c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f003 0310 	and.w	r3, r3, #16
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01a      	beq.n	80093b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939a:	d10a      	bne.n	80093b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	605a      	str	r2, [r3, #4]
  }
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b098      	sub	sp, #96	; 0x60
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093f0:	f7f8 fcba 	bl	8001d68 <HAL_GetTick>
 80093f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b08      	cmp	r3, #8
 8009402:	d12f      	bne.n	8009464 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800940c:	2200      	movs	r2, #0
 800940e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f88e 	bl	8009534 <UART_WaitOnFlagUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d022      	beq.n	8009464 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009432:	653b      	str	r3, [r7, #80]	; 0x50
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800943c:	647b      	str	r3, [r7, #68]	; 0x44
 800943e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800944a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e6      	bne.n	800941e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2220      	movs	r2, #32
 8009454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e063      	b.n	800952c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b04      	cmp	r3, #4
 8009470:	d149      	bne.n	8009506 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947a:	2200      	movs	r2, #0
 800947c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f857 	bl	8009534 <UART_WaitOnFlagUntilTimeout>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d03c      	beq.n	8009506 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	623b      	str	r3, [r7, #32]
   return(result);
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094aa:	633b      	str	r3, [r7, #48]	; 0x30
 80094ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094de:	61fa      	str	r2, [r7, #28]
 80094e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	69b9      	ldr	r1, [r7, #24]
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	617b      	str	r3, [r7, #20]
   return(result);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e5      	bne.n	80094be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e012      	b.n	800952c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3758      	adds	r7, #88	; 0x58
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	4613      	mov	r3, r2
 8009542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009544:	e049      	b.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800954c:	d045      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954e:	f7f8 fc0b 	bl	8001d68 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	429a      	cmp	r2, r3
 800955c:	d302      	bcc.n	8009564 <UART_WaitOnFlagUntilTimeout+0x30>
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e048      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d031      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	f003 0308 	and.w	r3, r3, #8
 8009580:	2b08      	cmp	r3, #8
 8009582:	d110      	bne.n	80095a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2208      	movs	r2, #8
 800958a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f838 	bl	8009602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2208      	movs	r2, #8
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e029      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b4:	d111      	bne.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 f81e 	bl	8009602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e00f      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4013      	ands	r3, r2
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	bf0c      	ite	eq
 80095ea:	2301      	moveq	r3, #1
 80095ec:	2300      	movne	r3, #0
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d0a6      	beq.n	8009546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009602:	b480      	push	{r7}
 8009604:	b095      	sub	sp, #84	; 0x54
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800961e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009628:	643b      	str	r3, [r7, #64]	; 0x40
 800962a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800962e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009630:	e841 2300 	strex	r3, r2, [r1]
 8009634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e6      	bne.n	800960a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3308      	adds	r3, #8
 8009642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	61fb      	str	r3, [r7, #28]
   return(result);
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009652:	f023 0301 	bic.w	r3, r3, #1
 8009656:	64bb      	str	r3, [r7, #72]	; 0x48
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e3      	bne.n	800963c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d118      	bne.n	80096ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	60bb      	str	r3, [r7, #8]
   return(result);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	f023 0310 	bic.w	r3, r3, #16
 8009690:	647b      	str	r3, [r7, #68]	; 0x44
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969a:	61bb      	str	r3, [r7, #24]
 800969c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6979      	ldr	r1, [r7, #20]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	613b      	str	r3, [r7, #16]
   return(result);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e6      	bne.n	800967c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80096c2:	bf00      	nop
 80096c4:	3754      	adds	r7, #84	; 0x54
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b085      	sub	sp, #20
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e027      	b.n	8009734 <HAL_UARTEx_DisableFifoMode+0x66>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2224      	movs	r2, #36	; 0x24
 80096f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0201 	bic.w	r2, r2, #1
 800970a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009712:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2220      	movs	r2, #32
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009754:	2302      	movs	r3, #2
 8009756:	e02d      	b.n	80097b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2224      	movs	r2, #36	; 0x24
 8009764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0201 	bic.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f84f 	bl	8009838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e02d      	b.n	8009830 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2224      	movs	r2, #36	; 0x24
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f811 	bl	8009838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009844:	2b00      	cmp	r3, #0
 8009846:	d108      	bne.n	800985a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009858:	e031      	b.n	80098be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800985a:	2308      	movs	r3, #8
 800985c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800985e:	2308      	movs	r3, #8
 8009860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	0e5b      	lsrs	r3, r3, #25
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 0307 	and.w	r3, r3, #7
 8009870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	0f5b      	lsrs	r3, r3, #29
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	7b3a      	ldrb	r2, [r7, #12]
 8009886:	4911      	ldr	r1, [pc, #68]	; (80098cc <UARTEx_SetNbDataToProcess+0x94>)
 8009888:	5c8a      	ldrb	r2, [r1, r2]
 800988a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800988e:	7b3a      	ldrb	r2, [r7, #12]
 8009890:	490f      	ldr	r1, [pc, #60]	; (80098d0 <UARTEx_SetNbDataToProcess+0x98>)
 8009892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009894:	fb93 f3f2 	sdiv	r3, r3, r2
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	7b7a      	ldrb	r2, [r7, #13]
 80098a4:	4909      	ldr	r1, [pc, #36]	; (80098cc <UARTEx_SetNbDataToProcess+0x94>)
 80098a6:	5c8a      	ldrb	r2, [r1, r2]
 80098a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098ac:	7b7a      	ldrb	r2, [r7, #13]
 80098ae:	4908      	ldr	r1, [pc, #32]	; (80098d0 <UARTEx_SetNbDataToProcess+0x98>)
 80098b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	0800e054 	.word	0x0800e054
 80098d0:	0800e05c 	.word	0x0800e05c

080098d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80098d4:	b084      	sub	sp, #16
 80098d6:	b480      	push	{r7}
 80098d8:	b085      	sub	sp, #20
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	f107 001c 	add.w	r0, r7, #28
 80098e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80098ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80098ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80098ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80098f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80098f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80098fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	4b07      	ldr	r3, [pc, #28]	; (8009924 <SDMMC_Init+0x50>)
 8009908:	4013      	ands	r3, r2
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	431a      	orrs	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	b004      	add	sp, #16
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	ffc02c00 	.word	0xffc02c00

08009928 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f043 0203 	orr.w	r2, r3, #3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009986:	b480      	push	{r7}
 8009988:	b083      	sub	sp, #12
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0303 	and.w	r3, r3, #3
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
	...

080099a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80099c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80099c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80099ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	4b06      	ldr	r3, [pc, #24]	; (80099f4 <SDMMC_SendCommand+0x50>)
 80099dc:	4013      	ands	r3, r2
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	fffee0c0 	.word	0xfffee0c0

080099f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	b2db      	uxtb	r3, r3
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3314      	adds	r3, #20
 8009a20:	461a      	mov	r2, r3
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	4413      	add	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009a5e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009a64:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009a6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0

}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ab0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab2:	f107 0308 	add.w	r3, r7, #8
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ff73 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac2:	2110      	movs	r1, #16
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fa5f 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009aca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009acc:	69fb      	ldr	r3, [r7, #28]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b088      	sub	sp, #32
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009ae4:	2311      	movs	r3, #17
 8009ae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009af6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af8:	f107 0308 	add.w	r3, r7, #8
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff ff50 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b08:	2111      	movs	r1, #17
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa3c 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b12:	69fb      	ldr	r3, [r7, #28]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009b2a:	2312      	movs	r3, #18
 8009b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff ff2d 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4e:	2112      	movs	r1, #18
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa19 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b58:	69fb      	ldr	r3, [r7, #28]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b088      	sub	sp, #32
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009b70:	2318      	movs	r3, #24
 8009b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b84:	f107 0308 	add.w	r3, r7, #8
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff ff0a 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b94:	2118      	movs	r1, #24
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f9f6 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009b9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b088      	sub	sp, #32
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009bb6:	2319      	movs	r3, #25
 8009bb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fee7 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bda:	2119      	movs	r1, #25
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f9d3 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009be2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009be4:	69fb      	ldr	r3, [r7, #28]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3720      	adds	r7, #32
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009bfc:	230c      	movs	r3, #12
 8009bfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c0e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c28:	f107 0308 	add.w	r3, r7, #8
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff feb8 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009c34:	4a0b      	ldr	r2, [pc, #44]	; (8009c64 <SDMMC_CmdStopTransfer+0x74>)
 8009c36:	210c      	movs	r1, #12
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f9a5 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009c3e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c52:	d101      	bne.n	8009c58 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009c58:	69fb      	ldr	r3, [r7, #28]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3720      	adds	r7, #32
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	05f5e100 	.word	0x05f5e100

08009c68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009c76:	2307      	movs	r3, #7
 8009c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff fe87 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9a:	2107      	movs	r1, #7
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f973 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b088      	sub	sp, #32
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ccc:	f107 0308 	add.w	r3, r7, #8
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff fe66 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fb97 	bl	800a40c <SDMMC_GetCmdError>
 8009cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce0:	69fb      	ldr	r3, [r7, #28]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b088      	sub	sp, #32
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009cf2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d0c:	f107 0308 	add.w	r3, r7, #8
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff fe46 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb29 	bl	800a370 <SDMMC_GetCmdResp7>
 8009d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d20:	69fb      	ldr	r3, [r7, #28]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b088      	sub	sp, #32
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d38:	2337      	movs	r3, #55	; 0x37
 8009d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d4c:	f107 0308 	add.w	r3, r7, #8
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fe26 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5c:	2137      	movs	r1, #55	; 0x37
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f912 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009d7e:	2329      	movs	r3, #41	; 0x29
 8009d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fe03 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa2e 	bl	800a200 <SDMMC_GetCmdResp3>
 8009da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009da6:	69fb      	ldr	r3, [r7, #28]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3720      	adds	r7, #32
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009dbe:	2306      	movs	r3, #6
 8009dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff fde3 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de2:	2106      	movs	r1, #6
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f8cf 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dec:	69fb      	ldr	r3, [r7, #28]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b088      	sub	sp, #32
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e02:	2333      	movs	r3, #51	; 0x33
 8009e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e16:	f107 0308 	add.w	r3, r7, #8
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff fdc1 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e26:	2133      	movs	r1, #51	; 0x33
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f8ad 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e30:	69fb      	ldr	r3, [r7, #28]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b088      	sub	sp, #32
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009e46:	2302      	movs	r3, #2
 8009e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e50:	2300      	movs	r3, #0
 8009e52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e5a:	f107 0308 	add.w	r3, r7, #8
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff fd9f 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f980 	bl	800a16c <SDMMC_GetCmdResp2>
 8009e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e6e:	69fb      	ldr	r3, [r7, #28]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3720      	adds	r7, #32
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b088      	sub	sp, #32
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009e86:	2309      	movs	r3, #9
 8009e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e9a:	f107 0308 	add.w	r3, r7, #8
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff fd7f 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f960 	bl	800a16c <SDMMC_GetCmdResp2>
 8009eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eae:	69fb      	ldr	r3, [r7, #28]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3720      	adds	r7, #32
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eda:	f107 0308 	add.w	r3, r7, #8
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff fd5f 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	2103      	movs	r1, #3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f9c8 	bl	800a280 <SDMMC_GetCmdResp6>
 8009ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef2:	69fb      	ldr	r3, [r7, #28]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3720      	adds	r7, #32
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f0a:	230d      	movs	r3, #13
 8009f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f1e:	f107 0308 	add.w	r3, r7, #8
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff fd3d 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f2e:	210d      	movs	r1, #13
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f829 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f38:	69fb      	ldr	r3, [r7, #28]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3720      	adds	r7, #32
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b088      	sub	sp, #32
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009f4e:	230d      	movs	r3, #13
 8009f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff fd1b 	bl	80099a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f72:	210d      	movs	r1, #13
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f807 	bl	8009f88 <SDMMC_GetCmdResp1>
 8009f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f7c:	69fb      	ldr	r3, [r7, #28]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3720      	adds	r7, #32
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b088      	sub	sp, #32
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	460b      	mov	r3, r1
 8009f92:	607a      	str	r2, [r7, #4]
 8009f94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f96:	4b70      	ldr	r3, [pc, #448]	; (800a158 <SDMMC_GetCmdResp1+0x1d0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a70      	ldr	r2, [pc, #448]	; (800a15c <SDMMC_GetCmdResp1+0x1d4>)
 8009f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa0:	0a5a      	lsrs	r2, r3, #9
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	fb02 f303 	mul.w	r3, r2, r3
 8009fa8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	1e5a      	subs	r2, r3, #1
 8009fae:	61fa      	str	r2, [r7, #28]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fb8:	e0c9      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	4b67      	ldr	r3, [pc, #412]	; (800a160 <SDMMC_GetCmdResp1+0x1d8>)
 8009fc4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0ef      	beq.n	8009faa <SDMMC_GetCmdResp1+0x22>
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1ea      	bne.n	8009faa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd8:	f003 0304 	and.w	r3, r3, #4
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fe6:	2304      	movs	r3, #4
 8009fe8:	e0b1      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e0a6      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4a58      	ldr	r2, [pc, #352]	; (800a164 <SDMMC_GetCmdResp1+0x1dc>)
 800a004:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fcf6 	bl	80099f8 <SDMMC_GetCommandResponse>
 800a00c:	4603      	mov	r3, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	4293      	cmp	r3, r2
 800a014:	d001      	beq.n	800a01a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a016:	2301      	movs	r3, #1
 800a018:	e099      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a01a:	2100      	movs	r1, #0
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff fcf8 	bl	8009a12 <SDMMC_GetResponse>
 800a022:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	4b50      	ldr	r3, [pc, #320]	; (800a168 <SDMMC_GetCmdResp1+0x1e0>)
 800a028:	4013      	ands	r3, r2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a02e:	2300      	movs	r3, #0
 800a030:	e08d      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	da02      	bge.n	800a03e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a03c:	e087      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a048:	2340      	movs	r3, #64	; 0x40
 800a04a:	e080      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a056:	2380      	movs	r3, #128	; 0x80
 800a058:	e079      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a064:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a068:	e071      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a074:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a078:	e069      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a088:	e061      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a098:	e059      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0a8:	e051      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0b8:	e049      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0c8:	e041      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a0d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d8:	e039      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a0e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a0e8:	e031      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a0f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a0f8:	e029      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a104:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a108:	e021      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a114:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a118:	e019      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a124:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a128:	e011      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a134:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a138:	e009      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a144:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a148:	e001      	b.n	800a14e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a14a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3720      	adds	r7, #32
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000000 	.word	0x20000000
 800a15c:	10624dd3 	.word	0x10624dd3
 800a160:	00200045 	.word	0x00200045
 800a164:	002000c5 	.word	0x002000c5
 800a168:	fdffe008 	.word	0xfdffe008

0800a16c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a174:	4b1f      	ldr	r3, [pc, #124]	; (800a1f4 <SDMMC_GetCmdResp2+0x88>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <SDMMC_GetCmdResp2+0x8c>)
 800a17a:	fba2 2303 	umull	r2, r3, r2, r3
 800a17e:	0a5b      	lsrs	r3, r3, #9
 800a180:	f241 3288 	movw	r2, #5000	; 0x1388
 800a184:	fb02 f303 	mul.w	r3, r2, r3
 800a188:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	1e5a      	subs	r2, r3, #1
 800a18e:	60fa      	str	r2, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a198:	e026      	b.n	800a1e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0ef      	beq.n	800a18a <SDMMC_GetCmdResp2+0x1e>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1ea      	bne.n	800a18a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d004      	beq.n	800a1ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2204      	movs	r2, #4
 800a1c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1c6:	2304      	movs	r3, #4
 800a1c8:	e00e      	b.n	800a1e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d004      	beq.n	800a1e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e003      	b.n	800a1e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a06      	ldr	r2, [pc, #24]	; (800a1fc <SDMMC_GetCmdResp2+0x90>)
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	20000000 	.word	0x20000000
 800a1f8:	10624dd3 	.word	0x10624dd3
 800a1fc:	002000c5 	.word	0x002000c5

0800a200 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a208:	4b1a      	ldr	r3, [pc, #104]	; (800a274 <SDMMC_GetCmdResp3+0x74>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1a      	ldr	r2, [pc, #104]	; (800a278 <SDMMC_GetCmdResp3+0x78>)
 800a20e:	fba2 2303 	umull	r2, r3, r2, r3
 800a212:	0a5b      	lsrs	r3, r3, #9
 800a214:	f241 3288 	movw	r2, #5000	; 0x1388
 800a218:	fb02 f303 	mul.w	r3, r2, r3
 800a21c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	1e5a      	subs	r2, r3, #1
 800a222:	60fa      	str	r2, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d102      	bne.n	800a22e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a22c:	e01b      	b.n	800a266 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a232:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0ef      	beq.n	800a21e <SDMMC_GetCmdResp3+0x1e>
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1ea      	bne.n	800a21e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	d004      	beq.n	800a25e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2204      	movs	r2, #4
 800a258:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a25a:	2304      	movs	r3, #4
 800a25c:	e003      	b.n	800a266 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a06      	ldr	r2, [pc, #24]	; (800a27c <SDMMC_GetCmdResp3+0x7c>)
 800a262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	20000000 	.word	0x20000000
 800a278:	10624dd3 	.word	0x10624dd3
 800a27c:	002000c5 	.word	0x002000c5

0800a280 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b088      	sub	sp, #32
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	460b      	mov	r3, r1
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a28e:	4b35      	ldr	r3, [pc, #212]	; (800a364 <SDMMC_GetCmdResp6+0xe4>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a35      	ldr	r2, [pc, #212]	; (800a368 <SDMMC_GetCmdResp6+0xe8>)
 800a294:	fba2 2303 	umull	r2, r3, r2, r3
 800a298:	0a5b      	lsrs	r3, r3, #9
 800a29a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a29e:	fb02 f303 	mul.w	r3, r2, r3
 800a2a2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	1e5a      	subs	r2, r3, #1
 800a2a8:	61fa      	str	r2, [r7, #28]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2b2:	e052      	b.n	800a35a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0ef      	beq.n	800a2a4 <SDMMC_GetCmdResp6+0x24>
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1ea      	bne.n	800a2a4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d004      	beq.n	800a2e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2204      	movs	r2, #4
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2e0:	2304      	movs	r3, #4
 800a2e2:	e03a      	b.n	800a35a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d004      	beq.n	800a2fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e02f      	b.n	800a35a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7ff fb7c 	bl	80099f8 <SDMMC_GetCommandResponse>
 800a300:	4603      	mov	r3, r0
 800a302:	461a      	mov	r2, r3
 800a304:	7afb      	ldrb	r3, [r7, #11]
 800a306:	4293      	cmp	r3, r2
 800a308:	d001      	beq.n	800a30e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e025      	b.n	800a35a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4a16      	ldr	r2, [pc, #88]	; (800a36c <SDMMC_GetCmdResp6+0xec>)
 800a312:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a314:	2100      	movs	r1, #0
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff fb7b 	bl	8009a12 <SDMMC_GetResponse>
 800a31c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d106      	bne.n	800a336 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	0c1b      	lsrs	r3, r3, #16
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a332:	2300      	movs	r3, #0
 800a334:	e011      	b.n	800a35a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a344:	e009      	b.n	800a35a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a354:	e001      	b.n	800a35a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3720      	adds	r7, #32
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000000 	.word	0x20000000
 800a368:	10624dd3 	.word	0x10624dd3
 800a36c:	002000c5 	.word	0x002000c5

0800a370 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a378:	4b22      	ldr	r3, [pc, #136]	; (800a404 <SDMMC_GetCmdResp7+0x94>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a22      	ldr	r2, [pc, #136]	; (800a408 <SDMMC_GetCmdResp7+0x98>)
 800a37e:	fba2 2303 	umull	r2, r3, r2, r3
 800a382:	0a5b      	lsrs	r3, r3, #9
 800a384:	f241 3288 	movw	r2, #5000	; 0x1388
 800a388:	fb02 f303 	mul.w	r3, r2, r3
 800a38c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1e5a      	subs	r2, r3, #1
 800a392:	60fa      	str	r2, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a39c:	e02c      	b.n	800a3f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0ef      	beq.n	800a38e <SDMMC_GetCmdResp7+0x1e>
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1ea      	bne.n	800a38e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2204      	movs	r2, #4
 800a3c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3ca:	2304      	movs	r3, #4
 800a3cc:	e014      	b.n	800a3f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d004      	beq.n	800a3e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e009      	b.n	800a3f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2240      	movs	r2, #64	; 0x40
 800a3f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a3f6:	2300      	movs	r3, #0

}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20000000 	.word	0x20000000
 800a408:	10624dd3 	.word	0x10624dd3

0800a40c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a414:	4b11      	ldr	r3, [pc, #68]	; (800a45c <SDMMC_GetCmdError+0x50>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a11      	ldr	r2, [pc, #68]	; (800a460 <SDMMC_GetCmdError+0x54>)
 800a41a:	fba2 2303 	umull	r2, r3, r2, r3
 800a41e:	0a5b      	lsrs	r3, r3, #9
 800a420:	f241 3288 	movw	r2, #5000	; 0x1388
 800a424:	fb02 f303 	mul.w	r3, r2, r3
 800a428:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	1e5a      	subs	r2, r3, #1
 800a42e:	60fa      	str	r2, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d102      	bne.n	800a43a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a438:	e009      	b.n	800a44e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0f1      	beq.n	800a42a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a06      	ldr	r2, [pc, #24]	; (800a464 <SDMMC_GetCmdError+0x58>)
 800a44a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	20000000 	.word	0x20000000
 800a460:	10624dd3 	.word	0x10624dd3
 800a464:	002000c5 	.word	0x002000c5

0800a468 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a46c:	4904      	ldr	r1, [pc, #16]	; (800a480 <MX_FATFS_Init+0x18>)
 800a46e:	4805      	ldr	r0, [pc, #20]	; (800a484 <MX_FATFS_Init+0x1c>)
 800a470:	f003 f854 	bl	800d51c <FATFS_LinkDriver>
 800a474:	4603      	mov	r3, r0
 800a476:	461a      	mov	r2, r3
 800a478:	4b03      	ldr	r3, [pc, #12]	; (800a488 <MX_FATFS_Init+0x20>)
 800a47a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a47c:	bf00      	nop
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20000354 	.word	0x20000354
 800a484:	0800e064 	.word	0x0800e064
 800a488:	20000350 	.word	0x20000350

0800a48c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a48c:	b480      	push	{r7}
 800a48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a490:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a492:	4618      	mov	r0, r3
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a4a6:	f000 f879 	bl	800a59c <BSP_SD_IsDetected>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d001      	beq.n	800a4b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e012      	b.n	800a4da <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a4b4:	480b      	ldr	r0, [pc, #44]	; (800a4e4 <BSP_SD_Init+0x48>)
 800a4b6:	f7fb fead 	bl	8006214 <HAL_SD_Init>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d109      	bne.n	800a4d8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a4c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a4c8:	4806      	ldr	r0, [pc, #24]	; (800a4e4 <BSP_SD_Init+0x48>)
 800a4ca:	f7fc fd69 	bl	8006fa0 <HAL_SD_ConfigWideBusOperation>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	200000a8 	.word	0x200000a8

0800a4e8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b088      	sub	sp, #32
 800a4ec:	af02      	add	r7, sp, #8
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	4806      	ldr	r0, [pc, #24]	; (800a520 <BSP_SD_ReadBlocks+0x38>)
 800a506:	f7fb ffa5 	bl	8006454 <HAL_SD_ReadBlocks>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	200000a8 	.word	0x200000a8

0800a524 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af02      	add	r7, sp, #8
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	68f9      	ldr	r1, [r7, #12]
 800a540:	4806      	ldr	r0, [pc, #24]	; (800a55c <BSP_SD_WriteBlocks+0x38>)
 800a542:	f7fc f911 	bl	8006768 <HAL_SD_WriteBlocks>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a550:	7dfb      	ldrb	r3, [r7, #23]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	200000a8 	.word	0x200000a8

0800a560 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a564:	4805      	ldr	r0, [pc, #20]	; (800a57c <BSP_SD_GetCardState+0x1c>)
 800a566:	f7fc fe2d 	bl	80071c4 <HAL_SD_GetCardState>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	bf14      	ite	ne
 800a570:	2301      	movne	r3, #1
 800a572:	2300      	moveq	r3, #0
 800a574:	b2db      	uxtb	r3, r3
}
 800a576:	4618      	mov	r0, r3
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	200000a8 	.word	0x200000a8

0800a580 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4803      	ldr	r0, [pc, #12]	; (800a598 <BSP_SD_GetCardInfo+0x18>)
 800a58c:	f7fc fcdc 	bl	8006f48 <HAL_SD_GetCardInfo>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	200000a8 	.word	0x200000a8

0800a59c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	b2db      	uxtb	r3, r3
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <SD_CheckStatus+0x38>)
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a5c8:	f7ff ffca 	bl	800a560 <BSP_SD_GetCardState>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d107      	bne.n	800a5e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <SD_CheckStatus+0x38>)
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f023 0301 	bic.w	r3, r3, #1
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <SD_CheckStatus+0x38>)
 800a5e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a5e2:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <SD_CheckStatus+0x38>)
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	b2db      	uxtb	r3, r3
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	20000009 	.word	0x20000009

0800a5f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a5fe:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <SD_initialize+0x38>)
 800a600:	2201      	movs	r2, #1
 800a602:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a604:	f7ff ff4a 	bl	800a49c <BSP_SD_Init>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d107      	bne.n	800a61e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a60e:	79fb      	ldrb	r3, [r7, #7]
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff ffd1 	bl	800a5b8 <SD_CheckStatus>
 800a616:	4603      	mov	r3, r0
 800a618:	461a      	mov	r2, r3
 800a61a:	4b04      	ldr	r3, [pc, #16]	; (800a62c <SD_initialize+0x38>)
 800a61c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a61e:	4b03      	ldr	r3, [pc, #12]	; (800a62c <SD_initialize+0x38>)
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b2db      	uxtb	r3, r3
}
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20000009 	.word	0x20000009

0800a630 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff ffbb 	bl	800a5b8 <SD_CheckStatus>
 800a642:	4603      	mov	r3, r0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	607a      	str	r2, [r7, #4]
 800a656:	603b      	str	r3, [r7, #0]
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	68b8      	ldr	r0, [r7, #8]
 800a66a:	f7ff ff3d 	bl	800a4e8 <BSP_SD_ReadBlocks>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d107      	bne.n	800a684 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a674:	bf00      	nop
 800a676:	f7ff ff73 	bl	800a560 <BSP_SD_GetCardState>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1fa      	bne.n	800a676 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b086      	sub	sp, #24
 800a692:	af00      	add	r7, sp, #0
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
 800a69a:	4603      	mov	r3, r0
 800a69c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a6a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	68b8      	ldr	r0, [r7, #8]
 800a6ac:	f7ff ff3a 	bl	800a524 <BSP_SD_WriteBlocks>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d107      	bne.n	800a6c6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a6b6:	bf00      	nop
 800a6b8:	f7ff ff52 	bl	800a560 <BSP_SD_GetCardState>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1fa      	bne.n	800a6b8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08c      	sub	sp, #48	; 0x30
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	603a      	str	r2, [r7, #0]
 800a6da:	71fb      	strb	r3, [r7, #7]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a6e6:	4b25      	ldr	r3, [pc, #148]	; (800a77c <SD_ioctl+0xac>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <SD_ioctl+0x28>
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e03c      	b.n	800a772 <SD_ioctl+0xa2>

  switch (cmd)
 800a6f8:	79bb      	ldrb	r3, [r7, #6]
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d834      	bhi.n	800a768 <SD_ioctl+0x98>
 800a6fe:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <SD_ioctl+0x34>)
 800a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a704:	0800a715 	.word	0x0800a715
 800a708:	0800a71d 	.word	0x0800a71d
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a74f 	.word	0x0800a74f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a71a:	e028      	b.n	800a76e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a71c:	f107 0308 	add.w	r3, r7, #8
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff ff2d 	bl	800a580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a726:	6a3a      	ldr	r2, [r7, #32]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a732:	e01c      	b.n	800a76e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a734:	f107 0308 	add.w	r3, r7, #8
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff ff21 	bl	800a580 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	b29a      	uxth	r2, r3
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a74c:	e00f      	b.n	800a76e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a74e:	f107 0308 	add.w	r3, r7, #8
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff ff14 	bl	800a580 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	0a5a      	lsrs	r2, r3, #9
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a766:	e002      	b.n	800a76e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a768:	2304      	movs	r3, #4
 800a76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a76e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a772:	4618      	mov	r0, r3
 800a774:	3730      	adds	r7, #48	; 0x30
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000009 	.word	0x20000009

0800a780 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	4a08      	ldr	r2, [pc, #32]	; (800a7b0 <disk_status+0x30>)
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	79fa      	ldrb	r2, [r7, #7]
 800a798:	4905      	ldr	r1, [pc, #20]	; (800a7b0 <disk_status+0x30>)
 800a79a:	440a      	add	r2, r1
 800a79c:	7a12      	ldrb	r2, [r2, #8]
 800a79e:	4610      	mov	r0, r2
 800a7a0:	4798      	blx	r3
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000380 	.word	0x20000380

0800a7b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	4a0d      	ldr	r2, [pc, #52]	; (800a7fc <disk_initialize+0x48>)
 800a7c6:	5cd3      	ldrb	r3, [r2, r3]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d111      	bne.n	800a7f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	4a0b      	ldr	r2, [pc, #44]	; (800a7fc <disk_initialize+0x48>)
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	4a09      	ldr	r2, [pc, #36]	; (800a7fc <disk_initialize+0x48>)
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	79fa      	ldrb	r2, [r7, #7]
 800a7e2:	4906      	ldr	r1, [pc, #24]	; (800a7fc <disk_initialize+0x48>)
 800a7e4:	440a      	add	r2, r1
 800a7e6:	7a12      	ldrb	r2, [r2, #8]
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4798      	blx	r3
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000380 	.word	0x20000380

0800a800 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a800:	b590      	push	{r4, r7, lr}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	4a0a      	ldr	r2, [pc, #40]	; (800a83c <disk_read+0x3c>)
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	689c      	ldr	r4, [r3, #8]
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
 800a81e:	4a07      	ldr	r2, [pc, #28]	; (800a83c <disk_read+0x3c>)
 800a820:	4413      	add	r3, r2
 800a822:	7a18      	ldrb	r0, [r3, #8]
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	68b9      	ldr	r1, [r7, #8]
 800a82a:	47a0      	blx	r4
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a830:	7dfb      	ldrb	r3, [r7, #23]
}
 800a832:	4618      	mov	r0, r3
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	bd90      	pop	{r4, r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000380 	.word	0x20000380

0800a840 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a840:	b590      	push	{r4, r7, lr}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <disk_write+0x3c>)
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	68dc      	ldr	r4, [r3, #12]
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	4a07      	ldr	r2, [pc, #28]	; (800a87c <disk_write+0x3c>)
 800a860:	4413      	add	r3, r2
 800a862:	7a18      	ldrb	r0, [r3, #8]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	68b9      	ldr	r1, [r7, #8]
 800a86a:	47a0      	blx	r4
 800a86c:	4603      	mov	r3, r0
 800a86e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a870:	7dfb      	ldrb	r3, [r7, #23]
}
 800a872:	4618      	mov	r0, r3
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	bd90      	pop	{r4, r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20000380 	.word	0x20000380

0800a880 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	603a      	str	r2, [r7, #0]
 800a88a:	71fb      	strb	r3, [r7, #7]
 800a88c:	460b      	mov	r3, r1
 800a88e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	4a09      	ldr	r2, [pc, #36]	; (800a8b8 <disk_ioctl+0x38>)
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	79fa      	ldrb	r2, [r7, #7]
 800a89e:	4906      	ldr	r1, [pc, #24]	; (800a8b8 <disk_ioctl+0x38>)
 800a8a0:	440a      	add	r2, r1
 800a8a2:	7a10      	ldrb	r0, [r2, #8]
 800a8a4:	79b9      	ldrb	r1, [r7, #6]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	4798      	blx	r3
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000380 	.word	0x20000380

0800a8bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a8cc:	89fb      	ldrh	r3, [r7, #14]
 800a8ce:	021b      	lsls	r3, r3, #8
 800a8d0:	b21a      	sxth	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	b21b      	sxth	r3, r3
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	b21b      	sxth	r3, r3
 800a8dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a8de:	89fb      	ldrh	r3, [r7, #14]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3303      	adds	r3, #3
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	021b      	lsls	r3, r3, #8
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	3202      	adds	r2, #2
 800a904:	7812      	ldrb	r2, [r2, #0]
 800a906:	4313      	orrs	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	3201      	adds	r2, #1
 800a912:	7812      	ldrb	r2, [r2, #0]
 800a914:	4313      	orrs	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	021b      	lsls	r3, r3, #8
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7812      	ldrb	r2, [r2, #0]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
	return rv;
 800a924:	68fb      	ldr	r3, [r7, #12]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	887a      	ldrh	r2, [r7, #2]
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	887b      	ldrh	r3, [r7, #2]
 800a94c:	0a1b      	lsrs	r3, r3, #8
 800a94e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	607a      	str	r2, [r7, #4]
 800a956:	887a      	ldrh	r2, [r7, #2]
 800a958:	b2d2      	uxtb	r2, r2
 800a95a:	701a      	strb	r2, [r3, #0]
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	b2d2      	uxtb	r2, r2
 800a97c:	701a      	strb	r2, [r3, #0]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	0a1b      	lsrs	r3, r3, #8
 800a982:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	607a      	str	r2, [r7, #4]
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	b2d2      	uxtb	r2, r2
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	0a1b      	lsrs	r3, r3, #8
 800a994:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	0a1b      	lsrs	r3, r3, #8
 800a9a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	b2d2      	uxtb	r2, r2
 800a9b2:	701a      	strb	r2, [r3, #0]
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00d      	beq.n	800a9f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	1c53      	adds	r3, r2, #1
 800a9de:	613b      	str	r3, [r7, #16]
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	1c59      	adds	r1, r3, #1
 800a9e4:	6179      	str	r1, [r7, #20]
 800a9e6:	7812      	ldrb	r2, [r2, #0]
 800a9e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	607b      	str	r3, [r7, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1f1      	bne.n	800a9da <mem_cpy+0x1a>
	}
}
 800a9f6:	bf00      	nop
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aa02:	b480      	push	{r7}
 800aa04:	b087      	sub	sp, #28
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	617a      	str	r2, [r7, #20]
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	607b      	str	r3, [r7, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1f3      	bne.n	800aa12 <mem_set+0x10>
}
 800aa2a:	bf00      	nop
 800aa2c:	bf00      	nop
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aa38:	b480      	push	{r7}
 800aa3a:	b089      	sub	sp, #36	; 0x24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	61fb      	str	r3, [r7, #28]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	61fa      	str	r2, [r7, #28]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	61ba      	str	r2, [r7, #24]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	1acb      	subs	r3, r1, r3
 800aa64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	607b      	str	r3, [r7, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <mem_cmp+0x40>
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0eb      	beq.n	800aa50 <mem_cmp+0x18>

	return r;
 800aa78:	697b      	ldr	r3, [r7, #20]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3724      	adds	r7, #36	; 0x24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aa90:	e002      	b.n	800aa98 <chk_chr+0x12>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3301      	adds	r3, #1
 800aa96:	607b      	str	r3, [r7, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d005      	beq.n	800aaac <chk_chr+0x26>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d1f2      	bne.n	800aa92 <chk_chr+0xc>
	return *str;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	781b      	ldrb	r3, [r3, #0]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aac6:	2300      	movs	r3, #0
 800aac8:	60bb      	str	r3, [r7, #8]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	e029      	b.n	800ab24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aad0:	4a27      	ldr	r2, [pc, #156]	; (800ab70 <chk_lock+0xb4>)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	011b      	lsls	r3, r3, #4
 800aad6:	4413      	add	r3, r2
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d01d      	beq.n	800ab1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aade:	4a24      	ldr	r2, [pc, #144]	; (800ab70 <chk_lock+0xb4>)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	4413      	add	r3, r2
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d116      	bne.n	800ab1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aaf0:	4a1f      	ldr	r2, [pc, #124]	; (800ab70 <chk_lock+0xb4>)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	4413      	add	r3, r2
 800aaf8:	3304      	adds	r3, #4
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d10c      	bne.n	800ab1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab04:	4a1a      	ldr	r2, [pc, #104]	; (800ab70 <chk_lock+0xb4>)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	011b      	lsls	r3, r3, #4
 800ab0a:	4413      	add	r3, r2
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d102      	bne.n	800ab1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab18:	e007      	b.n	800ab2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3301      	adds	r3, #1
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d9d2      	bls.n	800aad0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d109      	bne.n	800ab44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <chk_lock+0x80>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d101      	bne.n	800ab40 <chk_lock+0x84>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e010      	b.n	800ab62 <chk_lock+0xa6>
 800ab40:	2312      	movs	r3, #18
 800ab42:	e00e      	b.n	800ab62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d108      	bne.n	800ab5c <chk_lock+0xa0>
 800ab4a:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <chk_lock+0xb4>)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	4413      	add	r3, r2
 800ab52:	330c      	adds	r3, #12
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5a:	d101      	bne.n	800ab60 <chk_lock+0xa4>
 800ab5c:	2310      	movs	r3, #16
 800ab5e:	e000      	b.n	800ab62 <chk_lock+0xa6>
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20000360 	.word	0x20000360

0800ab74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	607b      	str	r3, [r7, #4]
 800ab7e:	e002      	b.n	800ab86 <enq_lock+0x12>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3301      	adds	r3, #1
 800ab84:	607b      	str	r3, [r7, #4]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d806      	bhi.n	800ab9a <enq_lock+0x26>
 800ab8c:	4a09      	ldr	r2, [pc, #36]	; (800abb4 <enq_lock+0x40>)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	4413      	add	r3, r2
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1f2      	bne.n	800ab80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	bf14      	ite	ne
 800aba0:	2301      	movne	r3, #1
 800aba2:	2300      	moveq	r3, #0
 800aba4:	b2db      	uxtb	r3, r3
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20000360 	.word	0x20000360

0800abb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	e01f      	b.n	800ac08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800abc8:	4a41      	ldr	r2, [pc, #260]	; (800acd0 <inc_lock+0x118>)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	011b      	lsls	r3, r3, #4
 800abce:	4413      	add	r3, r2
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d113      	bne.n	800ac02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800abda:	4a3d      	ldr	r2, [pc, #244]	; (800acd0 <inc_lock+0x118>)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	4413      	add	r3, r2
 800abe2:	3304      	adds	r3, #4
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800abea:	429a      	cmp	r2, r3
 800abec:	d109      	bne.n	800ac02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800abee:	4a38      	ldr	r2, [pc, #224]	; (800acd0 <inc_lock+0x118>)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	011b      	lsls	r3, r3, #4
 800abf4:	4413      	add	r3, r2
 800abf6:	3308      	adds	r3, #8
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d006      	beq.n	800ac10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3301      	adds	r3, #1
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d9dc      	bls.n	800abc8 <inc_lock+0x10>
 800ac0e:	e000      	b.n	800ac12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ac10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d132      	bne.n	800ac7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	e002      	b.n	800ac24 <inc_lock+0x6c>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3301      	adds	r3, #1
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d806      	bhi.n	800ac38 <inc_lock+0x80>
 800ac2a:	4a29      	ldr	r2, [pc, #164]	; (800acd0 <inc_lock+0x118>)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	4413      	add	r3, r2
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1f2      	bne.n	800ac1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d101      	bne.n	800ac42 <inc_lock+0x8a>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e040      	b.n	800acc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	4922      	ldr	r1, [pc, #136]	; (800acd0 <inc_lock+0x118>)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	440b      	add	r3, r1
 800ac4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	491e      	ldr	r1, [pc, #120]	; (800acd0 <inc_lock+0x118>)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	440b      	add	r3, r1
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	695a      	ldr	r2, [r3, #20]
 800ac64:	491a      	ldr	r1, [pc, #104]	; (800acd0 <inc_lock+0x118>)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	440b      	add	r3, r1
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ac70:	4a17      	ldr	r2, [pc, #92]	; (800acd0 <inc_lock+0x118>)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	011b      	lsls	r3, r3, #4
 800ac76:	4413      	add	r3, r2
 800ac78:	330c      	adds	r3, #12
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d009      	beq.n	800ac98 <inc_lock+0xe0>
 800ac84:	4a12      	ldr	r2, [pc, #72]	; (800acd0 <inc_lock+0x118>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	4413      	add	r3, r2
 800ac8c:	330c      	adds	r3, #12
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <inc_lock+0xe0>
 800ac94:	2300      	movs	r3, #0
 800ac96:	e015      	b.n	800acc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d108      	bne.n	800acb0 <inc_lock+0xf8>
 800ac9e:	4a0c      	ldr	r2, [pc, #48]	; (800acd0 <inc_lock+0x118>)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	4413      	add	r3, r2
 800aca6:	330c      	adds	r3, #12
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	3301      	adds	r3, #1
 800acac:	b29a      	uxth	r2, r3
 800acae:	e001      	b.n	800acb4 <inc_lock+0xfc>
 800acb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acb4:	4906      	ldr	r1, [pc, #24]	; (800acd0 <inc_lock+0x118>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	440b      	add	r3, r1
 800acbc:	330c      	adds	r3, #12
 800acbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	20000360 	.word	0x20000360

0800acd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3b01      	subs	r3, #1
 800ace0:	607b      	str	r3, [r7, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d825      	bhi.n	800ad34 <dec_lock+0x60>
		n = Files[i].ctr;
 800ace8:	4a17      	ldr	r2, [pc, #92]	; (800ad48 <dec_lock+0x74>)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	011b      	lsls	r3, r3, #4
 800acee:	4413      	add	r3, r2
 800acf0:	330c      	adds	r3, #12
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800acf6:	89fb      	ldrh	r3, [r7, #14]
 800acf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acfc:	d101      	bne.n	800ad02 <dec_lock+0x2e>
 800acfe:	2300      	movs	r3, #0
 800ad00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ad02:	89fb      	ldrh	r3, [r7, #14]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <dec_lock+0x3a>
 800ad08:	89fb      	ldrh	r3, [r7, #14]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ad0e:	4a0e      	ldr	r2, [pc, #56]	; (800ad48 <dec_lock+0x74>)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	4413      	add	r3, r2
 800ad16:	330c      	adds	r3, #12
 800ad18:	89fa      	ldrh	r2, [r7, #14]
 800ad1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ad1c:	89fb      	ldrh	r3, [r7, #14]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <dec_lock+0x5a>
 800ad22:	4a09      	ldr	r2, [pc, #36]	; (800ad48 <dec_lock+0x74>)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	011b      	lsls	r3, r3, #4
 800ad28:	4413      	add	r3, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	737b      	strb	r3, [r7, #13]
 800ad32:	e001      	b.n	800ad38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ad34:	2302      	movs	r3, #2
 800ad36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ad38:	7b7b      	ldrb	r3, [r7, #13]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000360 	.word	0x20000360

0800ad4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	e010      	b.n	800ad7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ad5a:	4a0d      	ldr	r2, [pc, #52]	; (800ad90 <clear_lock+0x44>)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	011b      	lsls	r3, r3, #4
 800ad60:	4413      	add	r3, r2
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d105      	bne.n	800ad76 <clear_lock+0x2a>
 800ad6a:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <clear_lock+0x44>)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	4413      	add	r3, r2
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d9eb      	bls.n	800ad5a <clear_lock+0xe>
	}
}
 800ad82:	bf00      	nop
 800ad84:	bf00      	nop
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	20000360 	.word	0x20000360

0800ad94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	78db      	ldrb	r3, [r3, #3]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d034      	beq.n	800ae12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7858      	ldrb	r0, [r3, #1]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adb8:	2301      	movs	r3, #1
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	f7ff fd40 	bl	800a840 <disk_write>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <sync_window+0x38>
			res = FR_DISK_ERR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	73fb      	strb	r3, [r7, #15]
 800adca:	e022      	b.n	800ae12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	1ad2      	subs	r2, r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d217      	bcs.n	800ae12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	789b      	ldrb	r3, [r3, #2]
 800ade6:	613b      	str	r3, [r7, #16]
 800ade8:	e010      	b.n	800ae0c <sync_window+0x78>
					wsect += fs->fsize;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4413      	add	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7858      	ldrb	r0, [r3, #1]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adfe:	2301      	movs	r3, #1
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	f7ff fd1d 	bl	800a840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	613b      	str	r3, [r7, #16]
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d8eb      	bhi.n	800adea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d01b      	beq.n	800ae6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ffad 	bl	800ad94 <sync_window>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d113      	bne.n	800ae6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	7858      	ldrb	r0, [r3, #1]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae4e:	2301      	movs	r3, #1
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	f7ff fcd5 	bl	800a800 <disk_read>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d004      	beq.n	800ae66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ae5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff ff87 	bl	800ad94 <sync_window>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d158      	bne.n	800af42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d148      	bne.n	800af2a <sync_fs+0xb2>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	791b      	ldrb	r3, [r3, #4]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d144      	bne.n	800af2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3330      	adds	r3, #48	; 0x30
 800aea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aea8:	2100      	movs	r1, #0
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff fda9 	bl	800aa02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3330      	adds	r3, #48	; 0x30
 800aeb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aeb8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7ff fd38 	bl	800a932 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3330      	adds	r3, #48	; 0x30
 800aec6:	4921      	ldr	r1, [pc, #132]	; (800af4c <sync_fs+0xd4>)
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff fd4d 	bl	800a968 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3330      	adds	r3, #48	; 0x30
 800aed2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aed6:	491e      	ldr	r1, [pc, #120]	; (800af50 <sync_fs+0xd8>)
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff fd45 	bl	800a968 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3330      	adds	r3, #48	; 0x30
 800aee2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	4619      	mov	r1, r3
 800aeec:	4610      	mov	r0, r2
 800aeee:	f7ff fd3b 	bl	800a968 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3330      	adds	r3, #48	; 0x30
 800aef6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	4619      	mov	r1, r3
 800af00:	4610      	mov	r0, r2
 800af02:	f7ff fd31 	bl	800a968 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	7858      	ldrb	r0, [r3, #1]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1e:	2301      	movs	r3, #1
 800af20:	f7ff fc8e 	bl	800a840 <disk_write>
			fs->fsi_flag = 0;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	785b      	ldrb	r3, [r3, #1]
 800af2e:	2200      	movs	r2, #0
 800af30:	2100      	movs	r1, #0
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fca4 	bl	800a880 <disk_ioctl>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <sync_fs+0xca>
 800af3e:	2301      	movs	r3, #1
 800af40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800af42:	7bfb      	ldrb	r3, [r7, #15]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	41615252 	.word	0x41615252
 800af50:	61417272 	.word	0x61417272

0800af54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	3b02      	subs	r3, #2
 800af62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	3b02      	subs	r3, #2
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d301      	bcc.n	800af74 <clust2sect+0x20>
 800af70:	2300      	movs	r3, #0
 800af72:	e008      	b.n	800af86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	895b      	ldrh	r3, [r3, #10]
 800af78:	461a      	mov	r2, r3
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	fb03 f202 	mul.w	r2, r3, r2
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af84:	4413      	add	r3, r2
}
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b086      	sub	sp, #24
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d904      	bls.n	800afb2 <get_fat+0x20>
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d302      	bcc.n	800afb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800afb2:	2301      	movs	r3, #1
 800afb4:	617b      	str	r3, [r7, #20]
 800afb6:	e08f      	b.n	800b0d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800afb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d062      	beq.n	800b08c <get_fat+0xfa>
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	dc7c      	bgt.n	800b0c4 <get_fat+0x132>
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d002      	beq.n	800afd4 <get_fat+0x42>
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d042      	beq.n	800b058 <get_fat+0xc6>
 800afd2:	e077      	b.n	800b0c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	085b      	lsrs	r3, r3, #1
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	6a1a      	ldr	r2, [r3, #32]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	0a5b      	lsrs	r3, r3, #9
 800afea:	4413      	add	r3, r2
 800afec:	4619      	mov	r1, r3
 800afee:	6938      	ldr	r0, [r7, #16]
 800aff0:	f7ff ff14 	bl	800ae1c <move_window>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d167      	bne.n	800b0ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	60fa      	str	r2, [r7, #12]
 800b000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	4413      	add	r3, r2
 800b008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b00c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	6a1a      	ldr	r2, [r3, #32]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	0a5b      	lsrs	r3, r3, #9
 800b016:	4413      	add	r3, r2
 800b018:	4619      	mov	r1, r3
 800b01a:	6938      	ldr	r0, [r7, #16]
 800b01c:	f7ff fefe 	bl	800ae1c <move_window>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d153      	bne.n	800b0ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	4413      	add	r3, r2
 800b030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	461a      	mov	r2, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <get_fat+0xbc>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	091b      	lsrs	r3, r3, #4
 800b04c:	e002      	b.n	800b054 <get_fat+0xc2>
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b054:	617b      	str	r3, [r7, #20]
			break;
 800b056:	e03f      	b.n	800b0d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	6a1a      	ldr	r2, [r3, #32]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	0a1b      	lsrs	r3, r3, #8
 800b060:	4413      	add	r3, r2
 800b062:	4619      	mov	r1, r3
 800b064:	6938      	ldr	r0, [r7, #16]
 800b066:	f7ff fed9 	bl	800ae1c <move_window>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d130      	bne.n	800b0d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b07e:	4413      	add	r3, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fc1b 	bl	800a8bc <ld_word>
 800b086:	4603      	mov	r3, r0
 800b088:	617b      	str	r3, [r7, #20]
			break;
 800b08a:	e025      	b.n	800b0d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	6a1a      	ldr	r2, [r3, #32]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	09db      	lsrs	r3, r3, #7
 800b094:	4413      	add	r3, r2
 800b096:	4619      	mov	r1, r3
 800b098:	6938      	ldr	r0, [r7, #16]
 800b09a:	f7ff febf 	bl	800ae1c <move_window>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d118      	bne.n	800b0d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b0b2:	4413      	add	r3, r2
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7ff fc19 	bl	800a8ec <ld_dword>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b0c0:	617b      	str	r3, [r7, #20]
			break;
 800b0c2:	e009      	b.n	800b0d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	e006      	b.n	800b0d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0ca:	bf00      	nop
 800b0cc:	e004      	b.n	800b0d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0ce:	bf00      	nop
 800b0d0:	e002      	b.n	800b0d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b0d2:	bf00      	nop
 800b0d4:	e000      	b.n	800b0d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0d6:	bf00      	nop
		}
	}

	return val;
 800b0d8:	697b      	ldr	r3, [r7, #20]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b0e2:	b590      	push	{r4, r7, lr}
 800b0e4:	b089      	sub	sp, #36	; 0x24
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	f240 80d2 	bls.w	800b29e <put_fat+0x1bc>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	429a      	cmp	r2, r3
 800b102:	f080 80cc 	bcs.w	800b29e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	f000 8096 	beq.w	800b23c <put_fat+0x15a>
 800b110:	2b03      	cmp	r3, #3
 800b112:	f300 80cd 	bgt.w	800b2b0 <put_fat+0x1ce>
 800b116:	2b01      	cmp	r3, #1
 800b118:	d002      	beq.n	800b120 <put_fat+0x3e>
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d06e      	beq.n	800b1fc <put_fat+0x11a>
 800b11e:	e0c7      	b.n	800b2b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	61bb      	str	r3, [r7, #24]
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	4413      	add	r3, r2
 800b12c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a1a      	ldr	r2, [r3, #32]
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	0a5b      	lsrs	r3, r3, #9
 800b136:	4413      	add	r3, r2
 800b138:	4619      	mov	r1, r3
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f7ff fe6e 	bl	800ae1c <move_window>
 800b140:	4603      	mov	r3, r0
 800b142:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b144:	7ffb      	ldrb	r3, [r7, #31]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f040 80ab 	bne.w	800b2a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	1c59      	adds	r1, r3, #1
 800b156:	61b9      	str	r1, [r7, #24]
 800b158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15c:	4413      	add	r3, r2
 800b15e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00d      	beq.n	800b186 <put_fat+0xa4>
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	b25b      	sxtb	r3, r3
 800b170:	f003 030f 	and.w	r3, r3, #15
 800b174:	b25a      	sxtb	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	b25b      	sxtb	r3, r3
 800b17e:	4313      	orrs	r3, r2
 800b180:	b25b      	sxtb	r3, r3
 800b182:	b2db      	uxtb	r3, r3
 800b184:	e001      	b.n	800b18a <put_fat+0xa8>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2201      	movs	r2, #1
 800b192:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6a1a      	ldr	r2, [r3, #32]
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	0a5b      	lsrs	r3, r3, #9
 800b19c:	4413      	add	r3, r2
 800b19e:	4619      	mov	r1, r3
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff fe3b 	bl	800ae1c <move_window>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1aa:	7ffb      	ldrb	r3, [r7, #31]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d17a      	bne.n	800b2a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1bc:	4413      	add	r3, r2
 800b1be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <put_fat+0xf0>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	091b      	lsrs	r3, r3, #4
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	e00e      	b.n	800b1f0 <put_fat+0x10e>
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	b25b      	sxtb	r3, r3
 800b1d8:	f023 030f 	bic.w	r3, r3, #15
 800b1dc:	b25a      	sxtb	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	0a1b      	lsrs	r3, r3, #8
 800b1e2:	b25b      	sxtb	r3, r3
 800b1e4:	f003 030f 	and.w	r3, r3, #15
 800b1e8:	b25b      	sxtb	r3, r3
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	70da      	strb	r2, [r3, #3]
			break;
 800b1fa:	e059      	b.n	800b2b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a1a      	ldr	r2, [r3, #32]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	0a1b      	lsrs	r3, r3, #8
 800b204:	4413      	add	r3, r2
 800b206:	4619      	mov	r1, r3
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff fe07 	bl	800ae1c <move_window>
 800b20e:	4603      	mov	r3, r0
 800b210:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b212:	7ffb      	ldrb	r3, [r7, #31]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d148      	bne.n	800b2aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b226:	4413      	add	r3, r2
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	b292      	uxth	r2, r2
 800b22c:	4611      	mov	r1, r2
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff fb7f 	bl	800a932 <st_word>
			fs->wflag = 1;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	70da      	strb	r2, [r3, #3]
			break;
 800b23a:	e039      	b.n	800b2b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a1a      	ldr	r2, [r3, #32]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	09db      	lsrs	r3, r3, #7
 800b244:	4413      	add	r3, r2
 800b246:	4619      	mov	r1, r3
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f7ff fde7 	bl	800ae1c <move_window>
 800b24e:	4603      	mov	r3, r0
 800b250:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b252:	7ffb      	ldrb	r3, [r7, #31]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d12a      	bne.n	800b2ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b26c:	4413      	add	r3, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fb3c 	bl	800a8ec <ld_dword>
 800b274:	4603      	mov	r3, r0
 800b276:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b27a:	4323      	orrs	r3, r4
 800b27c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b28c:	4413      	add	r3, r2
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	4618      	mov	r0, r3
 800b292:	f7ff fb69 	bl	800a968 <st_dword>
			fs->wflag = 1;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2201      	movs	r2, #1
 800b29a:	70da      	strb	r2, [r3, #3]
			break;
 800b29c:	e008      	b.n	800b2b0 <put_fat+0x1ce>
		}
	}
 800b29e:	bf00      	nop
 800b2a0:	e006      	b.n	800b2b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2a2:	bf00      	nop
 800b2a4:	e004      	b.n	800b2b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2a6:	bf00      	nop
 800b2a8:	e002      	b.n	800b2b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2ae:	bf00      	nop
	return res;
 800b2b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3724      	adds	r7, #36	; 0x24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd90      	pop	{r4, r7, pc}

0800b2ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b088      	sub	sp, #32
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d904      	bls.n	800b2e0 <remove_chain+0x26>
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d301      	bcc.n	800b2e4 <remove_chain+0x2a>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e04b      	b.n	800b37c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00c      	beq.n	800b304 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b2ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	69b8      	ldr	r0, [r7, #24]
 800b2f2:	f7ff fef6 	bl	800b0e2 <put_fat>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b2fa:	7ffb      	ldrb	r3, [r7, #31]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <remove_chain+0x4a>
 800b300:	7ffb      	ldrb	r3, [r7, #31]
 800b302:	e03b      	b.n	800b37c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7ff fe43 	bl	800af92 <get_fat>
 800b30c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d031      	beq.n	800b378 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d101      	bne.n	800b31e <remove_chain+0x64>
 800b31a:	2302      	movs	r3, #2
 800b31c:	e02e      	b.n	800b37c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b324:	d101      	bne.n	800b32a <remove_chain+0x70>
 800b326:	2301      	movs	r3, #1
 800b328:	e028      	b.n	800b37c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b32a:	2200      	movs	r2, #0
 800b32c:	68b9      	ldr	r1, [r7, #8]
 800b32e:	69b8      	ldr	r0, [r7, #24]
 800b330:	f7ff fed7 	bl	800b0e2 <put_fat>
 800b334:	4603      	mov	r3, r0
 800b336:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b338:	7ffb      	ldrb	r3, [r7, #31]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <remove_chain+0x88>
 800b33e:	7ffb      	ldrb	r3, [r7, #31]
 800b340:	e01c      	b.n	800b37c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	691a      	ldr	r2, [r3, #16]
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	3b02      	subs	r3, #2
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d20b      	bcs.n	800b368 <remove_chain+0xae>
			fs->free_clst++;
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	791b      	ldrb	r3, [r3, #4]
 800b35e:	f043 0301 	orr.w	r3, r3, #1
 800b362:	b2da      	uxtb	r2, r3
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	429a      	cmp	r2, r3
 800b374:	d3c6      	bcc.n	800b304 <remove_chain+0x4a>
 800b376:	e000      	b.n	800b37a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b378:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3720      	adds	r7, #32
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10d      	bne.n	800b3b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d004      	beq.n	800b3b0 <create_chain+0x2c>
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	69ba      	ldr	r2, [r7, #24]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d31b      	bcc.n	800b3e8 <create_chain+0x64>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	61bb      	str	r3, [r7, #24]
 800b3b4:	e018      	b.n	800b3e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff fdea 	bl	800af92 <get_fat>
 800b3be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d801      	bhi.n	800b3ca <create_chain+0x46>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e070      	b.n	800b4ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3d0:	d101      	bne.n	800b3d6 <create_chain+0x52>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	e06a      	b.n	800b4ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d201      	bcs.n	800b3e4 <create_chain+0x60>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	e063      	b.n	800b4ac <create_chain+0x128>
		scl = clst;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d307      	bcc.n	800b40c <create_chain+0x88>
				ncl = 2;
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b400:	69fa      	ldr	r2, [r7, #28]
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	d901      	bls.n	800b40c <create_chain+0x88>
 800b408:	2300      	movs	r3, #0
 800b40a:	e04f      	b.n	800b4ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b40c:	69f9      	ldr	r1, [r7, #28]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7ff fdbf 	bl	800af92 <get_fat>
 800b414:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00e      	beq.n	800b43a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d003      	beq.n	800b42a <create_chain+0xa6>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b428:	d101      	bne.n	800b42e <create_chain+0xaa>
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	e03e      	b.n	800b4ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	429a      	cmp	r2, r3
 800b434:	d1da      	bne.n	800b3ec <create_chain+0x68>
 800b436:	2300      	movs	r3, #0
 800b438:	e038      	b.n	800b4ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b43a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b43c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b440:	69f9      	ldr	r1, [r7, #28]
 800b442:	6938      	ldr	r0, [r7, #16]
 800b444:	f7ff fe4d 	bl	800b0e2 <put_fat>
 800b448:	4603      	mov	r3, r0
 800b44a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b44c:	7dfb      	ldrb	r3, [r7, #23]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d109      	bne.n	800b466 <create_chain+0xe2>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d006      	beq.n	800b466 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b458:	69fa      	ldr	r2, [r7, #28]
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6938      	ldr	r0, [r7, #16]
 800b45e:	f7ff fe40 	bl	800b0e2 <put_fat>
 800b462:	4603      	mov	r3, r0
 800b464:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d116      	bne.n	800b49a <create_chain+0x116>
		fs->last_clst = ncl;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	3b02      	subs	r3, #2
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d804      	bhi.n	800b48a <create_chain+0x106>
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	1e5a      	subs	r2, r3, #1
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	791b      	ldrb	r3, [r3, #4]
 800b48e:	f043 0301 	orr.w	r3, r3, #1
 800b492:	b2da      	uxtb	r2, r3
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	711a      	strb	r2, [r3, #4]
 800b498:	e007      	b.n	800b4aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d102      	bne.n	800b4a6 <create_chain+0x122>
 800b4a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4a4:	e000      	b.n	800b4a8 <create_chain+0x124>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b4aa:	69fb      	ldr	r3, [r7, #28]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3720      	adds	r7, #32
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	0a5b      	lsrs	r3, r3, #9
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	8952      	ldrh	r2, [r2, #10]
 800b4d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	1d1a      	adds	r2, r3, #4
 800b4de:	613a      	str	r2, [r7, #16]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <clmt_clust+0x3a>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e010      	b.n	800b510 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d307      	bcc.n	800b506 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	3304      	adds	r3, #4
 800b502:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b504:	e7e9      	b.n	800b4da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b506:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	4413      	add	r3, r2
}
 800b510:	4618      	mov	r0, r3
 800b512:	371c      	adds	r7, #28
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b532:	d204      	bcs.n	800b53e <dir_sdi+0x22>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	f003 031f 	and.w	r3, r3, #31
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b53e:	2302      	movs	r3, #2
 800b540:	e063      	b.n	800b60a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d106      	bne.n	800b562 <dir_sdi+0x46>
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d902      	bls.n	800b562 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10c      	bne.n	800b582 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	095b      	lsrs	r3, r3, #5
 800b56c:	693a      	ldr	r2, [r7, #16]
 800b56e:	8912      	ldrh	r2, [r2, #8]
 800b570:	4293      	cmp	r3, r2
 800b572:	d301      	bcc.n	800b578 <dir_sdi+0x5c>
 800b574:	2302      	movs	r3, #2
 800b576:	e048      	b.n	800b60a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	61da      	str	r2, [r3, #28]
 800b580:	e029      	b.n	800b5d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	895b      	ldrh	r3, [r3, #10]
 800b586:	025b      	lsls	r3, r3, #9
 800b588:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b58a:	e019      	b.n	800b5c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6979      	ldr	r1, [r7, #20]
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff fcfe 	bl	800af92 <get_fat>
 800b596:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b59e:	d101      	bne.n	800b5a4 <dir_sdi+0x88>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e032      	b.n	800b60a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d904      	bls.n	800b5b4 <dir_sdi+0x98>
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d301      	bcc.n	800b5b8 <dir_sdi+0x9c>
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	e028      	b.n	800b60a <dir_sdi+0xee>
			ofs -= csz;
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d2e1      	bcs.n	800b58c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b5c8:	6979      	ldr	r1, [r7, #20]
 800b5ca:	6938      	ldr	r0, [r7, #16]
 800b5cc:	f7ff fcc2 	bl	800af54 <clust2sect>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <dir_sdi+0xcc>
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	e010      	b.n	800b60a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	69da      	ldr	r2, [r3, #28]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	0a5b      	lsrs	r3, r3, #9
 800b5f0:	441a      	add	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b602:	441a      	add	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b086      	sub	sp, #24
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	3320      	adds	r3, #32
 800b628:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <dir_next+0x28>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b638:	d301      	bcc.n	800b63e <dir_next+0x2c>
 800b63a:	2304      	movs	r3, #4
 800b63c:	e0aa      	b.n	800b794 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b644:	2b00      	cmp	r3, #0
 800b646:	f040 8098 	bne.w	800b77a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	095b      	lsrs	r3, r3, #5
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	8912      	ldrh	r2, [r2, #8]
 800b664:	4293      	cmp	r3, r2
 800b666:	f0c0 8088 	bcc.w	800b77a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	61da      	str	r2, [r3, #28]
 800b670:	2304      	movs	r3, #4
 800b672:	e08f      	b.n	800b794 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	0a5b      	lsrs	r3, r3, #9
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	8952      	ldrh	r2, [r2, #10]
 800b67c:	3a01      	subs	r2, #1
 800b67e:	4013      	ands	r3, r2
 800b680:	2b00      	cmp	r3, #0
 800b682:	d17a      	bne.n	800b77a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	4619      	mov	r1, r3
 800b68c:	4610      	mov	r0, r2
 800b68e:	f7ff fc80 	bl	800af92 <get_fat>
 800b692:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d801      	bhi.n	800b69e <dir_next+0x8c>
 800b69a:	2302      	movs	r3, #2
 800b69c:	e07a      	b.n	800b794 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6a4:	d101      	bne.n	800b6aa <dir_next+0x98>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e074      	b.n	800b794 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d358      	bcc.n	800b766 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d104      	bne.n	800b6c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	61da      	str	r2, [r3, #28]
 800b6c0:	2304      	movs	r3, #4
 800b6c2:	e067      	b.n	800b794 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	f7ff fe59 	bl	800b384 <create_chain>
 800b6d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <dir_next+0xcc>
 800b6da:	2307      	movs	r3, #7
 800b6dc:	e05a      	b.n	800b794 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d101      	bne.n	800b6e8 <dir_next+0xd6>
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	e055      	b.n	800b794 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6ee:	d101      	bne.n	800b6f4 <dir_next+0xe2>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e04f      	b.n	800b794 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f7ff fb4d 	bl	800ad94 <sync_window>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <dir_next+0xf2>
 800b700:	2301      	movs	r3, #1
 800b702:	e047      	b.n	800b794 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	3330      	adds	r3, #48	; 0x30
 800b708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b70c:	2100      	movs	r1, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff f977 	bl	800aa02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b714:	2300      	movs	r3, #0
 800b716:	613b      	str	r3, [r7, #16]
 800b718:	6979      	ldr	r1, [r7, #20]
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f7ff fc1a 	bl	800af54 <clust2sect>
 800b720:	4602      	mov	r2, r0
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	62da      	str	r2, [r3, #44]	; 0x2c
 800b726:	e012      	b.n	800b74e <dir_next+0x13c>
						fs->wflag = 1;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2201      	movs	r2, #1
 800b72c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f7ff fb30 	bl	800ad94 <sync_window>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <dir_next+0x12c>
 800b73a:	2301      	movs	r3, #1
 800b73c:	e02a      	b.n	800b794 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	3301      	adds	r3, #1
 800b742:	613b      	str	r3, [r7, #16]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	895b      	ldrh	r3, [r3, #10]
 800b752:	461a      	mov	r2, r3
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	4293      	cmp	r3, r2
 800b758:	d3e6      	bcc.n	800b728 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	1ad2      	subs	r2, r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b76c:	6979      	ldr	r1, [r7, #20]
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7ff fbf0 	bl	800af54 <clust2sect>
 800b774:	4602      	mov	r2, r0
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78c:	441a      	add	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3718      	adds	r7, #24
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff feb4 	bl	800b51c <dir_sdi>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d12b      	bne.n	800b816 <dir_alloc+0x7a>
		n = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f7ff fb27 	bl	800ae1c <move_window>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11d      	bne.n	800b814 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2be5      	cmp	r3, #229	; 0xe5
 800b7e0:	d004      	beq.n	800b7ec <dir_alloc+0x50>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d107      	bne.n	800b7fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	613b      	str	r3, [r7, #16]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d102      	bne.n	800b800 <dir_alloc+0x64>
 800b7fa:	e00c      	b.n	800b816 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b800:	2101      	movs	r1, #1
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7ff ff05 	bl	800b612 <dir_next>
 800b808:	4603      	mov	r3, r0
 800b80a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b80c:	7dfb      	ldrb	r3, [r7, #23]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0d7      	beq.n	800b7c2 <dir_alloc+0x26>
 800b812:	e000      	b.n	800b816 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b814:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	2b04      	cmp	r3, #4
 800b81a:	d101      	bne.n	800b820 <dir_alloc+0x84>
 800b81c:	2307      	movs	r3, #7
 800b81e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b820:	7dfb      	ldrb	r3, [r7, #23]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	331a      	adds	r3, #26
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff f83f 	bl	800a8bc <ld_word>
 800b83e:	4603      	mov	r3, r0
 800b840:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	2b03      	cmp	r3, #3
 800b848:	d109      	bne.n	800b85e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	3314      	adds	r3, #20
 800b84e:	4618      	mov	r0, r3
 800b850:	f7ff f834 	bl	800a8bc <ld_word>
 800b854:	4603      	mov	r3, r0
 800b856:	041b      	lsls	r3, r3, #16
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b85e:	68fb      	ldr	r3, [r7, #12]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	331a      	adds	r3, #26
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	b292      	uxth	r2, r2
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7ff f857 	bl	800a932 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d109      	bne.n	800b8a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f103 0214 	add.w	r2, r3, #20
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	0c1b      	lsrs	r3, r3, #16
 800b896:	b29b      	uxth	r3, r3
 800b898:	4619      	mov	r1, r3
 800b89a:	4610      	mov	r0, r2
 800b89c:	f7ff f849 	bl	800a932 <st_word>
	}
}
 800b8a0:	bf00      	nop
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b8b2:	2304      	movs	r3, #4
 800b8b4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b8bc:	e03c      	b.n	800b938 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6938      	ldr	r0, [r7, #16]
 800b8c6:	f7ff faa9 	bl	800ae1c <move_window>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d136      	bne.n	800b942 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d102      	bne.n	800b8e8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	75fb      	strb	r3, [r7, #23]
 800b8e6:	e031      	b.n	800b94c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	330b      	adds	r3, #11
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8f4:	73bb      	strb	r3, [r7, #14]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	7bba      	ldrb	r2, [r7, #14]
 800b8fa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	2be5      	cmp	r3, #229	; 0xe5
 800b900:	d011      	beq.n	800b926 <dir_read+0x7e>
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b2e      	cmp	r3, #46	; 0x2e
 800b906:	d00e      	beq.n	800b926 <dir_read+0x7e>
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	2b0f      	cmp	r3, #15
 800b90c:	d00b      	beq.n	800b926 <dir_read+0x7e>
 800b90e:	7bbb      	ldrb	r3, [r7, #14]
 800b910:	f023 0320 	bic.w	r3, r3, #32
 800b914:	2b08      	cmp	r3, #8
 800b916:	bf0c      	ite	eq
 800b918:	2301      	moveq	r3, #1
 800b91a:	2300      	movne	r3, #0
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	461a      	mov	r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	4293      	cmp	r3, r2
 800b924:	d00f      	beq.n	800b946 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b926:	2100      	movs	r1, #0
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff fe72 	bl	800b612 <dir_next>
 800b92e:	4603      	mov	r3, r0
 800b930:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d108      	bne.n	800b94a <dir_read+0xa2>
	while (dp->sect) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1be      	bne.n	800b8be <dir_read+0x16>
 800b940:	e004      	b.n	800b94c <dir_read+0xa4>
		if (res != FR_OK) break;
 800b942:	bf00      	nop
 800b944:	e002      	b.n	800b94c <dir_read+0xa4>
				break;
 800b946:	bf00      	nop
 800b948:	e000      	b.n	800b94c <dir_read+0xa4>
		if (res != FR_OK) break;
 800b94a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <dir_read+0xb0>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	61da      	str	r2, [r3, #28]
	return res;
 800b958:	7dfb      	ldrb	r3, [r7, #23]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b086      	sub	sp, #24
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b970:	2100      	movs	r1, #0
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff fdd2 	bl	800b51c <dir_sdi>
 800b978:	4603      	mov	r3, r0
 800b97a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b97c:	7dfb      	ldrb	r3, [r7, #23]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <dir_find+0x24>
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	e03e      	b.n	800ba04 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6938      	ldr	r0, [r7, #16]
 800b98e:	f7ff fa45 	bl	800ae1c <move_window>
 800b992:	4603      	mov	r3, r0
 800b994:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d12f      	bne.n	800b9fc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a1b      	ldr	r3, [r3, #32]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <dir_find+0x4e>
 800b9aa:	2304      	movs	r3, #4
 800b9ac:	75fb      	strb	r3, [r7, #23]
 800b9ae:	e028      	b.n	800ba02 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	330b      	adds	r3, #11
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	330b      	adds	r3, #11
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f003 0308 	and.w	r3, r3, #8
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <dir_find+0x86>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a18      	ldr	r0, [r3, #32]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	3324      	adds	r3, #36	; 0x24
 800b9da:	220b      	movs	r2, #11
 800b9dc:	4619      	mov	r1, r3
 800b9de:	f7ff f82b 	bl	800aa38 <mem_cmp>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00b      	beq.n	800ba00 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff fe11 	bl	800b612 <dir_next>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0c5      	beq.n	800b986 <dir_find+0x24>
 800b9fa:	e002      	b.n	800ba02 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b9fc:	bf00      	nop
 800b9fe:	e000      	b.n	800ba02 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba00:	bf00      	nop

	return res;
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff febd 	bl	800b79c <dir_alloc>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d11c      	bne.n	800ba66 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	69db      	ldr	r3, [r3, #28]
 800ba30:	4619      	mov	r1, r3
 800ba32:	68b8      	ldr	r0, [r7, #8]
 800ba34:	f7ff f9f2 	bl	800ae1c <move_window>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d111      	bne.n	800ba66 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	2220      	movs	r2, #32
 800ba48:	2100      	movs	r1, #0
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fe ffd9 	bl	800aa02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a18      	ldr	r0, [r3, #32]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3324      	adds	r3, #36	; 0x24
 800ba58:	220b      	movs	r2, #11
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	f7fe ffb0 	bl	800a9c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2201      	movs	r2, #1
 800ba64:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3324      	adds	r3, #36	; 0x24
 800ba84:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ba86:	220b      	movs	r2, #11
 800ba88:	2120      	movs	r1, #32
 800ba8a:	68b8      	ldr	r0, [r7, #8]
 800ba8c:	f7fe ffb9 	bl	800aa02 <mem_set>
	si = i = 0; ni = 8;
 800ba90:	2300      	movs	r3, #0
 800ba92:	613b      	str	r3, [r7, #16]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	2308      	movs	r3, #8
 800ba9a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	61fa      	str	r2, [r7, #28]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	4413      	add	r3, r2
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800baaa:	7efb      	ldrb	r3, [r7, #27]
 800baac:	2b20      	cmp	r3, #32
 800baae:	d94e      	bls.n	800bb4e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bab0:	7efb      	ldrb	r3, [r7, #27]
 800bab2:	2b2f      	cmp	r3, #47	; 0x2f
 800bab4:	d006      	beq.n	800bac4 <create_name+0x54>
 800bab6:	7efb      	ldrb	r3, [r7, #27]
 800bab8:	2b5c      	cmp	r3, #92	; 0x5c
 800baba:	d110      	bne.n	800bade <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800babc:	e002      	b.n	800bac4 <create_name+0x54>
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	3301      	adds	r3, #1
 800bac2:	61fb      	str	r3, [r7, #28]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	4413      	add	r3, r2
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b2f      	cmp	r3, #47	; 0x2f
 800bace:	d0f6      	beq.n	800babe <create_name+0x4e>
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	4413      	add	r3, r2
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b5c      	cmp	r3, #92	; 0x5c
 800bada:	d0f0      	beq.n	800babe <create_name+0x4e>
			break;
 800badc:	e038      	b.n	800bb50 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bade:	7efb      	ldrb	r3, [r7, #27]
 800bae0:	2b2e      	cmp	r3, #46	; 0x2e
 800bae2:	d003      	beq.n	800baec <create_name+0x7c>
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d30c      	bcc.n	800bb06 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2b0b      	cmp	r3, #11
 800baf0:	d002      	beq.n	800baf8 <create_name+0x88>
 800baf2:	7efb      	ldrb	r3, [r7, #27]
 800baf4:	2b2e      	cmp	r3, #46	; 0x2e
 800baf6:	d001      	beq.n	800bafc <create_name+0x8c>
 800baf8:	2306      	movs	r3, #6
 800bafa:	e044      	b.n	800bb86 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bafc:	2308      	movs	r3, #8
 800bafe:	613b      	str	r3, [r7, #16]
 800bb00:	230b      	movs	r3, #11
 800bb02:	617b      	str	r3, [r7, #20]
			continue;
 800bb04:	e022      	b.n	800bb4c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bb06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	da04      	bge.n	800bb18 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bb0e:	7efb      	ldrb	r3, [r7, #27]
 800bb10:	3b80      	subs	r3, #128	; 0x80
 800bb12:	4a1f      	ldr	r2, [pc, #124]	; (800bb90 <create_name+0x120>)
 800bb14:	5cd3      	ldrb	r3, [r2, r3]
 800bb16:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bb18:	7efb      	ldrb	r3, [r7, #27]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	481d      	ldr	r0, [pc, #116]	; (800bb94 <create_name+0x124>)
 800bb1e:	f7fe ffb2 	bl	800aa86 <chk_chr>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <create_name+0xbc>
 800bb28:	2306      	movs	r3, #6
 800bb2a:	e02c      	b.n	800bb86 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bb2c:	7efb      	ldrb	r3, [r7, #27]
 800bb2e:	2b60      	cmp	r3, #96	; 0x60
 800bb30:	d905      	bls.n	800bb3e <create_name+0xce>
 800bb32:	7efb      	ldrb	r3, [r7, #27]
 800bb34:	2b7a      	cmp	r3, #122	; 0x7a
 800bb36:	d802      	bhi.n	800bb3e <create_name+0xce>
 800bb38:	7efb      	ldrb	r3, [r7, #27]
 800bb3a:	3b20      	subs	r3, #32
 800bb3c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	613a      	str	r2, [r7, #16]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	4413      	add	r3, r2
 800bb48:	7efa      	ldrb	r2, [r7, #27]
 800bb4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bb4c:	e7a6      	b.n	800ba9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb4e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	441a      	add	r2, r3
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <create_name+0xf4>
 800bb60:	2306      	movs	r3, #6
 800bb62:	e010      	b.n	800bb86 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2be5      	cmp	r3, #229	; 0xe5
 800bb6a:	d102      	bne.n	800bb72 <create_name+0x102>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2205      	movs	r2, #5
 800bb70:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bb72:	7efb      	ldrb	r3, [r7, #27]
 800bb74:	2b20      	cmp	r3, #32
 800bb76:	d801      	bhi.n	800bb7c <create_name+0x10c>
 800bb78:	2204      	movs	r2, #4
 800bb7a:	e000      	b.n	800bb7e <create_name+0x10e>
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	330b      	adds	r3, #11
 800bb82:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bb84:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3720      	adds	r7, #32
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	0800e078 	.word	0x0800e078
 800bb94:	0800df1c 	.word	0x0800df1c

0800bb98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bbac:	e002      	b.n	800bbb4 <follow_path+0x1c>
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	603b      	str	r3, [r7, #0]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	2b2f      	cmp	r3, #47	; 0x2f
 800bbba:	d0f8      	beq.n	800bbae <follow_path+0x16>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b5c      	cmp	r3, #92	; 0x5c
 800bbc2:	d0f4      	beq.n	800bbae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b1f      	cmp	r3, #31
 800bbd0:	d80a      	bhi.n	800bbe8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2280      	movs	r2, #128	; 0x80
 800bbd6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bbda:	2100      	movs	r1, #0
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff fc9d 	bl	800b51c <dir_sdi>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75fb      	strb	r3, [r7, #23]
 800bbe6:	e043      	b.n	800bc70 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbe8:	463b      	mov	r3, r7
 800bbea:	4619      	mov	r1, r3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7ff ff3f 	bl	800ba70 <create_name>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d134      	bne.n	800bc66 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff feb0 	bl	800b962 <dir_find>
 800bc02:	4603      	mov	r3, r0
 800bc04:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc0c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00a      	beq.n	800bc2a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d127      	bne.n	800bc6a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bc1a:	7afb      	ldrb	r3, [r7, #11]
 800bc1c:	f003 0304 	and.w	r3, r3, #4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d122      	bne.n	800bc6a <follow_path+0xd2>
 800bc24:	2305      	movs	r3, #5
 800bc26:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bc28:	e01f      	b.n	800bc6a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc2a:	7afb      	ldrb	r3, [r7, #11]
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d11c      	bne.n	800bc6e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	799b      	ldrb	r3, [r3, #6]
 800bc38:	f003 0310 	and.w	r3, r3, #16
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d102      	bne.n	800bc46 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bc40:	2305      	movs	r3, #5
 800bc42:	75fb      	strb	r3, [r7, #23]
 800bc44:	e014      	b.n	800bc70 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc54:	4413      	add	r3, r2
 800bc56:	4619      	mov	r1, r3
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f7ff fde6 	bl	800b82a <ld_clust>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc64:	e7c0      	b.n	800bbe8 <follow_path+0x50>
			if (res != FR_OK) break;
 800bc66:	bf00      	nop
 800bc68:	e002      	b.n	800bc70 <follow_path+0xd8>
				break;
 800bc6a:	bf00      	nop
 800bc6c:	e000      	b.n	800bc70 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc6e:	bf00      	nop
			}
		}
	}

	return res;
 800bc70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b087      	sub	sp, #28
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d031      	beq.n	800bcf4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e002      	b.n	800bc9e <get_ldnumber+0x24>
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	617b      	str	r3, [r7, #20]
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	2b20      	cmp	r3, #32
 800bca4:	d903      	bls.n	800bcae <get_ldnumber+0x34>
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b3a      	cmp	r3, #58	; 0x3a
 800bcac:	d1f4      	bne.n	800bc98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b3a      	cmp	r3, #58	; 0x3a
 800bcb4:	d11c      	bne.n	800bcf0 <get_ldnumber+0x76>
			tp = *path;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	1c5a      	adds	r2, r3, #1
 800bcc0:	60fa      	str	r2, [r7, #12]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	3b30      	subs	r3, #48	; 0x30
 800bcc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	2b09      	cmp	r3, #9
 800bccc:	d80e      	bhi.n	800bcec <get_ldnumber+0x72>
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d10a      	bne.n	800bcec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d107      	bne.n	800bcec <get_ldnumber+0x72>
					vol = (int)i;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	3301      	adds	r3, #1
 800bce4:	617b      	str	r3, [r7, #20]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	e002      	b.n	800bcf6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bcf4:	693b      	ldr	r3, [r7, #16]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	371c      	adds	r7, #28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
	...

0800bd04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	70da      	strb	r2, [r3, #3]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd1a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff f87c 	bl	800ae1c <move_window>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <check_fs+0x2a>
 800bd2a:	2304      	movs	r3, #4
 800bd2c:	e038      	b.n	800bda0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3330      	adds	r3, #48	; 0x30
 800bd32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fdc0 	bl	800a8bc <ld_word>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d001      	beq.n	800bd4c <check_fs+0x48>
 800bd48:	2303      	movs	r3, #3
 800bd4a:	e029      	b.n	800bda0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd52:	2be9      	cmp	r3, #233	; 0xe9
 800bd54:	d009      	beq.n	800bd6a <check_fs+0x66>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd5c:	2beb      	cmp	r3, #235	; 0xeb
 800bd5e:	d11e      	bne.n	800bd9e <check_fs+0x9a>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bd66:	2b90      	cmp	r3, #144	; 0x90
 800bd68:	d119      	bne.n	800bd9e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3330      	adds	r3, #48	; 0x30
 800bd6e:	3336      	adds	r3, #54	; 0x36
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe fdbb 	bl	800a8ec <ld_dword>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd7c:	4a0a      	ldr	r2, [pc, #40]	; (800bda8 <check_fs+0xa4>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d101      	bne.n	800bd86 <check_fs+0x82>
 800bd82:	2300      	movs	r3, #0
 800bd84:	e00c      	b.n	800bda0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	3330      	adds	r3, #48	; 0x30
 800bd8a:	3352      	adds	r3, #82	; 0x52
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe fdad 	bl	800a8ec <ld_dword>
 800bd92:	4603      	mov	r3, r0
 800bd94:	4a05      	ldr	r2, [pc, #20]	; (800bdac <check_fs+0xa8>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d101      	bne.n	800bd9e <check_fs+0x9a>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	e000      	b.n	800bda0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bd9e:	2302      	movs	r3, #2
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	00544146 	.word	0x00544146
 800bdac:	33544146 	.word	0x33544146

0800bdb0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b096      	sub	sp, #88	; 0x58
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f7ff ff58 	bl	800bc7a <get_ldnumber>
 800bdca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	da01      	bge.n	800bdd6 <find_volume+0x26>
 800bdd2:	230b      	movs	r3, #11
 800bdd4:	e22d      	b.n	800c232 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bdd6:	4aa1      	ldr	r2, [pc, #644]	; (800c05c <find_volume+0x2ac>)
 800bdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdde:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <find_volume+0x3a>
 800bde6:	230c      	movs	r3, #12
 800bde8:	e223      	b.n	800c232 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	f023 0301 	bic.w	r3, r3, #1
 800bdf6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d01a      	beq.n	800be36 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	785b      	ldrb	r3, [r3, #1]
 800be04:	4618      	mov	r0, r3
 800be06:	f7fe fcbb 	bl	800a780 <disk_status>
 800be0a:	4603      	mov	r3, r0
 800be0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800be10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be14:	f003 0301 	and.w	r3, r3, #1
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10c      	bne.n	800be36 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d007      	beq.n	800be32 <find_volume+0x82>
 800be22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be26:	f003 0304 	and.w	r3, r3, #4
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800be2e:	230a      	movs	r3, #10
 800be30:	e1ff      	b.n	800c232 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800be32:	2300      	movs	r3, #0
 800be34:	e1fd      	b.n	800c232 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be38:	2200      	movs	r2, #0
 800be3a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be42:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	785b      	ldrb	r3, [r3, #1]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fcb3 	bl	800a7b4 <disk_initialize>
 800be4e:	4603      	mov	r3, r0
 800be50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800be54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800be60:	2303      	movs	r3, #3
 800be62:	e1e6      	b.n	800c232 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be64:	79fb      	ldrb	r3, [r7, #7]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d007      	beq.n	800be7a <find_volume+0xca>
 800be6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be6e:	f003 0304 	and.w	r3, r3, #4
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800be76:	230a      	movs	r3, #10
 800be78:	e1db      	b.n	800c232 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800be7a:	2300      	movs	r3, #0
 800be7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be82:	f7ff ff3f 	bl	800bd04 <check_fs>
 800be86:	4603      	mov	r3, r0
 800be88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be90:	2b02      	cmp	r3, #2
 800be92:	d149      	bne.n	800bf28 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be94:	2300      	movs	r3, #0
 800be96:	643b      	str	r3, [r7, #64]	; 0x40
 800be98:	e01e      	b.n	800bed8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea2:	011b      	lsls	r3, r3, #4
 800bea4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bea8:	4413      	add	r3, r2
 800beaa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	3304      	adds	r3, #4
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d006      	beq.n	800bec4 <find_volume+0x114>
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	3308      	adds	r3, #8
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe fd16 	bl	800a8ec <ld_dword>
 800bec0:	4602      	mov	r2, r0
 800bec2:	e000      	b.n	800bec6 <find_volume+0x116>
 800bec4:	2200      	movs	r2, #0
 800bec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	3358      	adds	r3, #88	; 0x58
 800becc:	443b      	add	r3, r7
 800bece:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed4:	3301      	adds	r3, #1
 800bed6:	643b      	str	r3, [r7, #64]	; 0x40
 800bed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d9dd      	bls.n	800be9a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bede:	2300      	movs	r3, #0
 800bee0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <find_volume+0x13e>
 800bee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beea:	3b01      	subs	r3, #1
 800beec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800beee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	3358      	adds	r3, #88	; 0x58
 800bef4:	443b      	add	r3, r7
 800bef6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800befa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800befc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d005      	beq.n	800bf0e <find_volume+0x15e>
 800bf02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf06:	f7ff fefd 	bl	800bd04 <check_fs>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	e000      	b.n	800bf10 <find_volume+0x160>
 800bf0e:	2303      	movs	r3, #3
 800bf10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d905      	bls.n	800bf28 <find_volume+0x178>
 800bf1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf1e:	3301      	adds	r3, #1
 800bf20:	643b      	str	r3, [r7, #64]	; 0x40
 800bf22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d9e2      	bls.n	800beee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	d101      	bne.n	800bf34 <find_volume+0x184>
 800bf30:	2301      	movs	r3, #1
 800bf32:	e17e      	b.n	800c232 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d901      	bls.n	800bf40 <find_volume+0x190>
 800bf3c:	230d      	movs	r3, #13
 800bf3e:	e178      	b.n	800c232 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	3330      	adds	r3, #48	; 0x30
 800bf44:	330b      	adds	r3, #11
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe fcb8 	bl	800a8bc <ld_word>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf52:	d001      	beq.n	800bf58 <find_volume+0x1a8>
 800bf54:	230d      	movs	r3, #13
 800bf56:	e16c      	b.n	800c232 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5a:	3330      	adds	r3, #48	; 0x30
 800bf5c:	3316      	adds	r3, #22
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fcac 	bl	800a8bc <ld_word>
 800bf64:	4603      	mov	r3, r0
 800bf66:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bf68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <find_volume+0x1cc>
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	3330      	adds	r3, #48	; 0x30
 800bf72:	3324      	adds	r3, #36	; 0x24
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fcb9 	bl	800a8ec <ld_dword>
 800bf7a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf80:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	789b      	ldrb	r3, [r3, #2]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d005      	beq.n	800bfa0 <find_volume+0x1f0>
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	789b      	ldrb	r3, [r3, #2]
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d001      	beq.n	800bfa0 <find_volume+0x1f0>
 800bf9c:	230d      	movs	r3, #13
 800bf9e:	e148      	b.n	800c232 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	789b      	ldrb	r3, [r3, #2]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa8:	fb02 f303 	mul.w	r3, r2, r3
 800bfac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	895b      	ldrh	r3, [r3, #10]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d008      	beq.n	800bfd4 <find_volume+0x224>
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	895b      	ldrh	r3, [r3, #10]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	895b      	ldrh	r3, [r3, #10]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	4013      	ands	r3, r2
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <find_volume+0x228>
 800bfd4:	230d      	movs	r3, #13
 800bfd6:	e12c      	b.n	800c232 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	3330      	adds	r3, #48	; 0x30
 800bfdc:	3311      	adds	r3, #17
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fc6c 	bl	800a8bc <ld_word>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfee:	891b      	ldrh	r3, [r3, #8]
 800bff0:	f003 030f 	and.w	r3, r3, #15
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <find_volume+0x24e>
 800bffa:	230d      	movs	r3, #13
 800bffc:	e119      	b.n	800c232 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	3330      	adds	r3, #48	; 0x30
 800c002:	3313      	adds	r3, #19
 800c004:	4618      	mov	r0, r3
 800c006:	f7fe fc59 	bl	800a8bc <ld_word>
 800c00a:	4603      	mov	r3, r0
 800c00c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <find_volume+0x272>
 800c014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c016:	3330      	adds	r3, #48	; 0x30
 800c018:	3320      	adds	r3, #32
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fc66 	bl	800a8ec <ld_dword>
 800c020:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	3330      	adds	r3, #48	; 0x30
 800c026:	330e      	adds	r3, #14
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fc47 	bl	800a8bc <ld_word>
 800c02e:	4603      	mov	r3, r0
 800c030:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c032:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <find_volume+0x28c>
 800c038:	230d      	movs	r3, #13
 800c03a:	e0fa      	b.n	800c232 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c03c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c040:	4413      	add	r3, r2
 800c042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c044:	8912      	ldrh	r2, [r2, #8]
 800c046:	0912      	lsrs	r2, r2, #4
 800c048:	b292      	uxth	r2, r2
 800c04a:	4413      	add	r3, r2
 800c04c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c04e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	429a      	cmp	r2, r3
 800c054:	d204      	bcs.n	800c060 <find_volume+0x2b0>
 800c056:	230d      	movs	r3, #13
 800c058:	e0eb      	b.n	800c232 <find_volume+0x482>
 800c05a:	bf00      	nop
 800c05c:	20000358 	.word	0x20000358
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c068:	8952      	ldrh	r2, [r2, #10]
 800c06a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <find_volume+0x2ca>
 800c076:	230d      	movs	r3, #13
 800c078:	e0db      	b.n	800c232 <find_volume+0x482>
		fmt = FS_FAT32;
 800c07a:	2303      	movs	r3, #3
 800c07c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c086:	4293      	cmp	r3, r2
 800c088:	d802      	bhi.n	800c090 <find_volume+0x2e0>
 800c08a:	2302      	movs	r3, #2
 800c08c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c096:	4293      	cmp	r3, r2
 800c098:	d802      	bhi.n	800c0a0 <find_volume+0x2f0>
 800c09a:	2301      	movs	r3, #1
 800c09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	1c9a      	adds	r2, r3, #2
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0ac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c0ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b2:	441a      	add	r2, r3
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c0b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0bc:	441a      	add	r2, r3
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c0c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d11e      	bne.n	800c108 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	3330      	adds	r3, #48	; 0x30
 800c0ce:	332a      	adds	r3, #42	; 0x2a
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe fbf3 	bl	800a8bc <ld_word>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <find_volume+0x330>
 800c0dc:	230d      	movs	r3, #13
 800c0de:	e0a8      	b.n	800c232 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	891b      	ldrh	r3, [r3, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <find_volume+0x33c>
 800c0e8:	230d      	movs	r3, #13
 800c0ea:	e0a2      	b.n	800c232 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	3330      	adds	r3, #48	; 0x30
 800c0f0:	332c      	adds	r3, #44	; 0x2c
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fbfa 	bl	800a8ec <ld_dword>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	647b      	str	r3, [r7, #68]	; 0x44
 800c106:	e01f      	b.n	800c148 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	891b      	ldrh	r3, [r3, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <find_volume+0x364>
 800c110:	230d      	movs	r3, #13
 800c112:	e08e      	b.n	800c232 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	6a1a      	ldr	r2, [r3, #32]
 800c118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c11a:	441a      	add	r2, r3
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c124:	2b02      	cmp	r3, #2
 800c126:	d103      	bne.n	800c130 <find_volume+0x380>
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	e00a      	b.n	800c146 <find_volume+0x396>
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	695a      	ldr	r2, [r3, #20]
 800c134:	4613      	mov	r3, r2
 800c136:	005b      	lsls	r3, r3, #1
 800c138:	4413      	add	r3, r2
 800c13a:	085a      	lsrs	r2, r3, #1
 800c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13e:	695b      	ldr	r3, [r3, #20]
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c146:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	699a      	ldr	r2, [r3, #24]
 800c14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c14e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c152:	0a5b      	lsrs	r3, r3, #9
 800c154:	429a      	cmp	r2, r3
 800c156:	d201      	bcs.n	800c15c <find_volume+0x3ac>
 800c158:	230d      	movs	r3, #13
 800c15a:	e06a      	b.n	800c232 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c162:	611a      	str	r2, [r3, #16]
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	691a      	ldr	r2, [r3, #16]
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16e:	2280      	movs	r2, #128	; 0x80
 800c170:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c172:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c176:	2b03      	cmp	r3, #3
 800c178:	d149      	bne.n	800c20e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17c:	3330      	adds	r3, #48	; 0x30
 800c17e:	3330      	adds	r3, #48	; 0x30
 800c180:	4618      	mov	r0, r3
 800c182:	f7fe fb9b 	bl	800a8bc <ld_word>
 800c186:	4603      	mov	r3, r0
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d140      	bne.n	800c20e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18e:	3301      	adds	r3, #1
 800c190:	4619      	mov	r1, r3
 800c192:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c194:	f7fe fe42 	bl	800ae1c <move_window>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d137      	bne.n	800c20e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a6:	3330      	adds	r3, #48	; 0x30
 800c1a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fe fb85 	bl	800a8bc <ld_word>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d127      	bne.n	800c20e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	3330      	adds	r3, #48	; 0x30
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fe fb92 	bl	800a8ec <ld_dword>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	4a1c      	ldr	r2, [pc, #112]	; (800c23c <find_volume+0x48c>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d11e      	bne.n	800c20e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	3330      	adds	r3, #48	; 0x30
 800c1d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe fb87 	bl	800a8ec <ld_dword>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	4a17      	ldr	r2, [pc, #92]	; (800c240 <find_volume+0x490>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d113      	bne.n	800c20e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	3330      	adds	r3, #48	; 0x30
 800c1ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fb7c 	bl	800a8ec <ld_dword>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	3330      	adds	r3, #48	; 0x30
 800c1fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fb72 	bl	800a8ec <ld_dword>
 800c208:	4602      	mov	r2, r0
 800c20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c214:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c216:	4b0b      	ldr	r3, [pc, #44]	; (800c244 <find_volume+0x494>)
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	3301      	adds	r3, #1
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	4b09      	ldr	r3, [pc, #36]	; (800c244 <find_volume+0x494>)
 800c220:	801a      	strh	r2, [r3, #0]
 800c222:	4b08      	ldr	r3, [pc, #32]	; (800c244 <find_volume+0x494>)
 800c224:	881a      	ldrh	r2, [r3, #0]
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c22a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c22c:	f7fe fd8e 	bl	800ad4c <clear_lock>
#endif
	return FR_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3758      	adds	r7, #88	; 0x58
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	41615252 	.word	0x41615252
 800c240:	61417272 	.word	0x61417272
 800c244:	2000035c 	.word	0x2000035c

0800c248 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c252:	2309      	movs	r3, #9
 800c254:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01c      	beq.n	800c296 <validate+0x4e>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d018      	beq.n	800c296 <validate+0x4e>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d013      	beq.n	800c296 <validate+0x4e>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	889a      	ldrh	r2, [r3, #4]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	88db      	ldrh	r3, [r3, #6]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d10c      	bne.n	800c296 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	785b      	ldrb	r3, [r3, #1]
 800c282:	4618      	mov	r0, r3
 800c284:	f7fe fa7c 	bl	800a780 <disk_status>
 800c288:	4603      	mov	r3, r0
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <validate+0x4e>
			res = FR_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d102      	bne.n	800c2a2 <validate+0x5a>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	e000      	b.n	800c2a4 <validate+0x5c>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	6013      	str	r3, [r2, #0]
	return res;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c2c6:	f107 0310 	add.w	r3, r7, #16
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff fcd5 	bl	800bc7a <get_ldnumber>
 800c2d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	da01      	bge.n	800c2dc <f_mount+0x28>
 800c2d8:	230b      	movs	r3, #11
 800c2da:	e02b      	b.n	800c334 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c2dc:	4a17      	ldr	r2, [pc, #92]	; (800c33c <f_mount+0x88>)
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d005      	beq.n	800c2f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c2ec:	69b8      	ldr	r0, [r7, #24]
 800c2ee:	f7fe fd2d 	bl	800ad4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2200      	movs	r2, #0
 800c302:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	490d      	ldr	r1, [pc, #52]	; (800c33c <f_mount+0x88>)
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <f_mount+0x66>
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d001      	beq.n	800c31e <f_mount+0x6a>
 800c31a:	2300      	movs	r3, #0
 800c31c:	e00a      	b.n	800c334 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c31e:	f107 010c 	add.w	r1, r7, #12
 800c322:	f107 0308 	add.w	r3, r7, #8
 800c326:	2200      	movs	r2, #0
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff fd41 	bl	800bdb0 <find_volume>
 800c32e:	4603      	mov	r3, r0
 800c330:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c332:	7dfb      	ldrb	r3, [r7, #23]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3720      	adds	r7, #32
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20000358 	.word	0x20000358

0800c340 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b098      	sub	sp, #96	; 0x60
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	4613      	mov	r3, r2
 800c34c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <f_open+0x18>
 800c354:	2309      	movs	r3, #9
 800c356:	e1ad      	b.n	800c6b4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c35e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c360:	79fa      	ldrb	r2, [r7, #7]
 800c362:	f107 0110 	add.w	r1, r7, #16
 800c366:	f107 0308 	add.w	r3, r7, #8
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff fd20 	bl	800bdb0 <find_volume>
 800c370:	4603      	mov	r3, r0
 800c372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f040 8191 	bne.w	800c6a2 <f_open+0x362>
		dj.obj.fs = fs;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	f107 0314 	add.w	r3, r7, #20
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff fc03 	bl	800bb98 <follow_path>
 800c392:	4603      	mov	r3, r0
 800c394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d11a      	bne.n	800c3d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c3a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3a4:	b25b      	sxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	da03      	bge.n	800c3b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c3aa:	2306      	movs	r3, #6
 800c3ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c3b0:	e011      	b.n	800c3d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3b2:	79fb      	ldrb	r3, [r7, #7]
 800c3b4:	f023 0301 	bic.w	r3, r3, #1
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	bf14      	ite	ne
 800c3bc:	2301      	movne	r3, #1
 800c3be:	2300      	moveq	r3, #0
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	f107 0314 	add.w	r3, r7, #20
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fe fb76 	bl	800aabc <chk_lock>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c3d6:	79fb      	ldrb	r3, [r7, #7]
 800c3d8:	f003 031c 	and.w	r3, r3, #28
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d07f      	beq.n	800c4e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c3e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d017      	beq.n	800c418 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c3e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d10e      	bne.n	800c40e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3f0:	f7fe fbc0 	bl	800ab74 <enq_lock>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d006      	beq.n	800c408 <f_open+0xc8>
 800c3fa:	f107 0314 	add.w	r3, r7, #20
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff fb04 	bl	800ba0c <dir_register>
 800c404:	4603      	mov	r3, r0
 800c406:	e000      	b.n	800c40a <f_open+0xca>
 800c408:	2312      	movs	r3, #18
 800c40a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	f043 0308 	orr.w	r3, r3, #8
 800c414:	71fb      	strb	r3, [r7, #7]
 800c416:	e010      	b.n	800c43a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c418:	7ebb      	ldrb	r3, [r7, #26]
 800c41a:	f003 0311 	and.w	r3, r3, #17
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d003      	beq.n	800c42a <f_open+0xea>
					res = FR_DENIED;
 800c422:	2307      	movs	r3, #7
 800c424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c428:	e007      	b.n	800c43a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <f_open+0xfa>
 800c434:	2308      	movs	r3, #8
 800c436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c43a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d168      	bne.n	800c514 <f_open+0x1d4>
 800c442:	79fb      	ldrb	r3, [r7, #7]
 800c444:	f003 0308 	and.w	r3, r3, #8
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d063      	beq.n	800c514 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c44c:	f7fe f81e 	bl	800a48c <get_fattime>
 800c450:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c454:	330e      	adds	r3, #14
 800c456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fe fa85 	bl	800a968 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c460:	3316      	adds	r3, #22
 800c462:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c464:	4618      	mov	r0, r3
 800c466:	f7fe fa7f 	bl	800a968 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	330b      	adds	r3, #11
 800c46e:	2220      	movs	r2, #32
 800c470:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff f9d6 	bl	800b82a <ld_clust>
 800c47e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c484:	2200      	movs	r2, #0
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff f9ee 	bl	800b868 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48e:	331c      	adds	r3, #28
 800c490:	2100      	movs	r1, #0
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe fa68 	bl	800a968 <st_dword>
					fs->wflag = 1;
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	2201      	movs	r2, #1
 800c49c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d037      	beq.n	800c514 <f_open+0x1d4>
						dw = fs->winsect;
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c4aa:	f107 0314 	add.w	r3, r7, #20
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fe ff01 	bl	800b2ba <remove_chain>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c4be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d126      	bne.n	800c514 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fe fca6 	bl	800ae1c <move_window>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4da:	3a01      	subs	r2, #1
 800c4dc:	60da      	str	r2, [r3, #12]
 800c4de:	e019      	b.n	800c514 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c4e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d115      	bne.n	800c514 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c4e8:	7ebb      	ldrb	r3, [r7, #26]
 800c4ea:	f003 0310 	and.w	r3, r3, #16
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <f_open+0x1ba>
					res = FR_NO_FILE;
 800c4f2:	2304      	movs	r3, #4
 800c4f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c4f8:	e00c      	b.n	800c514 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d007      	beq.n	800c514 <f_open+0x1d4>
 800c504:	7ebb      	ldrb	r3, [r7, #26]
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <f_open+0x1d4>
						res = FR_DENIED;
 800c50e:	2307      	movs	r3, #7
 800c510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d128      	bne.n	800c56e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c51c:	79fb      	ldrb	r3, [r7, #7]
 800c51e:	f003 0308 	and.w	r3, r3, #8
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c52c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	f023 0301 	bic.w	r3, r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	bf14      	ite	ne
 800c546:	2301      	movne	r3, #1
 800c548:	2300      	moveq	r3, #0
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	461a      	mov	r2, r3
 800c54e:	f107 0314 	add.w	r3, r7, #20
 800c552:	4611      	mov	r1, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7fe fb2f 	bl	800abb8 <inc_lock>
 800c55a:	4602      	mov	r2, r0
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <f_open+0x22e>
 800c568:	2302      	movs	r3, #2
 800c56a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c56e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c572:	2b00      	cmp	r3, #0
 800c574:	f040 8095 	bne.w	800c6a2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c57c:	4611      	mov	r1, r2
 800c57e:	4618      	mov	r0, r3
 800c580:	f7ff f953 	bl	800b82a <ld_clust>
 800c584:	4602      	mov	r2, r0
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58c:	331c      	adds	r3, #28
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe f9ac 	bl	800a8ec <ld_dword>
 800c594:	4602      	mov	r2, r0
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	88da      	ldrh	r2, [r3, #6]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	79fa      	ldrb	r2, [r7, #7]
 800c5b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3330      	adds	r3, #48	; 0x30
 800c5ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fe fa16 	bl	800aa02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c5d6:	79fb      	ldrb	r3, [r7, #7]
 800c5d8:	f003 0320 	and.w	r3, r3, #32
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d060      	beq.n	800c6a2 <f_open+0x362>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d05c      	beq.n	800c6a2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	68da      	ldr	r2, [r3, #12]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	895b      	ldrh	r3, [r3, #10]
 800c5f4:	025b      	lsls	r3, r3, #9
 800c5f6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	657b      	str	r3, [r7, #84]	; 0x54
 800c604:	e016      	b.n	800c634 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe fcc1 	bl	800af92 <get_fat>
 800c610:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c614:	2b01      	cmp	r3, #1
 800c616:	d802      	bhi.n	800c61e <f_open+0x2de>
 800c618:	2302      	movs	r3, #2
 800c61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c61e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c624:	d102      	bne.n	800c62c <f_open+0x2ec>
 800c626:	2301      	movs	r3, #1
 800c628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c62c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	657b      	str	r3, [r7, #84]	; 0x54
 800c634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d103      	bne.n	800c644 <f_open+0x304>
 800c63c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c640:	429a      	cmp	r2, r3
 800c642:	d8e0      	bhi.n	800c606 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c648:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d127      	bne.n	800c6a2 <f_open+0x362>
 800c652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d022      	beq.n	800c6a2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c660:	4618      	mov	r0, r3
 800c662:	f7fe fc77 	bl	800af54 <clust2sect>
 800c666:	6478      	str	r0, [r7, #68]	; 0x44
 800c668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d103      	bne.n	800c676 <f_open+0x336>
						res = FR_INT_ERR;
 800c66e:	2302      	movs	r3, #2
 800c670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c674:	e015      	b.n	800c6a2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c678:	0a5a      	lsrs	r2, r3, #9
 800c67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c67c:	441a      	add	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	7858      	ldrb	r0, [r3, #1]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6a1a      	ldr	r2, [r3, #32]
 800c690:	2301      	movs	r3, #1
 800c692:	f7fe f8b5 	bl	800a800 <disk_read>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <f_open+0x362>
 800c69c:	2301      	movs	r3, #1
 800c69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d002      	beq.n	800c6b0 <f_open+0x370>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c6b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3760      	adds	r7, #96	; 0x60
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b08c      	sub	sp, #48	; 0x30
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f107 0210 	add.w	r2, r7, #16
 800c6da:	4611      	mov	r1, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff fdb3 	bl	800c248 <validate>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d107      	bne.n	800c700 <f_write+0x44>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	7d5b      	ldrb	r3, [r3, #21]
 800c6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <f_write+0x4a>
 800c700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c704:	e14b      	b.n	800c99e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	7d1b      	ldrb	r3, [r3, #20]
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <f_write+0x5a>
 800c712:	2307      	movs	r3, #7
 800c714:	e143      	b.n	800c99e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	699a      	ldr	r2, [r3, #24]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	441a      	add	r2, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	429a      	cmp	r2, r3
 800c724:	f080 812d 	bcs.w	800c982 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	43db      	mvns	r3, r3
 800c72e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c730:	e127      	b.n	800c982 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f040 80e3 	bne.w	800c906 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	0a5b      	lsrs	r3, r3, #9
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	8952      	ldrh	r2, [r2, #10]
 800c74a:	3a01      	subs	r2, #1
 800c74c:	4013      	ands	r3, r2
 800c74e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d143      	bne.n	800c7de <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	699b      	ldr	r3, [r3, #24]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10c      	bne.n	800c778 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	2b00      	cmp	r3, #0
 800c768:	d11a      	bne.n	800c7a0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2100      	movs	r1, #0
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fe fe08 	bl	800b384 <create_chain>
 800c774:	62b8      	str	r0, [r7, #40]	; 0x28
 800c776:	e013      	b.n	800c7a0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d007      	beq.n	800c790 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	4619      	mov	r1, r3
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7fe fe94 	bl	800b4b4 <clmt_clust>
 800c78c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c78e:	e007      	b.n	800c7a0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	4619      	mov	r1, r3
 800c798:	4610      	mov	r0, r2
 800c79a:	f7fe fdf3 	bl	800b384 <create_chain>
 800c79e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f000 80f2 	beq.w	800c98c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d104      	bne.n	800c7b8 <f_write+0xfc>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	755a      	strb	r2, [r3, #21]
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	e0f2      	b.n	800c99e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7be:	d104      	bne.n	800c7ca <f_write+0x10e>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	755a      	strb	r2, [r3, #21]
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e0e9      	b.n	800c99e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ce:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <f_write+0x122>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7dc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	7d1b      	ldrb	r3, [r3, #20]
 800c7e2:	b25b      	sxtb	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	da18      	bge.n	800c81a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	7858      	ldrb	r0, [r3, #1]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6a1a      	ldr	r2, [r3, #32]
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	f7fe f822 	bl	800a840 <disk_write>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d004      	beq.n	800c80c <f_write+0x150>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2201      	movs	r2, #1
 800c806:	755a      	strb	r2, [r3, #21]
 800c808:	2301      	movs	r3, #1
 800c80a:	e0c8      	b.n	800c99e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	7d1b      	ldrb	r3, [r3, #20]
 800c810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c814:	b2da      	uxtb	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c81a:	693a      	ldr	r2, [r7, #16]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	69db      	ldr	r3, [r3, #28]
 800c820:	4619      	mov	r1, r3
 800c822:	4610      	mov	r0, r2
 800c824:	f7fe fb96 	bl	800af54 <clust2sect>
 800c828:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d104      	bne.n	800c83a <f_write+0x17e>
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2202      	movs	r2, #2
 800c834:	755a      	strb	r2, [r3, #21]
 800c836:	2302      	movs	r3, #2
 800c838:	e0b1      	b.n	800c99e <f_write+0x2e2>
			sect += csect;
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	4413      	add	r3, r2
 800c840:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	0a5b      	lsrs	r3, r3, #9
 800c846:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c848:	6a3b      	ldr	r3, [r7, #32]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d03c      	beq.n	800c8c8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	6a3b      	ldr	r3, [r7, #32]
 800c852:	4413      	add	r3, r2
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	8952      	ldrh	r2, [r2, #10]
 800c858:	4293      	cmp	r3, r2
 800c85a:	d905      	bls.n	800c868 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	895b      	ldrh	r3, [r3, #10]
 800c860:	461a      	mov	r2, r3
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	7858      	ldrb	r0, [r3, #1]
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	69f9      	ldr	r1, [r7, #28]
 800c872:	f7fd ffe5 	bl	800a840 <disk_write>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d004      	beq.n	800c886 <f_write+0x1ca>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	755a      	strb	r2, [r3, #21]
 800c882:	2301      	movs	r3, #1
 800c884:	e08b      	b.n	800c99e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6a1a      	ldr	r2, [r3, #32]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	6a3a      	ldr	r2, [r7, #32]
 800c890:	429a      	cmp	r2, r3
 800c892:	d915      	bls.n	800c8c0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6a1a      	ldr	r2, [r3, #32]
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	025b      	lsls	r3, r3, #9
 800c8a4:	69fa      	ldr	r2, [r7, #28]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	f7fe f887 	bl	800a9c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	7d1b      	ldrb	r3, [r3, #20]
 800c8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	025b      	lsls	r3, r3, #9
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8c6:	e03f      	b.n	800c948 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d016      	beq.n	800c900 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	699a      	ldr	r2, [r3, #24]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d210      	bcs.n	800c900 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	7858      	ldrb	r0, [r3, #1]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	f7fd ff88 	bl	800a800 <disk_read>
 800c8f0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	755a      	strb	r2, [r3, #21]
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e04e      	b.n	800c99e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d901      	bls.n	800c920 <f_write+0x264>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c92e:	4413      	add	r3, r2
 800c930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c932:	69f9      	ldr	r1, [r7, #28]
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe f843 	bl	800a9c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	7d1b      	ldrb	r3, [r3, #20]
 800c93e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c942:	b2da      	uxtb	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c948:	69fa      	ldr	r2, [r7, #28]
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	4413      	add	r3, r2
 800c94e:	61fb      	str	r3, [r7, #28]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	699a      	ldr	r2, [r3, #24]
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	441a      	add	r2, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	619a      	str	r2, [r3, #24]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	68da      	ldr	r2, [r3, #12]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	429a      	cmp	r2, r3
 800c966:	bf38      	it	cc
 800c968:	461a      	movcc	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	60da      	str	r2, [r3, #12]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c974:	441a      	add	r2, r3
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f47f aed4 	bne.w	800c732 <f_write+0x76>
 800c98a:	e000      	b.n	800c98e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c98c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	7d1b      	ldrb	r3, [r3, #20]
 800c992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c996:	b2da      	uxtb	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3730      	adds	r7, #48	; 0x30
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b086      	sub	sp, #24
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f107 0208 	add.w	r2, r7, #8
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff fc46 	bl	800c248 <validate>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d168      	bne.n	800ca98 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7d1b      	ldrb	r3, [r3, #20]
 800c9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d062      	beq.n	800ca98 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	7d1b      	ldrb	r3, [r3, #20]
 800c9d6:	b25b      	sxtb	r3, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	da15      	bge.n	800ca08 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	7858      	ldrb	r0, [r3, #1]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a1a      	ldr	r2, [r3, #32]
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	f7fd ff28 	bl	800a840 <disk_write>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <f_sync+0x54>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e04f      	b.n	800ca9a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	7d1b      	ldrb	r3, [r3, #20]
 800c9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca08:	f7fd fd40 	bl	800a48c <get_fattime>
 800ca0c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca14:	4619      	mov	r1, r3
 800ca16:	4610      	mov	r0, r2
 800ca18:	f7fe fa00 	bl	800ae1c <move_window>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d138      	bne.n	800ca98 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	330b      	adds	r3, #11
 800ca30:	781a      	ldrb	r2, [r3, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	330b      	adds	r3, #11
 800ca36:	f042 0220 	orr.w	r2, r2, #32
 800ca3a:	b2d2      	uxtb	r2, r2
 800ca3c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	461a      	mov	r2, r3
 800ca48:	68f9      	ldr	r1, [r7, #12]
 800ca4a:	f7fe ff0d 	bl	800b868 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f103 021c 	add.w	r2, r3, #28
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	f7fd ff84 	bl	800a968 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3316      	adds	r3, #22
 800ca64:	6939      	ldr	r1, [r7, #16]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fd ff7e 	bl	800a968 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3312      	adds	r3, #18
 800ca70:	2100      	movs	r1, #0
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fd ff5d 	bl	800a932 <st_word>
					fs->wflag = 1;
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe f9f9 	bl	800ae78 <sync_fs>
 800ca86:	4603      	mov	r3, r0
 800ca88:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	7d1b      	ldrb	r3, [r3, #20]
 800ca8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff ff7b 	bl	800c9a6 <f_sync>
 800cab0:	4603      	mov	r3, r0
 800cab2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d118      	bne.n	800caec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f107 0208 	add.w	r2, r7, #8
 800cac0:	4611      	mov	r1, r2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff fbc0 	bl	800c248 <validate>
 800cac8:	4603      	mov	r3, r0
 800caca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10c      	bne.n	800caec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe f8fc 	bl	800acd4 <dec_lock>
 800cadc:	4603      	mov	r3, r0
 800cade:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Path name of the logical drive number */
	TCHAR* label,		/* Pointer to a buffer to return the volume label */
	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b094      	sub	sp, #80	; 0x50
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	607a      	str	r2, [r7, #4]
#if _LFN_UNICODE || _FS_EXFAT
	WCHAR w;
#endif

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cb02:	f107 0110 	add.w	r1, r7, #16
 800cb06:	f107 030c 	add.w	r3, r7, #12
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff f94f 	bl	800bdb0 <find_volume>
 800cb12:	4603      	mov	r3, r0
 800cb14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	/* Get volume label */
	if (res == FR_OK && label) {
 800cb18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d150      	bne.n	800cbc2 <f_getlabel+0xcc>
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d04d      	beq.n	800cbc2 <f_getlabel+0xcc>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	617b      	str	r3, [r7, #20]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	61fb      	str	r3, [r7, #28]
		res = dir_sdi(&dj, 0);
 800cb2e:	f107 0314 	add.w	r3, r7, #20
 800cb32:	2100      	movs	r1, #0
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fe fcf1 	bl	800b51c <dir_sdi>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (res == FR_OK) {
 800cb40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d132      	bne.n	800cbae <f_getlabel+0xb8>
		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
 800cb48:	f107 0314 	add.w	r3, r7, #20
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe feaa 	bl	800b8a8 <dir_read>
 800cb54:	4603      	mov	r3, r0
 800cb56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		 	if (res == FR_OK) {
 800cb5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d125      	bne.n	800cbae <f_getlabel+0xb8>
					}
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
 800cb62:	2300      	movs	r3, #0
 800cb64:	647b      	str	r3, [r7, #68]	; 0x44
 800cb66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb68:	64bb      	str	r3, [r7, #72]	; 0x48
						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
							w = w << 8 | dj.dir[si++];
						}
						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
#else
						label[di++] = dj.dir[si++];
 800cb6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb6e:	1c59      	adds	r1, r3, #1
 800cb70:	64b9      	str	r1, [r7, #72]	; 0x48
 800cb72:	441a      	add	r2, r3
 800cb74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb76:	1c59      	adds	r1, r3, #1
 800cb78:	6479      	str	r1, [r7, #68]	; 0x44
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	440b      	add	r3, r1
 800cb7e:	7812      	ldrb	r2, [r2, #0]
 800cb80:	701a      	strb	r2, [r3, #0]
#endif
					} while (di < 11);
 800cb82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb84:	2b0a      	cmp	r3, #10
 800cb86:	d9f0      	bls.n	800cb6a <f_getlabel+0x74>
					do {				/* Truncate trailing spaces */
						label[di] = 0;
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8c:	4413      	add	r3, r2
 800cb8e:	2200      	movs	r2, #0
 800cb90:	701a      	strb	r2, [r3, #0]
						if (di == 0) break;
 800cb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d009      	beq.n	800cbac <f_getlabel+0xb6>
					} while (label[--di] == ' ');
 800cb98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba2:	4413      	add	r3, r2
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	2b20      	cmp	r3, #32
 800cba8:	d0ee      	beq.n	800cb88 <f_getlabel+0x92>
 800cbaa:	e000      	b.n	800cbae <f_getlabel+0xb8>
						if (di == 0) break;
 800cbac:	bf00      	nop
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
 800cbae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbb2:	2b04      	cmp	r3, #4
 800cbb4:	d105      	bne.n	800cbc2 <f_getlabel+0xcc>
			label[0] = 0;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
			res = FR_OK;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
 800cbc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d129      	bne.n	800cc1e <f_getlabel+0x128>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d026      	beq.n	800cc1e <f_getlabel+0x128>
		res = move_window(fs, fs->volbase);
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7fe f91f 	bl	800ae1c <move_window>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (res == FR_OK) {
 800cbe4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d118      	bne.n	800cc1e <f_getlabel+0x128>
			switch (fs->fs_type) {
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b03      	cmp	r3, #3
 800cbf2:	d004      	beq.n	800cbfe <f_getlabel+0x108>
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d105      	bne.n	800cc04 <f_getlabel+0x10e>
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
 800cbf8:	2364      	movs	r3, #100	; 0x64
 800cbfa:	647b      	str	r3, [r7, #68]	; 0x44
 800cbfc:	e004      	b.n	800cc08 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;
 800cbfe:	2343      	movs	r3, #67	; 0x43
 800cc00:	647b      	str	r3, [r7, #68]	; 0x44
 800cc02:	e001      	b.n	800cc08 <f_getlabel+0x112>

			default:
				di = BS_VolID;
 800cc04:	2327      	movs	r3, #39	; 0x27
 800cc06:	647b      	str	r3, [r7, #68]	; 0x44
			}
			*vsn = ld_dword(fs->win + di);
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc10:	4413      	add	r3, r2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fd fe6a 	bl	800a8ec <ld_dword>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	601a      	str	r2, [r3, #0]
		}
	}

	LEAVE_FF(fs, res);
 800cc1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3750      	adds	r7, #80	; 0x50
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800cc2c:	b590      	push	{r4, r7, lr}
 800cc2e:	b09d      	sub	sp, #116	; 0x74
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	607a      	str	r2, [r7, #4]
 800cc36:	603b      	str	r3, [r7, #0]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800cc40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc44:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800cc46:	f107 030c 	add.w	r3, r7, #12
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff f815 	bl	800bc7a <get_ldnumber>
 800cc50:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	da02      	bge.n	800cc5e <f_mkfs+0x32>
 800cc58:	230b      	movs	r3, #11
 800cc5a:	f000 bc0d 	b.w	800d478 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800cc5e:	4a94      	ldr	r2, [pc, #592]	; (800ceb0 <f_mkfs+0x284>)
 800cc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d005      	beq.n	800cc76 <f_mkfs+0x4a>
 800cc6a:	4a91      	ldr	r2, [pc, #580]	; (800ceb0 <f_mkfs+0x284>)
 800cc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc72:	2200      	movs	r2, #0
 800cc74:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800cc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800cc82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fd fd94 	bl	800a7b4 <disk_initialize>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800cc92:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <f_mkfs+0x76>
 800cc9e:	2303      	movs	r3, #3
 800cca0:	e3ea      	b.n	800d478 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800cca2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cca6:	f003 0304 	and.w	r3, r3, #4
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <f_mkfs+0x86>
 800ccae:	230a      	movs	r3, #10
 800ccb0:	e3e2      	b.n	800d478 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800ccb2:	f107 0214 	add.w	r2, r7, #20
 800ccb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ccba:	2103      	movs	r1, #3
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fd fddf 	bl	800a880 <disk_ioctl>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10c      	bne.n	800cce2 <f_mkfs+0xb6>
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d009      	beq.n	800cce2 <f_mkfs+0xb6>
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccd4:	d805      	bhi.n	800cce2 <f_mkfs+0xb6>
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	1e5a      	subs	r2, r3, #1
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	4013      	ands	r3, r2
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d001      	beq.n	800cce6 <f_mkfs+0xba>
 800cce2:	2301      	movs	r3, #1
 800cce4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800cce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccea:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <f_mkfs+0xce>
 800ccf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d309      	bcc.n	800cd0e <f_mkfs+0xe2>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cd00:	d805      	bhi.n	800cd0e <f_mkfs+0xe2>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	1e5a      	subs	r2, r3, #1
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4013      	ands	r3, r2
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <f_mkfs+0xe6>
 800cd0e:	2313      	movs	r3, #19
 800cd10:	e3b2      	b.n	800d478 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800cd12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd1a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800cd20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd26:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800cd2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	fb02 f303 	mul.w	r3, r2, r3
 800cd34:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <f_mkfs+0x114>
 800cd3c:	230e      	movs	r3, #14
 800cd3e:	e39b      	b.n	800d478 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800cd40:	f107 0210 	add.w	r2, r7, #16
 800cd44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cd48:	2101      	movs	r1, #1
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fd fd98 	bl	800a880 <disk_ioctl>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <f_mkfs+0x12e>
 800cd56:	2301      	movs	r3, #1
 800cd58:	e38e      	b.n	800d478 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800cd5a:	7afb      	ldrb	r3, [r7, #11]
 800cd5c:	f003 0308 	and.w	r3, r3, #8
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <f_mkfs+0x13c>
 800cd64:	2300      	movs	r3, #0
 800cd66:	e000      	b.n	800cd6a <f_mkfs+0x13e>
 800cd68:	233f      	movs	r3, #63	; 0x3f
 800cd6a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d901      	bls.n	800cd78 <f_mkfs+0x14c>
 800cd74:	230e      	movs	r3, #14
 800cd76:	e37f      	b.n	800d478 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2b7f      	cmp	r3, #127	; 0x7f
 800cd84:	d801      	bhi.n	800cd8a <f_mkfs+0x15e>
 800cd86:	230e      	movs	r3, #14
 800cd88:	e376      	b.n	800d478 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b80      	cmp	r3, #128	; 0x80
 800cd8e:	d901      	bls.n	800cd94 <f_mkfs+0x168>
 800cd90:	2313      	movs	r3, #19
 800cd92:	e371      	b.n	800d478 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800cd94:	7afb      	ldrb	r3, [r7, #11]
 800cd96:	f003 0302 	and.w	r3, r3, #2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00d      	beq.n	800cdba <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800cd9e:	7afb      	ldrb	r3, [r7, #11]
 800cda0:	f003 0307 	and.w	r3, r3, #7
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d004      	beq.n	800cdb2 <f_mkfs+0x186>
 800cda8:	7afb      	ldrb	r3, [r7, #11]
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d103      	bne.n	800cdba <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cdb8:	e009      	b.n	800cdce <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800cdba:	7afb      	ldrb	r3, [r7, #11]
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <f_mkfs+0x19c>
 800cdc4:	2313      	movs	r3, #19
 800cdc6:	e357      	b.n	800d478 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800cdc8:	2302      	movs	r3, #2
 800cdca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800cdd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d13c      	bne.n	800ce54 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800cdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d11b      	bne.n	800ce18 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	0c5b      	lsrs	r3, r3, #17
 800cde4:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cde6:	2300      	movs	r3, #0
 800cde8:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdea:	2301      	movs	r3, #1
 800cdec:	653b      	str	r3, [r7, #80]	; 0x50
 800cdee:	e005      	b.n	800cdfc <f_mkfs+0x1d0>
 800cdf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	653b      	str	r3, [r7, #80]	; 0x50
 800cdfc:	4a2d      	ldr	r2, [pc, #180]	; (800ceb4 <f_mkfs+0x288>)
 800cdfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <f_mkfs+0x1ec>
 800ce08:	4a2a      	ldr	r2, [pc, #168]	; (800ceb4 <f_mkfs+0x288>)
 800ce0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce10:	461a      	mov	r2, r3
 800ce12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d2eb      	bcs.n	800cdf0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce20:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	3302      	adds	r3, #2
 800ce26:	009a      	lsls	r2, r3, #2
 800ce28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce2a:	4413      	add	r3, r2
 800ce2c:	1e5a      	subs	r2, r3, #1
 800ce2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce34:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800ce36:	2320      	movs	r3, #32
 800ce38:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d903      	bls.n	800ce50 <f_mkfs+0x224>
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	4a1b      	ldr	r2, [pc, #108]	; (800ceb8 <f_mkfs+0x28c>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d952      	bls.n	800cef6 <f_mkfs+0x2ca>
 800ce50:	230e      	movs	r3, #14
 800ce52:	e311      	b.n	800d478 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ce54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d11b      	bne.n	800ce92 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	0b1b      	lsrs	r3, r3, #12
 800ce5e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ce60:	2300      	movs	r3, #0
 800ce62:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce64:	2301      	movs	r3, #1
 800ce66:	653b      	str	r3, [r7, #80]	; 0x50
 800ce68:	e005      	b.n	800ce76 <f_mkfs+0x24a>
 800ce6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	653b      	str	r3, [r7, #80]	; 0x50
 800ce76:	4a11      	ldr	r2, [pc, #68]	; (800cebc <f_mkfs+0x290>)
 800ce78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d007      	beq.n	800ce92 <f_mkfs+0x266>
 800ce82:	4a0e      	ldr	r2, [pc, #56]	; (800cebc <f_mkfs+0x290>)
 800ce84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d2eb      	bcs.n	800ce6a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800ce92:	693a      	ldr	r2, [r7, #16]
 800ce94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce9a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d90c      	bls.n	800cec0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	3302      	adds	r3, #2
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceae:	e012      	b.n	800ced6 <f_mkfs+0x2aa>
 800ceb0:	20000358 	.word	0x20000358
 800ceb4:	0800e0f8 	.word	0x0800e0f8
 800ceb8:	0ffffff5 	.word	0x0ffffff5
 800cebc:	0800e108 	.word	0x0800e108
				} else {
					fmt = FS_FAT12;
 800cec0:	2301      	movs	r3, #1
 800cec2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800cec6:	6a3a      	ldr	r2, [r7, #32]
 800cec8:	4613      	mov	r3, r2
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	4413      	add	r3, r2
 800cece:	3301      	adds	r3, #1
 800ced0:	085b      	lsrs	r3, r3, #1
 800ced2:	3303      	adds	r3, #3
 800ced4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ced6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ced8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceda:	4413      	add	r3, r2
 800cedc:	1e5a      	subs	r2, r3, #1
 800cede:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cee0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cee4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800cee6:	2301      	movs	r3, #1
 800cee8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ceea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceec:	015a      	lsls	r2, r3, #5
 800ceee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cef0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800cef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cefa:	4413      	add	r3, r2
 800cefc:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800cefe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf02:	fb03 f202 	mul.w	r2, r3, r2
 800cf06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf08:	4413      	add	r3, r2
 800cf0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf0c:	4413      	add	r3, r2
 800cf0e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	4413      	add	r3, r2
 800cf16:	1e5a      	subs	r2, r3, #1
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	425b      	negs	r3, r3
 800cf1c:	401a      	ands	r2, r3
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800cf24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf28:	2b03      	cmp	r3, #3
 800cf2a:	d108      	bne.n	800cf3e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800cf2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf30:	4413      	add	r3, r2
 800cf32:	657b      	str	r3, [r7, #84]	; 0x54
 800cf34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf38:	4413      	add	r3, r2
 800cf3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf3c:	e006      	b.n	800cf4c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800cf3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf48:	4413      	add	r3, r2
 800cf4a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800cf4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf4e:	011a      	lsls	r2, r3, #4
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	441a      	add	r2, r3
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	1ad2      	subs	r2, r2, r3
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d901      	bls.n	800cf62 <f_mkfs+0x336>
 800cf5e:	230e      	movs	r3, #14
 800cf60:	e28a      	b.n	800d478 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800cf62:	693a      	ldr	r2, [r7, #16]
 800cf64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf66:	1ad2      	subs	r2, r2, r3
 800cf68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf6c:	fb01 f303 	mul.w	r3, r1, r3
 800cf70:	1ad2      	subs	r2, r2, r3
 800cf72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf74:	1ad2      	subs	r2, r2, r3
 800cf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf78:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf7c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800cf7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d10f      	bne.n	800cfa6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800cf86:	6a3b      	ldr	r3, [r7, #32]
 800cf88:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d80a      	bhi.n	800cfa6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d105      	bne.n	800cfa2 <f_mkfs+0x376>
 800cf96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf98:	085b      	lsrs	r3, r3, #1
 800cf9a:	607b      	str	r3, [r7, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d144      	bne.n	800d02c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800cfa2:	230e      	movs	r3, #14
 800cfa4:	e268      	b.n	800d478 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800cfa6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d133      	bne.n	800d016 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800cfae:	6a3b      	ldr	r3, [r7, #32]
 800cfb0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d91e      	bls.n	800cff6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d107      	bne.n	800cfce <f_mkfs+0x3a2>
 800cfbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	2b40      	cmp	r3, #64	; 0x40
 800cfc4:	d803      	bhi.n	800cfce <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800cfc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	607b      	str	r3, [r7, #4]
 800cfcc:	e033      	b.n	800d036 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800cfce:	7afb      	ldrb	r3, [r7, #11]
 800cfd0:	f003 0302 	and.w	r3, r3, #2
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d003      	beq.n	800cfe0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800cfd8:	2303      	movs	r3, #3
 800cfda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cfde:	e02a      	b.n	800d036 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d105      	bne.n	800cff2 <f_mkfs+0x3c6>
 800cfe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	607b      	str	r3, [r7, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b80      	cmp	r3, #128	; 0x80
 800cff0:	d91e      	bls.n	800d030 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800cff2:	230e      	movs	r3, #14
 800cff4:	e240      	b.n	800d478 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d80a      	bhi.n	800d016 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d105      	bne.n	800d012 <f_mkfs+0x3e6>
 800d006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	607b      	str	r3, [r7, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b80      	cmp	r3, #128	; 0x80
 800d010:	d910      	bls.n	800d034 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800d012:	230e      	movs	r3, #14
 800d014:	e230      	b.n	800d478 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800d016:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d10c      	bne.n	800d038 <f_mkfs+0x40c>
 800d01e:	6a3b      	ldr	r3, [r7, #32]
 800d020:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d024:	4293      	cmp	r3, r2
 800d026:	d907      	bls.n	800d038 <f_mkfs+0x40c>
 800d028:	230e      	movs	r3, #14
 800d02a:	e225      	b.n	800d478 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d02c:	bf00      	nop
 800d02e:	e6ce      	b.n	800cdce <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d030:	bf00      	nop
 800d032:	e6cc      	b.n	800cdce <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d034:	bf00      	nop
			pau = au;
 800d036:	e6ca      	b.n	800cdce <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800d038:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800d03a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d03c:	461a      	mov	r2, r3
 800d03e:	2100      	movs	r1, #0
 800d040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d042:	f7fd fcde 	bl	800aa02 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800d046:	220b      	movs	r2, #11
 800d048:	49b2      	ldr	r1, [pc, #712]	; (800d314 <f_mkfs+0x6e8>)
 800d04a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d04c:	f7fd fcb8 	bl	800a9c0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	330b      	adds	r3, #11
 800d054:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d056:	4611      	mov	r1, r2
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fd fc6a 	bl	800a932 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	330d      	adds	r3, #13
 800d062:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d064:	b2d2      	uxtb	r2, r2
 800d066:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	330e      	adds	r3, #14
 800d06c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d06e:	b292      	uxth	r2, r2
 800d070:	4611      	mov	r1, r2
 800d072:	4618      	mov	r0, r3
 800d074:	f7fd fc5d 	bl	800a932 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800d078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07a:	3310      	adds	r3, #16
 800d07c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d07e:	b2d2      	uxtb	r2, r2
 800d080:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	f103 0211 	add.w	r2, r3, #17
 800d088:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d08c:	2b03      	cmp	r3, #3
 800d08e:	d002      	beq.n	800d096 <f_mkfs+0x46a>
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	b29b      	uxth	r3, r3
 800d094:	e000      	b.n	800d098 <f_mkfs+0x46c>
 800d096:	2300      	movs	r3, #0
 800d098:	4619      	mov	r1, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	f7fd fc49 	bl	800a932 <st_word>
		if (sz_vol < 0x10000) {
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0a6:	d208      	bcs.n	800d0ba <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0aa:	3313      	adds	r3, #19
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	b292      	uxth	r2, r2
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fd fc3d 	bl	800a932 <st_word>
 800d0b8:	e006      	b.n	800d0c8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0bc:	3320      	adds	r3, #32
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fd fc50 	bl	800a968 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ca:	3315      	adds	r3, #21
 800d0cc:	22f8      	movs	r2, #248	; 0xf8
 800d0ce:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	3318      	adds	r3, #24
 800d0d4:	213f      	movs	r1, #63	; 0x3f
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fd fc2b 	bl	800a932 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	331a      	adds	r3, #26
 800d0e0:	21ff      	movs	r1, #255	; 0xff
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fd fc25 	bl	800a932 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	331c      	adds	r3, #28
 800d0ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fd fc3a 	bl	800a968 <st_dword>
		if (fmt == FS_FAT32) {
 800d0f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	d131      	bne.n	800d160 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800d0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fe:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800d102:	f7fd f9c3 	bl	800a48c <get_fattime>
 800d106:	4603      	mov	r3, r0
 800d108:	4619      	mov	r1, r3
 800d10a:	4620      	mov	r0, r4
 800d10c:	f7fd fc2c 	bl	800a968 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800d110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d112:	3324      	adds	r3, #36	; 0x24
 800d114:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d116:	4618      	mov	r0, r3
 800d118:	f7fd fc26 	bl	800a968 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	332c      	adds	r3, #44	; 0x2c
 800d120:	2102      	movs	r1, #2
 800d122:	4618      	mov	r0, r3
 800d124:	f7fd fc20 	bl	800a968 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12a:	3330      	adds	r3, #48	; 0x30
 800d12c:	2101      	movs	r1, #1
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fd fbff 	bl	800a932 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	3332      	adds	r3, #50	; 0x32
 800d138:	2106      	movs	r1, #6
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fd fbf9 	bl	800a932 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	3340      	adds	r3, #64	; 0x40
 800d144:	2280      	movs	r2, #128	; 0x80
 800d146:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	3342      	adds	r3, #66	; 0x42
 800d14c:	2229      	movs	r2, #41	; 0x29
 800d14e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	3347      	adds	r3, #71	; 0x47
 800d154:	2213      	movs	r2, #19
 800d156:	4970      	ldr	r1, [pc, #448]	; (800d318 <f_mkfs+0x6ec>)
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fd fc31 	bl	800a9c0 <mem_cpy>
 800d15e:	e020      	b.n	800d1a2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800d166:	f7fd f991 	bl	800a48c <get_fattime>
 800d16a:	4603      	mov	r3, r0
 800d16c:	4619      	mov	r1, r3
 800d16e:	4620      	mov	r0, r4
 800d170:	f7fd fbfa 	bl	800a968 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800d174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d176:	3316      	adds	r3, #22
 800d178:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d17a:	b292      	uxth	r2, r2
 800d17c:	4611      	mov	r1, r2
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fd fbd7 	bl	800a932 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	3324      	adds	r3, #36	; 0x24
 800d188:	2280      	movs	r2, #128	; 0x80
 800d18a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18e:	3326      	adds	r3, #38	; 0x26
 800d190:	2229      	movs	r2, #41	; 0x29
 800d192:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800d194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d196:	332b      	adds	r3, #43	; 0x2b
 800d198:	2213      	movs	r2, #19
 800d19a:	4960      	ldr	r1, [pc, #384]	; (800d31c <f_mkfs+0x6f0>)
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fd fc0f 	bl	800a9c0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7fd fbc0 	bl	800a932 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800d1b2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1bc:	f7fd fb40 	bl	800a840 <disk_write>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <f_mkfs+0x59e>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e156      	b.n	800d478 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800d1ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d1ce:	2b03      	cmp	r3, #3
 800d1d0:	d140      	bne.n	800d254 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	1d9a      	adds	r2, r3, #6
 800d1d6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d1da:	2301      	movs	r3, #1
 800d1dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1de:	f7fd fb2f 	bl	800a840 <disk_write>
			mem_set(buf, 0, ss);
 800d1e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1ea:	f7fd fc0a 	bl	800aa02 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800d1ee:	494c      	ldr	r1, [pc, #304]	; (800d320 <f_mkfs+0x6f4>)
 800d1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1f2:	f7fd fbb9 	bl	800a968 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d1fc:	4949      	ldr	r1, [pc, #292]	; (800d324 <f_mkfs+0x6f8>)
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fd fbb2 	bl	800a968 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4619      	mov	r1, r3
 800d210:	4610      	mov	r0, r2
 800d212:	f7fd fba9 	bl	800a968 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800d216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d218:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d21c:	2102      	movs	r1, #2
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fd fba2 	bl	800a968 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d22a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fd fb7f 	bl	800a932 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	1dda      	adds	r2, r3, #7
 800d238:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d23c:	2301      	movs	r3, #1
 800d23e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d240:	f7fd fafe 	bl	800a840 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	1c5a      	adds	r2, r3, #1
 800d248:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d24c:	2301      	movs	r3, #1
 800d24e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d250:	f7fd faf6 	bl	800a840 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800d254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d256:	2100      	movs	r1, #0
 800d258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d25a:	f7fd fbd2 	bl	800aa02 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d25e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d260:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d262:	2300      	movs	r3, #0
 800d264:	64bb      	str	r3, [r7, #72]	; 0x48
 800d266:	e04b      	b.n	800d300 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800d268:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d113      	bne.n	800d298 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d270:	f06f 0107 	mvn.w	r1, #7
 800d274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d276:	f7fd fb77 	bl	800a968 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27c:	3304      	adds	r3, #4
 800d27e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d282:	4618      	mov	r0, r3
 800d284:	f7fd fb70 	bl	800a968 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	3308      	adds	r3, #8
 800d28c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d290:	4618      	mov	r0, r3
 800d292:	f7fd fb69 	bl	800a968 <st_dword>
 800d296:	e00b      	b.n	800d2b0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d298:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d101      	bne.n	800d2a4 <f_mkfs+0x678>
 800d2a0:	4b21      	ldr	r3, [pc, #132]	; (800d328 <f_mkfs+0x6fc>)
 800d2a2:	e001      	b.n	800d2a8 <f_mkfs+0x67c>
 800d2a4:	f06f 0307 	mvn.w	r3, #7
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ac:	f7fd fb5c 	bl	800a968 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d2b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2b2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d2b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	bf28      	it	cs
 800d2bc:	4613      	movcs	r3, r2
 800d2be:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d2c0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d2c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ca:	f7fd fab9 	bl	800a840 <disk_write>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d001      	beq.n	800d2d8 <f_mkfs+0x6ac>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e0cf      	b.n	800d478 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800d2d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d2da:	461a      	mov	r2, r3
 800d2dc:	2100      	movs	r1, #0
 800d2de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2e0:	f7fd fb8f 	bl	800aa02 <mem_set>
				sect += n; nsect -= n;
 800d2e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d2e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2e8:	4413      	add	r3, r2
 800d2ea:	667b      	str	r3, [r7, #100]	; 0x64
 800d2ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800d2f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1dc      	bne.n	800d2b4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d2fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800d300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d304:	429a      	cmp	r2, r3
 800d306:	d3af      	bcc.n	800d268 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d308:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d10d      	bne.n	800d32c <f_mkfs+0x700>
 800d310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d312:	e00c      	b.n	800d32e <f_mkfs+0x702>
 800d314:	0800df2c 	.word	0x0800df2c
 800d318:	0800df38 	.word	0x0800df38
 800d31c:	0800df4c 	.word	0x0800df4c
 800d320:	41615252 	.word	0x41615252
 800d324:	61417272 	.word	0x61417272
 800d328:	00fffff8 	.word	0x00fffff8
 800d32c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d32e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d334:	4293      	cmp	r3, r2
 800d336:	bf28      	it	cs
 800d338:	4613      	movcs	r3, r2
 800d33a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d33c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d342:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d346:	f7fd fa7b 	bl	800a840 <disk_write>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <f_mkfs+0x728>
 800d350:	2301      	movs	r3, #1
 800d352:	e091      	b.n	800d478 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800d354:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d358:	4413      	add	r3, r2
 800d35a:	667b      	str	r3, [r7, #100]	; 0x64
 800d35c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800d364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1e2      	bne.n	800d330 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800d36a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d103      	bne.n	800d37a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800d372:	230c      	movs	r3, #12
 800d374:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d378:	e010      	b.n	800d39c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d380:	d303      	bcc.n	800d38a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d382:	2306      	movs	r3, #6
 800d384:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d388:	e008      	b.n	800d39c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d38a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d101      	bne.n	800d396 <f_mkfs+0x76a>
 800d392:	2304      	movs	r3, #4
 800d394:	e000      	b.n	800d398 <f_mkfs+0x76c>
 800d396:	2301      	movs	r3, #1
 800d398:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d39c:	7afb      	ldrb	r3, [r7, #11]
 800d39e:	f003 0308 	and.w	r3, r3, #8
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d15b      	bne.n	800d45e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800d3a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ae:	f7fd fb28 	bl	800aa02 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fd fab8 	bl	800a932 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d3c8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	3302      	adds	r3, #2
 800d3dc:	2201      	movs	r2, #1
 800d3de:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	3303      	adds	r3, #3
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	3304      	adds	r3, #4
 800d3ec:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800d3f0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	441a      	add	r2, r3
 800d3f8:	4b21      	ldr	r3, [pc, #132]	; (800d480 <f_mkfs+0x854>)
 800d3fa:	fba3 1302 	umull	r1, r3, r3, r2
 800d3fe:	1ad2      	subs	r2, r2, r3
 800d400:	0852      	lsrs	r2, r2, #1
 800d402:	4413      	add	r3, r2
 800d404:	0b5b      	lsrs	r3, r3, #13
 800d406:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	3305      	adds	r3, #5
 800d40c:	22fe      	movs	r2, #254	; 0xfe
 800d40e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d412:	089b      	lsrs	r3, r3, #2
 800d414:	b2da      	uxtb	r2, r3
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	3306      	adds	r3, #6
 800d41a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d41e:	b2d2      	uxtb	r2, r2
 800d420:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	3307      	adds	r3, #7
 800d426:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d428:	b2d2      	uxtb	r2, r2
 800d42a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	3308      	adds	r3, #8
 800d430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d432:	4618      	mov	r0, r3
 800d434:	f7fd fa98 	bl	800a968 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	330c      	adds	r3, #12
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7fd fa91 	bl	800a968 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d446:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d44a:	2301      	movs	r3, #1
 800d44c:	2200      	movs	r2, #0
 800d44e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d450:	f7fd f9f6 	bl	800a840 <disk_write>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <f_mkfs+0x832>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e00c      	b.n	800d478 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d45e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d462:	2200      	movs	r2, #0
 800d464:	2100      	movs	r1, #0
 800d466:	4618      	mov	r0, r3
 800d468:	f7fd fa0a 	bl	800a880 <disk_ioctl>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <f_mkfs+0x84a>
 800d472:	2301      	movs	r3, #1
 800d474:	e000      	b.n	800d478 <f_mkfs+0x84c>

	return FR_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3774      	adds	r7, #116	; 0x74
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd90      	pop	{r4, r7, pc}
 800d480:	0515565b 	.word	0x0515565b

0800d484 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d484:	b480      	push	{r7}
 800d486:	b087      	sub	sp, #28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4613      	mov	r3, r2
 800d490:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d492:	2301      	movs	r3, #1
 800d494:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d49a:	4b1f      	ldr	r3, [pc, #124]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d49c:	7a5b      	ldrb	r3, [r3, #9]
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d131      	bne.n	800d508 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d4a4:	4b1c      	ldr	r3, [pc, #112]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4a6:	7a5b      	ldrb	r3, [r3, #9]
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4b1a      	ldr	r3, [pc, #104]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4b2:	4b19      	ldr	r3, [pc, #100]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4b4:	7a5b      	ldrb	r3, [r3, #9]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	4a17      	ldr	r2, [pc, #92]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4413      	add	r3, r2
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4c2:	4b15      	ldr	r3, [pc, #84]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4c4:	7a5b      	ldrb	r3, [r3, #9]
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	4b13      	ldr	r3, [pc, #76]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4cc:	4413      	add	r3, r2
 800d4ce:	79fa      	ldrb	r2, [r7, #7]
 800d4d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4d2:	4b11      	ldr	r3, [pc, #68]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4d4:	7a5b      	ldrb	r3, [r3, #9]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	b2d1      	uxtb	r1, r2
 800d4dc:	4a0e      	ldr	r2, [pc, #56]	; (800d518 <FATFS_LinkDriverEx+0x94>)
 800d4de:	7251      	strb	r1, [r2, #9]
 800d4e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d4e2:	7dbb      	ldrb	r3, [r7, #22]
 800d4e4:	3330      	adds	r3, #48	; 0x30
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	223a      	movs	r2, #58	; 0x3a
 800d4f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	3302      	adds	r3, #2
 800d4f8:	222f      	movs	r2, #47	; 0x2f
 800d4fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	3303      	adds	r3, #3
 800d500:	2200      	movs	r2, #0
 800d502:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d508:	7dfb      	ldrb	r3, [r7, #23]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	371c      	adds	r7, #28
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	20000380 	.word	0x20000380

0800d51c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d526:	2200      	movs	r2, #0
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff ffaa 	bl	800d484 <FATFS_LinkDriverEx>
 800d530:	4603      	mov	r3, r0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
	...

0800d53c <__errno>:
 800d53c:	4b01      	ldr	r3, [pc, #4]	; (800d544 <__errno+0x8>)
 800d53e:	6818      	ldr	r0, [r3, #0]
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	2000000c 	.word	0x2000000c

0800d548 <__libc_init_array>:
 800d548:	b570      	push	{r4, r5, r6, lr}
 800d54a:	4d0d      	ldr	r5, [pc, #52]	; (800d580 <__libc_init_array+0x38>)
 800d54c:	2600      	movs	r6, #0
 800d54e:	4c0d      	ldr	r4, [pc, #52]	; (800d584 <__libc_init_array+0x3c>)
 800d550:	1b64      	subs	r4, r4, r5
 800d552:	10a4      	asrs	r4, r4, #2
 800d554:	42a6      	cmp	r6, r4
 800d556:	d109      	bne.n	800d56c <__libc_init_array+0x24>
 800d558:	4d0b      	ldr	r5, [pc, #44]	; (800d588 <__libc_init_array+0x40>)
 800d55a:	2600      	movs	r6, #0
 800d55c:	4c0b      	ldr	r4, [pc, #44]	; (800d58c <__libc_init_array+0x44>)
 800d55e:	f000 fc9d 	bl	800de9c <_init>
 800d562:	1b64      	subs	r4, r4, r5
 800d564:	10a4      	asrs	r4, r4, #2
 800d566:	42a6      	cmp	r6, r4
 800d568:	d105      	bne.n	800d576 <__libc_init_array+0x2e>
 800d56a:	bd70      	pop	{r4, r5, r6, pc}
 800d56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d570:	3601      	adds	r6, #1
 800d572:	4798      	blx	r3
 800d574:	e7ee      	b.n	800d554 <__libc_init_array+0xc>
 800d576:	f855 3b04 	ldr.w	r3, [r5], #4
 800d57a:	3601      	adds	r6, #1
 800d57c:	4798      	blx	r3
 800d57e:	e7f2      	b.n	800d566 <__libc_init_array+0x1e>
 800d580:	0800e154 	.word	0x0800e154
 800d584:	0800e154 	.word	0x0800e154
 800d588:	0800e154 	.word	0x0800e154
 800d58c:	0800e158 	.word	0x0800e158

0800d590 <memset>:
 800d590:	4402      	add	r2, r0
 800d592:	4603      	mov	r3, r0
 800d594:	4293      	cmp	r3, r2
 800d596:	d100      	bne.n	800d59a <memset+0xa>
 800d598:	4770      	bx	lr
 800d59a:	f803 1b01 	strb.w	r1, [r3], #1
 800d59e:	e7f9      	b.n	800d594 <memset+0x4>

0800d5a0 <siprintf>:
 800d5a0:	b40e      	push	{r1, r2, r3}
 800d5a2:	b500      	push	{lr}
 800d5a4:	b09c      	sub	sp, #112	; 0x70
 800d5a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5aa:	ab1d      	add	r3, sp, #116	; 0x74
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	9006      	str	r0, [sp, #24]
 800d5b0:	9107      	str	r1, [sp, #28]
 800d5b2:	9104      	str	r1, [sp, #16]
 800d5b4:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <siprintf+0x38>)
 800d5b6:	4909      	ldr	r1, [pc, #36]	; (800d5dc <siprintf+0x3c>)
 800d5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5bc:	9105      	str	r1, [sp, #20]
 800d5be:	a902      	add	r1, sp, #8
 800d5c0:	6800      	ldr	r0, [r0, #0]
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	f000 f868 	bl	800d698 <_svfiprintf_r>
 800d5c8:	9b02      	ldr	r3, [sp, #8]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	701a      	strb	r2, [r3, #0]
 800d5ce:	b01c      	add	sp, #112	; 0x70
 800d5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d4:	b003      	add	sp, #12
 800d5d6:	4770      	bx	lr
 800d5d8:	2000000c 	.word	0x2000000c
 800d5dc:	ffff0208 	.word	0xffff0208

0800d5e0 <__ssputs_r>:
 800d5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e4:	688e      	ldr	r6, [r1, #8]
 800d5e6:	4682      	mov	sl, r0
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	4690      	mov	r8, r2
 800d5ec:	429e      	cmp	r6, r3
 800d5ee:	461f      	mov	r7, r3
 800d5f0:	d838      	bhi.n	800d664 <__ssputs_r+0x84>
 800d5f2:	898a      	ldrh	r2, [r1, #12]
 800d5f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5f8:	d032      	beq.n	800d660 <__ssputs_r+0x80>
 800d5fa:	6825      	ldr	r5, [r4, #0]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	6909      	ldr	r1, [r1, #16]
 800d600:	eba5 0901 	sub.w	r9, r5, r1
 800d604:	6965      	ldr	r5, [r4, #20]
 800d606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d60a:	444b      	add	r3, r9
 800d60c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d610:	106d      	asrs	r5, r5, #1
 800d612:	429d      	cmp	r5, r3
 800d614:	bf38      	it	cc
 800d616:	461d      	movcc	r5, r3
 800d618:	0553      	lsls	r3, r2, #21
 800d61a:	d531      	bpl.n	800d680 <__ssputs_r+0xa0>
 800d61c:	4629      	mov	r1, r5
 800d61e:	f000 fb73 	bl	800dd08 <_malloc_r>
 800d622:	4606      	mov	r6, r0
 800d624:	b950      	cbnz	r0, 800d63c <__ssputs_r+0x5c>
 800d626:	230c      	movs	r3, #12
 800d628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d62c:	f8ca 3000 	str.w	r3, [sl]
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63c:	464a      	mov	r2, r9
 800d63e:	6921      	ldr	r1, [r4, #16]
 800d640:	f000 face 	bl	800dbe0 <memcpy>
 800d644:	89a3      	ldrh	r3, [r4, #12]
 800d646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d64e:	81a3      	strh	r3, [r4, #12]
 800d650:	6126      	str	r6, [r4, #16]
 800d652:	444e      	add	r6, r9
 800d654:	6165      	str	r5, [r4, #20]
 800d656:	eba5 0509 	sub.w	r5, r5, r9
 800d65a:	6026      	str	r6, [r4, #0]
 800d65c:	463e      	mov	r6, r7
 800d65e:	60a5      	str	r5, [r4, #8]
 800d660:	42be      	cmp	r6, r7
 800d662:	d900      	bls.n	800d666 <__ssputs_r+0x86>
 800d664:	463e      	mov	r6, r7
 800d666:	4632      	mov	r2, r6
 800d668:	4641      	mov	r1, r8
 800d66a:	6820      	ldr	r0, [r4, #0]
 800d66c:	f000 fac5 	bl	800dbfa <memmove>
 800d670:	68a3      	ldr	r3, [r4, #8]
 800d672:	2000      	movs	r0, #0
 800d674:	1b9b      	subs	r3, r3, r6
 800d676:	60a3      	str	r3, [r4, #8]
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	4433      	add	r3, r6
 800d67c:	6023      	str	r3, [r4, #0]
 800d67e:	e7db      	b.n	800d638 <__ssputs_r+0x58>
 800d680:	462a      	mov	r2, r5
 800d682:	f000 fbb5 	bl	800ddf0 <_realloc_r>
 800d686:	4606      	mov	r6, r0
 800d688:	2800      	cmp	r0, #0
 800d68a:	d1e1      	bne.n	800d650 <__ssputs_r+0x70>
 800d68c:	6921      	ldr	r1, [r4, #16]
 800d68e:	4650      	mov	r0, sl
 800d690:	f000 face 	bl	800dc30 <_free_r>
 800d694:	e7c7      	b.n	800d626 <__ssputs_r+0x46>
	...

0800d698 <_svfiprintf_r>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	4698      	mov	r8, r3
 800d69e:	898b      	ldrh	r3, [r1, #12]
 800d6a0:	b09d      	sub	sp, #116	; 0x74
 800d6a2:	4607      	mov	r7, r0
 800d6a4:	061b      	lsls	r3, r3, #24
 800d6a6:	460d      	mov	r5, r1
 800d6a8:	4614      	mov	r4, r2
 800d6aa:	d50e      	bpl.n	800d6ca <_svfiprintf_r+0x32>
 800d6ac:	690b      	ldr	r3, [r1, #16]
 800d6ae:	b963      	cbnz	r3, 800d6ca <_svfiprintf_r+0x32>
 800d6b0:	2140      	movs	r1, #64	; 0x40
 800d6b2:	f000 fb29 	bl	800dd08 <_malloc_r>
 800d6b6:	6028      	str	r0, [r5, #0]
 800d6b8:	6128      	str	r0, [r5, #16]
 800d6ba:	b920      	cbnz	r0, 800d6c6 <_svfiprintf_r+0x2e>
 800d6bc:	230c      	movs	r3, #12
 800d6be:	603b      	str	r3, [r7, #0]
 800d6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6c4:	e0d1      	b.n	800d86a <_svfiprintf_r+0x1d2>
 800d6c6:	2340      	movs	r3, #64	; 0x40
 800d6c8:	616b      	str	r3, [r5, #20]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6d0:	f04f 0901 	mov.w	r9, #1
 800d6d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d884 <_svfiprintf_r+0x1ec>
 800d6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d6da:	2320      	movs	r3, #32
 800d6dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6e0:	2330      	movs	r3, #48	; 0x30
 800d6e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6e6:	4623      	mov	r3, r4
 800d6e8:	469a      	mov	sl, r3
 800d6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ee:	b10a      	cbz	r2, 800d6f4 <_svfiprintf_r+0x5c>
 800d6f0:	2a25      	cmp	r2, #37	; 0x25
 800d6f2:	d1f9      	bne.n	800d6e8 <_svfiprintf_r+0x50>
 800d6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6f8:	d00b      	beq.n	800d712 <_svfiprintf_r+0x7a>
 800d6fa:	465b      	mov	r3, fp
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4629      	mov	r1, r5
 800d700:	4638      	mov	r0, r7
 800d702:	f7ff ff6d 	bl	800d5e0 <__ssputs_r>
 800d706:	3001      	adds	r0, #1
 800d708:	f000 80aa 	beq.w	800d860 <_svfiprintf_r+0x1c8>
 800d70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d70e:	445a      	add	r2, fp
 800d710:	9209      	str	r2, [sp, #36]	; 0x24
 800d712:	f89a 3000 	ldrb.w	r3, [sl]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f000 80a2 	beq.w	800d860 <_svfiprintf_r+0x1c8>
 800d71c:	2300      	movs	r3, #0
 800d71e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d722:	f10a 0a01 	add.w	sl, sl, #1
 800d726:	9304      	str	r3, [sp, #16]
 800d728:	9307      	str	r3, [sp, #28]
 800d72a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d72e:	931a      	str	r3, [sp, #104]	; 0x68
 800d730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d734:	4654      	mov	r4, sl
 800d736:	2205      	movs	r2, #5
 800d738:	4852      	ldr	r0, [pc, #328]	; (800d884 <_svfiprintf_r+0x1ec>)
 800d73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73e:	f000 fa41 	bl	800dbc4 <memchr>
 800d742:	9a04      	ldr	r2, [sp, #16]
 800d744:	b9d8      	cbnz	r0, 800d77e <_svfiprintf_r+0xe6>
 800d746:	06d0      	lsls	r0, r2, #27
 800d748:	bf44      	itt	mi
 800d74a:	2320      	movmi	r3, #32
 800d74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d750:	0711      	lsls	r1, r2, #28
 800d752:	bf44      	itt	mi
 800d754:	232b      	movmi	r3, #43	; 0x2b
 800d756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d75a:	f89a 3000 	ldrb.w	r3, [sl]
 800d75e:	2b2a      	cmp	r3, #42	; 0x2a
 800d760:	d015      	beq.n	800d78e <_svfiprintf_r+0xf6>
 800d762:	9a07      	ldr	r2, [sp, #28]
 800d764:	4654      	mov	r4, sl
 800d766:	2000      	movs	r0, #0
 800d768:	f04f 0c0a 	mov.w	ip, #10
 800d76c:	4621      	mov	r1, r4
 800d76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d772:	3b30      	subs	r3, #48	; 0x30
 800d774:	2b09      	cmp	r3, #9
 800d776:	d94e      	bls.n	800d816 <_svfiprintf_r+0x17e>
 800d778:	b1b0      	cbz	r0, 800d7a8 <_svfiprintf_r+0x110>
 800d77a:	9207      	str	r2, [sp, #28]
 800d77c:	e014      	b.n	800d7a8 <_svfiprintf_r+0x110>
 800d77e:	eba0 0308 	sub.w	r3, r0, r8
 800d782:	46a2      	mov	sl, r4
 800d784:	fa09 f303 	lsl.w	r3, r9, r3
 800d788:	4313      	orrs	r3, r2
 800d78a:	9304      	str	r3, [sp, #16]
 800d78c:	e7d2      	b.n	800d734 <_svfiprintf_r+0x9c>
 800d78e:	9b03      	ldr	r3, [sp, #12]
 800d790:	1d19      	adds	r1, r3, #4
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	9103      	str	r1, [sp, #12]
 800d798:	bfbb      	ittet	lt
 800d79a:	425b      	neglt	r3, r3
 800d79c:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a0:	9307      	strge	r3, [sp, #28]
 800d7a2:	9307      	strlt	r3, [sp, #28]
 800d7a4:	bfb8      	it	lt
 800d7a6:	9204      	strlt	r2, [sp, #16]
 800d7a8:	7823      	ldrb	r3, [r4, #0]
 800d7aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d7ac:	d10c      	bne.n	800d7c8 <_svfiprintf_r+0x130>
 800d7ae:	7863      	ldrb	r3, [r4, #1]
 800d7b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b2:	d135      	bne.n	800d820 <_svfiprintf_r+0x188>
 800d7b4:	9b03      	ldr	r3, [sp, #12]
 800d7b6:	3402      	adds	r4, #2
 800d7b8:	1d1a      	adds	r2, r3, #4
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	9203      	str	r2, [sp, #12]
 800d7c0:	bfb8      	it	lt
 800d7c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d7c6:	9305      	str	r3, [sp, #20]
 800d7c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d894 <_svfiprintf_r+0x1fc>
 800d7cc:	2203      	movs	r2, #3
 800d7ce:	7821      	ldrb	r1, [r4, #0]
 800d7d0:	4650      	mov	r0, sl
 800d7d2:	f000 f9f7 	bl	800dbc4 <memchr>
 800d7d6:	b140      	cbz	r0, 800d7ea <_svfiprintf_r+0x152>
 800d7d8:	2340      	movs	r3, #64	; 0x40
 800d7da:	eba0 000a 	sub.w	r0, r0, sl
 800d7de:	3401      	adds	r4, #1
 800d7e0:	fa03 f000 	lsl.w	r0, r3, r0
 800d7e4:	9b04      	ldr	r3, [sp, #16]
 800d7e6:	4303      	orrs	r3, r0
 800d7e8:	9304      	str	r3, [sp, #16]
 800d7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ee:	2206      	movs	r2, #6
 800d7f0:	4825      	ldr	r0, [pc, #148]	; (800d888 <_svfiprintf_r+0x1f0>)
 800d7f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7f6:	f000 f9e5 	bl	800dbc4 <memchr>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d038      	beq.n	800d870 <_svfiprintf_r+0x1d8>
 800d7fe:	4b23      	ldr	r3, [pc, #140]	; (800d88c <_svfiprintf_r+0x1f4>)
 800d800:	bb1b      	cbnz	r3, 800d84a <_svfiprintf_r+0x1b2>
 800d802:	9b03      	ldr	r3, [sp, #12]
 800d804:	3307      	adds	r3, #7
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	3308      	adds	r3, #8
 800d80c:	9303      	str	r3, [sp, #12]
 800d80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d810:	4433      	add	r3, r6
 800d812:	9309      	str	r3, [sp, #36]	; 0x24
 800d814:	e767      	b.n	800d6e6 <_svfiprintf_r+0x4e>
 800d816:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81a:	460c      	mov	r4, r1
 800d81c:	2001      	movs	r0, #1
 800d81e:	e7a5      	b.n	800d76c <_svfiprintf_r+0xd4>
 800d820:	2300      	movs	r3, #0
 800d822:	3401      	adds	r4, #1
 800d824:	f04f 0c0a 	mov.w	ip, #10
 800d828:	4619      	mov	r1, r3
 800d82a:	9305      	str	r3, [sp, #20]
 800d82c:	4620      	mov	r0, r4
 800d82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d832:	3a30      	subs	r2, #48	; 0x30
 800d834:	2a09      	cmp	r2, #9
 800d836:	d903      	bls.n	800d840 <_svfiprintf_r+0x1a8>
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d0c5      	beq.n	800d7c8 <_svfiprintf_r+0x130>
 800d83c:	9105      	str	r1, [sp, #20]
 800d83e:	e7c3      	b.n	800d7c8 <_svfiprintf_r+0x130>
 800d840:	fb0c 2101 	mla	r1, ip, r1, r2
 800d844:	4604      	mov	r4, r0
 800d846:	2301      	movs	r3, #1
 800d848:	e7f0      	b.n	800d82c <_svfiprintf_r+0x194>
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	462a      	mov	r2, r5
 800d84e:	a904      	add	r1, sp, #16
 800d850:	4638      	mov	r0, r7
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	4b0e      	ldr	r3, [pc, #56]	; (800d890 <_svfiprintf_r+0x1f8>)
 800d856:	e000      	b.n	800d85a <_svfiprintf_r+0x1c2>
 800d858:	bf00      	nop
 800d85a:	1c42      	adds	r2, r0, #1
 800d85c:	4606      	mov	r6, r0
 800d85e:	d1d6      	bne.n	800d80e <_svfiprintf_r+0x176>
 800d860:	89ab      	ldrh	r3, [r5, #12]
 800d862:	065b      	lsls	r3, r3, #25
 800d864:	f53f af2c 	bmi.w	800d6c0 <_svfiprintf_r+0x28>
 800d868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d86a:	b01d      	add	sp, #116	; 0x74
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d870:	ab03      	add	r3, sp, #12
 800d872:	462a      	mov	r2, r5
 800d874:	a904      	add	r1, sp, #16
 800d876:	4638      	mov	r0, r7
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	4b05      	ldr	r3, [pc, #20]	; (800d890 <_svfiprintf_r+0x1f8>)
 800d87c:	f000 f87c 	bl	800d978 <_printf_i>
 800d880:	e7eb      	b.n	800d85a <_svfiprintf_r+0x1c2>
 800d882:	bf00      	nop
 800d884:	0800e116 	.word	0x0800e116
 800d888:	0800e120 	.word	0x0800e120
 800d88c:	00000000 	.word	0x00000000
 800d890:	0800d5e1 	.word	0x0800d5e1
 800d894:	0800e11c 	.word	0x0800e11c

0800d898 <_printf_common>:
 800d898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d89c:	4616      	mov	r6, r2
 800d89e:	4699      	mov	r9, r3
 800d8a0:	688a      	ldr	r2, [r1, #8]
 800d8a2:	4607      	mov	r7, r0
 800d8a4:	690b      	ldr	r3, [r1, #16]
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	bfb8      	it	lt
 800d8b0:	4613      	movlt	r3, r2
 800d8b2:	6033      	str	r3, [r6, #0]
 800d8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8b8:	b10a      	cbz	r2, 800d8be <_printf_common+0x26>
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	6033      	str	r3, [r6, #0]
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	0699      	lsls	r1, r3, #26
 800d8c2:	bf42      	ittt	mi
 800d8c4:	6833      	ldrmi	r3, [r6, #0]
 800d8c6:	3302      	addmi	r3, #2
 800d8c8:	6033      	strmi	r3, [r6, #0]
 800d8ca:	6825      	ldr	r5, [r4, #0]
 800d8cc:	f015 0506 	ands.w	r5, r5, #6
 800d8d0:	d106      	bne.n	800d8e0 <_printf_common+0x48>
 800d8d2:	f104 0a19 	add.w	sl, r4, #25
 800d8d6:	68e3      	ldr	r3, [r4, #12]
 800d8d8:	6832      	ldr	r2, [r6, #0]
 800d8da:	1a9b      	subs	r3, r3, r2
 800d8dc:	42ab      	cmp	r3, r5
 800d8de:	dc29      	bgt.n	800d934 <_printf_common+0x9c>
 800d8e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8e4:	1e13      	subs	r3, r2, #0
 800d8e6:	6822      	ldr	r2, [r4, #0]
 800d8e8:	bf18      	it	ne
 800d8ea:	2301      	movne	r3, #1
 800d8ec:	0692      	lsls	r2, r2, #26
 800d8ee:	d42e      	bmi.n	800d94e <_printf_common+0xb6>
 800d8f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8f4:	4649      	mov	r1, r9
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	47c0      	blx	r8
 800d8fa:	3001      	adds	r0, #1
 800d8fc:	d021      	beq.n	800d942 <_printf_common+0xaa>
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	341a      	adds	r4, #26
 800d902:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800d906:	f003 0306 	and.w	r3, r3, #6
 800d90a:	6832      	ldr	r2, [r6, #0]
 800d90c:	2600      	movs	r6, #0
 800d90e:	2b04      	cmp	r3, #4
 800d910:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d914:	bf08      	it	eq
 800d916:	1aad      	subeq	r5, r5, r2
 800d918:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d91c:	bf14      	ite	ne
 800d91e:	2500      	movne	r5, #0
 800d920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d924:	4293      	cmp	r3, r2
 800d926:	bfc4      	itt	gt
 800d928:	1a9b      	subgt	r3, r3, r2
 800d92a:	18ed      	addgt	r5, r5, r3
 800d92c:	42b5      	cmp	r5, r6
 800d92e:	d11a      	bne.n	800d966 <_printf_common+0xce>
 800d930:	2000      	movs	r0, #0
 800d932:	e008      	b.n	800d946 <_printf_common+0xae>
 800d934:	2301      	movs	r3, #1
 800d936:	4652      	mov	r2, sl
 800d938:	4649      	mov	r1, r9
 800d93a:	4638      	mov	r0, r7
 800d93c:	47c0      	blx	r8
 800d93e:	3001      	adds	r0, #1
 800d940:	d103      	bne.n	800d94a <_printf_common+0xb2>
 800d942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94a:	3501      	adds	r5, #1
 800d94c:	e7c3      	b.n	800d8d6 <_printf_common+0x3e>
 800d94e:	18e1      	adds	r1, r4, r3
 800d950:	1c5a      	adds	r2, r3, #1
 800d952:	2030      	movs	r0, #48	; 0x30
 800d954:	3302      	adds	r3, #2
 800d956:	4422      	add	r2, r4
 800d958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d95c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d960:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d964:	e7c4      	b.n	800d8f0 <_printf_common+0x58>
 800d966:	2301      	movs	r3, #1
 800d968:	4622      	mov	r2, r4
 800d96a:	4649      	mov	r1, r9
 800d96c:	4638      	mov	r0, r7
 800d96e:	47c0      	blx	r8
 800d970:	3001      	adds	r0, #1
 800d972:	d0e6      	beq.n	800d942 <_printf_common+0xaa>
 800d974:	3601      	adds	r6, #1
 800d976:	e7d9      	b.n	800d92c <_printf_common+0x94>

0800d978 <_printf_i>:
 800d978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d97c:	7e0f      	ldrb	r7, [r1, #24]
 800d97e:	4691      	mov	r9, r2
 800d980:	4680      	mov	r8, r0
 800d982:	460c      	mov	r4, r1
 800d984:	2f78      	cmp	r7, #120	; 0x78
 800d986:	469a      	mov	sl, r3
 800d988:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d98a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d98e:	d807      	bhi.n	800d9a0 <_printf_i+0x28>
 800d990:	2f62      	cmp	r7, #98	; 0x62
 800d992:	d80a      	bhi.n	800d9aa <_printf_i+0x32>
 800d994:	2f00      	cmp	r7, #0
 800d996:	f000 80d8 	beq.w	800db4a <_printf_i+0x1d2>
 800d99a:	2f58      	cmp	r7, #88	; 0x58
 800d99c:	f000 80a3 	beq.w	800dae6 <_printf_i+0x16e>
 800d9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9a8:	e03a      	b.n	800da20 <_printf_i+0xa8>
 800d9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9ae:	2b15      	cmp	r3, #21
 800d9b0:	d8f6      	bhi.n	800d9a0 <_printf_i+0x28>
 800d9b2:	a101      	add	r1, pc, #4	; (adr r1, 800d9b8 <_printf_i+0x40>)
 800d9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9b8:	0800da11 	.word	0x0800da11
 800d9bc:	0800da25 	.word	0x0800da25
 800d9c0:	0800d9a1 	.word	0x0800d9a1
 800d9c4:	0800d9a1 	.word	0x0800d9a1
 800d9c8:	0800d9a1 	.word	0x0800d9a1
 800d9cc:	0800d9a1 	.word	0x0800d9a1
 800d9d0:	0800da25 	.word	0x0800da25
 800d9d4:	0800d9a1 	.word	0x0800d9a1
 800d9d8:	0800d9a1 	.word	0x0800d9a1
 800d9dc:	0800d9a1 	.word	0x0800d9a1
 800d9e0:	0800d9a1 	.word	0x0800d9a1
 800d9e4:	0800db31 	.word	0x0800db31
 800d9e8:	0800da55 	.word	0x0800da55
 800d9ec:	0800db13 	.word	0x0800db13
 800d9f0:	0800d9a1 	.word	0x0800d9a1
 800d9f4:	0800d9a1 	.word	0x0800d9a1
 800d9f8:	0800db53 	.word	0x0800db53
 800d9fc:	0800d9a1 	.word	0x0800d9a1
 800da00:	0800da55 	.word	0x0800da55
 800da04:	0800d9a1 	.word	0x0800d9a1
 800da08:	0800d9a1 	.word	0x0800d9a1
 800da0c:	0800db1b 	.word	0x0800db1b
 800da10:	682b      	ldr	r3, [r5, #0]
 800da12:	1d1a      	adds	r2, r3, #4
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	602a      	str	r2, [r5, #0]
 800da18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da20:	2301      	movs	r3, #1
 800da22:	e0a3      	b.n	800db6c <_printf_i+0x1f4>
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	6829      	ldr	r1, [r5, #0]
 800da28:	0606      	lsls	r6, r0, #24
 800da2a:	f101 0304 	add.w	r3, r1, #4
 800da2e:	d50a      	bpl.n	800da46 <_printf_i+0xce>
 800da30:	680e      	ldr	r6, [r1, #0]
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	2e00      	cmp	r6, #0
 800da36:	da03      	bge.n	800da40 <_printf_i+0xc8>
 800da38:	232d      	movs	r3, #45	; 0x2d
 800da3a:	4276      	negs	r6, r6
 800da3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da40:	485e      	ldr	r0, [pc, #376]	; (800dbbc <_printf_i+0x244>)
 800da42:	230a      	movs	r3, #10
 800da44:	e019      	b.n	800da7a <_printf_i+0x102>
 800da46:	680e      	ldr	r6, [r1, #0]
 800da48:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da4c:	602b      	str	r3, [r5, #0]
 800da4e:	bf18      	it	ne
 800da50:	b236      	sxthne	r6, r6
 800da52:	e7ef      	b.n	800da34 <_printf_i+0xbc>
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	6820      	ldr	r0, [r4, #0]
 800da58:	1d19      	adds	r1, r3, #4
 800da5a:	6029      	str	r1, [r5, #0]
 800da5c:	0601      	lsls	r1, r0, #24
 800da5e:	d501      	bpl.n	800da64 <_printf_i+0xec>
 800da60:	681e      	ldr	r6, [r3, #0]
 800da62:	e002      	b.n	800da6a <_printf_i+0xf2>
 800da64:	0646      	lsls	r6, r0, #25
 800da66:	d5fb      	bpl.n	800da60 <_printf_i+0xe8>
 800da68:	881e      	ldrh	r6, [r3, #0]
 800da6a:	2f6f      	cmp	r7, #111	; 0x6f
 800da6c:	4853      	ldr	r0, [pc, #332]	; (800dbbc <_printf_i+0x244>)
 800da6e:	bf0c      	ite	eq
 800da70:	2308      	moveq	r3, #8
 800da72:	230a      	movne	r3, #10
 800da74:	2100      	movs	r1, #0
 800da76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da7a:	6865      	ldr	r5, [r4, #4]
 800da7c:	2d00      	cmp	r5, #0
 800da7e:	60a5      	str	r5, [r4, #8]
 800da80:	bfa2      	ittt	ge
 800da82:	6821      	ldrge	r1, [r4, #0]
 800da84:	f021 0104 	bicge.w	r1, r1, #4
 800da88:	6021      	strge	r1, [r4, #0]
 800da8a:	b90e      	cbnz	r6, 800da90 <_printf_i+0x118>
 800da8c:	2d00      	cmp	r5, #0
 800da8e:	d04d      	beq.n	800db2c <_printf_i+0x1b4>
 800da90:	4615      	mov	r5, r2
 800da92:	fbb6 f1f3 	udiv	r1, r6, r3
 800da96:	fb03 6711 	mls	r7, r3, r1, r6
 800da9a:	5dc7      	ldrb	r7, [r0, r7]
 800da9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800daa0:	4637      	mov	r7, r6
 800daa2:	460e      	mov	r6, r1
 800daa4:	42bb      	cmp	r3, r7
 800daa6:	d9f4      	bls.n	800da92 <_printf_i+0x11a>
 800daa8:	2b08      	cmp	r3, #8
 800daaa:	d10b      	bne.n	800dac4 <_printf_i+0x14c>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	07de      	lsls	r6, r3, #31
 800dab0:	d508      	bpl.n	800dac4 <_printf_i+0x14c>
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	6861      	ldr	r1, [r4, #4]
 800dab6:	4299      	cmp	r1, r3
 800dab8:	bfde      	ittt	le
 800daba:	2330      	movle	r3, #48	; 0x30
 800dabc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dac0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dac4:	1b52      	subs	r2, r2, r5
 800dac6:	6122      	str	r2, [r4, #16]
 800dac8:	464b      	mov	r3, r9
 800daca:	aa03      	add	r2, sp, #12
 800dacc:	4621      	mov	r1, r4
 800dace:	4640      	mov	r0, r8
 800dad0:	f8cd a000 	str.w	sl, [sp]
 800dad4:	f7ff fee0 	bl	800d898 <_printf_common>
 800dad8:	3001      	adds	r0, #1
 800dada:	d14c      	bne.n	800db76 <_printf_i+0x1fe>
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dae0:	b004      	add	sp, #16
 800dae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae6:	4835      	ldr	r0, [pc, #212]	; (800dbbc <_printf_i+0x244>)
 800dae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800daec:	6829      	ldr	r1, [r5, #0]
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800daf4:	6029      	str	r1, [r5, #0]
 800daf6:	061d      	lsls	r5, r3, #24
 800daf8:	d514      	bpl.n	800db24 <_printf_i+0x1ac>
 800dafa:	07df      	lsls	r7, r3, #31
 800dafc:	bf44      	itt	mi
 800dafe:	f043 0320 	orrmi.w	r3, r3, #32
 800db02:	6023      	strmi	r3, [r4, #0]
 800db04:	b91e      	cbnz	r6, 800db0e <_printf_i+0x196>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	f023 0320 	bic.w	r3, r3, #32
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	2310      	movs	r3, #16
 800db10:	e7b0      	b.n	800da74 <_printf_i+0xfc>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	f043 0320 	orr.w	r3, r3, #32
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	2378      	movs	r3, #120	; 0x78
 800db1c:	4828      	ldr	r0, [pc, #160]	; (800dbc0 <_printf_i+0x248>)
 800db1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db22:	e7e3      	b.n	800daec <_printf_i+0x174>
 800db24:	0659      	lsls	r1, r3, #25
 800db26:	bf48      	it	mi
 800db28:	b2b6      	uxthmi	r6, r6
 800db2a:	e7e6      	b.n	800dafa <_printf_i+0x182>
 800db2c:	4615      	mov	r5, r2
 800db2e:	e7bb      	b.n	800daa8 <_printf_i+0x130>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	6826      	ldr	r6, [r4, #0]
 800db34:	1d18      	adds	r0, r3, #4
 800db36:	6961      	ldr	r1, [r4, #20]
 800db38:	6028      	str	r0, [r5, #0]
 800db3a:	0635      	lsls	r5, r6, #24
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	d501      	bpl.n	800db44 <_printf_i+0x1cc>
 800db40:	6019      	str	r1, [r3, #0]
 800db42:	e002      	b.n	800db4a <_printf_i+0x1d2>
 800db44:	0670      	lsls	r0, r6, #25
 800db46:	d5fb      	bpl.n	800db40 <_printf_i+0x1c8>
 800db48:	8019      	strh	r1, [r3, #0]
 800db4a:	2300      	movs	r3, #0
 800db4c:	4615      	mov	r5, r2
 800db4e:	6123      	str	r3, [r4, #16]
 800db50:	e7ba      	b.n	800dac8 <_printf_i+0x150>
 800db52:	682b      	ldr	r3, [r5, #0]
 800db54:	2100      	movs	r1, #0
 800db56:	1d1a      	adds	r2, r3, #4
 800db58:	602a      	str	r2, [r5, #0]
 800db5a:	681d      	ldr	r5, [r3, #0]
 800db5c:	6862      	ldr	r2, [r4, #4]
 800db5e:	4628      	mov	r0, r5
 800db60:	f000 f830 	bl	800dbc4 <memchr>
 800db64:	b108      	cbz	r0, 800db6a <_printf_i+0x1f2>
 800db66:	1b40      	subs	r0, r0, r5
 800db68:	6060      	str	r0, [r4, #4]
 800db6a:	6863      	ldr	r3, [r4, #4]
 800db6c:	6123      	str	r3, [r4, #16]
 800db6e:	2300      	movs	r3, #0
 800db70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db74:	e7a8      	b.n	800dac8 <_printf_i+0x150>
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	462a      	mov	r2, r5
 800db7a:	4649      	mov	r1, r9
 800db7c:	4640      	mov	r0, r8
 800db7e:	47d0      	blx	sl
 800db80:	3001      	adds	r0, #1
 800db82:	d0ab      	beq.n	800dadc <_printf_i+0x164>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	079b      	lsls	r3, r3, #30
 800db88:	d413      	bmi.n	800dbb2 <_printf_i+0x23a>
 800db8a:	68e0      	ldr	r0, [r4, #12]
 800db8c:	9b03      	ldr	r3, [sp, #12]
 800db8e:	4298      	cmp	r0, r3
 800db90:	bfb8      	it	lt
 800db92:	4618      	movlt	r0, r3
 800db94:	e7a4      	b.n	800dae0 <_printf_i+0x168>
 800db96:	2301      	movs	r3, #1
 800db98:	4632      	mov	r2, r6
 800db9a:	4649      	mov	r1, r9
 800db9c:	4640      	mov	r0, r8
 800db9e:	47d0      	blx	sl
 800dba0:	3001      	adds	r0, #1
 800dba2:	d09b      	beq.n	800dadc <_printf_i+0x164>
 800dba4:	3501      	adds	r5, #1
 800dba6:	68e3      	ldr	r3, [r4, #12]
 800dba8:	9903      	ldr	r1, [sp, #12]
 800dbaa:	1a5b      	subs	r3, r3, r1
 800dbac:	42ab      	cmp	r3, r5
 800dbae:	dcf2      	bgt.n	800db96 <_printf_i+0x21e>
 800dbb0:	e7eb      	b.n	800db8a <_printf_i+0x212>
 800dbb2:	2500      	movs	r5, #0
 800dbb4:	f104 0619 	add.w	r6, r4, #25
 800dbb8:	e7f5      	b.n	800dba6 <_printf_i+0x22e>
 800dbba:	bf00      	nop
 800dbbc:	0800e127 	.word	0x0800e127
 800dbc0:	0800e138 	.word	0x0800e138

0800dbc4 <memchr>:
 800dbc4:	b2c9      	uxtb	r1, r1
 800dbc6:	4402      	add	r2, r0
 800dbc8:	b510      	push	{r4, lr}
 800dbca:	4290      	cmp	r0, r2
 800dbcc:	4603      	mov	r3, r0
 800dbce:	d101      	bne.n	800dbd4 <memchr+0x10>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e003      	b.n	800dbdc <memchr+0x18>
 800dbd4:	781c      	ldrb	r4, [r3, #0]
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	428c      	cmp	r4, r1
 800dbda:	d1f6      	bne.n	800dbca <memchr+0x6>
 800dbdc:	4618      	mov	r0, r3
 800dbde:	bd10      	pop	{r4, pc}

0800dbe0 <memcpy>:
 800dbe0:	440a      	add	r2, r1
 800dbe2:	1e43      	subs	r3, r0, #1
 800dbe4:	4291      	cmp	r1, r2
 800dbe6:	d100      	bne.n	800dbea <memcpy+0xa>
 800dbe8:	4770      	bx	lr
 800dbea:	b510      	push	{r4, lr}
 800dbec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbf0:	4291      	cmp	r1, r2
 800dbf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbf6:	d1f9      	bne.n	800dbec <memcpy+0xc>
 800dbf8:	bd10      	pop	{r4, pc}

0800dbfa <memmove>:
 800dbfa:	4288      	cmp	r0, r1
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	eb01 0402 	add.w	r4, r1, r2
 800dc02:	d902      	bls.n	800dc0a <memmove+0x10>
 800dc04:	4284      	cmp	r4, r0
 800dc06:	4623      	mov	r3, r4
 800dc08:	d807      	bhi.n	800dc1a <memmove+0x20>
 800dc0a:	1e43      	subs	r3, r0, #1
 800dc0c:	42a1      	cmp	r1, r4
 800dc0e:	d008      	beq.n	800dc22 <memmove+0x28>
 800dc10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc18:	e7f8      	b.n	800dc0c <memmove+0x12>
 800dc1a:	4402      	add	r2, r0
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	428a      	cmp	r2, r1
 800dc20:	d100      	bne.n	800dc24 <memmove+0x2a>
 800dc22:	bd10      	pop	{r4, pc}
 800dc24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc2c:	e7f7      	b.n	800dc1e <memmove+0x24>
	...

0800dc30 <_free_r>:
 800dc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc32:	2900      	cmp	r1, #0
 800dc34:	d043      	beq.n	800dcbe <_free_r+0x8e>
 800dc36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc3a:	1f0c      	subs	r4, r1, #4
 800dc3c:	9001      	str	r0, [sp, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	bfb8      	it	lt
 800dc42:	18e4      	addlt	r4, r4, r3
 800dc44:	f000 f914 	bl	800de70 <__malloc_lock>
 800dc48:	4a1e      	ldr	r2, [pc, #120]	; (800dcc4 <_free_r+0x94>)
 800dc4a:	9801      	ldr	r0, [sp, #4]
 800dc4c:	6813      	ldr	r3, [r2, #0]
 800dc4e:	b933      	cbnz	r3, 800dc5e <_free_r+0x2e>
 800dc50:	6063      	str	r3, [r4, #4]
 800dc52:	6014      	str	r4, [r2, #0]
 800dc54:	b003      	add	sp, #12
 800dc56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc5a:	f000 b90f 	b.w	800de7c <__malloc_unlock>
 800dc5e:	42a3      	cmp	r3, r4
 800dc60:	d908      	bls.n	800dc74 <_free_r+0x44>
 800dc62:	6825      	ldr	r5, [r4, #0]
 800dc64:	1961      	adds	r1, r4, r5
 800dc66:	428b      	cmp	r3, r1
 800dc68:	bf01      	itttt	eq
 800dc6a:	6819      	ldreq	r1, [r3, #0]
 800dc6c:	685b      	ldreq	r3, [r3, #4]
 800dc6e:	1949      	addeq	r1, r1, r5
 800dc70:	6021      	streq	r1, [r4, #0]
 800dc72:	e7ed      	b.n	800dc50 <_free_r+0x20>
 800dc74:	461a      	mov	r2, r3
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	b10b      	cbz	r3, 800dc7e <_free_r+0x4e>
 800dc7a:	42a3      	cmp	r3, r4
 800dc7c:	d9fa      	bls.n	800dc74 <_free_r+0x44>
 800dc7e:	6811      	ldr	r1, [r2, #0]
 800dc80:	1855      	adds	r5, r2, r1
 800dc82:	42a5      	cmp	r5, r4
 800dc84:	d10b      	bne.n	800dc9e <_free_r+0x6e>
 800dc86:	6824      	ldr	r4, [r4, #0]
 800dc88:	4421      	add	r1, r4
 800dc8a:	1854      	adds	r4, r2, r1
 800dc8c:	6011      	str	r1, [r2, #0]
 800dc8e:	42a3      	cmp	r3, r4
 800dc90:	d1e0      	bne.n	800dc54 <_free_r+0x24>
 800dc92:	681c      	ldr	r4, [r3, #0]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	4421      	add	r1, r4
 800dc98:	6053      	str	r3, [r2, #4]
 800dc9a:	6011      	str	r1, [r2, #0]
 800dc9c:	e7da      	b.n	800dc54 <_free_r+0x24>
 800dc9e:	d902      	bls.n	800dca6 <_free_r+0x76>
 800dca0:	230c      	movs	r3, #12
 800dca2:	6003      	str	r3, [r0, #0]
 800dca4:	e7d6      	b.n	800dc54 <_free_r+0x24>
 800dca6:	6825      	ldr	r5, [r4, #0]
 800dca8:	1961      	adds	r1, r4, r5
 800dcaa:	428b      	cmp	r3, r1
 800dcac:	bf02      	ittt	eq
 800dcae:	6819      	ldreq	r1, [r3, #0]
 800dcb0:	685b      	ldreq	r3, [r3, #4]
 800dcb2:	1949      	addeq	r1, r1, r5
 800dcb4:	6063      	str	r3, [r4, #4]
 800dcb6:	bf08      	it	eq
 800dcb8:	6021      	streq	r1, [r4, #0]
 800dcba:	6054      	str	r4, [r2, #4]
 800dcbc:	e7ca      	b.n	800dc54 <_free_r+0x24>
 800dcbe:	b003      	add	sp, #12
 800dcc0:	bd30      	pop	{r4, r5, pc}
 800dcc2:	bf00      	nop
 800dcc4:	2000038c 	.word	0x2000038c

0800dcc8 <sbrk_aligned>:
 800dcc8:	b570      	push	{r4, r5, r6, lr}
 800dcca:	4e0e      	ldr	r6, [pc, #56]	; (800dd04 <sbrk_aligned+0x3c>)
 800dccc:	460c      	mov	r4, r1
 800dcce:	4605      	mov	r5, r0
 800dcd0:	6831      	ldr	r1, [r6, #0]
 800dcd2:	b911      	cbnz	r1, 800dcda <sbrk_aligned+0x12>
 800dcd4:	f000 f8bc 	bl	800de50 <_sbrk_r>
 800dcd8:	6030      	str	r0, [r6, #0]
 800dcda:	4621      	mov	r1, r4
 800dcdc:	4628      	mov	r0, r5
 800dcde:	f000 f8b7 	bl	800de50 <_sbrk_r>
 800dce2:	1c43      	adds	r3, r0, #1
 800dce4:	d00a      	beq.n	800dcfc <sbrk_aligned+0x34>
 800dce6:	1cc4      	adds	r4, r0, #3
 800dce8:	f024 0403 	bic.w	r4, r4, #3
 800dcec:	42a0      	cmp	r0, r4
 800dcee:	d007      	beq.n	800dd00 <sbrk_aligned+0x38>
 800dcf0:	1a21      	subs	r1, r4, r0
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	f000 f8ac 	bl	800de50 <_sbrk_r>
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	d101      	bne.n	800dd00 <sbrk_aligned+0x38>
 800dcfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dd00:	4620      	mov	r0, r4
 800dd02:	bd70      	pop	{r4, r5, r6, pc}
 800dd04:	20000390 	.word	0x20000390

0800dd08 <_malloc_r>:
 800dd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0c:	1ccd      	adds	r5, r1, #3
 800dd0e:	4607      	mov	r7, r0
 800dd10:	f025 0503 	bic.w	r5, r5, #3
 800dd14:	3508      	adds	r5, #8
 800dd16:	2d0c      	cmp	r5, #12
 800dd18:	bf38      	it	cc
 800dd1a:	250c      	movcc	r5, #12
 800dd1c:	2d00      	cmp	r5, #0
 800dd1e:	db01      	blt.n	800dd24 <_malloc_r+0x1c>
 800dd20:	42a9      	cmp	r1, r5
 800dd22:	d905      	bls.n	800dd30 <_malloc_r+0x28>
 800dd24:	230c      	movs	r3, #12
 800dd26:	2600      	movs	r6, #0
 800dd28:	603b      	str	r3, [r7, #0]
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd30:	4e2e      	ldr	r6, [pc, #184]	; (800ddec <_malloc_r+0xe4>)
 800dd32:	f000 f89d 	bl	800de70 <__malloc_lock>
 800dd36:	6833      	ldr	r3, [r6, #0]
 800dd38:	461c      	mov	r4, r3
 800dd3a:	bb34      	cbnz	r4, 800dd8a <_malloc_r+0x82>
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	4638      	mov	r0, r7
 800dd40:	f7ff ffc2 	bl	800dcc8 <sbrk_aligned>
 800dd44:	1c43      	adds	r3, r0, #1
 800dd46:	4604      	mov	r4, r0
 800dd48:	d14d      	bne.n	800dde6 <_malloc_r+0xde>
 800dd4a:	6834      	ldr	r4, [r6, #0]
 800dd4c:	4626      	mov	r6, r4
 800dd4e:	2e00      	cmp	r6, #0
 800dd50:	d140      	bne.n	800ddd4 <_malloc_r+0xcc>
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	4631      	mov	r1, r6
 800dd56:	4638      	mov	r0, r7
 800dd58:	eb04 0803 	add.w	r8, r4, r3
 800dd5c:	f000 f878 	bl	800de50 <_sbrk_r>
 800dd60:	4580      	cmp	r8, r0
 800dd62:	d13a      	bne.n	800ddda <_malloc_r+0xd2>
 800dd64:	6821      	ldr	r1, [r4, #0]
 800dd66:	3503      	adds	r5, #3
 800dd68:	4638      	mov	r0, r7
 800dd6a:	1a6d      	subs	r5, r5, r1
 800dd6c:	f025 0503 	bic.w	r5, r5, #3
 800dd70:	3508      	adds	r5, #8
 800dd72:	2d0c      	cmp	r5, #12
 800dd74:	bf38      	it	cc
 800dd76:	250c      	movcc	r5, #12
 800dd78:	4629      	mov	r1, r5
 800dd7a:	f7ff ffa5 	bl	800dcc8 <sbrk_aligned>
 800dd7e:	3001      	adds	r0, #1
 800dd80:	d02b      	beq.n	800ddda <_malloc_r+0xd2>
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	442b      	add	r3, r5
 800dd86:	6023      	str	r3, [r4, #0]
 800dd88:	e00e      	b.n	800dda8 <_malloc_r+0xa0>
 800dd8a:	6822      	ldr	r2, [r4, #0]
 800dd8c:	1b52      	subs	r2, r2, r5
 800dd8e:	d41e      	bmi.n	800ddce <_malloc_r+0xc6>
 800dd90:	2a0b      	cmp	r2, #11
 800dd92:	d916      	bls.n	800ddc2 <_malloc_r+0xba>
 800dd94:	1961      	adds	r1, r4, r5
 800dd96:	42a3      	cmp	r3, r4
 800dd98:	6025      	str	r5, [r4, #0]
 800dd9a:	bf18      	it	ne
 800dd9c:	6059      	strne	r1, [r3, #4]
 800dd9e:	6863      	ldr	r3, [r4, #4]
 800dda0:	bf08      	it	eq
 800dda2:	6031      	streq	r1, [r6, #0]
 800dda4:	5162      	str	r2, [r4, r5]
 800dda6:	604b      	str	r3, [r1, #4]
 800dda8:	f104 060b 	add.w	r6, r4, #11
 800ddac:	4638      	mov	r0, r7
 800ddae:	f000 f865 	bl	800de7c <__malloc_unlock>
 800ddb2:	1d23      	adds	r3, r4, #4
 800ddb4:	f026 0607 	bic.w	r6, r6, #7
 800ddb8:	1af2      	subs	r2, r6, r3
 800ddba:	d0b6      	beq.n	800dd2a <_malloc_r+0x22>
 800ddbc:	1b9b      	subs	r3, r3, r6
 800ddbe:	50a3      	str	r3, [r4, r2]
 800ddc0:	e7b3      	b.n	800dd2a <_malloc_r+0x22>
 800ddc2:	6862      	ldr	r2, [r4, #4]
 800ddc4:	42a3      	cmp	r3, r4
 800ddc6:	bf0c      	ite	eq
 800ddc8:	6032      	streq	r2, [r6, #0]
 800ddca:	605a      	strne	r2, [r3, #4]
 800ddcc:	e7ec      	b.n	800dda8 <_malloc_r+0xa0>
 800ddce:	4623      	mov	r3, r4
 800ddd0:	6864      	ldr	r4, [r4, #4]
 800ddd2:	e7b2      	b.n	800dd3a <_malloc_r+0x32>
 800ddd4:	4634      	mov	r4, r6
 800ddd6:	6876      	ldr	r6, [r6, #4]
 800ddd8:	e7b9      	b.n	800dd4e <_malloc_r+0x46>
 800ddda:	230c      	movs	r3, #12
 800dddc:	4638      	mov	r0, r7
 800ddde:	603b      	str	r3, [r7, #0]
 800dde0:	f000 f84c 	bl	800de7c <__malloc_unlock>
 800dde4:	e7a1      	b.n	800dd2a <_malloc_r+0x22>
 800dde6:	6025      	str	r5, [r4, #0]
 800dde8:	e7de      	b.n	800dda8 <_malloc_r+0xa0>
 800ddea:	bf00      	nop
 800ddec:	2000038c 	.word	0x2000038c

0800ddf0 <_realloc_r>:
 800ddf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	4614      	mov	r4, r2
 800ddf8:	460e      	mov	r6, r1
 800ddfa:	b921      	cbnz	r1, 800de06 <_realloc_r+0x16>
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de02:	f7ff bf81 	b.w	800dd08 <_malloc_r>
 800de06:	b92a      	cbnz	r2, 800de14 <_realloc_r+0x24>
 800de08:	4625      	mov	r5, r4
 800de0a:	f7ff ff11 	bl	800dc30 <_free_r>
 800de0e:	4628      	mov	r0, r5
 800de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de14:	f000 f838 	bl	800de88 <_malloc_usable_size_r>
 800de18:	4284      	cmp	r4, r0
 800de1a:	4607      	mov	r7, r0
 800de1c:	d802      	bhi.n	800de24 <_realloc_r+0x34>
 800de1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de22:	d812      	bhi.n	800de4a <_realloc_r+0x5a>
 800de24:	4621      	mov	r1, r4
 800de26:	4640      	mov	r0, r8
 800de28:	f7ff ff6e 	bl	800dd08 <_malloc_r>
 800de2c:	4605      	mov	r5, r0
 800de2e:	2800      	cmp	r0, #0
 800de30:	d0ed      	beq.n	800de0e <_realloc_r+0x1e>
 800de32:	42bc      	cmp	r4, r7
 800de34:	4622      	mov	r2, r4
 800de36:	4631      	mov	r1, r6
 800de38:	bf28      	it	cs
 800de3a:	463a      	movcs	r2, r7
 800de3c:	f7ff fed0 	bl	800dbe0 <memcpy>
 800de40:	4631      	mov	r1, r6
 800de42:	4640      	mov	r0, r8
 800de44:	f7ff fef4 	bl	800dc30 <_free_r>
 800de48:	e7e1      	b.n	800de0e <_realloc_r+0x1e>
 800de4a:	4635      	mov	r5, r6
 800de4c:	e7df      	b.n	800de0e <_realloc_r+0x1e>
	...

0800de50 <_sbrk_r>:
 800de50:	b538      	push	{r3, r4, r5, lr}
 800de52:	2300      	movs	r3, #0
 800de54:	4d05      	ldr	r5, [pc, #20]	; (800de6c <_sbrk_r+0x1c>)
 800de56:	4604      	mov	r4, r0
 800de58:	4608      	mov	r0, r1
 800de5a:	602b      	str	r3, [r5, #0]
 800de5c:	f7f3 fe74 	bl	8001b48 <_sbrk>
 800de60:	1c43      	adds	r3, r0, #1
 800de62:	d102      	bne.n	800de6a <_sbrk_r+0x1a>
 800de64:	682b      	ldr	r3, [r5, #0]
 800de66:	b103      	cbz	r3, 800de6a <_sbrk_r+0x1a>
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	bd38      	pop	{r3, r4, r5, pc}
 800de6c:	20000394 	.word	0x20000394

0800de70 <__malloc_lock>:
 800de70:	4801      	ldr	r0, [pc, #4]	; (800de78 <__malloc_lock+0x8>)
 800de72:	f000 b811 	b.w	800de98 <__retarget_lock_acquire_recursive>
 800de76:	bf00      	nop
 800de78:	20000398 	.word	0x20000398

0800de7c <__malloc_unlock>:
 800de7c:	4801      	ldr	r0, [pc, #4]	; (800de84 <__malloc_unlock+0x8>)
 800de7e:	f000 b80c 	b.w	800de9a <__retarget_lock_release_recursive>
 800de82:	bf00      	nop
 800de84:	20000398 	.word	0x20000398

0800de88 <_malloc_usable_size_r>:
 800de88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8c:	1f18      	subs	r0, r3, #4
 800de8e:	2b00      	cmp	r3, #0
 800de90:	bfbc      	itt	lt
 800de92:	580b      	ldrlt	r3, [r1, r0]
 800de94:	18c0      	addlt	r0, r0, r3
 800de96:	4770      	bx	lr

0800de98 <__retarget_lock_acquire_recursive>:
 800de98:	4770      	bx	lr

0800de9a <__retarget_lock_release_recursive>:
 800de9a:	4770      	bx	lr

0800de9c <_init>:
 800de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9e:	bf00      	nop
 800dea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea2:	bc08      	pop	{r3}
 800dea4:	469e      	mov	lr, r3
 800dea6:	4770      	bx	lr

0800dea8 <_fini>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	bf00      	nop
 800deac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deae:	bc08      	pop	{r3}
 800deb0:	469e      	mov	lr, r3
 800deb2:	4770      	bx	lr
