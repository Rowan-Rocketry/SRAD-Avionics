
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f64  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000173  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a310  0800a310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800a320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005f1  20000070  0800a390  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  20000661  0800a390  00020661  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f73f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033a4  00000000  00000000  0003f7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001840  00000000  00000000  00042b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016f8  00000000  00000000  000443d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000314ea  00000000  00000000  00045ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e13c  00000000  00000000  00076fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001366ad  00000000  00000000  000950ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cb79b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c94  00000000  00000000  001cb7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a184 	.word	0x0800a184

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800a184 	.word	0x0800a184

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <LSM6DSL_config>:

static int16_t accel[3];
static int16_t gyro[3];

void LSM6DSL_config(LSM6DSL_HandleTypeDef* LSM6DSL_initStruct)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	config = LSM6DSL_initStruct;
 80005a0:	4a3b      	ldr	r2, [pc, #236]	; (8000690 <LSM6DSL_config+0xf8>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]

	switch (config->accelFullScale)
 80005a6:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <LSM6DSL_config+0xf8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	7adb      	ldrb	r3, [r3, #11]
 80005ac:	2b0a      	cmp	r3, #10
 80005ae:	d82c      	bhi.n	800060a <LSM6DSL_config+0x72>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <LSM6DSL_config+0x20>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	080005e5 	.word	0x080005e5
 80005bc:	0800060b 	.word	0x0800060b
 80005c0:	0800060b 	.word	0x0800060b
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000603 	.word	0x08000603
 80005cc:	0800060b 	.word	0x0800060b
 80005d0:	0800060b 	.word	0x0800060b
 80005d4:	0800060b 	.word	0x0800060b
 80005d8:	080005ef 	.word	0x080005ef
 80005dc:	0800060b 	.word	0x0800060b
 80005e0:	080005f9 	.word	0x080005f9
	{
		case LSM6DSL_ACCEL_FS_PM_2:
			config->accelSensitivity = 0.061f;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <LSM6DSL_config+0xf8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <LSM6DSL_config+0xfc>)
 80005ea:	611a      	str	r2, [r3, #16]
			break;
 80005ec:	e00d      	b.n	800060a <LSM6DSL_config+0x72>
		case LSM6DSL_ACCEL_FS_PM_4:
			config->accelSensitivity = 0.122f;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <LSM6DSL_config+0xf8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a29      	ldr	r2, [pc, #164]	; (8000698 <LSM6DSL_config+0x100>)
 80005f4:	611a      	str	r2, [r3, #16]
			break;
 80005f6:	e008      	b.n	800060a <LSM6DSL_config+0x72>
		case LSM6DSL_ACCEL_FS_PM_8:
			config->accelSensitivity = 0.244f;
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <LSM6DSL_config+0xf8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <LSM6DSL_config+0x104>)
 80005fe:	611a      	str	r2, [r3, #16]
			break;
 8000600:	e003      	b.n	800060a <LSM6DSL_config+0x72>
		case LSM6DSL_ACCEL_FS_PM_16:
			config->accelSensitivity = 0.488f;
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <LSM6DSL_config+0xf8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <LSM6DSL_config+0x108>)
 8000608:	611a      	str	r2, [r3, #16]
	}

	switch (config->gyroFullScale)
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <LSM6DSL_config+0xf8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	7b1b      	ldrb	r3, [r3, #12]
 8000610:	2b0c      	cmp	r3, #12
 8000612:	d836      	bhi.n	8000682 <LSM6DSL_config+0xea>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <LSM6DSL_config+0x84>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800065b 	.word	0x0800065b
 8000620:	08000683 	.word	0x08000683
 8000624:	08000651 	.word	0x08000651
 8000628:	08000683 	.word	0x08000683
 800062c:	08000665 	.word	0x08000665
 8000630:	08000683 	.word	0x08000683
 8000634:	08000683 	.word	0x08000683
 8000638:	08000683 	.word	0x08000683
 800063c:	0800066f 	.word	0x0800066f
 8000640:	08000683 	.word	0x08000683
 8000644:	08000683 	.word	0x08000683
 8000648:	08000683 	.word	0x08000683
 800064c:	08000679 	.word	0x08000679
	{
		case LSM6DSL_GYRO_FS_PM_125:
			config->gyroSensitivity = 4.375f;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <LSM6DSL_config+0xf8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <LSM6DSL_config+0x10c>)
 8000656:	615a      	str	r2, [r3, #20]
			break;
 8000658:	e013      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_250:	
			config->gyroSensitivity = 8.75f;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <LSM6DSL_config+0xf8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <LSM6DSL_config+0x110>)
 8000660:	615a      	str	r2, [r3, #20]
			break;
 8000662:	e00e      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_500:	
			config->gyroSensitivity = 17.50f;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <LSM6DSL_config+0xf8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a10      	ldr	r2, [pc, #64]	; (80006ac <LSM6DSL_config+0x114>)
 800066a:	615a      	str	r2, [r3, #20]
			break;
 800066c:	e009      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_1000:	
			config->gyroSensitivity = 35.0f;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <LSM6DSL_config+0xf8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <LSM6DSL_config+0x118>)
 8000674:	615a      	str	r2, [r3, #20]
			break;
 8000676:	e004      	b.n	8000682 <LSM6DSL_config+0xea>
		case LSM6DSL_GYRO_FS_PM_2000:	
			config->gyroSensitivity = 70.0f;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <LSM6DSL_config+0xf8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LSM6DSL_config+0x11c>)
 800067e:	615a      	str	r2, [r3, #20]
	}
}
 8000680:	e7ff      	b.n	8000682 <LSM6DSL_config+0xea>
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000008c 	.word	0x2000008c
 8000694:	3d79db23 	.word	0x3d79db23
 8000698:	3df9db23 	.word	0x3df9db23
 800069c:	3e79db23 	.word	0x3e79db23
 80006a0:	3ef9db23 	.word	0x3ef9db23
 80006a4:	408c0000 	.word	0x408c0000
 80006a8:	410c0000 	.word	0x410c0000
 80006ac:	418c0000 	.word	0x418c0000
 80006b0:	420c0000 	.word	0x420c0000
 80006b4:	428c0000 	.word	0x428c0000

080006b8 <LSM6DSL_init>:

void LSM6DSL_init()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	LSM6DSL_disable();
 80006bc:	f000 f896 	bl	80007ec <LSM6DSL_disable>

	// Send software reset
	LSM6DSL_writeRegister(LSM6DSL_CTRL3_C, LSM6DSL_SW_RESET);
 80006c0:	2101      	movs	r1, #1
 80006c2:	2012      	movs	r0, #18
 80006c4:	f000 f824 	bl	8000710 <LSM6DSL_writeRegister>

	// Configure interrupts when data is ready
	LSM6DSL_writeRegister(LSM6DSL_INT1_CTRL, LSM6DSL_ACCEL_READY);
 80006c8:	2101      	movs	r1, #1
 80006ca:	200d      	movs	r0, #13
 80006cc:	f000 f820 	bl	8000710 <LSM6DSL_writeRegister>
	LSM6DSL_writeRegister(LSM6DSL_INT2_CTRL, LSM6DSL_GYRO_READY);
 80006d0:	2102      	movs	r1, #2
 80006d2:	200e      	movs	r0, #14
 80006d4:	f000 f81c 	bl	8000710 <LSM6DSL_writeRegister>

	// Configure data rate and measurement scale
	LSM6DSL_writeRegister(LSM6DSL_CTRL1_XL, config->outputDataRate | config->accelFullScale);
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <LSM6DSL_init+0x54>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	7a9a      	ldrb	r2, [r3, #10]
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <LSM6DSL_init+0x54>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7adb      	ldrb	r3, [r3, #11]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	2010      	movs	r0, #16
 80006ec:	f000 f810 	bl	8000710 <LSM6DSL_writeRegister>
	LSM6DSL_writeRegister(LSM6DSL_CTRL2_G, config->outputDataRate | config->gyroFullScale);
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LSM6DSL_init+0x54>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	7a9a      	ldrb	r2, [r3, #10]
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <LSM6DSL_init+0x54>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	7b1b      	ldrb	r3, [r3, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	2011      	movs	r0, #17
 8000704:	f000 f804 	bl	8000710 <LSM6DSL_writeRegister>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000008c 	.word	0x2000008c

08000710 <LSM6DSL_writeRegister>:
	gyro[1] = (int16_t)(gyRaw * config->gyroSensitivity);
	gyro[2] = (int16_t)(gzRaw * config->gyroSensitivity);
}

void LSM6DSL_writeRegister(uint8_t reg, uint8_t val)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[] = {
		reg & LSM6DSL_WRITE,
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000726:	b2db      	uxtb	r3, r3
	uint8_t buffer[] = {
 8000728:	733b      	strb	r3, [r7, #12]
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	737b      	strb	r3, [r7, #13]
		val
	};

	LSM6DSL_enable();
 800072e:	f000 f84d 	bl	80007cc <LSM6DSL_enable>
	HAL_SPI_Transmit(config->spi, &buffer, 2, 100);
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <LSM6DSL_writeRegister+0x40>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	f107 010c 	add.w	r1, r7, #12
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2202      	movs	r2, #2
 8000740:	f007 f814 	bl	800776c <HAL_SPI_Transmit>
	LSM6DSL_disable();
 8000744:	f000 f852 	bl	80007ec <LSM6DSL_disable>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000008c 	.word	0x2000008c

08000754 <LSM6DSL_getAccel>:

	return buffer.result;
}

void LSM6DSL_getAccel(int16_t* dest)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	dest[0] = accel[0];
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <LSM6DSL_getAccel+0x38>)
 800075e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	801a      	strh	r2, [r3, #0]
	dest[1] = accel[1];
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3302      	adds	r3, #2
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <LSM6DSL_getAccel+0x38>)
 800076c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000770:	801a      	strh	r2, [r3, #0]
	dest[2] = accel[2];
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3304      	adds	r3, #4
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <LSM6DSL_getAccel+0x38>)
 8000778:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800077c:	801a      	strh	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000090 	.word	0x20000090

08000790 <LSM6DSL_getGyro>:

void LSM6DSL_getGyro(int16_t* dest)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	dest[0] = gyro[0];
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LSM6DSL_getGyro+0x38>)
 800079a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	801a      	strh	r2, [r3, #0]
	dest[1] = gyro[1];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3302      	adds	r3, #2
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <LSM6DSL_getGyro+0x38>)
 80007a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80007ac:	801a      	strh	r2, [r3, #0]
	dest[2] = gyro[2];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3304      	adds	r3, #4
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <LSM6DSL_getGyro+0x38>)
 80007b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80007b8:	801a      	strh	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000098 	.word	0x20000098

080007cc <LSM6DSL_enable>:

void LSM6DSL_enable()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	// Set cs low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LSM6DSL_enable+0x1c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6858      	ldr	r0, [r3, #4]
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <LSM6DSL_enable+0x1c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	891b      	ldrh	r3, [r3, #8]
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	f001 fdc4 	bl	800236c <HAL_GPIO_WritePin>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c

080007ec <LSM6DSL_disable>:

void LSM6DSL_disable()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	// Set cs high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <LSM6DSL_disable+0x1c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6858      	ldr	r0, [r3, #4]
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LSM6DSL_disable+0x1c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	891b      	ldrh	r3, [r3, #8]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	f001 fdb4 	bl	800236c <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000008c 	.word	0x2000008c

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0a4      	sub	sp, #144	; 0x90
 8000810:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f001 fa47 	bl	8001ca4 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b69      	ldr	r3, [pc, #420]	; (80009bc <main+0x1b0>)
 8000818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800081c:	4a67      	ldr	r2, [pc, #412]	; (80009bc <main+0x1b0>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000826:	4b65      	ldr	r3, [pc, #404]	; (80009bc <main+0x1b0>)
 8000828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	697b      	ldr	r3, [r7, #20]

  // Configure MS5607
	MS5607_HandleTypeDef ms5607Config = {0};
 8000834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
  	ms5607Config.spi = &hspi1;
 8000842:	4b5f      	ldr	r3, [pc, #380]	; (80009c0 <main+0x1b4>)
 8000844:	643b      	str	r3, [r7, #64]	; 0x40
  	ms5607Config.timer = &htim16;
 8000846:	4b5f      	ldr	r3, [pc, #380]	; (80009c4 <main+0x1b8>)
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  	ms5607Config.csPort = GPIOA;
 800084a:	4b5f      	ldr	r3, [pc, #380]	; (80009c8 <main+0x1bc>)
 800084c:	64bb      	str	r3, [r7, #72]	; 0x48
  	ms5607Config.csPin = GPIO_PIN_3;
 800084e:	2308      	movs	r3, #8
 8000850:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  	ms5607Config.osr = MS5607_OSR_1024;
 8000854:	2304      	movs	r3, #4
 8000856:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	MS5607_config(&ms5607Config);
 800085a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fb5e 	bl	8000f20 <MS5607_config>

	LSM6DSL_HandleTypeDef lsm6dslConfig = {0};
 8000864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
	lsm6dslConfig.spi = &hspi2;
 8000876:	4b55      	ldr	r3, [pc, #340]	; (80009cc <main+0x1c0>)
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
	lsm6dslConfig.csPort = GPIOH;
 800087a:	4b55      	ldr	r3, [pc, #340]	; (80009d0 <main+0x1c4>)
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
	lsm6dslConfig.csPin = GPIO_PIN_1;
 800087e:	2302      	movs	r3, #2
 8000880:	863b      	strh	r3, [r7, #48]	; 0x30
	lsm6dslConfig.outputDataRate = LSM6DSL_ODR_104_HZ;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	lsm6dslConfig.accelFullScale = LSM6DSL_ACCEL_FS_PM_16;
 8000888:	2304      	movs	r3, #4
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	lsm6dslConfig.gyroFullScale = LSM6DSL_GYRO_FS_PM_500;
 800088e:	2304      	movs	r3, #4
 8000890:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	LSM6DSL_config(&lsm6dslConfig);
 8000894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe7d 	bl	8000598 <LSM6DSL_config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f8a5 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 faa1 	bl	8000de8 <MX_GPIO_Init>
  MX_TIM16_Init();
 80008a6:	f000 f9fb 	bl	8000ca0 <MX_TIM16_Init>
  MX_SPI1_Init();
 80008aa:	f000 f91d 	bl	8000ae8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80008ae:	f000 f989 	bl	8000bc4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80008b2:	f000 fa21 	bl	8000cf8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80008b6:	f000 f8f3 	bl	8000aa0 <MX_SDMMC1_SD_Init>
  MX_USB_PCD_Init();
 80008ba:	f000 fa69 	bl	8000d90 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  	MS5607_init();
 80008be:	f000 fb85 	bl	8000fcc <MS5607_init>
	LSM6DSL_init();
 80008c2:	f7ff fef9 	bl	80006b8 <LSM6DSL_init>

	MS5607_readUncompPres();
 80008c6:	f000 fe19 	bl	80014fc <MS5607_readUncompPres>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	//writePressure();
	if (MS5607_getState() == MS5607_IDLE)
 80008ca:	f000 fe75 	bl	80015b8 <MS5607_getState>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d1fa      	bne.n	80008ca <main+0xbe>
	{
		// Get result of digital read
		MS5607_RawVal rawVals = MS5607_getRawValues();
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fe4f 	bl	800157c <MS5607_getRawValues>

		// Compensate digital reading
		MS5607_CompVal compVals = MS5607_getCompValues(&rawVals);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	f107 020c 	add.w	r2, r7, #12
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fb8c 	bl	8001004 <MS5607_getCompValues>

		LSM6DSL_getAccel(&accel);
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff2f 	bl	8000754 <LSM6DSL_getAccel>
		LSM6DSL_getGyro(&gyro);
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff48 	bl	8000790 <LSM6DSL_getGyro>

		uartBufferLen = sprintf(uartBuffer, "Time: %d\n", HAL_GetTick());
 8000900:	f001 fa48 	bl	8001d94 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800090a:	4932      	ldr	r1, [pc, #200]	; (80009d4 <main+0x1c8>)
 800090c:	4618      	mov	r0, r3
 800090e:	f008 ffbb 	bl	8009888 <siprintf>
 8000912:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800091a:	b29a      	uxth	r2, r3
 800091c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	482d      	ldr	r0, [pc, #180]	; (80009d8 <main+0x1cc>)
 8000924:	f007 fcac 	bl	8008280 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Pres: %d\n", pressure);
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <main+0x1d0>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000930:	492b      	ldr	r1, [pc, #172]	; (80009e0 <main+0x1d4>)
 8000932:	4618      	mov	r0, r3
 8000934:	f008 ffa8 	bl	8009888 <siprintf>
 8000938:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 800093c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000940:	b29a      	uxth	r2, r3
 8000942:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000946:	2364      	movs	r3, #100	; 0x64
 8000948:	4823      	ldr	r0, [pc, #140]	; (80009d8 <main+0x1cc>)
 800094a:	f007 fc99 	bl	8008280 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Accel: %d %d %d\n", accel[0], accel[1], accel[2]);
 800094e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000952:	461a      	mov	r2, r3
 8000954:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000958:	4619      	mov	r1, r3
 800095a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800095e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	460b      	mov	r3, r1
 8000966:	491f      	ldr	r1, [pc, #124]	; (80009e4 <main+0x1d8>)
 8000968:	f008 ff8e 	bl	8009888 <siprintf>
 800096c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000974:	b29a      	uxth	r2, r3
 8000976:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	4816      	ldr	r0, [pc, #88]	; (80009d8 <main+0x1cc>)
 800097e:	f007 fc7f 	bl	8008280 <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Gyro: %d %d %d\n", accel[0], accel[1], accel[2]);
 8000982:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000986:	461a      	mov	r2, r3
 8000988:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800098c:	4619      	mov	r1, r3
 800098e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000992:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	460b      	mov	r3, r1
 800099a:	4913      	ldr	r1, [pc, #76]	; (80009e8 <main+0x1dc>)
 800099c:	f008 ff74 	bl	8009888 <siprintf>
 80009a0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 80009a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <main+0x1cc>)
 80009b2:	f007 fc65 	bl	8008280 <HAL_UART_Transmit>

		// Measure again
		MS5607_readUncompPres();
 80009b6:	f000 fda1 	bl	80014fc <MS5607_readUncompPres>
	if (MS5607_getState() == MS5607_IDLE)
 80009ba:	e786      	b.n	80008ca <main+0xbe>
 80009bc:	46020c00 	.word	0x46020c00
 80009c0:	2000011c 	.word	0x2000011c
 80009c4:	2000023c 	.word	0x2000023c
 80009c8:	42020000 	.word	0x42020000
 80009cc:	200001ac 	.word	0x200001ac
 80009d0:	42021c00 	.word	0x42021c00
 80009d4:	0800a19c 	.word	0x0800a19c
 80009d8:	20000288 	.word	0x20000288
 80009dc:	20000628 	.word	0x20000628
 80009e0:	0800a1a8 	.word	0x0800a1a8
 80009e4:	0800a1b4 	.word	0x0800a1b4
 80009e8:	0800a1c8 	.word	0x0800a1c8

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b09e      	sub	sp, #120	; 0x78
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2260      	movs	r2, #96	; 0x60
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 ff3c 	bl	8009878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000a10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a14:	f001 fdf0 	bl	80025f8 <HAL_PWREx_ControlVoltageScaling>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000a1e:	f000 fa79 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000a40:	230c      	movs	r3, #12
 8000a42:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000a50:	230c      	movs	r3, #12
 8000a52:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 0318 	add.w	r3, r7, #24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fe67 	bl	8002730 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a68:	f000 fa54 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6c:	231f      	movs	r3, #31
 8000a6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a70:	2303      	movs	r3, #3
 8000a72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000a78:	2370      	movs	r3, #112	; 0x70
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000a7c:	2370      	movs	r3, #112	; 0x70
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fd2d 	bl	80034e8 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a94:	f000 fa3e 	bl	8000f14 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3778      	adds	r7, #120	; 0x78
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_SDMMC1_SD_Init+0x40>)
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <MX_SDMMC1_SD_Init+0x44>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_SDMMC1_SD_Init+0x40>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_SDMMC1_SD_Init+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_SDMMC1_SD_Init+0x40>)
 8000ab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_SDMMC1_SD_Init+0x40>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 15;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_SDMMC1_SD_Init+0x40>)
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_SDMMC1_SD_Init+0x40>)
 8000acc:	f005 fcca 	bl	8006464 <HAL_SD_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000ad6:	f000 fa1d 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000a0 	.word	0x200000a0
 8000ae4:	420c8000 	.word	0x420c8000

08000ae8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000afa:	4a31      	ldr	r2, [pc, #196]	; (8000bc0 <MX_SPI1_Init+0xd8>)
 8000afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b0e:	2207      	movs	r2, #7
 8000b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2c:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000b82:	f006 fcdd 	bl	8007540 <HAL_SPI_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 8000b8c:	f000 f9c2 	bl	8000f14 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_SPI1_Init+0xd4>)
 8000ba4:	f007 f8e9 	bl	8007d7a <HAL_SPIEx_SetConfigAutonomousMode>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 8000bae:	f000 f9b1 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000011c 	.word	0x2000011c
 8000bc0:	40013000 	.word	0x40013000

08000bc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000bd6:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <MX_SPI2_Init+0xd8>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000bdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000be0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000bfc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c5e:	480e      	ldr	r0, [pc, #56]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c60:	f006 fc6e 	bl	8007540 <HAL_SPI_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000c6a:	f000 f953 	bl	8000f14 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000c72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c76:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_SPI2_Init+0xd4>)
 8000c82:	f007 f87a 	bl	8007d7a <HAL_SPIEx_SetConfigAutonomousMode>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000c8c:	f000 f942 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200001ac 	.word	0x200001ac
 8000c9c:	40003800 	.word	0x40003800

08000ca0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	uint16_t ms5607MeasurementDelay = MS5607_getMeasurementDelay();
 8000ca6:	f000 fc7b 	bl	80015a0 <MS5607_getMeasurementDelay>
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cb0:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <MX_TIM16_Init+0x54>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cb6:	22ef      	movs	r2, #239	; 0xef
 8000cb8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = ms5607MeasurementDelay;
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cc4:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_TIM16_Init+0x50>)
 8000cda:	f007 f88f 	bl	8007dfc <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM16_Init+0x48>
  {
    Error_Handler();
 8000ce4:	f000 f916 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000023c 	.word	0x2000023c
 8000cf4:	40014400 	.word	0x40014400

08000cf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000cfe:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <MX_USART1_UART_Init+0x94>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d42:	f007 fa4d 	bl	80081e0 <HAL_UART_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d4c:	f000 f8e2 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d50:	2100      	movs	r1, #0
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d54:	f007 ff0c 	bl	8008b70 <HAL_UARTEx_SetTxFifoThreshold>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5e:	f000 f8d9 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4808      	ldr	r0, [pc, #32]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d66:	f007 ff41 	bl	8008bec <HAL_UARTEx_SetRxFifoThreshold>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d70:	f000 f8d0 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_USART1_UART_Init+0x90>)
 8000d76:	f007 fec2 	bl	8008afe <HAL_UARTEx_DisableFifoMode>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d80:	f000 f8c8 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000288 	.word	0x20000288
 8000d8c:	40013800 	.word	0x40013800

08000d90 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <MX_USB_PCD_Init+0x54>)
 8000d98:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000da8:	2202      	movs	r2, #2
 8000daa:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_USB_PCD_Init+0x50>)
 8000dcc:	f001 fae6 	bl	800239c <HAL_PCD_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USB_PCD_Init+0x4a>
  {
    Error_Handler();
 8000dd6:	f000 f89d 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000031c 	.word	0x2000031c
 8000de4:	40016000 	.word	0x40016000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e04:	4a3e      	ldr	r2, [pc, #248]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e22:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e5e:	4a28      	ldr	r2, [pc, #160]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_GPIO_Init+0x118>)
 8000e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	481a      	ldr	r0, [pc, #104]	; (8000f04 <MX_GPIO_Init+0x11c>)
 8000e9a:	f001 fa67 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	4819      	ldr	r0, [pc, #100]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000ea4:	f001 fa62 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_GPIO_Init+0x11c>)
 8000ec0:	f001 f87c 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_GPIO_Init+0x124>)
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <MX_GPIO_Init+0x128>)
 8000ed8:	f001 f870 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000edc:	2308      	movs	r3, #8
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_GPIO_Init+0x120>)
 8000ef4:	f001 f862 	bl	8001fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	46020c00 	.word	0x46020c00
 8000f04:	42021c00 	.word	0x42021c00
 8000f08:	42020000 	.word	0x42020000
 8000f0c:	10110000 	.word	0x10110000
 8000f10:	42020800 	.word	0x42020800

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <MS5607_config>:
static uint16_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_config(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	config = MS5607_initStruct;
 8000f28:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <MS5607_config+0x9c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MS5607_config+0x9c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	7b9b      	ldrb	r3, [r3, #14]
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MS5607_config+0xa0>)
 8000f3c:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <MS5607_config+0x9c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	7b9b      	ldrb	r3, [r3, #14]
 8000f44:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MS5607_config+0xa4>)
 8000f4c:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MS5607_config+0x9c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	7b9b      	ldrb	r3, [r3, #14]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d82b      	bhi.n	8000fb0 <MS5607_config+0x90>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <MS5607_config+0x40>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f85 	.word	0x08000f85
 8000f64:	08000fb1 	.word	0x08000fb1
 8000f68:	08000f8d 	.word	0x08000f8d
 8000f6c:	08000fb1 	.word	0x08000fb1
 8000f70:	08000f95 	.word	0x08000f95
 8000f74:	08000fb1 	.word	0x08000fb1
 8000f78:	08000f9d 	.word	0x08000f9d
 8000f7c:	08000fb1 	.word	0x08000fb1
 8000f80:	08000fa7 	.word	0x08000fa7
	{
		case MS5607_OSR_256:
			measurementDelay = 50;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MS5607_config+0xa8>)
 8000f86:	2232      	movs	r2, #50	; 0x32
 8000f88:	801a      	strh	r2, [r3, #0]
			break;
 8000f8a:	e011      	b.n	8000fb0 <MS5607_config+0x90>
		case MS5607_OSR_512:
			measurementDelay = 110;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MS5607_config+0xa8>)
 8000f8e:	226e      	movs	r2, #110	; 0x6e
 8000f90:	801a      	strh	r2, [r3, #0]
			break;
 8000f92:	e00d      	b.n	8000fb0 <MS5607_config+0x90>
		case MS5607_OSR_1024:
			measurementDelay = 210;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MS5607_config+0xa8>)
 8000f96:	22d2      	movs	r2, #210	; 0xd2
 8000f98:	801a      	strh	r2, [r3, #0]
			break;
 8000f9a:	e009      	b.n	8000fb0 <MS5607_config+0x90>
		case MS5607_OSR_2048:
			measurementDelay = 410;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MS5607_config+0xa8>)
 8000f9e:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8000fa2:	801a      	strh	r2, [r3, #0]
			break;
 8000fa4:	e004      	b.n	8000fb0 <MS5607_config+0x90>
		case MS5607_OSR_4096:
			measurementDelay = 822;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MS5607_config+0xa8>)
 8000fa8:	f240 3236 	movw	r2, #822	; 0x336
 8000fac:	801a      	strh	r2, [r3, #0]
	}

}
 8000fae:	e7ff      	b.n	8000fb0 <MS5607_config+0x90>
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	2000062c 	.word	0x2000062c
 8000fc0:	20000648 	.word	0x20000648
 8000fc4:	20000649 	.word	0x20000649
 8000fc8:	20000646 	.word	0x20000646

08000fcc <MS5607_init>:

void MS5607_init()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	MS5607_disable();
 8000fd0:	f000 fac4 	bl	800155c <MS5607_disable>

	MS5607_enable();
 8000fd4:	f000 fab2 	bl	800153c <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_RESET, 1, 100);
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MS5607_init+0x2c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4906      	ldr	r1, [pc, #24]	; (8000ffc <MS5607_init+0x30>)
 8000fe4:	f006 fbc2 	bl	800776c <HAL_SPI_Transmit>
	MS5607_disable();
 8000fe8:	f000 fab8 	bl	800155c <MS5607_disable>

	state = MS5607_STARTUP;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <MS5607_init+0x34>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000062c 	.word	0x2000062c
 8000ffc:	0800a1d8 	.word	0x0800a1d8
 8001000:	20000644 	.word	0x20000644

08001004 <MS5607_getCompValues>:
		promDataPtr[promAddr-1] = ((uint8_t)responseBuffer[0]<<8) | (uint8_t)responseBuffer[1];
	}
}

MS5607_CompVal MS5607_getCompValues(MS5607_RawVal* rawVals)
{
 8001004:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001008:	b0d5      	sub	sp, #340	; 0x154
 800100a:	af00      	add	r7, sp, #0
 800100c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8001010:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
	MS5607_CompVal compVals;

	uint32_t digTemp = rawVals->temp;
 8001014:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint32_t digPres = rawVals->pres;
 800101e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	// dT = D2 - TREF
	int32_t deltaTemp = digTemp - ((int32_t)promData.tRef << 8);
 8001028:	4baf      	ldr	r3, [pc, #700]	; (80012e8 <MS5607_getCompValues+0x2e4>)
 800102a:	891b      	ldrh	r3, [r3, #8]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	461a      	mov	r2, r3
 8001030:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	
	// TEMP = 20°C + dT*TEMPSENS
	int32_t temp1 = 2000 + deltaTemp*((int32_t)promData.tempSens << 23);
 800103a:	4bab      	ldr	r3, [pc, #684]	; (80012e8 <MS5607_getCompValues+0x2e4>)
 800103c:	895b      	ldrh	r3, [r3, #10]
 800103e:	05da      	lsls	r2, r3, #23
 8001040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800104c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	// OFF = OFFT1 + TCO*dT
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8001050:	4ba5      	ldr	r3, [pc, #660]	; (80012e8 <MS5607_getCompValues+0x2e4>)
 8001052:	885b      	ldrh	r3, [r3, #2]
 8001054:	b29b      	uxth	r3, r3
 8001056:	2200      	movs	r2, #0
 8001058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800105c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001060:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8001064:	460b      	mov	r3, r1
 8001066:	0bdb      	lsrs	r3, r3, #15
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800106c:	460b      	mov	r3, r1
 800106e:	045b      	lsls	r3, r3, #17
 8001070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				   + (((int64_t)promData.tco*deltaTemp) >> 6);
 8001074:	4b9c      	ldr	r3, [pc, #624]	; (80012e8 <MS5607_getCompValues+0x2e4>)
 8001076:	88db      	ldrh	r3, [r3, #6]
 8001078:	b29b      	uxth	r3, r3
 800107a:	2200      	movs	r2, #0
 800107c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001080:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001084:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001088:	17da      	asrs	r2, r3, #31
 800108a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800108e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001092:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001096:	460b      	mov	r3, r1
 8001098:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800109c:	fb02 f203 	mul.w	r2, r2, r3
 80010a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010a4:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8
 80010a8:	4601      	mov	r1, r0
 80010aa:	fb01 f303 	mul.w	r3, r1, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80010b4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80010b8:	fba2 4501 	umull	r4, r5, r2, r1
 80010bc:	442b      	add	r3, r5
 80010be:	461d      	mov	r5, r3
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	09a2      	lsrs	r2, r4, #6
 80010ca:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80010ce:	11ab      	asrs	r3, r5, #6
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 80010d0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80010d4:	4621      	mov	r1, r4
 80010d6:	1889      	adds	r1, r1, r2
 80010d8:	6339      	str	r1, [r7, #48]	; 0x30
 80010da:	4629      	mov	r1, r5
 80010dc:	eb43 0101 	adc.w	r1, r3, r1
 80010e0:	6379      	str	r1, [r7, #52]	; 0x34
 80010e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010e6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	
	// SENS = SENST1 + TCS* dT
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 80010ea:	4b7f      	ldr	r3, [pc, #508]	; (80012e8 <MS5607_getCompValues+0x2e4>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010f6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80010fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80010fe:	460b      	mov	r3, r1
 8001100:	0c1b      	lsrs	r3, r3, #16
 8001102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001106:	460b      	mov	r3, r1
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						+ (((int64_t)promData.tcs*deltaTemp) >> 7);
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <MS5607_getCompValues+0x2e4>)
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	b29b      	uxth	r3, r3
 8001114:	2200      	movs	r2, #0
 8001116:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800111a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800111e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001122:	17da      	asrs	r2, r3, #31
 8001124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001128:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800112c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001130:	460b      	mov	r3, r1
 8001132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001136:	4622      	mov	r2, r4
 8001138:	fb02 f203 	mul.w	r2, r2, r3
 800113c:	e9c7 453a 	strd	r4, r5, [r7, #232]	; 0xe8
 8001140:	462b      	mov	r3, r5
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	4621      	mov	r1, r4
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4413      	add	r3, r2
 800114e:	4622      	mov	r2, r4
 8001150:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001154:	fba2 ab01 	umull	sl, fp, r2, r1
 8001158:	445b      	add	r3, fp
 800115a:	469b      	mov	fp, r3
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	ea4f 12da 	mov.w	r2, sl, lsr #7
 8001168:	ea42 624b 	orr.w	r2, r2, fp, lsl #25
 800116c:	ea4f 13eb 	mov.w	r3, fp, asr #7
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 8001170:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001174:	4621      	mov	r1, r4
 8001176:	1889      	adds	r1, r1, r2
 8001178:	62b9      	str	r1, [r7, #40]	; 0x28
 800117a:	4629      	mov	r1, r5
 800117c:	eb43 0101 	adc.w	r1, r3, r1
 8001180:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001182:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001186:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

	// Second order compensation
	if (temp1 < 2000)
 800118a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800118e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001192:	f280 8159 	bge.w	8001448 <MS5607_getCompValues+0x444>
	{
		int32_t temp2 = (deltaTemp*deltaTemp) >> 31;
 8001196:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800119a:	fb03 f303 	mul.w	r3, r3, r3
 800119e:	17db      	asrs	r3, r3, #31
 80011a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		int32_t temp2000 = temp1 - 2000;
 80011a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80011a8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80011ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		int64_t offset2 = 61*((int64_t)temp2000 * (int64_t)temp2000) >> 4;
 80011b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011b4:	17da      	asrs	r2, r3, #31
 80011b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80011be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011c2:	17da      	asrs	r2, r3, #31
 80011c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011cc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011d0:	462b      	mov	r3, r5
 80011d2:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
 80011d6:	4652      	mov	r2, sl
 80011d8:	fb02 f203 	mul.w	r2, r2, r3
 80011dc:	465b      	mov	r3, fp
 80011de:	4621      	mov	r1, r4
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	4622      	mov	r2, r4
 80011e8:	4651      	mov	r1, sl
 80011ea:	fba2 1201 	umull	r1, r2, r2, r1
 80011ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80011f2:	460a      	mov	r2, r1
 80011f4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80011f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80011fc:	4413      	add	r3, r2
 80011fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001202:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001206:	4622      	mov	r2, r4
 8001208:	462b      	mov	r3, r5
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	f04f 0100 	mov.w	r1, #0
 8001212:	0119      	lsls	r1, r3, #4
 8001214:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001218:	0110      	lsls	r0, r2, #4
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4621      	mov	r1, r4
 8001220:	ebb2 0801 	subs.w	r8, r2, r1
 8001224:	4629      	mov	r1, r5
 8001226:	eb63 0901 	sbc.w	r9, r3, r1
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8001236:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800123a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800123e:	4690      	mov	r8, r2
 8001240:	4699      	mov	r9, r3
 8001242:	4623      	mov	r3, r4
 8001244:	eb18 0303 	adds.w	r3, r8, r3
 8001248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800124c:	462b      	mov	r3, r5
 800124e:	eb49 0303 	adc.w	r3, r9, r3
 8001252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001262:	4621      	mov	r1, r4
 8001264:	090a      	lsrs	r2, r1, #4
 8001266:	4629      	mov	r1, r5
 8001268:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800126c:	4629      	mov	r1, r5
 800126e:	110b      	asrs	r3, r1, #4
 8001270:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		int64_t sense2 = ((int64_t)temp2000 * (int64_t)temp2000) << 1;
 8001274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001278:	17da      	asrs	r2, r3, #31
 800127a:	67bb      	str	r3, [r7, #120]	; 0x78
 800127c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800127e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001282:	17da      	asrs	r2, r3, #31
 8001284:	673b      	str	r3, [r7, #112]	; 0x70
 8001286:	677a      	str	r2, [r7, #116]	; 0x74
 8001288:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800128c:	462b      	mov	r3, r5
 800128e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001292:	4642      	mov	r2, r8
 8001294:	fb02 f203 	mul.w	r2, r2, r3
 8001298:	464b      	mov	r3, r9
 800129a:	4621      	mov	r1, r4
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	4622      	mov	r2, r4
 80012a4:	4641      	mov	r1, r8
 80012a6:	fba2 1201 	umull	r1, r2, r2, r1
 80012aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80012ae:	460a      	mov	r2, r1
 80012b0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80012b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012b8:	4413      	add	r3, r2
 80012ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80012be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80012c2:	460b      	mov	r3, r1
 80012c4:	18db      	adds	r3, r3, r3
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	4613      	mov	r3, r2
 80012ca:	eb42 0303 	adc.w	r3, r2, r3
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
 80012d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80012d4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		if (temp1 < -1500)
 80012d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <MS5607_getCompValues+0x2e8>)
 80012de:	429a      	cmp	r2, r3
 80012e0:	f280 8091 	bge.w	8001406 <MS5607_getCompValues+0x402>
 80012e4:	e004      	b.n	80012f0 <MS5607_getCompValues+0x2ec>
 80012e6:	bf00      	nop
 80012e8:	20000630 	.word	0x20000630
 80012ec:	fffffa24 	.word	0xfffffa24
		{
			int32_t temp1500 = temp1 + 1500;
 80012f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012f4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80012f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			offset2 += 15 * ((int64_t)temp1500 * (int64_t)temp1500);
 80012fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001300:	17da      	asrs	r2, r3, #31
 8001302:	66bb      	str	r3, [r7, #104]	; 0x68
 8001304:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001306:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800130a:	17da      	asrs	r2, r3, #31
 800130c:	663b      	str	r3, [r7, #96]	; 0x60
 800130e:	667a      	str	r2, [r7, #100]	; 0x64
 8001310:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001314:	462b      	mov	r3, r5
 8001316:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800131a:	4642      	mov	r2, r8
 800131c:	fb02 f203 	mul.w	r2, r2, r3
 8001320:	464b      	mov	r3, r9
 8001322:	4621      	mov	r1, r4
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	4622      	mov	r2, r4
 800132c:	4641      	mov	r1, r8
 800132e:	fba2 1201 	umull	r1, r2, r2, r1
 8001332:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001336:	460a      	mov	r2, r1
 8001338:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800133c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001340:	4413      	add	r3, r2
 8001342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001346:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800134a:	4622      	mov	r2, r4
 800134c:	462b      	mov	r3, r5
 800134e:	f04f 0000 	mov.w	r0, #0
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	0119      	lsls	r1, r3, #4
 8001358:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800135c:	0110      	lsls	r0, r2, #4
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4621      	mov	r1, r4
 8001364:	1a51      	subs	r1, r2, r1
 8001366:	65b9      	str	r1, [r7, #88]	; 0x58
 8001368:	4629      	mov	r1, r5
 800136a:	eb63 0301 	sbc.w	r3, r3, r1
 800136e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001370:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001374:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001378:	4621      	mov	r1, r4
 800137a:	1851      	adds	r1, r2, r1
 800137c:	61b9      	str	r1, [r7, #24]
 800137e:	4629      	mov	r1, r5
 8001380:	eb43 0101 	adc.w	r1, r3, r1
 8001384:	61f9      	str	r1, [r7, #28]
 8001386:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800138a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			sense2 += ((int64_t)temp1500 * (int64_t)temp1500) << 3;
 800138e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001392:	17da      	asrs	r2, r3, #31
 8001394:	653b      	str	r3, [r7, #80]	; 0x50
 8001396:	657a      	str	r2, [r7, #84]	; 0x54
 8001398:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800139c:	17da      	asrs	r2, r3, #31
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
 80013a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80013a6:	462b      	mov	r3, r5
 80013a8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80013ac:	4642      	mov	r2, r8
 80013ae:	fb02 f203 	mul.w	r2, r2, r3
 80013b2:	464b      	mov	r3, r9
 80013b4:	4621      	mov	r1, r4
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	4622      	mov	r2, r4
 80013be:	4641      	mov	r1, r8
 80013c0:	fba2 1201 	umull	r1, r2, r2, r1
 80013c4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013c8:	460a      	mov	r2, r1
 80013ca:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80013ce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013d2:	4413      	add	r3, r2
 80013d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013d8:	f04f 0000 	mov.w	r0, #0
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80013e4:	462b      	mov	r3, r5
 80013e6:	00d9      	lsls	r1, r3, #3
 80013e8:	4623      	mov	r3, r4
 80013ea:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80013ee:	4623      	mov	r3, r4
 80013f0:	00d8      	lsls	r0, r3, #3
 80013f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80013f6:	1814      	adds	r4, r2, r0
 80013f8:	613c      	str	r4, [r7, #16]
 80013fa:	414b      	adcs	r3, r1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001402:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
		}

		temp1 -= temp2;
 8001406:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800140a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		offset -= offset2;
 8001414:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001418:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800141c:	1a84      	subs	r4, r0, r2
 800141e:	60bc      	str	r4, [r7, #8]
 8001420:	eb61 0303 	sbc.w	r3, r1, r3
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800142a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		sensitivity -= sense2;
 800142e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001432:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001436:	1a84      	subs	r4, r0, r2
 8001438:	603c      	str	r4, [r7, #0]
 800143a:	eb61 0303 	sbc.w	r3, r1, r3
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001444:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	}

	// Populate and return the compensated values
	compVals.pres = (((int64_t)(digPres*sensitivity) >> 21) - offset) >> 15;
 8001448:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800144c:	2200      	movs	r2, #0
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
 8001450:	647a      	str	r2, [r7, #68]	; 0x44
 8001452:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001456:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800145a:	462a      	mov	r2, r5
 800145c:	fb02 f203 	mul.w	r2, r2, r3
 8001460:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001464:	4621      	mov	r1, r4
 8001466:	fb01 f303 	mul.w	r3, r1, r3
 800146a:	4413      	add	r3, r2
 800146c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001470:	4621      	mov	r1, r4
 8001472:	fba2 1201 	umull	r1, r2, r2, r1
 8001476:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800147a:	460a      	mov	r2, r1
 800147c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001480:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001484:	4413      	add	r3, r2
 8001486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001496:	4621      	mov	r1, r4
 8001498:	0d4a      	lsrs	r2, r1, #21
 800149a:	4629      	mov	r1, r5
 800149c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80014a0:	4629      	mov	r1, r5
 80014a2:	154b      	asrs	r3, r1, #21
 80014a4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80014a8:	1a14      	subs	r4, r2, r0
 80014aa:	63bc      	str	r4, [r7, #56]	; 0x38
 80014ac:	eb63 0301 	sbc.w	r3, r3, r1
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80014be:	4621      	mov	r1, r4
 80014c0:	0bca      	lsrs	r2, r1, #15
 80014c2:	4629      	mov	r1, r5
 80014c4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80014c8:	4629      	mov	r1, r5
 80014ca:	13cb      	asrs	r3, r1, #15
 80014cc:	4613      	mov	r3, r2
 80014ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	compVals.temp = temp1;
 80014d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	return compVals;
 80014da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014de:	461a      	mov	r2, r3
 80014e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80014ec:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80014f0:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80014f4:	46bd      	mov	sp, r7
 80014f6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80014fa:	4770      	bx	lr

080014fc <MS5607_readUncompPres>:

void MS5607_readUncompPres()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	state = MS5607_PRES_READ;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MS5607_readUncompPres+0x34>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 8001506:	f000 f819 	bl	800153c <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MS5607_readUncompPres+0x38>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	2201      	movs	r2, #1
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <MS5607_readUncompPres+0x3c>)
 8001516:	f006 f929 	bl	800776c <HAL_SPI_Transmit>
	MS5607_disable();
 800151a:	f000 f81f 	bl	800155c <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <MS5607_readUncompPres+0x38>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f006 fcc1 	bl	8007eac <HAL_TIM_Base_Start_IT>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000644 	.word	0x20000644
 8001534:	2000062c 	.word	0x2000062c
 8001538:	20000648 	.word	0x20000648

0800153c <MS5607_enable>:
	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
}

void MS5607_enable()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <MS5607_enable+0x1c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6898      	ldr	r0, [r3, #8]
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <MS5607_enable+0x1c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	899b      	ldrh	r3, [r3, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	4619      	mov	r1, r3
 8001550:	f000 ff0c 	bl	800236c <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000062c 	.word	0x2000062c

0800155c <MS5607_disable>:

void MS5607_disable()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <MS5607_disable+0x1c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6898      	ldr	r0, [r3, #8]
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <MS5607_disable+0x1c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	899b      	ldrh	r3, [r3, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	4619      	mov	r1, r3
 8001570:	f000 fefc 	bl	800236c <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000062c 	.word	0x2000062c

0800157c <MS5607_getRawValues>:
		state = MS5607_IDLE;
	}
}

MS5607_RawVal MS5607_getRawValues()
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	return rawValues;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <MS5607_getRawValues+0x20>)
 8001588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	2000063c 	.word	0x2000063c

080015a0 <MS5607_getMeasurementDelay>:

uint16_t MS5607_getMeasurementDelay()
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	return measurementDelay;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <MS5607_getMeasurementDelay+0x14>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000646 	.word	0x20000646

080015b8 <MS5607_getState>:

MS5607_MeasureState MS5607_getState()
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
	return state;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <MS5607_getState+0x14>)
 80015be:	781b      	ldrb	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000644 	.word	0x20000644

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0bc      	sub	sp, #240	; 0xf0
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	22c0      	movs	r2, #192	; 0xc0
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f008 f939 	bl	8009878 <memset>
  if(hsd->Instance==SDMMC1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <HAL_SD_MspInit+0x110>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d16b      	bne.n	80016e8 <HAL_SD_MspInit+0x108>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 800161c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fb33 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001634:	f7ff fc6e 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_SD_MspInit+0x114>)
 800163a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_SD_MspInit+0x114>)
 8001640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001644:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_SD_MspInit+0x114>)
 800164a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800164e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_SD_MspInit+0x114>)
 8001658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165c:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <HAL_SD_MspInit+0x114>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_SD_MspInit+0x114>)
 8001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_SD_MspInit+0x114>)
 8001676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <HAL_SD_MspInit+0x114>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_SD_MspInit+0x114>)
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001692:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016ac:	230c      	movs	r3, #12
 80016ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b6:	4619      	mov	r1, r3
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <HAL_SD_MspInit+0x118>)
 80016ba:	f000 fc7f 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016be:	2304      	movs	r3, #4
 80016c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016d6:	230c      	movs	r3, #12
 80016d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_SD_MspInit+0x11c>)
 80016e4:	f000 fc6a 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	37f0      	adds	r7, #240	; 0xf0
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	420c8000 	.word	0x420c8000
 80016f4:	46020c00 	.word	0x46020c00
 80016f8:	42020800 	.word	0x42020800
 80016fc:	42020c00 	.word	0x42020c00

08001700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0be      	sub	sp, #248	; 0xf8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	22c0      	movs	r2, #192	; 0xc0
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f008 f8a9 	bl	8009878 <memset>
  if(hspi->Instance==SPI1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a6b      	ldr	r2, [pc, #428]	; (80018d8 <HAL_SPI_MspInit+0x1d8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d147      	bne.n	80017c0 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001730:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800173c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4618      	mov	r0, r3
 800174a:	f002 faa3 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001754:	f7ff fbde 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001758:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 800175a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800175e:	4a5f      	ldr	r2, [pc, #380]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001764:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001768:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 800176a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800177c:	4a57      	ldr	r2, [pc, #348]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001786:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001794:	23c2      	movs	r3, #194	; 0xc2
 8001796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ac:	2305      	movs	r3, #5
 80017ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4849      	ldr	r0, [pc, #292]	; (80018e0 <HAL_SPI_MspInit+0x1e0>)
 80017ba:	f000 fbff 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017be:	e086      	b.n	80018ce <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_SPI_MspInit+0x1e4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	f040 8081 	bne.w	80018ce <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80017cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80017d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fa55 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 80017f0:	f7ff fb90 	bl	8000f14 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 80017f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017fa:	4a38      	ldr	r2, [pc, #224]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001818:	4a30      	ldr	r2, [pc, #192]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001836:	4a29      	ldr	r2, [pc, #164]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_SPI_MspInit+0x1dc>)
 8001842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001866:	2303      	movs	r3, #3
 8001868:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001870:	4619      	mov	r1, r3
 8001872:	481d      	ldr	r0, [pc, #116]	; (80018e8 <HAL_SPI_MspInit+0x1e8>)
 8001874:	f000 fba2 	bl	8001fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001878:	2304      	movs	r3, #4
 800187a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001890:	2305      	movs	r3, #5
 8001892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001896:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800189a:	4619      	mov	r1, r3
 800189c:	4812      	ldr	r0, [pc, #72]	; (80018e8 <HAL_SPI_MspInit+0x1e8>)
 800189e:	f000 fb8d 	bl	8001fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018bc:	2305      	movs	r3, #5
 80018be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <HAL_SPI_MspInit+0x1ec>)
 80018ca:	f000 fb77 	bl	8001fbc <HAL_GPIO_Init>
}
 80018ce:	bf00      	nop
 80018d0:	37f8      	adds	r7, #248	; 0xf8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40013000 	.word	0x40013000
 80018dc:	46020c00 	.word	0x46020c00
 80018e0:	42020000 	.word	0x42020000
 80018e4:	40003800 	.word	0x40003800
 80018e8:	42020800 	.word	0x42020800
 80018ec:	42020400 	.word	0x42020400

080018f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_TIM_Base_MspInit+0x3c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10e      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_TIM_Base_MspInit+0x40>)
 8001904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_TIM_Base_MspInit+0x40>)
 800190a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_TIM_Base_MspInit+0x40>)
 8001914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40014400 	.word	0x40014400
 8001930:	46020c00 	.word	0x46020c00

08001934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ba      	sub	sp, #232	; 0xe8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	22c0      	movs	r2, #192	; 0xc0
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f007 ff8f 	bl	8009878 <memset>
  if(huart->Instance==USART1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <HAL_UART_MspInit+0xc4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d145      	bne.n	80019f0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001964:	f04f 0201 	mov.w	r2, #1
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001970:	2300      	movs	r3, #0
 8001972:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4618      	mov	r0, r3
 800197a:	f002 f98b 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001984:	f7ff fac6 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_UART_MspInit+0xc8>)
 800198a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800198e:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_UART_MspInit+0xc8>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_UART_MspInit+0xc8>)
 800199a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_UART_MspInit+0xc8>)
 80019a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_UART_MspInit+0xc8>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_UART_MspInit+0xc8>)
 80019b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019de:	2307      	movs	r3, #7
 80019e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <HAL_UART_MspInit+0xcc>)
 80019ec:	f000 fae6 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019f0:	bf00      	nop
 80019f2:	37e8      	adds	r7, #232	; 0xe8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013800 	.word	0x40013800
 80019fc:	46020c00 	.word	0x46020c00
 8001a00:	42020000 	.word	0x42020000

08001a04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0bc      	sub	sp, #240	; 0xf0
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	22c0      	movs	r2, #192	; 0xc0
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f007 ff27 	bl	8009878 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <HAL_PCD_MspInit+0x110>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d16a      	bne.n	8001b0a <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_PLL1;
 8001a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 f921 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001a58:	f7ff fa5c 	bl	8000f14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a62:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001a94:	230a      	movs	r3, #10
 8001a96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	481e      	ldr	r0, [pc, #120]	; (8001b1c <HAL_PCD_MspInit+0x118>)
 8001aa2:	f000 fa8b 	bl	8001fbc <HAL_GPIO_Init>

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d119      	bne.n	8001ae8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
      HAL_PWREx_EnableVddUSB();
 8001ad2:	f000 fe1d 	bl	8002710 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ae6:	e001      	b.n	8001aec <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001ae8:	f000 fe12 	bl	8002710 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001aee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_PCD_MspInit+0x114>)
 8001afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001b0a:	bf00      	nop
 8001b0c:	37f0      	adds	r7, #240	; 0xf0
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40016000 	.word	0x40016000
 8001b18:	46020c00 	.word	0x46020c00
 8001b1c:	42020000 	.word	0x42020000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f8fe 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f007 fe3e 	bl	8009824 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20040000 	.word	0x20040000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	2000064c 	.word	0x2000064c
 8001bdc:	20000668 	.word	0x20000668

08001be0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <SystemInit+0x68>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <SystemInit+0x68>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <SystemInit+0x6c>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <SystemInit+0x6c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <SystemInit+0x6c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <SystemInit+0x6c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <SystemInit+0x6c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <SystemInit+0x6c>)
 8001c12:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c16:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <SystemInit+0x6c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <SystemInit+0x6c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <SystemInit+0x6c>)
 8001c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <SystemInit+0x6c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SystemInit+0x68>)
 8001c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c3a:	609a      	str	r2, [r3, #8]
  #endif
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00
 8001c4c:	46020c00 	.word	0x46020c00

08001c50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c54:	f7ff ffc4 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c5a:	490d      	ldr	r1, [pc, #52]	; (8001c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <LoopForever+0xe>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c70:	4c0a      	ldr	r4, [pc, #40]	; (8001c9c <LoopForever+0x16>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c7e:	f007 fdd7 	bl	8009830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c82:	f7fe fdc3 	bl	800080c <main>

08001c86 <LoopForever>:

LoopForever:
    b LoopForever
 8001c86:	e7fe      	b.n	8001c86 <LoopForever>
  ldr   r0, =_estack
 8001c88:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c94:	0800a320 	.word	0x0800a320
  ldr r2, =_sbss
 8001c98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c9c:	20000661 	.word	0x20000661

08001ca0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_Init+0x4c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <HAL_Init+0x4c>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f94f 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cba:	f001 fe07 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_Init+0x50>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <HAL_Init+0x54>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_Init+0x58>)
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd4:	200f      	movs	r0, #15
 8001cd6:	f000 f813 	bl	8001d00 <HAL_InitTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e002      	b.n	8001cea <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fc74 	bl	80015d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	46020c00 	.word	0x46020c00
 8001cf8:	0800a1dc 	.word	0x0800a1dc
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_InitTick+0x60>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e021      	b.n	8001d58 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_InitTick+0x64>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_InitTick+0x60>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f939 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d48:	f000 f911 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_InitTick+0x68>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000650 	.word	0x20000650

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000650 	.word	0x20000650

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f38:	f7ff ff8e 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff47 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7c:	f7ff ff5e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001f80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ff90 	bl	8001eac <NVIC_EncodePriority>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff5f 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffb2 	bl	8001f14 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fce:	e1ba      	b.n	8002346 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 81aa 	beq.w	8002340 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a55      	ldr	r2, [pc, #340]	; (8002144 <HAL_GPIO_Init+0x188>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d15d      	bne.n	80020b0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	4013      	ands	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	4313      	orrs	r3, r2
 800201c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x18c>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800202c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800202e:	4a46      	ldr	r2, [pc, #280]	; (8002148 <HAL_GPIO_Init+0x18c>)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	3208      	adds	r2, #8
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	4013      	ands	r3, r2
 800205c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220b      	movs	r2, #11
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	4313      	orrs	r3, r2
 8002070:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	3208      	adds	r2, #8
 800207a:	69f9      	ldr	r1, [r7, #28]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	4013      	ands	r3, r2
 8002096:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2202      	movs	r2, #2
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e067      	b.n	8002180 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x104>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b12      	cmp	r3, #18
 80020be:	d145      	bne.n	800214c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	69f9      	ldr	r1, [r7, #28]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	4013      	ands	r3, r2
 8002122:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	4313      	orrs	r3, r2
 8002138:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e01e      	b.n	8002180 <HAL_GPIO_Init+0x1c4>
 8002142:	bf00      	nop
 8002144:	46020000 	.word	0x46020000
 8002148:	0800a234 	.word	0x0800a234
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	4013      	ands	r3, r2
 8002162:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	4313      	orrs	r3, r2
 8002178:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d00b      	beq.n	80021a0 <HAL_GPIO_Init+0x1e4>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002194:	2b11      	cmp	r3, #17
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b12      	cmp	r3, #18
 800219e:	d130      	bne.n	8002202 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80021d6:	2201      	movs	r2, #1
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 0201 	and.w	r2, r3, #1
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d017      	beq.n	800223a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	4013      	ands	r3, r2
 8002220:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	4313      	orrs	r3, r2
 8002232:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d07c      	beq.n	8002340 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002246:	4a47      	ldr	r2, [pc, #284]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3318      	adds	r3, #24
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	4013      	ands	r3, r2
 8002268:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0a9a      	lsrs	r2, r3, #10
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_GPIO_Init+0x3ac>)
 8002270:	4013      	ands	r3, r2
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	00d2      	lsls	r2, r2, #3
 800227a:	4093      	lsls	r3, r2
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	4313      	orrs	r3, r2
 8002280:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002282:	4938      	ldr	r1, [pc, #224]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3318      	adds	r3, #24
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002290:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	4013      	ands	r3, r2
 800229e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022ba:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 80022e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 8002314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002318:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43db      	mvns	r3, r3
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	4013      	ands	r3, r2
 8002322:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_GPIO_Init+0x3a8>)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	f47f ae3d 	bne.w	8001fd0 <HAL_GPIO_Init+0x14>
  }
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	3724      	adds	r7, #36	; 0x24
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	46022000 	.word	0x46022000
 8002368:	002f7f7f 	.word	0x002f7f7f

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002388:	e002      	b.n	8002390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	b08f      	sub	sp, #60	; 0x3c
 80023a0:	af0a      	add	r7, sp, #40	; 0x28
 80023a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0fe      	b.n	80025ac <HAL_PCD_Init+0x210>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fb1e 	bl	8001a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2203      	movs	r2, #3
 80023cc:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 f9b8 	bl	800974a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	687e      	ldr	r6, [r7, #4]
 80023e2:	466d      	mov	r5, sp
 80023e4:	f106 0410 	add.w	r4, r6, #16
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f8:	1d33      	adds	r3, r6, #4
 80023fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fc:	6838      	ldr	r0, [r7, #0]
 80023fe:	f007 f986 	bl	800970e <USB_CoreInit>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0cb      	b.n	80025ac <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f007 f9aa 	bl	8009774 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e03e      	b.n	80024a4 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	333d      	adds	r3, #61	; 0x3d
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	333c      	adds	r3, #60	; 0x3c
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	333f      	adds	r3, #63	; 0x3f
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	334c      	adds	r3, #76	; 0x4c
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	3350      	adds	r3, #80	; 0x50
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3354      	adds	r3, #84	; 0x54
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	3301      	adds	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3bb      	bcc.n	8002426 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e044      	b.n	800253e <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	f203 137d 	addw	r3, r3, #381	; 0x17d
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	f203 137f 	addw	r3, r3, #383	; 0x17f
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3b5      	bcc.n	80024b4 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	687e      	ldr	r6, [r7, #4]
 8002550:	466d      	mov	r5, sp
 8002552:	f106 0410 	add.w	r4, r6, #16
 8002556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002562:	e885 0003 	stmia.w	r5, {r0, r1}
 8002566:	1d33      	adds	r3, r6, #4
 8002568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800256a:	6838      	ldr	r0, [r7, #0]
 800256c:	f007 f925 	bl	80097ba <USB_DevInit>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_PCD_Init+0x1e6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e014      	b.n	80025ac <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f80a 	bl	80025b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f007 f92b 	bl	8009800 <USB_DevDisconnect>

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  hpcd->LPM_State = LPM_L0;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002600:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002608:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d10b      	bne.n	800262a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002618:	d905      	bls.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e057      	b.n	80026da <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d90a      	bls.n	8002648 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4313      	orrs	r3, r2
 800263e:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002644:	60d3      	str	r3, [r2, #12]
 8002646:	e007      	b.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002650:	4925      	ldr	r1, [pc, #148]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4313      	orrs	r3, r2
 8002656:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	2232      	movs	r2, #50	; 0x32
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	3301      	adds	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002676:	e002      	b.n	800267e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3b01      	subs	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x98>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f3      	bne.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01b      	beq.n	80026ce <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	2232      	movs	r2, #50	; 0x32
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	3301      	adds	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80026b4:	e002      	b.n	80026bc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_PWREx_ControlVoltageScaling+0xd6>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f3      	bne.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e000      	b.n	80026da <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	46020800 	.word	0x46020800
 80026ec:	20000000 	.word	0x20000000
 80026f0:	10624dd3 	.word	0x10624dd3

080026f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_PWREx_GetVoltageRange+0x18>)
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	46020800 	.word	0x46020800

08002710 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_PWREx_EnableVddUSB+0x1c>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6113      	str	r3, [r2, #16]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	46020800 	.word	0x46020800

08002730 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f000 bec8 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274a:	4b99      	ldr	r3, [pc, #612]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002754:	4b96      	ldr	r3, [pc, #600]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 816c 	beq.w	8002a44 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_RCC_OscConfig+0x52>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2b0c      	cmp	r3, #12
 8002776:	f040 80de 	bne.w	8002936 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	2b01      	cmp	r3, #1
 800277e:	f040 80da 	bne.w	8002936 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f000 bea5 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002794:	4b86      	ldr	r3, [pc, #536]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_RCC_OscConfig+0x7a>
 80027a0:	4b83      	ldr	r3, [pc, #524]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80027a8:	e005      	b.n	80027b6 <HAL_RCC_OscConfig+0x86>
 80027aa:	4b81      	ldr	r3, [pc, #516]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d255      	bcs.n	8002866 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 f9df 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f000 be82 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a75      	ldr	r2, [pc, #468]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e0:	6093      	str	r3, [r2, #8]
 80027e2:	4b73      	ldr	r3, [pc, #460]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4970      	ldr	r1, [pc, #448]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80027fc:	d309      	bcc.n	8002812 <HAL_RCC_OscConfig+0xe2>
 80027fe:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 021f 	bic.w	r2, r3, #31
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4969      	ldr	r1, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800280c:	4313      	orrs	r3, r2
 800280e:	60cb      	str	r3, [r1, #12]
 8002810:	e07e      	b.n	8002910 <HAL_RCC_OscConfig+0x1e0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	da0a      	bge.n	8002830 <HAL_RCC_OscConfig+0x100>
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	015b      	lsls	r3, r3, #5
 8002828:	4961      	ldr	r1, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800282a:	4313      	orrs	r3, r2
 800282c:	60cb      	str	r3, [r1, #12]
 800282e:	e06f      	b.n	8002910 <HAL_RCC_OscConfig+0x1e0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d30a      	bcc.n	8002850 <HAL_RCC_OscConfig+0x120>
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4959      	ldr	r1, [pc, #356]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800284a:	4313      	orrs	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]
 800284e:	e05f      	b.n	8002910 <HAL_RCC_OscConfig+0x1e0>
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	03db      	lsls	r3, r3, #15
 800285e:	4954      	ldr	r1, [pc, #336]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002860:	4313      	orrs	r3, r2
 8002862:	60cb      	str	r3, [r1, #12]
 8002864:	e054      	b.n	8002910 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002866:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	4a51      	ldr	r2, [pc, #324]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800286c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002870:	6093      	str	r3, [r2, #8]
 8002872:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	494c      	ldr	r1, [pc, #304]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800288c:	d309      	bcc.n	80028a2 <HAL_RCC_OscConfig+0x172>
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 021f 	bic.w	r2, r3, #31
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4945      	ldr	r1, [pc, #276]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800289c:	4313      	orrs	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
 80028a0:	e028      	b.n	80028f4 <HAL_RCC_OscConfig+0x1c4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	da0a      	bge.n	80028c0 <HAL_RCC_OscConfig+0x190>
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	015b      	lsls	r3, r3, #5
 80028b8:	493d      	ldr	r1, [pc, #244]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60cb      	str	r3, [r1, #12]
 80028be:	e019      	b.n	80028f4 <HAL_RCC_OscConfig+0x1c4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d30a      	bcc.n	80028e0 <HAL_RCC_OscConfig+0x1b0>
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	029b      	lsls	r3, r3, #10
 80028d8:	4935      	ldr	r1, [pc, #212]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]
 80028de:	e009      	b.n	80028f4 <HAL_RCC_OscConfig+0x1c4>
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	03db      	lsls	r3, r3, #15
 80028ee:	4930      	ldr	r1, [pc, #192]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f942 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f000 bde5 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002910:	f001 f8e4 	bl	8003adc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x284>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff f9f1 	bl	8001d00 <HAL_InitTick>
 800291e:	4603      	mov	r3, r0
 8002920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 808a 	beq.w	8002a42 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800292e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002932:	f000 bdd2 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d066      	beq.n	8002a0c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800294a:	f7ff fa23 	bl	8001d94 <HAL_GetTick>
 800294e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002950:	e009      	b.n	8002966 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002952:	f7ff fa1f 	bl	8001d94 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d902      	bls.n	8002966 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	f000 bdba 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ef      	beq.n	8002952 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297c:	6093      	str	r3, [r2, #8]
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	4909      	ldr	r1, [pc, #36]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002998:	d30e      	bcc.n	80029b8 <HAL_RCC_OscConfig+0x288>
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f023 021f 	bic.w	r2, r3, #31
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4902      	ldr	r1, [pc, #8]	; (80029b0 <HAL_RCC_OscConfig+0x280>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60cb      	str	r3, [r1, #12]
 80029ac:	e04a      	b.n	8002a44 <HAL_RCC_OscConfig+0x314>
 80029ae:	bf00      	nop
 80029b0:	46020c00 	.word	0x46020c00
 80029b4:	20000004 	.word	0x20000004
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da0a      	bge.n	80029d6 <HAL_RCC_OscConfig+0x2a6>
 80029c0:	4b98      	ldr	r3, [pc, #608]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	015b      	lsls	r3, r3, #5
 80029ce:	4995      	ldr	r1, [pc, #596]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60cb      	str	r3, [r1, #12]
 80029d4:	e036      	b.n	8002a44 <HAL_RCC_OscConfig+0x314>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d30a      	bcc.n	80029f6 <HAL_RCC_OscConfig+0x2c6>
 80029e0:	4b90      	ldr	r3, [pc, #576]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	029b      	lsls	r3, r3, #10
 80029ee:	498d      	ldr	r1, [pc, #564]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
 80029f4:	e026      	b.n	8002a44 <HAL_RCC_OscConfig+0x314>
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	03db      	lsls	r3, r3, #15
 8002a04:	4987      	ldr	r1, [pc, #540]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60cb      	str	r3, [r1, #12]
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002a0c:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a84      	ldr	r2, [pc, #528]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a18:	f7ff f9bc 	bl	8001d94 <HAL_GetTick>
 8002a1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002a1e:	e009      	b.n	8002a34 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a20:	f7ff f9b8 	bl	8001d94 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	f000 bd53 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002a34:	4b7b      	ldr	r3, [pc, #492]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ef      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2f0>
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 808b 	beq.w	8002b68 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x334>
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d17d      	bne.n	8002b68 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f000 bd34 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x35a>
 8002a7c:	4b69      	ldr	r3, [pc, #420]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a68      	ldr	r2, [pc, #416]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e041      	b.n	8002b0e <HAL_RCC_OscConfig+0x3de>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a92:	d112      	bne.n	8002aba <HAL_RCC_OscConfig+0x38a>
 8002a94:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a62      	ldr	r2, [pc, #392]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a5f      	ldr	r2, [pc, #380]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e029      	b.n	8002b0e <HAL_RCC_OscConfig+0x3de>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ac2:	d112      	bne.n	8002aea <HAL_RCC_OscConfig+0x3ba>
 8002ac4:	4b57      	ldr	r3, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a56      	ldr	r2, [pc, #344]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b54      	ldr	r3, [pc, #336]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a53      	ldr	r2, [pc, #332]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b51      	ldr	r3, [pc, #324]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a50      	ldr	r2, [pc, #320]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e011      	b.n	8002b0e <HAL_RCC_OscConfig+0x3de>
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a4a      	ldr	r2, [pc, #296]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a47      	ldr	r2, [pc, #284]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002b16:	f7ff f93d 	bl	8001d94 <HAL_GetTick>
 8002b1a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1c:	e009      	b.n	8002b32 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1e:	f7ff f939 	bl	8001d94 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d902      	bls.n	8002b32 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	f000 bcd4 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ef      	beq.n	8002b1e <HAL_RCC_OscConfig+0x3ee>
 8002b3e:	e013      	b.n	8002b68 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002b40:	f7ff f928 	bl	8001d94 <HAL_GetTick>
 8002b44:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	e009      	b.n	8002b5c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7ff f924 	bl	8001d94 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d902      	bls.n	8002b5c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f000 bcbf 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5c:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ef      	bne.n	8002b48 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d05f      	beq.n	8002c34 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x456>
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d114      	bne.n	8002baa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d111      	bne.n	8002baa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f000 bca3 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	4920      	ldr	r1, [pc, #128]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ba8:	e044      	b.n	8002c34 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002bbe:	f7ff f8e9 	bl	8001d94 <HAL_GetTick>
 8002bc2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	e009      	b.n	8002bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7ff f8e5 	bl	8001d94 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d902      	bls.n	8002bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	f000 bc80 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ef      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	490b      	ldr	r1, [pc, #44]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	610b      	str	r3, [r1, #16]
 8002bfa:	e01b      	b.n	8002c34 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c08:	f7ff f8c4 	bl	8001d94 <HAL_GetTick>
 8002c0c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7ff f8c0 	bl	8001d94 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d904      	bls.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	f000 bc5b 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
 8002c24:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c28:	4baf      	ldr	r3, [pc, #700]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ed      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80c8 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c48:	4ba7      	ldr	r3, [pc, #668]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d111      	bne.n	8002c7a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4ba4      	ldr	r3, [pc, #656]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5c:	4aa2      	ldr	r2, [pc, #648]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002c66:	4ba0      	ldr	r3, [pc, #640]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c7a:	4b9c      	ldr	r3, [pc, #624]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d119      	bne.n	8002cba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002c86:	4b99      	ldr	r3, [pc, #612]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	4a98      	ldr	r2, [pc, #608]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7ff f87f 	bl	8001d94 <HAL_GetTick>
 8002c96:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c98:	e009      	b.n	8002cae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9a:	f7ff f87b 	bl	8001d94 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d902      	bls.n	8002cae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f000 bc16 	b.w	80034da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002cae:	4b8f      	ldr	r3, [pc, #572]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ef      	beq.n	8002c9a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d05f      	beq.n	8002d82 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d037      	beq.n	8002d48 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e3f4      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d00:	4a79      	ldr	r2, [pc, #484]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d02:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002d06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002d0a:	f7ff f843 	bl	8001d94 <HAL_GetTick>
 8002d0e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7ff f83f 	bl	8001d94 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e3da      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d24:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ef      	bne.n	8002d12 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4969      	ldr	r1, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002d48:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d4e:	4a66      	ldr	r2, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002d58:	f7ff f81c 	bl	8001d94 <HAL_GetTick>
 8002d5c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d60:	f7ff f818 	bl	8001d94 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e3b3      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d72:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ef      	beq.n	8002d60 <HAL_RCC_OscConfig+0x630>
 8002d80:	e01b      	b.n	8002dba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d88:	4a57      	ldr	r2, [pc, #348]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002d8a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002d92:	f7fe ffff 	bl	8001d94 <HAL_GetTick>
 8002d96:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fffb 	bl	8001d94 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e396      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dac:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002dae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ef      	bne.n	8002d9a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc8:	4a47      	ldr	r2, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8111 	beq.w	8003002 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e04:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d118      	bne.n	8002e56 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e24:	4b31      	ldr	r3, [pc, #196]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	4a30      	ldr	r2, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e30:	f7fe ffb0 	bl	8001d94 <HAL_GetTick>
 8002e34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe ffac 	bl	8001d94 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e347      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCC_OscConfig+0x7bc>)
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01f      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e74:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e8e:	e018      	b.n	8002ec2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e96:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ea0:	e00f      	b.n	8002ec2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x7b8>)
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d057      	beq.n	8002f7a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002eca:	f7fe ff63 	bl	8001d94 <HAL_GetTick>
 8002ece:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe ff5f 	bl	8001d94 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d905      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e2f8      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
 8002ee8:	46020c00 	.word	0x46020c00
 8002eec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef0:	4b9c      	ldr	r3, [pc, #624]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0e9      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01b      	beq.n	8002f42 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f0a:	4b96      	ldr	r3, [pc, #600]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f10:	4a94      	ldr	r2, [pc, #592]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe ff3a 	bl	8001d94 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e2d3      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f32:	4b8c      	ldr	r3, [pc, #560]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ed      	beq.n	8002f1c <HAL_RCC_OscConfig+0x7ec>
 8002f40:	e053      	b.n	8002fea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f48:	4a86      	ldr	r2, [pc, #536]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fe ff1e 	bl	8001d94 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e2b7      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f6a:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ed      	bne.n	8002f54 <HAL_RCC_OscConfig+0x824>
 8002f78:	e037      	b.n	8002fea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002f7a:	f7fe ff0b 	bl	8001d94 <HAL_GetTick>
 8002f7e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe ff07 	bl	8001d94 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e2a0      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f98:	4b72      	ldr	r3, [pc, #456]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1ed      	bne.n	8002f82 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002fa6:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01a      	beq.n	8002fea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fb4:	4b6b      	ldr	r3, [pc, #428]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fba:	4a6a      	ldr	r2, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fee5 	bl	8001d94 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e27e      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fdc:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ed      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff8:	4a5a      	ldr	r2, [pc, #360]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003016:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 800301c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003020:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003022:	f7fe feb7 	bl	8001d94 <HAL_GetTick>
 8003026:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800302a:	f7fe feb3 	bl	8001d94 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e24e      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800303c:	4b49      	ldr	r3, [pc, #292]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x8fa>
 8003048:	e018      	b.n	800307c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800304a:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003054:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003056:	f7fe fe9d 	bl	8001d94 <HAL_GetTick>
 800305a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800305e:	f7fe fe99 	bl	8001d94 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e234      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003070:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d036      	beq.n	80030f6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	2b00      	cmp	r3, #0
 800308e:	d019      	beq.n	80030c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003090:	4b34      	ldr	r3, [pc, #208]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a33      	ldr	r2, [pc, #204]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800309a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800309c:	f7fe fe7a 	bl	8001d94 <HAL_GetTick>
 80030a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80030a4:	f7fe fe76 	bl	8001d94 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e211      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x974>
 80030c2:	e018      	b.n	80030f6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 80030ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030d0:	f7fe fe60 	bl	8001d94 <HAL_GetTick>
 80030d4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80030d8:	f7fe fe5c 	bl	8001d94 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1f7      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d07f      	beq.n	8003202 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	2b00      	cmp	r3, #0
 8003108:	d062      	beq.n	80031d0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003114:	6093      	str	r3, [r2, #8]
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	4910      	ldr	r1, [pc, #64]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003130:	d309      	bcc.n	8003146 <HAL_RCC_OscConfig+0xa16>
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 021f 	bic.w	r2, r3, #31
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4909      	ldr	r1, [pc, #36]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003140:	4313      	orrs	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
 8003144:	e02a      	b.n	800319c <HAL_RCC_OscConfig+0xa6c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b00      	cmp	r3, #0
 800314c:	da0c      	bge.n	8003168 <HAL_RCC_OscConfig+0xa38>
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	015b      	lsls	r3, r3, #5
 800315c:	4901      	ldr	r1, [pc, #4]	; (8003164 <HAL_RCC_OscConfig+0xa34>)
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
 8003162:	e01b      	b.n	800319c <HAL_RCC_OscConfig+0xa6c>
 8003164:	46020c00 	.word	0x46020c00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d30a      	bcc.n	8003188 <HAL_RCC_OscConfig+0xa58>
 8003172:	4ba1      	ldr	r3, [pc, #644]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	029b      	lsls	r3, r3, #10
 8003180:	499d      	ldr	r1, [pc, #628]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	60cb      	str	r3, [r1, #12]
 8003186:	e009      	b.n	800319c <HAL_RCC_OscConfig+0xa6c>
 8003188:	4b9b      	ldr	r3, [pc, #620]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	03db      	lsls	r3, r3, #15
 8003196:	4998      	ldr	r1, [pc, #608]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800319c:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a95      	ldr	r2, [pc, #596]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80031a2:	f043 0310 	orr.w	r3, r3, #16
 80031a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031a8:	f7fe fdf4 	bl	8001d94 <HAL_GetTick>
 80031ac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80031b0:	f7fe fdf0 	bl	8001d94 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e18b      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0xa80>
 80031ce:	e018      	b.n	8003202 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80031d0:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a88      	ldr	r2, [pc, #544]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80031d6:	f023 0310 	bic.w	r3, r3, #16
 80031da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031dc:	f7fe fdda 	bl	8001d94 <HAL_GetTick>
 80031e0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80031e4:	f7fe fdd6 	bl	8001d94 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e171      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80031f6:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8166 	beq.w	80034d8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003212:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b0c      	cmp	r3, #12
 800321c:	f000 80f2 	beq.w	8003404 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	2b02      	cmp	r3, #2
 8003226:	f040 80c5 	bne.w	80033b4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a72      	ldr	r2, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003234:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003236:	f7fe fdad 	bl	8001d94 <HAL_GetTick>
 800323a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323e:	f7fe fda9 	bl	8001d94 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e144      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003250:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d111      	bne.n	800328e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800326c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003270:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800327c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_RCC_OscConfig+0xccc>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003296:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80032a2:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_OscConfig+0xccc>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a55      	ldr	r2, [pc, #340]	; (80033fc <HAL_RCC_OscConfig+0xccc>)
 80032a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80032ae:	4b52      	ldr	r3, [pc, #328]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032c2:	3a01      	subs	r2, #1
 80032c4:	0212      	lsls	r2, r2, #8
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032cc:	430a      	orrs	r2, r1
 80032ce:	494a      	ldr	r1, [pc, #296]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	628b      	str	r3, [r1, #40]	; 0x28
 80032d4:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80032d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d8:	4b49      	ldr	r3, [pc, #292]	; (8003400 <HAL_RCC_OscConfig+0xcd0>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032e0:	3a01      	subs	r2, #1
 80032e2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0252      	lsls	r2, r2, #9
 80032ee:	b292      	uxth	r2, r2
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032f6:	3a01      	subs	r2, #1
 80032f8:	0412      	lsls	r2, r2, #16
 80032fa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003304:	3a01      	subs	r2, #1
 8003306:	0612      	lsls	r2, r2, #24
 8003308:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800330c:	430a      	orrs	r2, r1
 800330e:	493a      	ldr	r1, [pc, #232]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003310:	4313      	orrs	r3, r2
 8003312:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800331a:	f023 0310 	bic.w	r3, r3, #16
 800331e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	4a34      	ldr	r2, [pc, #208]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800332a:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003330:	f043 0310 	orr.w	r3, r3, #16
 8003334:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f023 020c 	bic.w	r2, r3, #12
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	492d      	ldr	r1, [pc, #180]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003344:	4313      	orrs	r3, r2
 8003346:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCC_OscConfig+0xccc>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_RCC_OscConfig+0xccc>)
 8003356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800335c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336a:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 800337a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800338c:	f7fe fd02 	bl	8001d94 <HAL_GetTick>
 8003390:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fcfe 	bl	8001d94 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e099      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0xc64>
 80033b2:	e091      	b.n	80034d8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80033ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80033c0:	f7fe fce8 	bl	8001d94 <HAL_GetTick>
 80033c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fce4 	bl	8001d94 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e07f      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <HAL_RCC_OscConfig+0xcc8>)
 80033ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80033f0:	f023 0303 	bic.w	r3, r3, #3
 80033f4:	6293      	str	r3, [r2, #40]	; 0x28
 80033f6:	e06f      	b.n	80034d8 <HAL_RCC_OscConfig+0xda8>
 80033f8:	46020c00 	.word	0x46020c00
 80033fc:	46020800 	.word	0x46020800
 8003400:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003404:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800340a:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	2b01      	cmp	r3, #1
 8003416:	d039      	beq.n	800348c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0203 	and.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d132      	bne.n	800348c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d129      	bne.n	800348c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d122      	bne.n	800348c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d11a      	bne.n	800348c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	0a5b      	lsrs	r3, r3, #9
 800345a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d111      	bne.n	800348c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d108      	bne.n	800348c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	0e1b      	lsrs	r3, r3, #24
 800347e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e024      	b.n	80034da <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800349e:	429a      	cmp	r2, r3
 80034a0:	d01a      	beq.n	80034d8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 80034a8:	f023 0310 	bic.w	r3, r3, #16
 80034ac:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe fc71 	bl	8001d94 <HAL_GetTick>
 80034b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80034b4:	bf00      	nop
 80034b6:	f7fe fc6d 	bl	8001d94 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	4293      	cmp	r3, r2
 80034c0:	d0f9      	beq.n	80034b6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_RCC_OscConfig+0xdb4>)
 80034d2:	f043 0310 	orr.w	r3, r3, #16
 80034d6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3738      	adds	r7, #56	; 0x38
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	46020c00 	.word	0x46020c00

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e1d9      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b9b      	ldr	r3, [pc, #620]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d910      	bls.n	800352c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b98      	ldr	r3, [pc, #608]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 020f 	bic.w	r2, r3, #15
 8003512:	4996      	ldr	r1, [pc, #600]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b94      	ldr	r3, [pc, #592]	; (800376c <HAL_RCC_ClockConfig+0x284>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e1c1      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	4b8c      	ldr	r3, [pc, #560]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003544:	429a      	cmp	r2, r3
 8003546:	d908      	bls.n	800355a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003548:	4b89      	ldr	r3, [pc, #548]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4986      	ldr	r1, [pc, #536]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003556:	4313      	orrs	r3, r2
 8003558:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d012      	beq.n	800358c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003574:	429a      	cmp	r2, r3
 8003576:	d909      	bls.n	800358c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003578:	4b7d      	ldr	r3, [pc, #500]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	497a      	ldr	r1, [pc, #488]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003588:	4313      	orrs	r3, r2
 800358a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	4b74      	ldr	r3, [pc, #464]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d908      	bls.n	80035ba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80035a8:	4b71      	ldr	r3, [pc, #452]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	496e      	ldr	r1, [pc, #440]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d010      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	4b69      	ldr	r3, [pc, #420]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d908      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80035d6:	4b66      	ldr	r3, [pc, #408]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 020f 	bic.w	r2, r3, #15
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4963      	ldr	r1, [pc, #396]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80d2 	beq.w	800379a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d143      	bne.n	800368a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d110      	bne.n	8003632 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b57      	ldr	r3, [pc, #348]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003616:	4a56      	ldr	r2, [pc, #344]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003618:	f043 0304 	orr.w	r3, r3, #4
 800361c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003632:	f7fe fbaf 	bl	8001d94 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003638:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <HAL_RCC_ClockConfig+0x28c>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00f      	beq.n	8003664 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003646:	f7fe fba5 	bl	8001d94 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e12b      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003658:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCC_ClockConfig+0x28c>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800366c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003670:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800367a:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d121      	bne.n	80036ca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e112      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d115      	bne.n	80036ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e106      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0fa      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ba:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0f2      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4926      	ldr	r1, [pc, #152]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80036dc:	f7fe fb5a 	bl	8001d94 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d112      	bne.n	8003710 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fe fb52 	bl	8001d94 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0d6      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_ClockConfig+0x204>
 800370e:	e044      	b.n	800379a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d112      	bne.n	800373e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371a:	f7fe fb3b 	bl	8001d94 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0bf      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d1ee      	bne.n	800371a <HAL_RCC_ClockConfig+0x232>
 800373c:	e02d      	b.n	800379a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d123      	bne.n	800378e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe fb24 	bl	8001d94 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0a8      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_RCC_ClockConfig+0x288>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ee      	bne.n	8003748 <HAL_RCC_ClockConfig+0x260>
 800376a:	e016      	b.n	800379a <HAL_RCC_ClockConfig+0x2b2>
 800376c:	40022000 	.word	0x40022000
 8003770:	46020c00 	.word	0x46020c00
 8003774:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe fb0c 	bl	8001d94 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e090      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800378e:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b04      	cmp	r3, #4
 8003798:	d1ee      	bne.n	8003778 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d208      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80037b6:	4b40      	ldr	r3, [pc, #256]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 020f 	bic.w	r2, r3, #15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	493d      	ldr	r1, [pc, #244]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b3c      	ldr	r3, [pc, #240]	; (80038bc <HAL_RCC_ClockConfig+0x3d4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d210      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_RCC_ClockConfig+0x3d4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 020f 	bic.w	r2, r3, #15
 80037de:	4937      	ldr	r1, [pc, #220]	; (80038bc <HAL_RCC_ClockConfig+0x3d4>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b35      	ldr	r3, [pc, #212]	; (80038bc <HAL_RCC_ClockConfig+0x3d4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e05b      	b.n	80038b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003810:	429a      	cmp	r2, r3
 8003812:	d208      	bcs.n	8003826 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003814:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4925      	ldr	r1, [pc, #148]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003840:	429a      	cmp	r2, r3
 8003842:	d209      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	4919      	ldr	r1, [pc, #100]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003854:	4313      	orrs	r3, r2
 8003856:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003870:	429a      	cmp	r2, r3
 8003872:	d208      	bcs.n	8003886 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	490d      	ldr	r1, [pc, #52]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003882:	4313      	orrs	r3, r2
 8003884:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003886:	f000 f821 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_ClockConfig+0x3d0>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	490a      	ldr	r1, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x3d8>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x3dc>)
 800389e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x3e0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fa2b 	bl	8001d00 <HAL_InitTick>
 80038aa:	4603      	mov	r3, r0
 80038ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	46020c00 	.word	0x46020c00
 80038bc:	40022000 	.word	0x40022000
 80038c0:	0800a1dc 	.word	0x0800a1dc
 80038c4:	20000000 	.word	0x20000000
 80038c8:	20000004 	.word	0x20000004

080038cc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b08b      	sub	sp, #44	; 0x2c
 80038d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038da:	4b7b      	ldr	r3, [pc, #492]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e4:	4b78      	ldr	r3, [pc, #480]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x34>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d121      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d11e      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003900:	4b71      	ldr	r3, [pc, #452]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800390c:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800390e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003912:	0b1b      	lsrs	r3, r3, #12
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	e005      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	0f1b      	lsrs	r3, r3, #28
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003928:	4a68      	ldr	r2, [pc, #416]	; (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d110      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800393c:	e00d      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800393e:	4b62      	ldr	r3, [pc, #392]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b04      	cmp	r3, #4
 8003948:	d102      	bne.n	8003950 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800394a:	4b61      	ldr	r3, [pc, #388]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	e004      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b08      	cmp	r3, #8
 8003954:	d101      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003956:	4b5e      	ldr	r3, [pc, #376]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003958:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	f040 80ac 	bne.w	8003aba <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003962:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800396c:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800397a:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003986:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d003      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0xec>
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d022      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x130>
 80039b6:	e043      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003ad4 <HAL_RCC_GetSysClockFreq+0x208>
 80039c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039da:	ed97 6a01 	vldr	s12, [r7, #4]
 80039de:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003ad8 <HAL_RCC_GetSysClockFreq+0x20c>
 80039e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80039fa:	e046      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003ad4 <HAL_RCC_GetSysClockFreq+0x208>
 8003a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a1e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a22:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003ad8 <HAL_RCC_GetSysClockFreq+0x20c>
 8003a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003a3e:	e024      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	ee07 3a90 	vmov	s15, r3
 8003a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a68:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a6c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003ad8 <HAL_RCC_GetSysClockFreq+0x20c>
 8003a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a84:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003a88:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	0e1b      	lsrs	r3, r3, #24
 8003a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a94:	3301      	adds	r3, #1
 8003a96:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aae:	ee17 3a90 	vmov	r3, s15
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	e001      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003aba:	6a3b      	ldr	r3, [r7, #32]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	372c      	adds	r7, #44	; 0x2c
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	46020c00 	.word	0x46020c00
 8003acc:	0800a1f4 	.word	0x0800a1f4
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	4b742400 	.word	0x4b742400
 8003ad8:	46000000 	.word	0x46000000

08003adc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003ae0:	f7ff fef4 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x28>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4906      	ldr	r1, [pc, #24]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x30>)
 8003af8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x30>)
 8003afc:	681b      	ldr	r3, [r3, #0]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	46020c00 	.word	0x46020c00
 8003b08:	0800a1dc 	.word	0x0800a1dc
 8003b0c:	20000000 	.word	0x20000000

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003b14:	f7ff ffe2 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	; (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	46020c00 	.word	0x46020c00
 8003b34:	0800a1ec 	.word	0x0800a1ec

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003b3c:	f7ff ffce 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	46020c00 	.word	0x46020c00
 8003b5c:	0800a1ec 	.word	0x0800a1ec

08003b60 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003b64:	f7ff ffba 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4903      	ldr	r1, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	46020c00 	.word	0x46020c00
 8003b84:	0800a1ec 	.word	0x0800a1ec

08003b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b9e:	f7fe fda9 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 8003ba2:	6178      	str	r0, [r7, #20]
 8003ba4:	e019      	b.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bac:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003bb6:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bc4:	f7fe fd96 	bl	80026f4 <HAL_PWREx_GetVoltageRange>
 8003bc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd0:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be0:	d003      	beq.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be8:	d109      	bne.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf0:	d202      	bcs.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003bf6:	e033      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003bfc:	e030      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c04:	d208      	bcs.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0c:	d102      	bne.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003c0e:	2303      	movs	r3, #3
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e025      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e035      	b.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1e:	d90f      	bls.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c2c:	d902      	bls.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e015      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003c34:	2301      	movs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e012      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e00f      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c46:	d109      	bne.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4e:	d102      	bne.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003c50:	2301      	movs	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e004      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003c56:	2302      	movs	r3, #2
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	e001      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 020f 	bic.w	r2, r3, #15
 8003c68:	4909      	ldr	r1, [pc, #36]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d001      	beq.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	46020c00 	.word	0x46020c00
 8003c90:	40022000 	.word	0x40022000

08003c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c98:	b0b6      	sub	sp, #216	; 0xd8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f002 0401 	and.w	r4, r2, #1
 8003cb8:	2500      	movs	r5, #0
 8003cba:	ea54 0305 	orrs.w	r3, r4, r5
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003cc0:	4bc5      	ldr	r3, [pc, #788]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc6:	f023 0103 	bic.w	r1, r3, #3
 8003cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	4ac1      	ldr	r2, [pc, #772]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 0804 	and.w	r8, r2, #4
 8003ce4:	f04f 0900 	mov.w	r9, #0
 8003ce8:	ea58 0309 	orrs.w	r3, r8, r9
 8003cec:	d00b      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003cee:	4bba      	ldr	r3, [pc, #744]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	4ab6      	ldr	r2, [pc, #728]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f002 0a08 	and.w	sl, r2, #8
 8003d12:	f04f 0b00 	mov.w	fp, #0
 8003d16:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d1a:	d00b      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003d1c:	4bae      	ldr	r3, [pc, #696]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	4aaa      	ldr	r2, [pc, #680]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 0310 	and.w	r3, r2, #16
 8003d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003d54:	4ba0      	ldr	r3, [pc, #640]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	4a9c      	ldr	r2, [pc, #624]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f002 0320 	and.w	r3, r2, #32
 8003d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003d8c:	4b92      	ldr	r3, [pc, #584]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d92:	f023 0107 	bic.w	r1, r3, #7
 8003d96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9c:	4a8e      	ldr	r2, [pc, #568]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003dc4:	4b84      	ldr	r3, [pc, #528]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dca:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd4:	4a80      	ldr	r2, [pc, #512]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ddc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003df2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003dfc:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e0c:	4a72      	ldr	r2, [pc, #456]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	d00b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003e34:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e44:	4a64      	ldr	r2, [pc, #400]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e46:	430b      	orrs	r3, r1
 8003e48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e66:	460b      	mov	r3, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e72:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a56      	ldr	r2, [pc, #344]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e9a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003ea4:	4b4c      	ldr	r3, [pc, #304]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eaa:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	4a48      	ldr	r2, [pc, #288]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003edc:	4b3e      	ldr	r3, [pc, #248]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eec:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f02:	2300      	movs	r3, #0
 8003f04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f06:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003f10:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f20:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f22:	430b      	orrs	r3, r1
 8003f24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003f34:	673b      	str	r3, [r7, #112]	; 0x70
 8003f36:	2300      	movs	r3, #0
 8003f38:	677b      	str	r3, [r7, #116]	; 0x74
 8003f3a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d04f      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	2b80      	cmp	r3, #128	; 0x80
 8003f4e:	d02d      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003f50:	2b80      	cmp	r3, #128	; 0x80
 8003f52:	d827      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f54:	2b60      	cmp	r3, #96	; 0x60
 8003f56:	d02b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003f58:	2b60      	cmp	r3, #96	; 0x60
 8003f5a:	d823      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d006      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d81f      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d011      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003f6c:	e01a      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	4a19      	ldr	r2, [pc, #100]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f7a:	e01a      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f80:	3308      	adds	r3, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f002 f93e 	bl	8006204 <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f8e:	e010      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f94:	332c      	adds	r3, #44	; 0x2c
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 f9cc 	bl	8006334 <RCCEx_PLL3_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fa2:	e006      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d110      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fc0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fcc:	4a02      	ldr	r2, [pc, #8]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003fd4:	e006      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003fd6:	bf00      	nop
 8003fd8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003fe0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d046      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004008:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800400c:	d028      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800400e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004012:	d821      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004018:	d022      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800401a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401e:	d81b      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004024:	d01c      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800402a:	d815      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800402c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004030:	d008      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004036:	d80f      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d011      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d00e      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004042:	e009      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004048:	3308      	adds	r3, #8
 800404a:	4618      	mov	r0, r3
 800404c:	f002 f8da 	bl	8006204 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004056:	e004      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8004060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004062:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800406a:	4bb6      	ldr	r3, [pc, #728]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800406c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004070:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004078:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800407c:	4ab1      	ldr	r2, [pc, #708]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800407e:	430b      	orrs	r3, r1
 8004080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004084:	e003      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004086:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800408a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800408e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800409a:	663b      	str	r3, [r7, #96]	; 0x60
 800409c:	2300      	movs	r3, #0
 800409e:	667b      	str	r3, [r7, #100]	; 0x64
 80040a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d03e      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80040aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d81d      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040fb 	.word	0x080040fb
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040df 	.word	0x080040df
 80040c8:	080040fb 	.word	0x080040fb
 80040cc:	080040fb 	.word	0x080040fb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040d0:	4b9c      	ldr	r3, [pc, #624]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	4a9b      	ldr	r2, [pc, #620]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040da:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80040dc:	e00e      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040e2:	332c      	adds	r3, #44	; 0x2c
 80040e4:	4618      	mov	r0, r3
 80040e6:	f002 f925 	bl	8006334 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80040f0:	e004      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80040f8:	e000      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80040fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80040fc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10d      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004104:	4b8f      	ldr	r3, [pc, #572]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004106:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800410a:	f023 0107 	bic.w	r1, r3, #7
 800410e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004116:	4a8b      	ldr	r2, [pc, #556]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004118:	430b      	orrs	r3, r1
 800411a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004124:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004134:	65bb      	str	r3, [r7, #88]	; 0x58
 8004136:	2300      	movs	r3, #0
 8004138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800413a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d04a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004150:	d028      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004156:	d821      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800415c:	d024      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800415e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004162:	d81b      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004168:	d00e      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800416a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416e:	d815      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d110      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800417a:	4b72      	ldr	r3, [pc, #456]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	4a71      	ldr	r2, [pc, #452]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004186:	e012      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800418c:	332c      	adds	r3, #44	; 0x2c
 800418e:	4618      	mov	r0, r3
 8004190:	f002 f8d0 	bl	8006334 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800419a:	e008      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80041a4:	bf00      	nop
 80041a6:	e002      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80041ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80041b6:	4b63      	ldr	r3, [pc, #396]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80041b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80041c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	4a5e      	ldr	r2, [pc, #376]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80041ca:	430b      	orrs	r3, r1
 80041cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041d6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
 80041e8:	2300      	movs	r3, #0
 80041ea:	657b      	str	r3, [r7, #84]	; 0x54
 80041ec:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80041f0:	460b      	mov	r3, r1
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f000 80ba 	beq.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b51      	ldr	r3, [pc, #324]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d113      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004212:	4a4c      	ldr	r2, [pc, #304]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800421c:	4b49      	ldr	r3, [pc, #292]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800421e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800422a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004234:	4b44      	ldr	r3, [pc, #272]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	4a43      	ldr	r2, [pc, #268]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004240:	f7fd fda8 	bl	8001d94 <HAL_GetTick>
 8004244:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004248:	e00b      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fd fda3 	bl	8001d94 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d903      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004260:	e005      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004262:	4b39      	ldr	r3, [pc, #228]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ed      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800426e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d16a      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004276:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800427c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004284:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800428c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004290:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004298:	4293      	cmp	r3, r2
 800429a:	d01b      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800429c:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800429e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042aa:	4b26      	ldr	r3, [pc, #152]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b0:	4a24      	ldr	r2, [pc, #144]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ba:	4b22      	ldr	r3, [pc, #136]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042c0:	4a20      	ldr	r2, [pc, #128]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d019      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fd58 	bl	8001d94 <HAL_GetTick>
 80042e4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e8:	e00d      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd fd53 	bl	8001d94 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d903      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ea      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8004314:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800431e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004322:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800432a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800432e:	4a05      	ldr	r2, [pc, #20]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004330:	430b      	orrs	r3, r1
 8004332:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004336:	e00d      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004338:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800433c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8004340:	e008      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004342:	bf00      	nop
 8004344:	46020c00 	.word	0x46020c00
 8004348:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004350:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004354:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435c:	4bb2      	ldr	r3, [pc, #712]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004362:	4ab1      	ldr	r2, [pc, #708]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800436c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004378:	64bb      	str	r3, [r7, #72]	; 0x48
 800437a:	2300      	movs	r3, #0
 800437c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800437e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d042      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800438c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004390:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004394:	d022      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004396:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800439a:	d81b      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800439c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a0:	d011      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x732>
 80043a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a6:	d815      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d019      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80043ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b0:	d110      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043b6:	3308      	adds	r3, #8
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 ff23 	bl	8006204 <RCCEx_PLL2_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80043c4:	e00d      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c6:	4b98      	ldr	r3, [pc, #608]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	4a97      	ldr	r2, [pc, #604]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80043d2:	e006      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80043da:	e002      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80043e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80043e2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10d      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80043ea:	4b8f      	ldr	r3, [pc, #572]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80043f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043fc:	4a8a      	ldr	r2, [pc, #552]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043fe:	430b      	orrs	r3, r1
 8004400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004404:	e003      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800440a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800440e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
 800441c:	2300      	movs	r3, #0
 800441e:	647b      	str	r3, [r7, #68]	; 0x44
 8004420:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d02d      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800442a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004436:	d00b      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443c:	d804      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004446:	d007      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004450:	bf00      	nop
 8004452:	e002      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004458:	bf00      	nop
    }
    if (ret == HAL_OK)
 800445a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004462:	4b71      	ldr	r3, [pc, #452]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004464:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004468:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800446c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	4a6c      	ldr	r2, [pc, #432]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004476:	430b      	orrs	r3, r1
 8004478:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004482:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004492:	63bb      	str	r3, [r7, #56]	; 0x38
 8004494:	2300      	movs	r3, #0
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004498:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d00c      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80044a2:	4b61      	ldr	r3, [pc, #388]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80044a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044a8:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80044ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b4:	4a5c      	ldr	r2, [pc, #368]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80044b6:	430b      	orrs	r3, r1
 80044b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80044bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80044c8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ca:	2300      	movs	r3, #0
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d019      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80044d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e4:	d105      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044e6:	4b50      	ldr	r3, [pc, #320]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80044f2:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80044f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80044fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004504:	4a48      	ldr	r2, [pc, #288]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004506:	430b      	orrs	r3, r1
 8004508:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800450c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
 800451a:	2300      	movs	r3, #0
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d00c      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004528:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800452a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800452e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004536:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800453a:	493b      	ldr	r1, [pc, #236]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004542:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	2300      	movs	r3, #0
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d00c      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800455e:	4b32      	ldr	r3, [pc, #200]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800456c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004570:	492d      	ldr	r1, [pc, #180]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800458e:	460b      	mov	r3, r1
 8004590:	4313      	orrs	r3, r2
 8004592:	d00c      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800459a:	f023 0218 	bic.w	r2, r3, #24
 800459e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045a6:	4920      	ldr	r1, [pc, #128]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d034      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80045ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d6:	d105      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	4a12      	ldr	r2, [pc, #72]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e2:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80045e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045f0:	d108      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045f6:	3308      	adds	r3, #8
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 fe03 	bl	8006204 <RCCEx_PLL2_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 8004604:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10f      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800460e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800461a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800461e:	4902      	ldr	r1, [pc, #8]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004626:	e005      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004628:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004630:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d03a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800465c:	d00e      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800465e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004662:	d815      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d017      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800466c:	d110      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466e:	4b27      	ldr	r3, [pc, #156]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004678:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800467a:	e00e      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800467c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004680:	3308      	adds	r3, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f001 fdbe 	bl	8006204 <RCCEx_PLL2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004696:	e000      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004698:	bf00      	nop
    }
    if (ret == HAL_OK)
 800469a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80046a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b4:	4915      	ldr	r1, [pc, #84]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80046c2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80046c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	2300      	movs	r3, #0
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046dc:	460b      	mov	r3, r1
 80046de:	4313      	orrs	r3, r2
 80046e0:	d00c      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80046e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046e8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80046ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046f4:	4905      	ldr	r1, [pc, #20]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80046fc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 8004700:	4618      	mov	r0, r3
 8004702:	37d8      	adds	r7, #216	; 0xd8
 8004704:	46bd      	mov	sp, r7
 8004706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470a:	bf00      	nop
 800470c:	46020c00 	.word	0x46020c00

08004710 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004718:	4bad      	ldr	r3, [pc, #692]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004720:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004722:	4bab      	ldr	r3, [pc, #684]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800472c:	4ba8      	ldr	r3, [pc, #672]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	3301      	adds	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800473a:	4ba5      	ldr	r3, [pc, #660]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004746:	4ba2      	ldr	r3, [pc, #648]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	08db      	lsrs	r3, r3, #3
 800474c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8123 	beq.w	80049b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d062      	beq.n	8004836 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b03      	cmp	r3, #3
 8004774:	f200 8081 	bhi.w	800487a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d024      	beq.n	80047c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d17a      	bne.n	800487a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80049d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b8e      	ldr	r3, [pc, #568]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047aa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80049d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047c6:	e08f      	b.n	80048e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80047c8:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80047d4:	4b7e      	ldr	r3, [pc, #504]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	0f1b      	lsrs	r3, r3, #28
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	e006      	b.n	80047ee <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80047e0:	4b7b      	ldr	r3, [pc, #492]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	0f1b      	lsrs	r3, r3, #28
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	4a7b      	ldr	r2, [pc, #492]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	ee07 3a90 	vmov	s15, r3
 80047f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004814:	ed97 6a02 	vldr	s12, [r7, #8]
 8004818:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80049d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800481c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004828:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800482c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004834:	e058      	b.n	80048e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004840:	eddf 6a64 	vldr	s13, [pc, #400]	; 80049d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004848:	4b61      	ldr	r3, [pc, #388]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004858:	ed97 6a02 	vldr	s12, [r7, #8]
 800485c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80049d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004860:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004864:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004874:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004878:	e036      	b.n	80048e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800487a:	4b55      	ldr	r3, [pc, #340]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8004886:	4b52      	ldr	r3, [pc, #328]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0f1b      	lsrs	r3, r3, #28
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8004892:	4b4f      	ldr	r3, [pc, #316]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	0f1b      	lsrs	r3, r3, #28
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	4a4e      	ldr	r2, [pc, #312]	; (80049dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ca:	eddf 5a43 	vldr	s11, [pc, #268]	; 80049d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d017      	beq.n	8004924 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80048f4:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	0a5b      	lsrs	r3, r3, #9
 80048fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800490a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800490e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491a:	ee17 2a90 	vmov	r2, s15
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e002      	b.n	800492a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d017      	beq.n	8004966 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	0c1b      	lsrs	r3, r3, #16
 800493c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800494c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004950:	edd7 6a07 	vldr	s13, [r7, #28]
 8004954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495c:	ee17 2a90 	vmov	r2, s15
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	e002      	b.n	800496c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800496c:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d017      	beq.n	80049a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800498a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800498e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004992:	edd7 6a07 	vldr	s13, [r7, #28]
 8004996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499e:	ee17 2a90 	vmov	r2, s15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80049a6:	e00c      	b.n	80049c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	609a      	str	r2, [r3, #8]
}
 80049ae:	e008      	b.n	80049c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
}
 80049c2:	bf00      	nop
 80049c4:	3724      	adds	r7, #36	; 0x24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	46020c00 	.word	0x46020c00
 80049d4:	4b742400 	.word	0x4b742400
 80049d8:	46000000 	.word	0x46000000
 80049dc:	0800a1f4 	.word	0x0800a1f4

080049e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80049e8:	4bad      	ldr	r3, [pc, #692]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80049f2:	4bab      	ldr	r3, [pc, #684]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80049fc:	4ba8      	ldr	r3, [pc, #672]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	3301      	adds	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004a0a:	4ba5      	ldr	r3, [pc, #660]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004a16:	4ba2      	ldr	r3, [pc, #648]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8123 	beq.w	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d062      	beq.n	8004b06 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	f200 8081 	bhi.w	8004b4a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d024      	beq.n	8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d17a      	bne.n	8004b4a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b8e      	ldr	r3, [pc, #568]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a96:	e08f      	b.n	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004a98:	4b81      	ldr	r3, [pc, #516]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8004aa4:	4b7e      	ldr	r3, [pc, #504]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	0f1b      	lsrs	r3, r3, #28
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	e006      	b.n	8004abe <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8004ab0:	4b7b      	ldr	r3, [pc, #492]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	0f1b      	lsrs	r3, r3, #28
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	4a7b      	ldr	r2, [pc, #492]	; (8004cac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b04:	e058      	b.n	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b10:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b18:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b28:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b48:	e036      	b.n	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004b4a:	4b55      	ldr	r3, [pc, #340]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8004b56:	4b52      	ldr	r3, [pc, #328]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0f1b      	lsrs	r3, r3, #28
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8004b62:	4b4f      	ldr	r3, [pc, #316]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	0f1b      	lsrs	r3, r3, #28
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	4a4e      	ldr	r2, [pc, #312]	; (8004cac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	ee07 3a90 	vmov	s15, r3
 8004b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b9a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d017      	beq.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004bc4:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	0a5b      	lsrs	r3, r3, #9
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bda:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bea:	ee17 2a90 	vmov	r2, s15
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004bfa:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d017      	beq.n	8004c36 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c06:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	ee07 3a90 	vmov	s15, r3
 8004c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2c:	ee17 2a90 	vmov	r2, s15
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	e002      	b.n	8004c3c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d017      	beq.n	8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c6e:	ee17 2a90 	vmov	r2, s15
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c76:	e00c      	b.n	8004c92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
}
 8004c7e:	e008      	b.n	8004c92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
}
 8004c92:	bf00      	nop
 8004c94:	3724      	adds	r7, #36	; 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	46020c00 	.word	0x46020c00
 8004ca4:	4b742400 	.word	0x4b742400
 8004ca8:	46000000 	.word	0x46000000
 8004cac:	0800a1f4 	.word	0x0800a1f4

08004cb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004cb8:	4bad      	ldr	r3, [pc, #692]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004cc2:	4bab      	ldr	r3, [pc, #684]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004ccc:	4ba8      	ldr	r3, [pc, #672]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004cda:	4ba5      	ldr	r3, [pc, #660]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	091b      	lsrs	r3, r3, #4
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004ce6:	4ba2      	ldr	r3, [pc, #648]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	08db      	lsrs	r3, r3, #3
 8004cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8123 	beq.w	8004f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d062      	beq.n	8004dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	f200 8081 	bhi.w	8004e1a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d024      	beq.n	8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d17a      	bne.n	8004e1a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d36:	4b8e      	ldr	r3, [pc, #568]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d4a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d62:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004d66:	e08f      	b.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004d68:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004d74:	4b7e      	ldr	r3, [pc, #504]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	0f1b      	lsrs	r3, r3, #28
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	e006      	b.n	8004d8e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004d80:	4b7b      	ldr	r3, [pc, #492]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	0f1b      	lsrs	r3, r3, #28
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	4a7b      	ldr	r2, [pc, #492]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	ee07 3a90 	vmov	s15, r3
 8004db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004db8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dd4:	e058      	b.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de8:	4b61      	ldr	r3, [pc, #388]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dfc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e18:	e036      	b.n	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004e1a:	4b55      	ldr	r3, [pc, #340]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004e26:	4b52      	ldr	r3, [pc, #328]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0f1b      	lsrs	r3, r3, #28
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004e32:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	0f1b      	lsrs	r3, r3, #28
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e86:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004e88:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d017      	beq.n	8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	0a5b      	lsrs	r3, r3, #9
 8004e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eba:	ee17 2a90 	vmov	r2, s15
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e002      	b.n	8004eca <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004eca:	4b29      	ldr	r3, [pc, #164]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d017      	beq.n	8004f06 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ed6:	4b26      	ldr	r3, [pc, #152]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	0c1b      	lsrs	r3, r3, #16
 8004edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efc:	ee17 2a90 	vmov	r2, s15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d017      	beq.n	8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3e:	ee17 2a90 	vmov	r2, s15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004f46:	e00c      	b.n	8004f62 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
}
 8004f4e:	e008      	b.n	8004f62 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
}
 8004f62:	bf00      	nop
 8004f64:	3724      	adds	r7, #36	; 0x24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	46020c00 	.word	0x46020c00
 8004f74:	4b742400 	.word	0x4b742400
 8004f78:	46000000 	.word	0x46000000
 8004f7c:	0800a1f4 	.word	0x0800a1f4

08004f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08e      	sub	sp, #56	; 0x38
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004f92:	430b      	orrs	r3, r1
 8004f94:	d145      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004f96:	4b9b      	ldr	r3, [pc, #620]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004fa2:	4b98      	ldr	r3, [pc, #608]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d108      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb6:	d104      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fbe:	f001 b912 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004fc2:	4b90      	ldr	r3, [pc, #576]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd0:	d114      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd8:	d110      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fda:	4b8a      	ldr	r3, [pc, #552]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fe8:	d103      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004fea:	23fa      	movs	r3, #250	; 0xfa
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fee:	f001 b8fa 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004ff2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ff8:	f001 b8f5 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004ffc:	4b81      	ldr	r3, [pc, #516]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005008:	d107      	bne.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005010:	d103      	bne.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005012:	4b7d      	ldr	r3, [pc, #500]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
 8005016:	f001 b8e6 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
 800501e:	f001 b8e2 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005026:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800502a:	430b      	orrs	r3, r1
 800502c:	d151      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800502e:	4b75      	ldr	r3, [pc, #468]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005034:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005038:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2b80      	cmp	r3, #128	; 0x80
 800503e:	d035      	beq.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d841      	bhi.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	2b60      	cmp	r3, #96	; 0x60
 800504a:	d02a      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2b60      	cmp	r3, #96	; 0x60
 8005050:	d83b      	bhi.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d009      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d835      	bhi.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	2b20      	cmp	r3, #32
 8005068:	d012      	beq.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800506a:	e02e      	b.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800506c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fb4d 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800507a:	f001 b8b4 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800507e:	f107 0318 	add.w	r3, r7, #24
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fcac 	bl	80049e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800508c:	f001 b8ab 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005090:	f107 030c 	add.w	r3, r7, #12
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fe0b 	bl	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800509e:	f001 b8a2 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80050a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050a8:	f001 b89d 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050ac:	4b55      	ldr	r3, [pc, #340]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b8:	d103      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80050ba:	4b54      	ldr	r3, [pc, #336]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050be:	f001 b892 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050c6:	f001 b88e 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050ce:	f001 b88a 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80050d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80050da:	430b      	orrs	r3, r1
 80050dc:	d126      	bne.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80050de:	4b49      	ldr	r3, [pc, #292]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80050e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80050ea:	4b46      	ldr	r3, [pc, #280]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d106      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80050fe:	4b43      	ldr	r3, [pc, #268]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
 8005102:	f001 b870 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005106:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d107      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511a:	d103      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 800511c:	4b3c      	ldr	r3, [pc, #240]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
 8005120:	f001 b861 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
 8005128:	f001 b85d 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800512c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005130:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005134:	430b      	orrs	r3, r1
 8005136:	d171      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005138:	4b32      	ldr	r3, [pc, #200]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800513a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800513e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005142:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800514a:	d034      	beq.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005152:	d853      	bhi.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005162:	d84b      	bhi.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005170:	d009      	beq.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8005172:	e043      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fac9 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005182:	f001 b830 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005186:	f107 0318 	add.w	r3, r7, #24
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fc28 	bl	80049e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005194:	f001 b827 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a4:	d103      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 80051a6:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051aa:	f001 b81c 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051b2:	f001 b818 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051b6:	4b13      	ldr	r3, [pc, #76]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d118      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0e1b      	lsrs	r3, r3, #24
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	e006      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80051dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	0e1b      	lsrs	r3, r3, #24
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80051ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051f0:	f000 bff9 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051f8:	f000 bff5 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005200:	f000 bff1 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005204:	46020c00 	.word	0x46020c00
 8005208:	0007a120 	.word	0x0007a120
 800520c:	00f42400 	.word	0x00f42400
 8005210:	007a1200 	.word	0x007a1200
 8005214:	02dc6c00 	.word	0x02dc6c00
 8005218:	0800a1f4 	.word	0x0800a1f4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005220:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005224:	430b      	orrs	r3, r1
 8005226:	d17f      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005228:	4ba8      	ldr	r3, [pc, #672]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800522a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800522e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2b00      	cmp	r3, #0
 8005238:	d165      	bne.n	8005306 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800523a:	4ba4      	ldr	r3, [pc, #656]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800523c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005240:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005244:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800524c:	d034      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005254:	d853      	bhi.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800525c:	d00b      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005264:	d84b      	bhi.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d016      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005272:	d009      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005274:	e043      	b.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fa48 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005284:	f000 bfaf 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005288:	f107 0318 	add.w	r3, r7, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fba7 	bl	80049e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005296:	f000 bfa6 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800529a:	4b8c      	ldr	r3, [pc, #560]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a6:	d103      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 80052a8:	4b89      	ldr	r3, [pc, #548]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80052ac:	f000 bf9b 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80052b4:	f000 bf97 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052b8:	4b84      	ldr	r3, [pc, #528]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d118      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052c4:	4b81      	ldr	r3, [pc, #516]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80052d0:	4b7e      	ldr	r3, [pc, #504]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	0e1b      	lsrs	r3, r3, #24
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	e006      	b.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80052dc:	4b7b      	ldr	r3, [pc, #492]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80052de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	4a7a      	ldr	r2, [pc, #488]	; (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80052ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80052f2:	f000 bf78 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80052fa:	f000 bf74 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005302:	f000 bf70 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800530c:	d108      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800530e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff f9fc 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	f000 bf63 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
 8005324:	f000 bf5f 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800532c:	1e51      	subs	r1, r2, #1
 800532e:	430b      	orrs	r3, r1
 8005330:	d136      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005332:	4b66      	ldr	r3, [pc, #408]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005344:	f7fe fbf8 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005348:	6378      	str	r0, [r7, #52]	; 0x34
 800534a:	f000 bf4c 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	2b01      	cmp	r3, #1
 8005352:	d104      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005354:	f7fe faba 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005358:	6378      	str	r0, [r7, #52]	; 0x34
 800535a:	f000 bf44 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800535e:	4b5b      	ldr	r3, [pc, #364]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d106      	bne.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	2b02      	cmp	r3, #2
 8005370:	d103      	bne.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8005372:	4b59      	ldr	r3, [pc, #356]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
 8005376:	f000 bf36 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800537a:	4b54      	ldr	r3, [pc, #336]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800537c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d107      	bne.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2b03      	cmp	r3, #3
 800538c:	d104      	bne.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 800538e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
 8005394:	f000 bf27 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
 800539c:	f000 bf23 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80053a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a4:	1f11      	subs	r1, r2, #4
 80053a6:	430b      	orrs	r3, r1
 80053a8:	d136      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80053ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fba8 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80053c0:	6378      	str	r0, [r7, #52]	; 0x34
 80053c2:	f000 bf10 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d104      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053cc:	f7fe fa7e 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 80053d0:	6378      	str	r0, [r7, #52]	; 0x34
 80053d2:	f000 bf08 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d106      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d103      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80053ea:	4b3b      	ldr	r3, [pc, #236]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
 80053ee:	f000 befa 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80053f2:	4b36      	ldr	r3, [pc, #216]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80053f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d107      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2b30      	cmp	r3, #48	; 0x30
 8005404:	d104      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8005406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
 800540c:	f000 beeb 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
 8005414:	f000 bee7 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541c:	f1a2 0108 	sub.w	r1, r2, #8
 8005420:	430b      	orrs	r3, r1
 8005422:	d136      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005424:	4b29      	ldr	r3, [pc, #164]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800542a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800542e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005436:	f7fe fb6b 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 800543a:	6378      	str	r0, [r7, #52]	; 0x34
 800543c:	f000 bed3 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d104      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005446:	f7fe fa41 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800544a:	6378      	str	r0, [r7, #52]	; 0x34
 800544c:	f000 becb 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d106      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d103      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8005464:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
 8005468:	f000 bebd 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800546e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d107      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2bc0      	cmp	r3, #192	; 0xc0
 800547e:	d104      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8005480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
 8005486:	f000 beae 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
 800548e:	f000 beaa 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005496:	f1a2 0110 	sub.w	r1, r2, #16
 800549a:	430b      	orrs	r3, r1
 800549c:	d141      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80054a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe fb2e 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80054b4:	6378      	str	r0, [r7, #52]	; 0x34
 80054b6:	f000 be96 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d10c      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054c2:	f7fe fa03 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 80054c6:	6378      	str	r0, [r7, #52]	; 0x34
 80054c8:	f000 be8d 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80054cc:	46020c00 	.word	0x46020c00
 80054d0:	02dc6c00 	.word	0x02dc6c00
 80054d4:	0800a1f4 	.word	0x0800a1f4
 80054d8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80054dc:	4baa      	ldr	r3, [pc, #680]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d107      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	d103      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80054f2:	4ba6      	ldr	r3, [pc, #664]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	f000 be76 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80054fa:	4ba3      	ldr	r3, [pc, #652]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b02      	cmp	r3, #2
 8005506:	d108      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550e:	d104      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8005510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
 8005516:	f000 be66 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	f000 be62 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005526:	f1a2 0120 	sub.w	r1, r2, #32
 800552a:	430b      	orrs	r3, r1
 800552c:	d158      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800552e:	4b96      	ldr	r3, [pc, #600]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005540:	f7fe fb0e 	bl	8003b60 <HAL_RCC_GetPCLK3Freq>
 8005544:	6378      	str	r0, [r7, #52]	; 0x34
 8005546:	f000 be4e 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2b01      	cmp	r3, #1
 800554e:	d104      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005550:	f7fe f9bc 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005554:	6378      	str	r0, [r7, #52]	; 0x34
 8005556:	f000 be46 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800555a:	4b8b      	ldr	r3, [pc, #556]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005566:	d106      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	2b02      	cmp	r3, #2
 800556c:	d103      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800556e:	4b87      	ldr	r3, [pc, #540]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
 8005572:	f000 be38 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005576:	4b84      	ldr	r3, [pc, #528]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d107      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	2b03      	cmp	r3, #3
 8005588:	d104      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800558a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
 8005590:	f000 be29 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005594:	4b7c      	ldr	r3, [pc, #496]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d11b      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d118      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055a6:	4b78      	ldr	r3, [pc, #480]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80055b2:	4b75      	ldr	r3, [pc, #468]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	0e1b      	lsrs	r3, r3, #24
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	e006      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80055be:	4b72      	ldr	r3, [pc, #456]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80055c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	0e1b      	lsrs	r3, r3, #24
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	4a70      	ldr	r2, [pc, #448]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80055ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
 80055d4:	f000 be07 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
 80055dc:	f000 be03 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80055e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80055e8:	430b      	orrs	r3, r1
 80055ea:	d16c      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80055ec:	4b66      	ldr	r3, [pc, #408]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80055ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80055f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fe:	d104      	bne.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005600:	f7fe f964 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005604:	6378      	str	r0, [r7, #52]	; 0x34
 8005606:	f000 bdee 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005610:	d108      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005612:	f107 0318 	add.w	r3, r7, #24
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff f9e2 	bl	80049e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
 8005620:	f000 bde1 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800562a:	f7fe fa57 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 800562e:	6378      	str	r0, [r7, #52]	; 0x34
 8005630:	f000 bdd9 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800563a:	d122      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800563c:	4b52      	ldr	r3, [pc, #328]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b20      	cmp	r3, #32
 8005646:	d118      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005648:	4b4f      	ldr	r3, [pc, #316]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005654:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	e006      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005660:	4b49      	ldr	r3, [pc, #292]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	4a48      	ldr	r2, [pc, #288]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	f000 bdb6 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
 800567e:	f000 bdb2 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005682:	4b41      	ldr	r3, [pc, #260]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568e:	d107      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005696:	d103      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8005698:	4b3c      	ldr	r3, [pc, #240]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
 800569c:	f000 bda3 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80056a0:	4b39      	ldr	r3, [pc, #228]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d107      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b4:	d103      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 80056b6:	4b35      	ldr	r3, [pc, #212]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	f000 bd94 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	f000 bd90 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80056c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ca:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80056ce:	430b      	orrs	r3, r1
 80056d0:	d160      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80056d2:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d84c      	bhi.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005725 	.word	0x08005725
 80056f0:	08005701 	.word	0x08005701
 80056f4:	08005713 	.word	0x08005713
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	08005739 	.word	0x08005739
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff f803 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800570e:	f000 bd6a 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005712:	f107 030c 	add.w	r3, r7, #12
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff faca 	bl	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005720:	f000 bd61 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005724:	f7fe f9da 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8005728:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800572a:	f000 bd5c 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800572e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005734:	f000 bd57 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005738:	4b13      	ldr	r3, [pc, #76]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b20      	cmp	r3, #32
 8005742:	d118      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005744:	4b10      	ldr	r3, [pc, #64]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0e1b      	lsrs	r3, r3, #24
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	e006      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800575e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005772:	f000 bd38 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800577a:	f000 bd34 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005782:	f000 bd30 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005786:	bf00      	nop
 8005788:	46020c00 	.word	0x46020c00
 800578c:	00f42400 	.word	0x00f42400
 8005790:	0800a1f4 	.word	0x0800a1f4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005798:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800579c:	430b      	orrs	r3, r1
 800579e:	d167      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80057a0:	4ba0      	ldr	r3, [pc, #640]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80057a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057a6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80057aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057b2:	d036      	beq.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ba:	d855      	bhi.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057c2:	d029      	beq.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057ca:	d84d      	bhi.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057d2:	d013      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057da:	d845      	bhi.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d015      	beq.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d13e      	bne.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe ff8e 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057f8:	f000 bcf5 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fc:	f107 030c 	add.w	r3, r7, #12
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fa55 	bl	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800580a:	f000 bcec 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800580e:	f7fe f965 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8005812:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005814:	f000 bce7 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005818:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800581e:	f000 bce2 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005822:	4b80      	ldr	r3, [pc, #512]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d118      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800582e:	4b7d      	ldr	r3, [pc, #500]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800583a:	4b7a      	ldr	r3, [pc, #488]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0e1b      	lsrs	r3, r3, #24
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	e006      	b.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8005846:	4b77      	ldr	r3, [pc, #476]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	0e1b      	lsrs	r3, r3, #24
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	4a74      	ldr	r2, [pc, #464]	; (8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800585c:	f000 bcc3 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005864:	f000 bcbf 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800586c:	f000 bcbb 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005874:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005878:	430b      	orrs	r3, r1
 800587a:	d14c      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800587c:	4b69      	ldr	r3, [pc, #420]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800587e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005882:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005886:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800588e:	f7fe f93f 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8005892:	6378      	str	r0, [r7, #52]	; 0x34
 8005894:	f000 bca7 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589e:	d104      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80058a0:	f7fe f814 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 80058a4:	6378      	str	r0, [r7, #52]	; 0x34
 80058a6:	f000 bc9e 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80058aa:	4b5e      	ldr	r3, [pc, #376]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d107      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058be:	d103      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 80058c0:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
 80058c4:	f000 bc8f 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80058c8:	4b56      	ldr	r3, [pc, #344]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d11c      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058da:	d118      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058dc:	4b51      	ldr	r3, [pc, #324]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80058e8:	4b4e      	ldr	r3, [pc, #312]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	0e1b      	lsrs	r3, r3, #24
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	e006      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80058f4:	4b4b      	ldr	r3, [pc, #300]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80058f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	0e1b      	lsrs	r3, r3, #24
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	4a49      	ldr	r2, [pc, #292]	; (8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
 800590a:	f000 bc6c 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	f000 bc68 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591a:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800591e:	430b      	orrs	r3, r1
 8005920:	d14c      	bne.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005922:	4b40      	ldr	r3, [pc, #256]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005928:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800592c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fe f8ec 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8005938:	6378      	str	r0, [r7, #52]	; 0x34
 800593a:	f000 bc54 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005944:	d104      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005946:	f7fd ffc1 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800594a:	6378      	str	r0, [r7, #52]	; 0x34
 800594c:	f000 bc4b 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005950:	4b34      	ldr	r3, [pc, #208]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d107      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d103      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8005966:	4b31      	ldr	r3, [pc, #196]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
 800596a:	f000 bc3c 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800596e:	4b2d      	ldr	r3, [pc, #180]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b20      	cmp	r3, #32
 8005978:	d11c      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005980:	d118      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005982:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800598e:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	0e1b      	lsrs	r3, r3, #24
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	e006      	b.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800599a:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800599c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059a0:	041b      	lsls	r3, r3, #16
 80059a2:	0e1b      	lsrs	r3, r3, #24
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80059aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
 80059b0:	f000 bc19 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
 80059b8:	f000 bc15 	b.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80059bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80059c4:	430b      	orrs	r3, r1
 80059c6:	d157      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80059c8:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80059ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2bc0      	cmp	r3, #192	; 0xc0
 80059d8:	d02a      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	2bc0      	cmp	r3, #192	; 0xc0
 80059de:	d848      	bhi.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d00d      	beq.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	2b80      	cmp	r3, #128	; 0x80
 80059ea:	d842      	bhi.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d011      	beq.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80059f8:	e03b      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80059fa:	f7fe f8b1 	bl	8003b60 <HAL_RCC_GetPCLK3Freq>
 80059fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005a00:	e3f1      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0e:	d102      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a14:	e3e7      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a1a:	e3e4      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005a1c:	f7fd ff56 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005a20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005a22:	e3e0      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005a24:	46020c00 	.word	0x46020c00
 8005a28:	0800a1f4 	.word	0x0800a1f4
 8005a2c:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a30:	4ba3      	ldr	r3, [pc, #652]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d117      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a3c:	4ba0      	ldr	r3, [pc, #640]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8005a48:	4b9d      	ldr	r3, [pc, #628]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	0e1b      	lsrs	r3, r3, #24
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	e006      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8005a54:	4b9a      	ldr	r3, [pc, #616]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	4a98      	ldr	r2, [pc, #608]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a6a:	e3bc      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a70:	e3b9      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a76:	e3b6      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005a80:	430b      	orrs	r3, r1
 8005a82:	d147      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005a84:	4b8e      	ldr	r3, [pc, #568]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a8e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a96:	f7fe f83b 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8005a9a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a9c:	e3a3      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa4:	d103      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005aa6:	f7fd ff11 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005aaa:	6378      	str	r0, [r7, #52]	; 0x34
 8005aac:	e39b      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005aae:	4b84      	ldr	r3, [pc, #528]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aba:	d106      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d102      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8005ac4:	4b80      	ldr	r3, [pc, #512]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac8:	e38d      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005aca:	4b7d      	ldr	r3, [pc, #500]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d11b      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005adc:	d117      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ade:	4b78      	ldr	r3, [pc, #480]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8005aea:	4b75      	ldr	r3, [pc, #468]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0e1b      	lsrs	r3, r3, #24
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8005af6:	4b72      	ldr	r3, [pc, #456]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	0e1b      	lsrs	r3, r3, #24
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	4a6f      	ldr	r2, [pc, #444]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0c:	e36b      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
 8005b12:	e368      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b18:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	d164      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005b20:	4b67      	ldr	r3, [pc, #412]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d120      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b32:	4b63      	ldr	r3, [pc, #396]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d117      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b3e:	4b60      	ldr	r3, [pc, #384]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8005b4a:	4b5d      	ldr	r3, [pc, #372]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0e1b      	lsrs	r3, r3, #24
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	e006      	b.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005b56:	4b5a      	ldr	r3, [pc, #360]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	0e1b      	lsrs	r3, r3, #24
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	4a57      	ldr	r2, [pc, #348]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6c:	e33b      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
 8005b72:	e338      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005b74:	4b52      	ldr	r3, [pc, #328]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b82:	d112      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8a:	d10e      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b8c:	4b4c      	ldr	r3, [pc, #304]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b9a:	d102      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8005b9c:	23fa      	movs	r3, #250	; 0xfa
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ba0:	e321      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005ba2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ba6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ba8:	e31d      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005baa:	4b45      	ldr	r3, [pc, #276]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb6:	d106      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bbe:	d102      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8005bc0:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc4:	e30f      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d107      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bda:	d103      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8005bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
 8005be2:	e300      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
 8005be8:	e2fd      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bee:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	d16a      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005bf6:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d120      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c08:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d117      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c14:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	0e1b      	lsrs	r3, r3, #24
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	e006      	b.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005c2c:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	0e1b      	lsrs	r3, r3, #24
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
 8005c42:	e2d0      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
 8005c48:	e2cd      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005c4a:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c58:	d112      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d10e      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c62:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c70:	d102      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005c72:	23fa      	movs	r3, #250	; 0xfa
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c76:	e2b6      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c7e:	e2b2      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8c:	d106      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c94:	d102      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005c96:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9a:	e2a4      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d107      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cb0:	d103      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb8:	e295      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cbe:	e292      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005cc0:	46020c00 	.word	0x46020c00
 8005cc4:	0800a1f4 	.word	0x0800a1f4
 8005cc8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	d147      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005cd8:	4b9a      	ldr	r3, [pc, #616]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cde:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ce2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d103      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005cea:	f7fd ff11 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8005cee:	6378      	str	r0, [r7, #52]	; 0x34
 8005cf0:	e279      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005cf2:	4b94      	ldr	r3, [pc, #592]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d00:	d112      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d08:	d10e      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d0a:	4b8e      	ldr	r3, [pc, #568]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d18:	d102      	bne.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005d1a:	23fa      	movs	r3, #250	; 0xfa
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d1e:	e262      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005d20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d24:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d26:	e25e      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005d28:	4b86      	ldr	r3, [pc, #536]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d34:	d106      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d3c:	d102      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005d3e:	4b82      	ldr	r3, [pc, #520]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
 8005d42:	e250      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005d44:	4b7f      	ldr	r3, [pc, #508]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d107      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d58:	d103      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8005d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d60:	e241      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
 8005d66:	e23e      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005d70:	430b      	orrs	r3, r1
 8005d72:	d12d      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005d74:	4b73      	ldr	r3, [pc, #460]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d7a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005d7e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005d80:	4b70      	ldr	r3, [pc, #448]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005d94:	4b6c      	ldr	r3, [pc, #432]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
 8005d98:	e225      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005da0:	d107      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fcb2 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
 8005db0:	e219      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005db8:	d107      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dba:	f107 0318 	add.w	r3, r7, #24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fe0e 	bl	80049e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc8:	e20d      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dce:	e20a      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	d156      	bne.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005ddc:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005de2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dee:	d028      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005df6:	d845      	bhi.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dfe:	d013      	beq.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e06:	d83d      	bhi.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e14:	d004      	beq.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005e16:	e035      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005e18:	f7fd fe8e 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005e1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e1e:	e1e2      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005e20:	f7fd fd54 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005e24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e26:	e1de      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e28:	4b46      	ldr	r3, [pc, #280]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e34:	d102      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005e36:	4b44      	ldr	r3, [pc, #272]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e3a:	e1d4      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e40:	e1d1      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e42:	4b40      	ldr	r3, [pc, #256]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d117      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e4e:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8005e5a:	4b3a      	ldr	r3, [pc, #232]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0e1b      	lsrs	r3, r3, #24
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	e006      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	0e1b      	lsrs	r3, r3, #24
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e7c:	e1b3      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e82:	e1b0      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e88:	e1ad      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e8e:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005e92:	430b      	orrs	r3, r1
 8005e94:	d15c      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005e96:	4b2b      	ldr	r3, [pc, #172]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ea0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ea8:	d028      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005eb0:	d845      	bhi.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb8:	d013      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec0:	d83d      	bhi.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ece:	d004      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005ed0:	e035      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005ed2:	f7fd fe1d 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8005ed6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ed8:	e185      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fd fcf7 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005ede:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ee0:	e181      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d102      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005ef0:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ef4:	e177      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005efa:	e174      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005efc:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d117      	bne.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f08:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	0e1b      	lsrs	r3, r3, #24
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	e006      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	0e1b      	lsrs	r3, r3, #24
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	4a07      	ldr	r2, [pc, #28]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f36:	e156      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f3c:	e153      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f42:	e150      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005f44:	46020c00 	.word	0x46020c00
 8005f48:	00f42400 	.word	0x00f42400
 8005f4c:	0800a1f4 	.word	0x0800a1f4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f54:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	d176      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005f5c:	4ba4      	ldr	r3, [pc, #656]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f62:	f003 0318 	and.w	r3, r3, #24
 8005f66:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	2b18      	cmp	r3, #24
 8005f6c:	d86a      	bhi.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005fd9 	.word	0x08005fd9
 8005f78:	08006045 	.word	0x08006045
 8005f7c:	08006045 	.word	0x08006045
 8005f80:	08006045 	.word	0x08006045
 8005f84:	08006045 	.word	0x08006045
 8005f88:	08006045 	.word	0x08006045
 8005f8c:	08006045 	.word	0x08006045
 8005f90:	08006045 	.word	0x08006045
 8005f94:	08005fe1 	.word	0x08005fe1
 8005f98:	08006045 	.word	0x08006045
 8005f9c:	08006045 	.word	0x08006045
 8005fa0:	08006045 	.word	0x08006045
 8005fa4:	08006045 	.word	0x08006045
 8005fa8:	08006045 	.word	0x08006045
 8005fac:	08006045 	.word	0x08006045
 8005fb0:	08006045 	.word	0x08006045
 8005fb4:	08005fe9 	.word	0x08005fe9
 8005fb8:	08006045 	.word	0x08006045
 8005fbc:	08006045 	.word	0x08006045
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	08006045 	.word	0x08006045
 8005fc8:	08006045 	.word	0x08006045
 8005fcc:	08006045 	.word	0x08006045
 8005fd0:	08006045 	.word	0x08006045
 8005fd4:	08006003 	.word	0x08006003
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005fd8:	f7fd fdc2 	bl	8003b60 <HAL_RCC_GetPCLK3Freq>
 8005fdc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fde:	e102      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005fe0:	f7fd fc74 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005fe4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fe6:	e0fe      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fe8:	4b81      	ldr	r3, [pc, #516]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d102      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005ff6:	4b7f      	ldr	r3, [pc, #508]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ffa:	e0f4      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006000:	e0f1      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006002:	4b7b      	ldr	r3, [pc, #492]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b20      	cmp	r3, #32
 800600c:	d117      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800600e:	4b78      	ldr	r3, [pc, #480]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800601a:	4b75      	ldr	r3, [pc, #468]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0e1b      	lsrs	r3, r3, #24
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	e006      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8006026:	4b72      	ldr	r3, [pc, #456]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	0e1b      	lsrs	r3, r3, #24
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	4a70      	ldr	r2, [pc, #448]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8006036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800603c:	e0d3      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006042:	e0d0      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006048:	e0cd      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800604a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006052:	430b      	orrs	r3, r1
 8006054:	d155      	bne.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006056:	4b66      	ldr	r3, [pc, #408]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800605c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006060:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006068:	d013      	beq.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006070:	d844      	bhi.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006078:	d013      	beq.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006080:	d83c      	bhi.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	2b00      	cmp	r3, #0
 8006086:	d014      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d014      	beq.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8006090:	e034      	b.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006092:	f107 0318 	add.w	r3, r7, #24
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe fca2 	bl	80049e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060a0:	e0a1      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fb32 	bl	8004710 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060b0:	e099      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fd fc0b 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 80060b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80060b8:	e095      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80060ba:	4b4d      	ldr	r3, [pc, #308]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d117      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060c6:	4b4a      	ldr	r3, [pc, #296]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 80060d2:	4b47      	ldr	r3, [pc, #284]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0e1b      	lsrs	r3, r3, #24
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	e006      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 80060de:	4b44      	ldr	r3, [pc, #272]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80060e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060e4:	041b      	lsls	r3, r3, #16
 80060e6:	0e1b      	lsrs	r3, r3, #24
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	4a42      	ldr	r2, [pc, #264]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80060ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060f4:	e077      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060fa:	e074      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006100:	e071      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006106:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800610a:	430b      	orrs	r3, r1
 800610c:	d131      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800610e:	4b38      	ldr	r3, [pc, #224]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006118:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800611a:	4b35      	ldr	r3, [pc, #212]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800611c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d106      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
 8006134:	e057      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006136:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800613c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006144:	d112      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614c:	d10e      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800614e:	4b28      	ldr	r3, [pc, #160]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800615c:	d102      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 800615e:	23fa      	movs	r3, #250	; 0xfa
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006162:	e040      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006164:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800616a:	e03c      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
 8006170:	e039      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006176:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800617a:	430b      	orrs	r3, r1
 800617c:	d131      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800617e:	4b1c      	ldr	r3, [pc, #112]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006184:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006188:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800618a:	4b19      	ldr	r3, [pc, #100]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006196:	d105      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 800619e:	4b17      	ldr	r3, [pc, #92]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
 80061a2:	e020      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80061a4:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b0:	d106      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d102      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
 80061be:	e012      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d106      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d4:	d102      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 80061d6:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	e004      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
 80061e0:	e001      	b.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3738      	adds	r7, #56	; 0x38
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	46020c00 	.word	0x46020c00
 80061f4:	00f42400 	.word	0x00f42400
 80061f8:	0800a1f4 	.word	0x0800a1f4
 80061fc:	02dc6c00 	.word	0x02dc6c00
 8006200:	016e3600 	.word	0x016e3600

08006204 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800620c:	4b47      	ldr	r3, [pc, #284]	; (800632c <RCCEx_PLL2_Config+0x128>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a46      	ldr	r2, [pc, #280]	; (800632c <RCCEx_PLL2_Config+0x128>)
 8006212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006216:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006218:	f7fb fdbc 	bl	8001d94 <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800621e:	e008      	b.n	8006232 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006220:	f7fb fdb8 	bl	8001d94 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e077      	b.n	8006322 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006232:	4b3e      	ldr	r3, [pc, #248]	; (800632c <RCCEx_PLL2_Config+0x128>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800623e:	4b3b      	ldr	r3, [pc, #236]	; (800632c <RCCEx_PLL2_Config+0x128>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6811      	ldr	r1, [r2, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6852      	ldr	r2, [r2, #4]
 8006252:	3a01      	subs	r2, #1
 8006254:	0212      	lsls	r2, r2, #8
 8006256:	430a      	orrs	r2, r1
 8006258:	4934      	ldr	r1, [pc, #208]	; (800632c <RCCEx_PLL2_Config+0x128>)
 800625a:	4313      	orrs	r3, r2
 800625c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800625e:	4b33      	ldr	r3, [pc, #204]	; (800632c <RCCEx_PLL2_Config+0x128>)
 8006260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006262:	4b33      	ldr	r3, [pc, #204]	; (8006330 <RCCEx_PLL2_Config+0x12c>)
 8006264:	4013      	ands	r3, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6892      	ldr	r2, [r2, #8]
 800626a:	3a01      	subs	r2, #1
 800626c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	68d2      	ldr	r2, [r2, #12]
 8006274:	3a01      	subs	r2, #1
 8006276:	0252      	lsls	r2, r2, #9
 8006278:	b292      	uxth	r2, r2
 800627a:	4311      	orrs	r1, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6912      	ldr	r2, [r2, #16]
 8006280:	3a01      	subs	r2, #1
 8006282:	0412      	lsls	r2, r2, #16
 8006284:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006288:	4311      	orrs	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6952      	ldr	r2, [r2, #20]
 800628e:	3a01      	subs	r2, #1
 8006290:	0612      	lsls	r2, r2, #24
 8006292:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006296:	430a      	orrs	r2, r1
 8006298:	4924      	ldr	r1, [pc, #144]	; (800632c <RCCEx_PLL2_Config+0x128>)
 800629a:	4313      	orrs	r3, r2
 800629c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800629e:	4b23      	ldr	r3, [pc, #140]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	f023 020c 	bic.w	r2, r3, #12
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	4920      	ldr	r1, [pc, #128]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	491c      	ldr	r1, [pc, #112]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062c4:	f023 0310 	bic.w	r3, r3, #16
 80062c8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062ca:	4b18      	ldr	r3, [pc, #96]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	69d2      	ldr	r2, [r2, #28]
 80062da:	00d2      	lsls	r2, r2, #3
 80062dc:	4913      	ldr	r1, [pc, #76]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	4a11      	ldr	r2, [pc, #68]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062e8:	f043 0310 	orr.w	r3, r3, #16
 80062ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80062ee:	4b0f      	ldr	r3, [pc, #60]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a0e      	ldr	r2, [pc, #56]	; (800632c <RCCEx_PLL2_Config+0x128>)
 80062f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062fa:	f7fb fd4b 	bl	8001d94 <HAL_GetTick>
 80062fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006300:	e008      	b.n	8006314 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006302:	f7fb fd47 	bl	8001d94 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e006      	b.n	8006322 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <RCCEx_PLL2_Config+0x128>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0

}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	46020c00 	.word	0x46020c00
 8006330:	80800000 	.word	0x80800000

08006334 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800633c:	4b47      	ldr	r3, [pc, #284]	; (800645c <RCCEx_PLL3_Config+0x128>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a46      	ldr	r2, [pc, #280]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006346:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006348:	f7fb fd24 	bl	8001d94 <HAL_GetTick>
 800634c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800634e:	e008      	b.n	8006362 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006350:	f7fb fd20 	bl	8001d94 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e077      	b.n	8006452 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006362:	4b3e      	ldr	r3, [pc, #248]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800636e:	4b3b      	ldr	r3, [pc, #236]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6811      	ldr	r1, [r2, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6852      	ldr	r2, [r2, #4]
 8006382:	3a01      	subs	r2, #1
 8006384:	0212      	lsls	r2, r2, #8
 8006386:	430a      	orrs	r2, r1
 8006388:	4934      	ldr	r1, [pc, #208]	; (800645c <RCCEx_PLL3_Config+0x128>)
 800638a:	4313      	orrs	r3, r2
 800638c:	630b      	str	r3, [r1, #48]	; 0x30
 800638e:	4b33      	ldr	r3, [pc, #204]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006392:	4b33      	ldr	r3, [pc, #204]	; (8006460 <RCCEx_PLL3_Config+0x12c>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6892      	ldr	r2, [r2, #8]
 800639a:	3a01      	subs	r2, #1
 800639c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68d2      	ldr	r2, [r2, #12]
 80063a4:	3a01      	subs	r2, #1
 80063a6:	0252      	lsls	r2, r2, #9
 80063a8:	b292      	uxth	r2, r2
 80063aa:	4311      	orrs	r1, r2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6912      	ldr	r2, [r2, #16]
 80063b0:	3a01      	subs	r2, #1
 80063b2:	0412      	lsls	r2, r2, #16
 80063b4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80063b8:	4311      	orrs	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6952      	ldr	r2, [r2, #20]
 80063be:	3a01      	subs	r2, #1
 80063c0:	0612      	lsls	r2, r2, #24
 80063c2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80063c6:	430a      	orrs	r2, r1
 80063c8:	4924      	ldr	r1, [pc, #144]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80063ce:	4b23      	ldr	r3, [pc, #140]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	f023 020c 	bic.w	r2, r3, #12
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	4920      	ldr	r1, [pc, #128]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80063e0:	4b1e      	ldr	r3, [pc, #120]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	491c      	ldr	r1, [pc, #112]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80063ee:	4b1b      	ldr	r3, [pc, #108]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	4a1a      	ldr	r2, [pc, #104]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063f4:	f023 0310 	bic.w	r3, r3, #16
 80063f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063fa:	4b18      	ldr	r3, [pc, #96]	; (800645c <RCCEx_PLL3_Config+0x128>)
 80063fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006402:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	69d2      	ldr	r2, [r2, #28]
 800640a:	00d2      	lsls	r2, r2, #3
 800640c:	4913      	ldr	r1, [pc, #76]	; (800645c <RCCEx_PLL3_Config+0x128>)
 800640e:	4313      	orrs	r3, r2
 8006410:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	4a11      	ldr	r2, [pc, #68]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006418:	f043 0310 	orr.w	r3, r3, #16
 800641c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a0e      	ldr	r2, [pc, #56]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006428:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800642a:	f7fb fcb3 	bl	8001d94 <HAL_GetTick>
 800642e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006430:	e008      	b.n	8006444 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006432:	f7fb fcaf 	bl	8001d94 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <RCCEx_PLL3_Config+0x128>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	46020c00 	.word	0x46020c00
 8006460:	80800000 	.word	0x80800000

08006464 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e075      	b.n	8006562 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7fb f8a9 	bl	80015e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2204      	movs	r2, #4
 8006492:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f868 	bl	800656c <HAL_SD_InitCard>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e05d      	b.n	8006562 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa9d 	bl	80069ec <HAL_SD_GetCardStatus>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e052      	b.n	8006562 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80064bc:	7e3b      	ldrb	r3, [r7, #24]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80064c2:	7e7b      	ldrb	r3, [r7, #25]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10a      	bne.n	80064e6 <HAL_SD_Init+0x82>
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <HAL_SD_Init+0x78>
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e2:	659a      	str	r2, [r3, #88]	; 0x58
 80064e4:	e00b      	b.n	80064fe <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d104      	bne.n	80064f8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064f4:	659a      	str	r2, [r3, #88]	; 0x58
 80064f6:	e002      	b.n	80064fe <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fb2f 	bl	8006b68 <HAL_SD_ConfigWideBusOperation>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e026      	b.n	8006562 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006514:	f7fb fc3e 	bl	8001d94 <HAL_GetTick>
 8006518:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800651a:	e011      	b.n	8006540 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800651c:	f7fb fc3a 	bl	8001d94 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652a:	d109      	bne.n	8006540 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006532:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e010      	b.n	8006562 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fc23 	bl	8006d8c <HAL_SD_GetCardState>
 8006546:	4603      	mov	r3, r0
 8006548:	2b04      	cmp	r3, #4
 800654a:	d1e7      	bne.n	800651c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3728      	adds	r7, #40	; 0x28
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b08d      	sub	sp, #52	; 0x34
 8006570:	af02      	add	r7, sp, #8
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006584:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	f7fe fcf8 	bl	8004f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065a6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e070      	b.n	800668e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	4a39      	ldr	r2, [pc, #228]	; (8006698 <HAL_SD_InitCard+0x12c>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681c      	ldr	r4, [r3, #0]
 80065be:	466a      	mov	r2, sp
 80065c0:	f107 0318 	add.w	r3, r7, #24
 80065c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80065c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065d2:	4620      	mov	r0, r4
 80065d4:	f002 fb96 	bl	8008d04 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f002 fbc8 	bl	8008d72 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80065fa:	4a28      	ldr	r2, [pc, #160]	; (800669c <HAL_SD_InitCard+0x130>)
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006602:	3301      	adds	r3, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f7fb fbd1 	bl	8001dac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fcac 	bl	8006f68 <SD_PowerON>
 8006610:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e02e      	b.n	800668e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fbcb 	bl	8006dcc <SD_InitCard>
 8006636:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e01b      	b.n	800668e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800665e:	4618      	mov	r0, r3
 8006660:	f002 fc1c 	bl	8008e9c <SDMMC_CmdBlockLength>
 8006664:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00f      	beq.n	800668c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <HAL_SD_InitCard+0x134>)
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	372c      	adds	r7, #44	; 0x2c
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
 8006696:	bf00      	nop
 8006698:	014f8b59 	.word	0x014f8b59
 800669c:	00012110 	.word	0x00012110
 80066a0:	1fe00fff 	.word	0x1fe00fff

080066a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	0f9b      	lsrs	r3, r3, #30
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066be:	0e9b      	lsrs	r3, r3, #26
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d0:	0e1b      	lsrs	r3, r3, #24
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006704:	0d1b      	lsrs	r3, r3, #20
 8006706:	b29a      	uxth	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	b2da      	uxtb	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006722:	0bdb      	lsrs	r3, r3, #15
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	0b9b      	lsrs	r3, r3, #14
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006746:	0b5b      	lsrs	r3, r3, #13
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	0b1b      	lsrs	r3, r3, #12
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	b2da      	uxtb	r2, r3
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2200      	movs	r2, #0
 800676a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	2b00      	cmp	r3, #0
 8006772:	d163      	bne.n	800683c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006778:	009a      	lsls	r2, r3, #2
 800677a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800677e:	4013      	ands	r3, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006784:	0f92      	lsrs	r2, r2, #30
 8006786:	431a      	orrs	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006790:	0edb      	lsrs	r3, r3, #27
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	b2da      	uxtb	r2, r3
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a2:	0e1b      	lsrs	r3, r3, #24
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b4:	0d5b      	lsrs	r3, r3, #21
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c6:	0c9b      	lsrs	r3, r3, #18
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d8:	0bdb      	lsrs	r3, r3, #15
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	7e1b      	ldrb	r3, [r3, #24]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	3302      	adds	r3, #2
 80067fc:	2201      	movs	r2, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006806:	fb03 f202 	mul.w	r2, r3, r2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	7a1b      	ldrb	r3, [r3, #8]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	2201      	movs	r2, #1
 800681a:	409a      	lsls	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006828:	0a52      	lsrs	r2, r2, #9
 800682a:	fb03 f202 	mul.w	r2, r3, r2
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
 800683a:	e031      	b.n	80068a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	2b01      	cmp	r3, #1
 8006842:	d11d      	bne.n	8006880 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006848:	041b      	lsls	r3, r3, #16
 800684a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006852:	0c1b      	lsrs	r3, r3, #16
 8006854:	431a      	orrs	r2, r3
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	3301      	adds	r3, #1
 8006860:	029a      	lsls	r2, r3, #10
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006874:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	655a      	str	r2, [r3, #84]	; 0x54
 800687e:	e00f      	b.n	80068a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a58      	ldr	r2, [pc, #352]	; (80069e8 <HAL_SD_GetCardCSD+0x344>)
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e09d      	b.n	80069dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a4:	0b9b      	lsrs	r3, r3, #14
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b6:	09db      	lsrs	r3, r3, #7
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d8:	0fdb      	lsrs	r3, r3, #31
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e4:	0f5b      	lsrs	r3, r3, #29
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f6:	0e9b      	lsrs	r3, r3, #26
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	0d9b      	lsrs	r3, r3, #22
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800691a:	0d5b      	lsrs	r3, r3, #21
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006936:	0c1b      	lsrs	r3, r3, #16
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694a:	0bdb      	lsrs	r3, r3, #15
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695e:	0b9b      	lsrs	r3, r3, #14
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006972:	0b5b      	lsrs	r3, r3, #13
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	0b1b      	lsrs	r3, r3, #12
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699a:	0a9b      	lsrs	r3, r3, #10
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	1fe00fff 	.word	0x1fe00fff

080069ec <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b094      	sub	sp, #80	; 0x50
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d101      	bne.n	8006a0c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0a7      	b.n	8006b5c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a0c:	f107 0308 	add.w	r3, r7, #8
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fb36 	bl	8007084 <SD_SendSDStatus>
 8006a18:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d011      	beq.n	8006a44 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a4f      	ldr	r2, [pc, #316]	; (8006b64 <HAL_SD_GetCardStatus+0x178>)
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a42:	e070      	b.n	8006b26 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	0e1b      	lsrs	r3, r3, #24
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	4313      	orrs	r3, r2
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	061a      	lsls	r2, r3, #24
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	021b      	lsls	r3, r3, #8
 8006a86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a8a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	0a1b      	lsrs	r3, r3, #8
 8006a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a94:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	0e1b      	lsrs	r3, r3, #24
 8006a9a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	0a1b      	lsrs	r3, r3, #8
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	0d1b      	lsrs	r3, r3, #20
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	0a9b      	lsrs	r3, r3, #10
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	0e1b      	lsrs	r3, r3, #24
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f002 f9b4 	bl	8008e9c <SDMMC_CmdBlockLength>
 8006b34:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00d      	beq.n	8006b58 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <HAL_SD_GetCardStatus+0x178>)
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b48:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3750      	adds	r7, #80	; 0x50
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	1fe00fff 	.word	0x1fe00fff

08006b68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b68:	b590      	push	{r4, r7, lr}
 8006b6a:	b08d      	sub	sp, #52	; 0x34
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d02e      	beq.n	8006be6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b8e:	d106      	bne.n	8006b9e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	635a      	str	r2, [r3, #52]	; 0x34
 8006b9c:	e029      	b.n	8006bf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba4:	d10a      	bne.n	8006bbc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fb64 	bl	8007274 <SD_WideBus_Enable>
 8006bac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8006bba:	e01a      	b.n	8006bf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fba1 	bl	800730a <SD_WideBus_Disable>
 8006bc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8006bd6:	e00c      	b.n	8006bf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34
 8006be4:	e005      	b.n	8006bf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a5f      	ldr	r2, [pc, #380]	; (8006d7c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c08:	e096      	b.n	8006d38 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006c0e:	f04f 0100 	mov.w	r1, #0
 8006c12:	f7fe f9b5 	bl	8004f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c16:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 8083 	beq.w	8006d26 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695a      	ldr	r2, [r3, #20]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4950      	ldr	r1, [pc, #320]	; (8006d80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c3e:	fba1 1303 	umull	r1, r3, r1, r3
 8006c42:	0e1b      	lsrs	r3, r3, #24
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d303      	bcc.n	8006c50 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	e05a      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c58:	d103      	bne.n	8006c62 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	e051      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6a:	d126      	bne.n	8006cba <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10e      	bne.n	8006c92 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4a43      	ldr	r2, [pc, #268]	; (8006d84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d906      	bls.n	8006c8a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	4a40      	ldr	r2, [pc, #256]	; (8006d80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	0e5b      	lsrs	r3, r3, #25
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	e03d      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	e039      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9e:	4a39      	ldr	r2, [pc, #228]	; (8006d84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d906      	bls.n	8006cb2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4a36      	ldr	r2, [pc, #216]	; (8006d80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	0e5b      	lsrs	r3, r3, #25
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	e029      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e025      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4a30      	ldr	r2, [pc, #192]	; (8006d88 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d906      	bls.n	8006cd8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	; (8006d80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cce:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd2:	0e1b      	lsrs	r3, r3, #24
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	e016      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	e012      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cec:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d906      	bls.n	8006d00 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4a22      	ldr	r2, [pc, #136]	; (8006d80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfa:	0e1b      	lsrs	r3, r3, #24
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e002      	b.n	8006d06 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681c      	ldr	r4, [r3, #0]
 8006d0a:	466a      	mov	r2, sp
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d14:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f001 fff0 	bl	8008d04 <SDMMC_Init>
 8006d24:	e008      	b.n	8006d38 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d40:	4618      	mov	r0, r3
 8006d42:	f002 f8ab 	bl	8008e9c <SDMMC_CmdBlockLength>
 8006d46:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	372c      	adds	r7, #44	; 0x2c
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd90      	pop	{r4, r7, pc}
 8006d7c:	1fe00fff 	.word	0x1fe00fff
 8006d80:	55e63b89 	.word	0x55e63b89
 8006d84:	02faf080 	.word	0x02faf080
 8006d88:	017d7840 	.word	0x017d7840

08006d8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa40 	bl	8007224 <SD_SendStatus>
 8006da4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	0a5b      	lsrs	r3, r3, #9
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006dc2:	693b      	ldr	r3, [r7, #16]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b090      	sub	sp, #64	; 0x40
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006dd8:	f7fa ffdc 	bl	8001d94 <HAL_GetTick>
 8006ddc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 ffd6 	bl	8008d94 <SDMMC_GetPowerState>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006dee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006df2:	e0b5      	b.n	8006f60 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d02e      	beq.n	8006e5a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 f957 	bl	80090b4 <SDMMC_CmdSendCID>
 8006e06:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <SD_InitCard+0x46>
    {
      return errorstate;
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	e0a6      	b.n	8006f60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f002 f800 	bl	8008e1e <SDMMC_GetResponse>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2104      	movs	r1, #4
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fff7 	bl	8008e1e <SDMMC_GetResponse>
 8006e30:	4602      	mov	r2, r0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2108      	movs	r1, #8
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 ffee 	bl	8008e1e <SDMMC_GetResponse>
 8006e42:	4602      	mov	r2, r0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	210c      	movs	r1, #12
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f001 ffe5 	bl	8008e1e <SDMMC_GetResponse>
 8006e54:	4602      	mov	r2, r0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d01d      	beq.n	8006e9e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006e62:	e019      	b.n	8006e98 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f107 020a 	add.w	r2, r7, #10
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f002 f95f 	bl	8009132 <SDMMC_CmdSetRelAdd>
 8006e74:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	e06f      	b.n	8006f60 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006e80:	f7fa ff88 	bl	8001d94 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	f241 3287 	movw	r2, #4999	; 0x1387
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d902      	bls.n	8006e98 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006e92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e96:	e063      	b.n	8006f60 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006e98:	897b      	ldrh	r3, [r7, #10]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0e2      	beq.n	8006e64 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d036      	beq.n	8006f14 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ea6:	897b      	ldrh	r3, [r7, #10]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	041b      	lsls	r3, r3, #16
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f002 f919 	bl	80090f2 <SDMMC_CmdSendCSD>
 8006ec0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <SD_InitCard+0x100>
    {
      return errorstate;
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	e049      	b.n	8006f60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 ffa3 	bl	8008e1e <SDMMC_GetResponse>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2104      	movs	r1, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 ff9a 	bl	8008e1e <SDMMC_GetResponse>
 8006eea:	4602      	mov	r2, r0
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2108      	movs	r1, #8
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 ff91 	bl	8008e1e <SDMMC_GetResponse>
 8006efc:	4602      	mov	r2, r0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	210c      	movs	r1, #12
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 ff88 	bl	8008e1e <SDMMC_GetResponse>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2104      	movs	r1, #4
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 ff7f 	bl	8008e1e <SDMMC_GetResponse>
 8006f20:	4603      	mov	r3, r0
 8006f22:	0d1a      	lsrs	r2, r3, #20
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f28:	f107 030c 	add.w	r3, r7, #12
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff fbb8 	bl	80066a4 <HAL_SD_GetCardCSD>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f3e:	e00f      	b.n	8006f60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	041b      	lsls	r3, r3, #16
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	f001 ffc8 	bl	8008ee2 <SDMMC_CmdSelDesel>
 8006f52:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <SD_InitCard+0x192>
  {
    return errorstate;
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	e000      	b.n	8006f60 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3740      	adds	r7, #64	; 0x40
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 ffd1 	bl	8008f28 <SDMMC_CmdGoIdleState>
 8006f86:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	e072      	b.n	8007078 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 ffe4 	bl	8008f64 <SDMMC_CmdOperCond>
 8006f9c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa4:	d10d      	bne.n	8006fc2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 ffb9 	bl	8008f28 <SDMMC_CmdGoIdleState>
 8006fb6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <SD_PowerON+0x60>
    {
      return errorstate;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e05a      	b.n	8007078 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d137      	bne.n	8007040 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 ffe4 	bl	8008fa4 <SDMMC_CmdAppCommand>
 8006fdc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02d      	beq.n	8007040 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fe8:	e046      	b.n	8007078 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 ffd7 	bl	8008fa4 <SDMMC_CmdAppCommand>
 8006ff6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <SD_PowerON+0x9a>
    {
      return errorstate;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	e03a      	b.n	8007078 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	491e      	ldr	r1, [pc, #120]	; (8007080 <SD_PowerON+0x118>)
 8007008:	4618      	mov	r0, r3
 800700a:	f001 ffee 	bl	8008fea <SDMMC_CmdAppOperCommand>
 800700e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800701a:	e02d      	b.n	8007078 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fefb 	bl	8008e1e <SDMMC_GetResponse>
 8007028:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	0fdb      	lsrs	r3, r3, #31
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <SD_PowerON+0xce>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <SD_PowerON+0xd0>
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]

    count++;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	3301      	adds	r3, #1
 800703e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007046:	4293      	cmp	r3, r2
 8007048:	d802      	bhi.n	8007050 <SD_PowerON+0xe8>
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0cc      	beq.n	8006fea <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007056:	4293      	cmp	r3, r2
 8007058:	d902      	bls.n	8007060 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800705a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800705e:	e00b      	b.n	8007078 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	c1100000 	.word	0xc1100000

08007084 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800708e:	f7fa fe81 	bl	8001d94 <HAL_GetTick>
 8007092:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 febd 	bl	8008e1e <SDMMC_GetResponse>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ae:	d102      	bne.n	80070b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070b4:	e0b0      	b.n	8007218 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2140      	movs	r1, #64	; 0x40
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 feed 	bl	8008e9c <SDMMC_CmdBlockLength>
 80070c2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	e0a0      	b.n	8007218 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f001 ff5e 	bl	8008fa4 <SDMMC_CmdAppCommand>
 80070e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	e08d      	b.n	8007218 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007100:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007106:	2360      	movs	r3, #96	; 0x60
 8007108:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800710a:	2302      	movs	r3, #2
 800710c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800710e:	2300      	movs	r3, #0
 8007110:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007112:	2301      	movs	r3, #1
 8007114:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f107 0208 	add.w	r2, r7, #8
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f001 fe8f 	bl	8008e44 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f002 f846 	bl	80091bc <SDMMC_CmdStatusRegister>
 8007130:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02b      	beq.n	8007190 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	e069      	b.n	8007218 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d013      	beq.n	800717a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007152:	2300      	movs	r3, #0
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007156:	e00d      	b.n	8007174 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fdfb 	bl	8008d58 <SDMMC_ReadFIFO>
 8007162:	4602      	mov	r2, r0
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	601a      	str	r2, [r3, #0]
        pData++;
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	3304      	adds	r3, #4
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	3301      	adds	r3, #1
 8007172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	2b07      	cmp	r3, #7
 8007178:	d9ee      	bls.n	8007158 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800717a:	f7fa fe0b 	bl	8001d94 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007188:	d102      	bne.n	8007190 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800718a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800718e:	e043      	b.n	8007218 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0d2      	beq.n	8007144 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071ac:	2308      	movs	r3, #8
 80071ae:	e033      	b.n	8007218 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071be:	2302      	movs	r3, #2
 80071c0:	e02a      	b.n	8007218 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80071d0:	2320      	movs	r3, #32
 80071d2:	e021      	b.n	8007218 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fdbd 	bl	8008d58 <SDMMC_ReadFIFO>
 80071de:	4602      	mov	r2, r0
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	601a      	str	r2, [r3, #0]
    pData++;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	3304      	adds	r3, #4
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071ea:	f7fa fdd3 	bl	8001d94 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f8:	d102      	bne.n	8007200 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071fe:	e00b      	b.n	8007218 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e2      	bne.n	80071d4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a03      	ldr	r2, [pc, #12]	; (8007220 <SD_SendSDStatus+0x19c>)
 8007214:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	; 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	18000f3a 	.word	0x18000f3a

08007224 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007238:	e018      	b.n	800726c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f001 ff95 	bl	8009176 <SDMMC_CmdSendStatus>
 800724c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	e009      	b.n	800726c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fddd 	bl	8008e1e <SDMMC_GetResponse>
 8007264:	4602      	mov	r2, r0
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f001 fdc7 	bl	8008e1e <SDMMC_GetResponse>
 8007290:	4603      	mov	r3, r0
 8007292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800729a:	d102      	bne.n	80072a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800729c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072a0:	e02f      	b.n	8007302 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072a2:	f107 030c 	add.w	r3, r7, #12
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f879 	bl	80073a0 <SD_FindSCR>
 80072ae:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	e023      	b.n	8007302 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01c      	beq.n	80072fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	4619      	mov	r1, r3
 80072d0:	4610      	mov	r0, r2
 80072d2:	f001 fe67 	bl	8008fa4 <SDMMC_CmdAppCommand>
 80072d6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	e00f      	b.n	8007302 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2102      	movs	r1, #2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 fe9e 	bl	800902a <SDMMC_CmdBusWidth>
 80072ee:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	e003      	b.n	8007302 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e001      	b.n	8007302 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b086      	sub	sp, #24
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f001 fd7c 	bl	8008e1e <SDMMC_GetResponse>
 8007326:	4603      	mov	r3, r0
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007330:	d102      	bne.n	8007338 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007336:	e02f      	b.n	8007398 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f82e 	bl	80073a0 <SD_FindSCR>
 8007344:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	e023      	b.n	8007398 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01c      	beq.n	8007394 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f001 fe1c 	bl	8008fa4 <SDMMC_CmdAppCommand>
 800736c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	e00f      	b.n	8007398 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fe53 	bl	800902a <SDMMC_CmdBusWidth>
 8007384:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	e003      	b.n	8007398 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007390:	2300      	movs	r3, #0
 8007392:	e001      	b.n	8007398 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08e      	sub	sp, #56	; 0x38
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073aa:	f7fa fcf3 	bl	8001d94 <HAL_GetTick>
 80073ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80073b4:	2300      	movs	r3, #0
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2108      	movs	r1, #8
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fd68 	bl	8008e9c <SDMMC_CmdBlockLength>
 80073cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	e0ad      	b.n	8007534 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f001 fddd 	bl	8008fa4 <SDMMC_CmdAppCommand>
 80073ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	e09e      	b.n	8007534 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073fc:	2308      	movs	r3, #8
 80073fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007400:	2330      	movs	r3, #48	; 0x30
 8007402:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007404:	2302      	movs	r3, #2
 8007406:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007408:	2300      	movs	r3, #0
 800740a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800740c:	2301      	movs	r3, #1
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f107 0210 	add.w	r2, r7, #16
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fd12 	bl	8008e44 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f001 fe23 	bl	8009070 <SDMMC_CmdSendSCR>
 800742a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d027      	beq.n	8007482 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	e07e      	b.n	8007534 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d113      	bne.n	800746c <SD_FindSCR+0xcc>
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007446:	2b00      	cmp	r3, #0
 8007448:	d110      	bne.n	800746c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fc82 	bl	8008d58 <SDMMC_ReadFIFO>
 8007454:	4603      	mov	r3, r0
 8007456:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fc7b 	bl	8008d58 <SDMMC_ReadFIFO>
 8007462:	4603      	mov	r3, r0
 8007464:	60fb      	str	r3, [r7, #12]
      index++;
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	3301      	adds	r3, #1
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800746c:	f7fa fc92 	bl	8001d94 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800747a:	d102      	bne.n	8007482 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800747c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007480:	e058      	b.n	8007534 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007488:	f240 532a 	movw	r3, #1322	; 0x52a
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0d1      	beq.n	8007436 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2208      	movs	r2, #8
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074a8:	2308      	movs	r3, #8
 80074aa:	e043      	b.n	8007534 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2202      	movs	r2, #2
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074c2:	2302      	movs	r3, #2
 80074c4:	e036      	b.n	8007534 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2220      	movs	r2, #32
 80074da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074dc:	2320      	movs	r3, #32
 80074de:	e029      	b.n	8007534 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a15      	ldr	r2, [pc, #84]	; (800753c <SD_FindSCR+0x19c>)
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	061a      	lsls	r2, r3, #24
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80074fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	0e1b      	lsrs	r3, r3, #24
 8007504:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	601a      	str	r2, [r3, #0]
    scr++;
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	3304      	adds	r3, #4
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	061a      	lsls	r2, r3, #24
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800751c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007526:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	0e1b      	lsrs	r3, r3, #24
 800752c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3738      	adds	r7, #56	; 0x38
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	18000f3a 	.word	0x18000f3a

08007540 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e0fb      	b.n	800774a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a7f      	ldr	r2, [pc, #508]	; (8007754 <HAL_SPI_Init+0x214>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_SPI_Init+0x26>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a7d      	ldr	r2, [pc, #500]	; (8007758 <HAL_SPI_Init+0x218>)
 8007562:	4293      	cmp	r3, r2
 8007564:	e000      	b.n	8007568 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007566:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a78      	ldr	r2, [pc, #480]	; (8007754 <HAL_SPI_Init+0x214>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_SPI_Init+0x42>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a76      	ldr	r2, [pc, #472]	; (8007758 <HAL_SPI_Init+0x218>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d105      	bne.n	800758e <HAL_SPI_Init+0x4e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d901      	bls.n	800758e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0dd      	b.n	800774a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fbd8 	bl	8007d44 <SPI_GetPacketSize>
 8007594:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a6e      	ldr	r2, [pc, #440]	; (8007754 <HAL_SPI_Init+0x214>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_SPI_Init+0x6a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a6c      	ldr	r2, [pc, #432]	; (8007758 <HAL_SPI_Init+0x218>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d102      	bne.n	80075b0 <HAL_SPI_Init+0x70>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d816      	bhi.n	80075de <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075b4:	4a69      	ldr	r2, [pc, #420]	; (800775c <HAL_SPI_Init+0x21c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00e      	beq.n	80075d8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a68      	ldr	r2, [pc, #416]	; (8007760 <HAL_SPI_Init+0x220>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d009      	beq.n	80075d8 <HAL_SPI_Init+0x98>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a66      	ldr	r2, [pc, #408]	; (8007764 <HAL_SPI_Init+0x224>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d004      	beq.n	80075d8 <HAL_SPI_Init+0x98>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a65      	ldr	r2, [pc, #404]	; (8007768 <HAL_SPI_Init+0x228>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d104      	bne.n	80075e2 <HAL_SPI_Init+0xa2>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b10      	cmp	r3, #16
 80075dc:	d901      	bls.n	80075e2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e0b3      	b.n	800774a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fa f882 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0201 	bic.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800761e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007628:	d119      	bne.n	800765e <HAL_SPI_Init+0x11e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007632:	d103      	bne.n	800763c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10c      	bne.n	800765e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800764c:	d107      	bne.n	800765e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800765c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00f      	beq.n	800768a <HAL_SPI_Init+0x14a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	2b06      	cmp	r3, #6
 8007670:	d90b      	bls.n	800768a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	e007      	b.n	800769a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007698:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	69da      	ldr	r2, [r3, #28]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	431a      	orrs	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ac:	ea42 0103 	orr.w	r1, r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007706:	ea42 0103 	orr.w	r1, r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	46002000 	.word	0x46002000
 8007758:	56002000 	.word	0x56002000
 800775c:	40013000 	.word	0x40013000
 8007760:	50013000 	.word	0x50013000
 8007764:	40003800 	.word	0x40003800
 8007768:	50003800 	.word	0x50003800

0800776c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	; 0x28
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4613      	mov	r3, r2
 800777a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3320      	adds	r3, #32
 8007782:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_SPI_Transmit+0x2a>
 8007792:	2302      	movs	r3, #2
 8007794:	e203      	b.n	8007b9e <HAL_SPI_Transmit+0x432>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800779e:	f7fa faf9 	bl	8001d94 <HAL_GetTick>
 80077a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d007      	beq.n	80077c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80077b0:	2302      	movs	r3, #2
 80077b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80077bc:	7efb      	ldrb	r3, [r7, #27]
 80077be:	e1ee      	b.n	8007b9e <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_SPI_Transmit+0x60>
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d107      	bne.n	80077dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80077d8:	7efb      	ldrb	r3, [r7, #27]
 80077da:	e1e0      	b.n	8007b9e <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2203      	movs	r2, #3
 80077e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	88fa      	ldrh	r2, [r7, #6]
 80077fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800782c:	d108      	bne.n	8007840 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e009      	b.n	8007854 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007852:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	0c1b      	lsrs	r3, r3, #16
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	88f9      	ldrh	r1, [r7, #6]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	430b      	orrs	r3, r1
 8007866:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10c      	bne.n	80078a0 <HAL_SPI_Transmit+0x134>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800788e:	d107      	bne.n	80078a0 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800789e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	2b0f      	cmp	r3, #15
 80078a6:	d95b      	bls.n	8007960 <HAL_SPI_Transmit+0x1f4>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a8f      	ldr	r2, [pc, #572]	; (8007aec <HAL_SPI_Transmit+0x380>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d04f      	beq.n	8007952 <HAL_SPI_Transmit+0x1e6>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a8e      	ldr	r2, [pc, #568]	; (8007af0 <HAL_SPI_Transmit+0x384>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d04a      	beq.n	8007952 <HAL_SPI_Transmit+0x1e6>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a8c      	ldr	r2, [pc, #560]	; (8007af4 <HAL_SPI_Transmit+0x388>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d045      	beq.n	8007952 <HAL_SPI_Transmit+0x1e6>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a8b      	ldr	r2, [pc, #556]	; (8007af8 <HAL_SPI_Transmit+0x38c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d147      	bne.n	8007960 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80078d0:	e03f      	b.n	8007952 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d114      	bne.n	800790a <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f0:	1d1a      	adds	r2, r3, #4
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007908:	e023      	b.n	8007952 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800790a:	f7fa fa43 	bl	8001d94 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d803      	bhi.n	8007922 <HAL_SPI_Transmit+0x1b6>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007920:	d102      	bne.n	8007928 <HAL_SPI_Transmit+0x1bc>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d114      	bne.n	8007952 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f93d 	bl	8007ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800793c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e125      	b.n	8007b9e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1b9      	bne.n	80078d2 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800795e:	e0f8      	b.n	8007b52 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b07      	cmp	r3, #7
 8007966:	f240 80ed 	bls.w	8007b44 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800796a:	e05d      	b.n	8007a28 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b02      	cmp	r3, #2
 8007978:	d132      	bne.n	80079e0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b01      	cmp	r3, #1
 8007984:	d918      	bls.n	80079b8 <HAL_SPI_Transmit+0x24c>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d014      	beq.n	80079b8 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799e:	1d1a      	adds	r2, r3, #4
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b02      	subs	r3, #2
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80079b6:	e037      	b.n	8007a28 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c6:	1c9a      	adds	r2, r3, #2
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80079de:	e023      	b.n	8007a28 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e0:	f7fa f9d8 	bl	8001d94 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d803      	bhi.n	80079f8 <HAL_SPI_Transmit+0x28c>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f6:	d102      	bne.n	80079fe <HAL_SPI_Transmit+0x292>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d114      	bne.n	8007a28 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 f8d2 	bl	8007ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e0ba      	b.n	8007b9e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d19b      	bne.n	800796c <HAL_SPI_Transmit+0x200>
 8007a34:	e08d      	b.n	8007b52 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d15b      	bne.n	8007afc <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d918      	bls.n	8007a82 <HAL_SPI_Transmit+0x316>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d914      	bls.n	8007a82 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a68:	1d1a      	adds	r2, r3, #4
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b04      	subs	r3, #4
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007a80:	e060      	b.n	8007b44 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d917      	bls.n	8007abe <HAL_SPI_Transmit+0x352>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d013      	beq.n	8007abe <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a9a:	881a      	ldrh	r2, [r3, #0]
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aa4:	1c9a      	adds	r2, r3, #2
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b02      	subs	r3, #2
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007abc:	e042      	b.n	8007b44 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3320      	adds	r3, #32
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007ae8:	e02c      	b.n	8007b44 <HAL_SPI_Transmit+0x3d8>
 8007aea:	bf00      	nop
 8007aec:	40013000 	.word	0x40013000
 8007af0:	50013000 	.word	0x50013000
 8007af4:	40003800 	.word	0x40003800
 8007af8:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007afc:	f7fa f94a 	bl	8001d94 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d803      	bhi.n	8007b14 <HAL_SPI_Transmit+0x3a8>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b12:	d102      	bne.n	8007b1a <HAL_SPI_Transmit+0x3ae>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d114      	bne.n	8007b44 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f844 	bl	8007ba8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e02c      	b.n	8007b9e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f47f af72 	bne.w	8007a36 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2108      	movs	r1, #8
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f8c3 	bl	8007ce8 <SPI_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6e:	f043 0220 	orr.w	r2, r3, #32
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f815 	bl	8007ba8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8007b9c:	7efb      	ldrb	r3, [r7, #27]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop

08007ba8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0208 	orr.w	r2, r2, #8
 8007bc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0210 	orr.w	r2, r2, #16
 8007bd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0201 	bic.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689a      	ldr	r2, [r3, #8]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c0a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d014      	beq.n	8007c42 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00f      	beq.n	8007c42 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699a      	ldr	r2, [r3, #24]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0220 	orr.w	r2, r2, #32
 8007c40:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d014      	beq.n	8007c78 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00f      	beq.n	8007c78 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5e:	f043 0204 	orr.w	r2, r3, #4
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c76:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00f      	beq.n	8007ca2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c88:	f043 0201 	orr.w	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ca0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00f      	beq.n	8007ccc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb2:	f043 0208 	orr.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8007cdc:	bf00      	nop
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007cf8:	e010      	b.n	8007d1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cfa:	f7fa f84b 	bl	8001d94 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d803      	bhi.n	8007d12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d10:	d102      	bne.n	8007d18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e00f      	b.n	8007d3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695a      	ldr	r2, [r3, #20]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4013      	ands	r3, r2
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2301      	moveq	r3, #1
 8007d2e:	2300      	movne	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	461a      	mov	r2, r3
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d0df      	beq.n	8007cfa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	3301      	adds	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	3307      	adds	r3, #7
 8007d62:	08db      	lsrs	r3, r3, #3
 8007d64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d12e      	bne.n	8007dee <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e028      	b.n	8007df0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007dca:	ea42 0103 	orr.w	r1, r2, r3
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e000      	b.n	8007df0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e049      	b.n	8007ea2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7f9 fd64 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f000 f8d6 	bl	8007fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d001      	beq.n	8007ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e072      	b.n	8007faa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a35      	ldr	r2, [pc, #212]	; (8007fb8 <HAL_TIM_Base_Start_IT+0x10c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d040      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a34      	ldr	r2, [pc, #208]	; (8007fbc <HAL_TIM_Base_Start_IT+0x110>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d03b      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef8:	d036      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f02:	d031      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a2d      	ldr	r2, [pc, #180]	; (8007fc0 <HAL_TIM_Base_Start_IT+0x114>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d02c      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a2c      	ldr	r2, [pc, #176]	; (8007fc4 <HAL_TIM_Base_Start_IT+0x118>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d027      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a2a      	ldr	r2, [pc, #168]	; (8007fc8 <HAL_TIM_Base_Start_IT+0x11c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d022      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a29      	ldr	r2, [pc, #164]	; (8007fcc <HAL_TIM_Base_Start_IT+0x120>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d01d      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a27      	ldr	r2, [pc, #156]	; (8007fd0 <HAL_TIM_Base_Start_IT+0x124>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d018      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a26      	ldr	r2, [pc, #152]	; (8007fd4 <HAL_TIM_Base_Start_IT+0x128>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a24      	ldr	r2, [pc, #144]	; (8007fd8 <HAL_TIM_Base_Start_IT+0x12c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00e      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a23      	ldr	r2, [pc, #140]	; (8007fdc <HAL_TIM_Base_Start_IT+0x130>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a21      	ldr	r2, [pc, #132]	; (8007fe0 <HAL_TIM_Base_Start_IT+0x134>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0xbc>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a20      	ldr	r2, [pc, #128]	; (8007fe4 <HAL_TIM_Base_Start_IT+0x138>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d115      	bne.n	8007f94 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	; (8007fe8 <HAL_TIM_Base_Start_IT+0x13c>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b06      	cmp	r3, #6
 8007f78:	d015      	beq.n	8007fa6 <HAL_TIM_Base_Start_IT+0xfa>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f80:	d011      	beq.n	8007fa6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0201 	orr.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f92:	e008      	b.n	8007fa6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0201 	orr.w	r2, r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e000      	b.n	8007fa8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	50012c00 	.word	0x50012c00
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	50000400 	.word	0x50000400
 8007fc8:	40000800 	.word	0x40000800
 8007fcc:	50000800 	.word	0x50000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	50000c00 	.word	0x50000c00
 8007fd8:	40013400 	.word	0x40013400
 8007fdc:	50013400 	.word	0x50013400
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	50014000 	.word	0x50014000
 8007fe8:	00010007 	.word	0x00010007

08007fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a68      	ldr	r2, [pc, #416]	; (80081a0 <TIM_Base_SetConfig+0x1b4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d02b      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a67      	ldr	r2, [pc, #412]	; (80081a4 <TIM_Base_SetConfig+0x1b8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d027      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008012:	d023      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800801a:	d01f      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a62      	ldr	r2, [pc, #392]	; (80081a8 <TIM_Base_SetConfig+0x1bc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d01b      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a61      	ldr	r2, [pc, #388]	; (80081ac <TIM_Base_SetConfig+0x1c0>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d017      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a60      	ldr	r2, [pc, #384]	; (80081b0 <TIM_Base_SetConfig+0x1c4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d013      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a5f      	ldr	r2, [pc, #380]	; (80081b4 <TIM_Base_SetConfig+0x1c8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00f      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a5e      	ldr	r2, [pc, #376]	; (80081b8 <TIM_Base_SetConfig+0x1cc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00b      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a5d      	ldr	r2, [pc, #372]	; (80081bc <TIM_Base_SetConfig+0x1d0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a5c      	ldr	r2, [pc, #368]	; (80081c0 <TIM_Base_SetConfig+0x1d4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0x70>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a5b      	ldr	r2, [pc, #364]	; (80081c4 <TIM_Base_SetConfig+0x1d8>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d108      	bne.n	800806e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a4b      	ldr	r2, [pc, #300]	; (80081a0 <TIM_Base_SetConfig+0x1b4>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d043      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a4a      	ldr	r2, [pc, #296]	; (80081a4 <TIM_Base_SetConfig+0x1b8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d03f      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008084:	d03b      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800808c:	d037      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a45      	ldr	r2, [pc, #276]	; (80081a8 <TIM_Base_SetConfig+0x1bc>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d033      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a44      	ldr	r2, [pc, #272]	; (80081ac <TIM_Base_SetConfig+0x1c0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d02f      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a43      	ldr	r2, [pc, #268]	; (80081b0 <TIM_Base_SetConfig+0x1c4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d02b      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a42      	ldr	r2, [pc, #264]	; (80081b4 <TIM_Base_SetConfig+0x1c8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d027      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a41      	ldr	r2, [pc, #260]	; (80081b8 <TIM_Base_SetConfig+0x1cc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d023      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a40      	ldr	r2, [pc, #256]	; (80081bc <TIM_Base_SetConfig+0x1d0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01f      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a3f      	ldr	r2, [pc, #252]	; (80081c0 <TIM_Base_SetConfig+0x1d4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01b      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a3e      	ldr	r2, [pc, #248]	; (80081c4 <TIM_Base_SetConfig+0x1d8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d017      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a3d      	ldr	r2, [pc, #244]	; (80081c8 <TIM_Base_SetConfig+0x1dc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d013      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a3c      	ldr	r2, [pc, #240]	; (80081cc <TIM_Base_SetConfig+0x1e0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00f      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a3b      	ldr	r2, [pc, #236]	; (80081d0 <TIM_Base_SetConfig+0x1e4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00b      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a3a      	ldr	r2, [pc, #232]	; (80081d4 <TIM_Base_SetConfig+0x1e8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a39      	ldr	r2, [pc, #228]	; (80081d8 <TIM_Base_SetConfig+0x1ec>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d003      	beq.n	80080fe <TIM_Base_SetConfig+0x112>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a38      	ldr	r2, [pc, #224]	; (80081dc <TIM_Base_SetConfig+0x1f0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d108      	bne.n	8008110 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a1a      	ldr	r2, [pc, #104]	; (80081a0 <TIM_Base_SetConfig+0x1b4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d023      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <TIM_Base_SetConfig+0x1b8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d01f      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a1e      	ldr	r2, [pc, #120]	; (80081c0 <TIM_Base_SetConfig+0x1d4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d01b      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a1d      	ldr	r2, [pc, #116]	; (80081c4 <TIM_Base_SetConfig+0x1d8>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d017      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a1c      	ldr	r2, [pc, #112]	; (80081c8 <TIM_Base_SetConfig+0x1dc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d013      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a1b      	ldr	r2, [pc, #108]	; (80081cc <TIM_Base_SetConfig+0x1e0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00f      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a1a      	ldr	r2, [pc, #104]	; (80081d0 <TIM_Base_SetConfig+0x1e4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d00b      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a19      	ldr	r2, [pc, #100]	; (80081d4 <TIM_Base_SetConfig+0x1e8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d007      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a18      	ldr	r2, [pc, #96]	; (80081d8 <TIM_Base_SetConfig+0x1ec>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_Base_SetConfig+0x198>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a17      	ldr	r2, [pc, #92]	; (80081dc <TIM_Base_SetConfig+0x1f0>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d103      	bne.n	800818c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	615a      	str	r2, [r3, #20]
}
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	50012c00 	.word	0x50012c00
 80081a8:	40000400 	.word	0x40000400
 80081ac:	50000400 	.word	0x50000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	50000800 	.word	0x50000800
 80081b8:	40000c00 	.word	0x40000c00
 80081bc:	50000c00 	.word	0x50000c00
 80081c0:	40013400 	.word	0x40013400
 80081c4:	50013400 	.word	0x50013400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	50014000 	.word	0x50014000
 80081d0:	40014400 	.word	0x40014400
 80081d4:	50014400 	.word	0x50014400
 80081d8:	40014800 	.word	0x40014800
 80081dc:	50014800 	.word	0x50014800

080081e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e042      	b.n	8008278 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7f9 fb95 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2224      	movs	r2, #36	; 0x24
 800820e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0201 	bic.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f8ba 	bl	800839c <UART_SetConfig>
 8008228:	4603      	mov	r3, r0
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e022      	b.n	8008278 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa46 	bl	80086cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800824e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800825e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0201 	orr.w	r2, r2, #1
 800826e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 facd 	bl	8008810 <UART_CheckIdleState>
 8008276:	4603      	mov	r3, r0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af02      	add	r7, sp, #8
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	4613      	mov	r3, r2
 800828e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008296:	2b20      	cmp	r3, #32
 8008298:	d17b      	bne.n	8008392 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_UART_Transmit+0x26>
 80082a0:	88fb      	ldrh	r3, [r7, #6]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e074      	b.n	8008394 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2221      	movs	r2, #33	; 0x21
 80082b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082ba:	f7f9 fd6b 	bl	8001d94 <HAL_GetTick>
 80082be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	88fa      	ldrh	r2, [r7, #6]
 80082c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	88fa      	ldrh	r2, [r7, #6]
 80082cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d8:	d108      	bne.n	80082ec <HAL_UART_Transmit+0x6c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d104      	bne.n	80082ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	61bb      	str	r3, [r7, #24]
 80082ea:	e003      	b.n	80082f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082f4:	e030      	b.n	8008358 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2200      	movs	r2, #0
 80082fe:	2180      	movs	r1, #128	; 0x80
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 fb2f 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2220      	movs	r2, #32
 8008310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e03d      	b.n	8008394 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10b      	bne.n	8008336 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800832c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	3302      	adds	r3, #2
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	e007      	b.n	8008346 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	3301      	adds	r3, #1
 8008344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1c8      	bne.n	80082f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2200      	movs	r2, #0
 800836c:	2140      	movs	r1, #64	; 0x40
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 faf8 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2220      	movs	r2, #32
 800837e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e006      	b.n	8008394 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	e000      	b.n	8008394 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008392:	2302      	movs	r3, #2
  }
}
 8008394:	4618      	mov	r0, r3
 8008396:	3720      	adds	r7, #32
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800839c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083a0:	b094      	sub	sp, #80	; 0x50
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4b9b      	ldr	r3, [pc, #620]	; (8008620 <UART_SetConfig+0x284>)
 80083b2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	431a      	orrs	r2, r3
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4994      	ldr	r1, [pc, #592]	; (8008624 <UART_SetConfig+0x288>)
 80083d4:	4019      	ands	r1, r3
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083dc:	430b      	orrs	r3, r1
 80083de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	68d9      	ldr	r1, [r3, #12]
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	ea40 0301 	orr.w	r3, r0, r1
 80083f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b87      	ldr	r3, [pc, #540]	; (8008620 <UART_SetConfig+0x284>)
 8008404:	429a      	cmp	r2, r3
 8008406:	d009      	beq.n	800841c <UART_SetConfig+0x80>
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b86      	ldr	r3, [pc, #536]	; (8008628 <UART_SetConfig+0x28c>)
 800840e:	429a      	cmp	r2, r3
 8008410:	d004      	beq.n	800841c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	6a1a      	ldr	r2, [r3, #32]
 8008416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008418:	4313      	orrs	r3, r2
 800841a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008426:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008430:	430b      	orrs	r3, r1
 8008432:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	f023 000f 	bic.w	r0, r3, #15
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	ea40 0301 	orr.w	r3, r0, r1
 800844a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	4b76      	ldr	r3, [pc, #472]	; (800862c <UART_SetConfig+0x290>)
 8008452:	429a      	cmp	r2, r3
 8008454:	d102      	bne.n	800845c <UART_SetConfig+0xc0>
 8008456:	2301      	movs	r3, #1
 8008458:	64bb      	str	r3, [r7, #72]	; 0x48
 800845a:	e021      	b.n	80084a0 <UART_SetConfig+0x104>
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	4b73      	ldr	r3, [pc, #460]	; (8008630 <UART_SetConfig+0x294>)
 8008462:	429a      	cmp	r2, r3
 8008464:	d102      	bne.n	800846c <UART_SetConfig+0xd0>
 8008466:	2304      	movs	r3, #4
 8008468:	64bb      	str	r3, [r7, #72]	; 0x48
 800846a:	e019      	b.n	80084a0 <UART_SetConfig+0x104>
 800846c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	4b70      	ldr	r3, [pc, #448]	; (8008634 <UART_SetConfig+0x298>)
 8008472:	429a      	cmp	r2, r3
 8008474:	d102      	bne.n	800847c <UART_SetConfig+0xe0>
 8008476:	2308      	movs	r3, #8
 8008478:	64bb      	str	r3, [r7, #72]	; 0x48
 800847a:	e011      	b.n	80084a0 <UART_SetConfig+0x104>
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b6d      	ldr	r3, [pc, #436]	; (8008638 <UART_SetConfig+0x29c>)
 8008482:	429a      	cmp	r2, r3
 8008484:	d102      	bne.n	800848c <UART_SetConfig+0xf0>
 8008486:	2310      	movs	r3, #16
 8008488:	64bb      	str	r3, [r7, #72]	; 0x48
 800848a:	e009      	b.n	80084a0 <UART_SetConfig+0x104>
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	4b63      	ldr	r3, [pc, #396]	; (8008620 <UART_SetConfig+0x284>)
 8008492:	429a      	cmp	r2, r3
 8008494:	d102      	bne.n	800849c <UART_SetConfig+0x100>
 8008496:	2320      	movs	r3, #32
 8008498:	64bb      	str	r3, [r7, #72]	; 0x48
 800849a:	e001      	b.n	80084a0 <UART_SetConfig+0x104>
 800849c:	2300      	movs	r3, #0
 800849e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	4b5e      	ldr	r3, [pc, #376]	; (8008620 <UART_SetConfig+0x284>)
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d004      	beq.n	80084b4 <UART_SetConfig+0x118>
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	4b5e      	ldr	r3, [pc, #376]	; (8008628 <UART_SetConfig+0x28c>)
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d172      	bne.n	800859a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80084b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b6:	2200      	movs	r2, #0
 80084b8:	623b      	str	r3, [r7, #32]
 80084ba:	627a      	str	r2, [r7, #36]	; 0x24
 80084bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80084c0:	f7fc fd5e 	bl	8004f80 <HAL_RCCEx_GetPeriphCLKFreq>
 80084c4:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80084c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80e7 	beq.w	800869c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	4a5a      	ldr	r2, [pc, #360]	; (800863c <UART_SetConfig+0x2a0>)
 80084d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d8:	461a      	mov	r2, r3
 80084da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	4613      	mov	r3, r2
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	4413      	add	r3, r2
 80084ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d305      	bcc.n	80084fe <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d903      	bls.n	8008506 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008504:	e048      	b.n	8008598 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008508:	2200      	movs	r2, #0
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	61fa      	str	r2, [r7, #28]
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	4a4a      	ldr	r2, [pc, #296]	; (800863c <UART_SetConfig+0x2a0>)
 8008514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008518:	b29b      	uxth	r3, r3
 800851a:	2200      	movs	r2, #0
 800851c:	613b      	str	r3, [r7, #16]
 800851e:	617a      	str	r2, [r7, #20]
 8008520:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008524:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008528:	f7f7 fea6 	bl	8000278 <__aeabi_uldivmod>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4610      	mov	r0, r2
 8008532:	4619      	mov	r1, r3
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	020b      	lsls	r3, r1, #8
 800853e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008542:	0202      	lsls	r2, r0, #8
 8008544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008546:	6849      	ldr	r1, [r1, #4]
 8008548:	0849      	lsrs	r1, r1, #1
 800854a:	2000      	movs	r0, #0
 800854c:	460c      	mov	r4, r1
 800854e:	4605      	mov	r5, r0
 8008550:	eb12 0804 	adds.w	r8, r2, r4
 8008554:	eb43 0905 	adc.w	r9, r3, r5
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	60bb      	str	r3, [r7, #8]
 8008560:	60fa      	str	r2, [r7, #12]
 8008562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008566:	4640      	mov	r0, r8
 8008568:	4649      	mov	r1, r9
 800856a:	f7f7 fe85 	bl	8000278 <__aeabi_uldivmod>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4613      	mov	r3, r2
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800857c:	d308      	bcc.n	8008590 <UART_SetConfig+0x1f4>
 800857e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008584:	d204      	bcs.n	8008590 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800858c:	60da      	str	r2, [r3, #12]
 800858e:	e003      	b.n	8008598 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008596:	e081      	b.n	800869c <UART_SetConfig+0x300>
 8008598:	e080      	b.n	800869c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a2:	d14d      	bne.n	8008640 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80085a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a6:	2200      	movs	r2, #0
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085b0:	f7fc fce6 	bl	8004f80 <HAL_RCCEx_GetPeriphCLKFreq>
 80085b4:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d06f      	beq.n	800869c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	4a1e      	ldr	r2, [pc, #120]	; (800863c <UART_SetConfig+0x2a0>)
 80085c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c6:	461a      	mov	r2, r3
 80085c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ce:	005a      	lsls	r2, r3, #1
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	441a      	add	r2, r3
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e4:	2b0f      	cmp	r3, #15
 80085e6:	d916      	bls.n	8008616 <UART_SetConfig+0x27a>
 80085e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ee:	d212      	bcs.n	8008616 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f023 030f 	bic.w	r3, r3, #15
 80085f8:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	b29a      	uxth	r2, r3
 8008606:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008608:	4313      	orrs	r3, r2
 800860a:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008612:	60da      	str	r2, [r3, #12]
 8008614:	e042      	b.n	800869c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800861c:	e03e      	b.n	800869c <UART_SetConfig+0x300>
 800861e:	bf00      	nop
 8008620:	46002400 	.word	0x46002400
 8008624:	cfff69f3 	.word	0xcfff69f3
 8008628:	56002400 	.word	0x56002400
 800862c:	40013800 	.word	0x40013800
 8008630:	40004800 	.word	0x40004800
 8008634:	40004c00 	.word	0x40004c00
 8008638:	40005000 	.word	0x40005000
 800863c:	0800a2b4 	.word	0x0800a2b4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008642:	2200      	movs	r2, #0
 8008644:	469a      	mov	sl, r3
 8008646:	4693      	mov	fp, r2
 8008648:	4650      	mov	r0, sl
 800864a:	4659      	mov	r1, fp
 800864c:	f7fc fc98 	bl	8004f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8008650:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d021      	beq.n	800869c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <UART_SetConfig+0x32c>)
 800865e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008662:	461a      	mov	r2, r3
 8008664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008666:	fbb3 f2f2 	udiv	r2, r3, r2
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	441a      	add	r2, r3
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	fbb2 f3f3 	udiv	r3, r2, r3
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800867c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867e:	2b0f      	cmp	r3, #15
 8008680:	d909      	bls.n	8008696 <UART_SetConfig+0x2fa>
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008688:	d205      	bcs.n	8008696 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868c:	b29a      	uxth	r2, r3
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60da      	str	r2, [r3, #12]
 8008694:	e002      	b.n	800869c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	2201      	movs	r2, #1
 80086a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	2201      	movs	r2, #1
 80086a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	2200      	movs	r2, #0
 80086b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	2200      	movs	r2, #0
 80086b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3750      	adds	r7, #80	; 0x50
 80086c0:	46bd      	mov	sp, r7
 80086c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086c6:	bf00      	nop
 80086c8:	0800a2b4 	.word	0x0800a2b4

080086cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00a      	beq.n	80086f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	f003 0308 	and.w	r3, r3, #8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	f003 0310 	and.w	r3, r3, #16
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01a      	beq.n	80087e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ca:	d10a      	bne.n	80087e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	605a      	str	r2, [r3, #4]
  }
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b098      	sub	sp, #96	; 0x60
 8008814:	af02      	add	r7, sp, #8
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008820:	f7f9 fab8 	bl	8001d94 <HAL_GetTick>
 8008824:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b08      	cmp	r3, #8
 8008832:	d12f      	bne.n	8008894 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800883c:	2200      	movs	r2, #0
 800883e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f88e 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d022      	beq.n	8008894 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008862:	653b      	str	r3, [r7, #80]	; 0x50
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800886c:	647b      	str	r3, [r7, #68]	; 0x44
 800886e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800887a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e6      	bne.n	800884e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e063      	b.n	800895c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d149      	bne.n	8008936 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088aa:	2200      	movs	r2, #0
 80088ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f857 	bl	8008964 <UART_WaitOnFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d03c      	beq.n	8008936 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	623b      	str	r3, [r7, #32]
   return(result);
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088da:	633b      	str	r3, [r7, #48]	; 0x30
 80088dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e6      	bne.n	80088bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3308      	adds	r3, #8
 80088f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f023 0301 	bic.w	r3, r3, #1
 8008904:	64bb      	str	r3, [r7, #72]	; 0x48
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800890e:	61fa      	str	r2, [r7, #28]
 8008910:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	69b9      	ldr	r1, [r7, #24]
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	617b      	str	r3, [r7, #20]
   return(result);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e5      	bne.n	80088ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e012      	b.n	800895c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3758      	adds	r7, #88	; 0x58
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	4613      	mov	r3, r2
 8008972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008974:	e049      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800897c:	d045      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800897e:	f7f9 fa09 	bl	8001d94 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	429a      	cmp	r2, r3
 800898c:	d302      	bcc.n	8008994 <UART_WaitOnFlagUntilTimeout+0x30>
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e048      	b.n	8008a2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d031      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	f003 0308 	and.w	r3, r3, #8
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d110      	bne.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2208      	movs	r2, #8
 80089ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f838 	bl	8008a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2208      	movs	r2, #8
 80089c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e029      	b.n	8008a2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e4:	d111      	bne.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f81e 	bl	8008a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e00f      	b.n	8008a2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69da      	ldr	r2, [r3, #28]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4013      	ands	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	bf0c      	ite	eq
 8008a1a:	2301      	moveq	r3, #1
 8008a1c:	2300      	movne	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d0a6      	beq.n	8008976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b095      	sub	sp, #84	; 0x54
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a58:	643b      	str	r3, [r7, #64]	; 0x40
 8008a5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a60:	e841 2300 	strex	r3, r2, [r1]
 8008a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e6      	bne.n	8008a3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3308      	adds	r3, #8
 8008a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a82:	f023 0301 	bic.w	r3, r3, #1
 8008a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a98:	e841 2300 	strex	r3, r2, [r1]
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e3      	bne.n	8008a6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d118      	bne.n	8008ade <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f023 0310 	bic.w	r3, r3, #16
 8008ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e6      	bne.n	8008aac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008af2:	bf00      	nop
 8008af4:	3754      	adds	r7, #84	; 0x54
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b085      	sub	sp, #20
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e027      	b.n	8008b64 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2224      	movs	r2, #36	; 0x24
 8008b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e02d      	b.n	8008be4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2224      	movs	r2, #36	; 0x24
 8008b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0201 	bic.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f84f 	bl	8008c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e02d      	b.n	8008c60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2224      	movs	r2, #36	; 0x24
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0201 	bic.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f811 	bl	8008c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d108      	bne.n	8008c8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c88:	e031      	b.n	8008cee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c8a:	2308      	movs	r3, #8
 8008c8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c8e:	2308      	movs	r3, #8
 8008c90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	0e5b      	lsrs	r3, r3, #25
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	0f5b      	lsrs	r3, r3, #29
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	7b3a      	ldrb	r2, [r7, #12]
 8008cb6:	4911      	ldr	r1, [pc, #68]	; (8008cfc <UARTEx_SetNbDataToProcess+0x94>)
 8008cb8:	5c8a      	ldrb	r2, [r1, r2]
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cbe:	7b3a      	ldrb	r2, [r7, #12]
 8008cc0:	490f      	ldr	r1, [pc, #60]	; (8008d00 <UARTEx_SetNbDataToProcess+0x98>)
 8008cc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	7b7a      	ldrb	r2, [r7, #13]
 8008cd4:	4909      	ldr	r1, [pc, #36]	; (8008cfc <UARTEx_SetNbDataToProcess+0x94>)
 8008cd6:	5c8a      	ldrb	r2, [r1, r2]
 8008cd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cdc:	7b7a      	ldrb	r2, [r7, #13]
 8008cde:	4908      	ldr	r1, [pc, #32]	; (8008d00 <UARTEx_SetNbDataToProcess+0x98>)
 8008ce0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ce2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008cee:	bf00      	nop
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	0800a2cc 	.word	0x0800a2cc
 8008d00:	0800a2d4 	.word	0x0800a2d4

08008d04 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008d04:	b084      	sub	sp, #16
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	f107 001c 	add.w	r0, r7, #28
 8008d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008d1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008d1e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008d22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008d26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008d2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <SDMMC_Init+0x50>)
 8008d38:	4013      	ands	r3, r2
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	b004      	add	sp, #16
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	ffc02c00 	.word	0xffc02c00

08008d58 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f043 0203 	orr.w	r2, r3, #3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0303 	and.w	r3, r3, #3
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008dce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008dd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008dda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <SDMMC_SendCommand+0x50>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	fffee0c0 	.word	0xfffee0c0

08008e04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	b2db      	uxtb	r3, r3
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	4413      	add	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e6a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008e70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008e76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0

}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008eaa:	2310      	movs	r3, #16
 8008eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ebc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ebe:	f107 0308 	add.w	r3, r7, #8
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff ff73 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ece:	2110      	movs	r1, #16
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f995 	bl	8009200 <SDMMC_GetCmdResp1>
 8008ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b088      	sub	sp, #32
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008ef0:	2307      	movs	r3, #7
 8008ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f04:	f107 0308 	add.w	r3, r7, #8
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff ff50 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f14:	2107      	movs	r1, #7
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f972 	bl	8009200 <SDMMC_GetCmdResp1>
 8008f1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3720      	adds	r7, #32
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ff2f 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fb96 	bl	8009684 <SDMMC_GetCmdError>
 8008f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f6c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f72:	2308      	movs	r3, #8
 8008f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff ff0f 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fb28 	bl	80095e8 <SDMMC_GetCmdResp7>
 8008f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fb2:	2337      	movs	r3, #55	; 0x37
 8008fb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc6:	f107 0308 	add.w	r3, r7, #8
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff feef 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd6:	2137      	movs	r1, #55	; 0x37
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f911 	bl	8009200 <SDMMC_GetCmdResp1>
 8008fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3720      	adds	r7, #32
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b088      	sub	sp, #32
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008ff8:	2329      	movs	r3, #41	; 0x29
 8008ffa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800900a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800900c:	f107 0308 	add.w	r3, r7, #8
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff fecc 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa2d 	bl	8009478 <SDMMC_GetCmdResp3>
 800901e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009020:	69fb      	ldr	r3, [r7, #28]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b088      	sub	sp, #32
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009038:	2306      	movs	r3, #6
 800903a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800903c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800904a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800904c:	f107 0308 	add.w	r3, r7, #8
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff feac 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009058:	f241 3288 	movw	r2, #5000	; 0x1388
 800905c:	2106      	movs	r1, #6
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8ce 	bl	8009200 <SDMMC_GetCmdResp1>
 8009064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009066:	69fb      	ldr	r3, [r7, #28]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3720      	adds	r7, #32
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800907c:	2333      	movs	r3, #51	; 0x33
 800907e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800908a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800908e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009090:	f107 0308 	add.w	r3, r7, #8
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff fe8a 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800909c:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a0:	2133      	movs	r1, #51	; 0x33
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f8ac 	bl	8009200 <SDMMC_GetCmdResp1>
 80090a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090aa:	69fb      	ldr	r3, [r7, #28]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090c0:	2302      	movs	r3, #2
 80090c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80090c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d4:	f107 0308 	add.w	r3, r7, #8
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff fe68 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f97f 	bl	80093e4 <SDMMC_GetCmdResp2>
 80090e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090e8:	69fb      	ldr	r3, [r7, #28]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3720      	adds	r7, #32
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b088      	sub	sp, #32
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009100:	2309      	movs	r3, #9
 8009102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009104:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800910e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fe48 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f95f 	bl	80093e4 <SDMMC_GetCmdResp2>
 8009126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009128:	69fb      	ldr	r3, [r7, #28]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3720      	adds	r7, #32
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b088      	sub	sp, #32
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009140:	2303      	movs	r3, #3
 8009142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800914a:	2300      	movs	r3, #0
 800914c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800914e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009152:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009154:	f107 0308 	add.w	r3, r7, #8
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff fe28 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	2103      	movs	r1, #3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f9c7 	bl	80094f8 <SDMMC_GetCmdResp6>
 800916a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800916c:	69fb      	ldr	r3, [r7, #28]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b088      	sub	sp, #32
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009184:	230d      	movs	r3, #13
 8009186:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800918c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800918e:	2300      	movs	r3, #0
 8009190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009196:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009198:	f107 0308 	add.w	r3, r7, #8
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff fe06 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a8:	210d      	movs	r1, #13
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f828 	bl	8009200 <SDMMC_GetCmdResp1>
 80091b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b2:	69fb      	ldr	r3, [r7, #28]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3720      	adds	r7, #32
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80091c8:	230d      	movs	r3, #13
 80091ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091dc:	f107 0308 	add.w	r3, r7, #8
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7ff fde4 	bl	8008db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80091e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ec:	210d      	movs	r1, #13
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f806 	bl	8009200 <SDMMC_GetCmdResp1>
 80091f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091f6:	69fb      	ldr	r3, [r7, #28]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	460b      	mov	r3, r1
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800920e:	4b70      	ldr	r3, [pc, #448]	; (80093d0 <SDMMC_GetCmdResp1+0x1d0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a70      	ldr	r2, [pc, #448]	; (80093d4 <SDMMC_GetCmdResp1+0x1d4>)
 8009214:	fba2 2303 	umull	r2, r3, r2, r3
 8009218:	0a5a      	lsrs	r2, r3, #9
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	1e5a      	subs	r2, r3, #1
 8009226:	61fa      	str	r2, [r7, #28]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800922c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009230:	e0c9      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	4b67      	ldr	r3, [pc, #412]	; (80093d8 <SDMMC_GetCmdResp1+0x1d8>)
 800923c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0ef      	beq.n	8009222 <SDMMC_GetCmdResp1+0x22>
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1ea      	bne.n	8009222 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2204      	movs	r2, #4
 800925c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800925e:	2304      	movs	r3, #4
 8009260:	e0b1      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009274:	2301      	movs	r3, #1
 8009276:	e0a6      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4a58      	ldr	r2, [pc, #352]	; (80093dc <SDMMC_GetCmdResp1+0x1dc>)
 800927c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f7ff fdc0 	bl	8008e04 <SDMMC_GetCommandResponse>
 8009284:	4603      	mov	r3, r0
 8009286:	461a      	mov	r2, r3
 8009288:	7afb      	ldrb	r3, [r7, #11]
 800928a:	4293      	cmp	r3, r2
 800928c:	d001      	beq.n	8009292 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800928e:	2301      	movs	r3, #1
 8009290:	e099      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009292:	2100      	movs	r1, #0
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff fdc2 	bl	8008e1e <SDMMC_GetResponse>
 800929a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	4b50      	ldr	r3, [pc, #320]	; (80093e0 <SDMMC_GetCmdResp1+0x1e0>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	e08d      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da02      	bge.n	80092b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092b4:	e087      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092c0:	2340      	movs	r3, #64	; 0x40
 80092c2:	e080      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092ce:	2380      	movs	r3, #128	; 0x80
 80092d0:	e079      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092e0:	e071      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f0:	e069      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009300:	e061      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800930c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009310:	e059      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800931c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009320:	e051      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800932c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009330:	e049      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800933c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009340:	e041      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800934c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009350:	e039      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800935c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009360:	e031      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800936c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009370:	e029      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800937c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009380:	e021      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800938c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009390:	e019      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800939c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093a0:	e011      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093b0:	e009      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093c0:	e001      	b.n	80093c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000000 	.word	0x20000000
 80093d4:	10624dd3 	.word	0x10624dd3
 80093d8:	00200045 	.word	0x00200045
 80093dc:	002000c5 	.word	0x002000c5
 80093e0:	fdffe008 	.word	0xfdffe008

080093e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093ec:	4b1f      	ldr	r3, [pc, #124]	; (800946c <SDMMC_GetCmdResp2+0x88>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1f      	ldr	r2, [pc, #124]	; (8009470 <SDMMC_GetCmdResp2+0x8c>)
 80093f2:	fba2 2303 	umull	r2, r3, r2, r3
 80093f6:	0a5b      	lsrs	r3, r3, #9
 80093f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	1e5a      	subs	r2, r3, #1
 8009406:	60fa      	str	r2, [r7, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d102      	bne.n	8009412 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800940c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009410:	e026      	b.n	8009460 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009416:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0ef      	beq.n	8009402 <SDMMC_GetCmdResp2+0x1e>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1ea      	bne.n	8009402 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2204      	movs	r2, #4
 800943c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800943e:	2304      	movs	r3, #4
 8009440:	e00e      	b.n	8009460 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009454:	2301      	movs	r3, #1
 8009456:	e003      	b.n	8009460 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a06      	ldr	r2, [pc, #24]	; (8009474 <SDMMC_GetCmdResp2+0x90>)
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	20000000 	.word	0x20000000
 8009470:	10624dd3 	.word	0x10624dd3
 8009474:	002000c5 	.word	0x002000c5

08009478 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009480:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <SDMMC_GetCmdResp3+0x74>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1a      	ldr	r2, [pc, #104]	; (80094f0 <SDMMC_GetCmdResp3+0x78>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0a5b      	lsrs	r3, r3, #9
 800948c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009490:	fb02 f303 	mul.w	r3, r2, r3
 8009494:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1e5a      	subs	r2, r3, #1
 800949a:	60fa      	str	r2, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a4:	e01b      	b.n	80094de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0ef      	beq.n	8009496 <SDMMC_GetCmdResp3+0x1e>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1ea      	bne.n	8009496 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2204      	movs	r2, #4
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094d2:	2304      	movs	r3, #4
 80094d4:	e003      	b.n	80094de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a06      	ldr	r2, [pc, #24]	; (80094f4 <SDMMC_GetCmdResp3+0x7c>)
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	20000000 	.word	0x20000000
 80094f0:	10624dd3 	.word	0x10624dd3
 80094f4:	002000c5 	.word	0x002000c5

080094f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	460b      	mov	r3, r1
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009506:	4b35      	ldr	r3, [pc, #212]	; (80095dc <SDMMC_GetCmdResp6+0xe4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a35      	ldr	r2, [pc, #212]	; (80095e0 <SDMMC_GetCmdResp6+0xe8>)
 800950c:	fba2 2303 	umull	r2, r3, r2, r3
 8009510:	0a5b      	lsrs	r3, r3, #9
 8009512:	f241 3288 	movw	r2, #5000	; 0x1388
 8009516:	fb02 f303 	mul.w	r3, r2, r3
 800951a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	61fa      	str	r2, [r7, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009526:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800952a:	e052      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009530:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0ef      	beq.n	800951c <SDMMC_GetCmdResp6+0x24>
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1ea      	bne.n	800951c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2204      	movs	r2, #4
 8009556:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009558:	2304      	movs	r3, #4
 800955a:	e03a      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800956e:	2301      	movs	r3, #1
 8009570:	e02f      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7ff fc46 	bl	8008e04 <SDMMC_GetCommandResponse>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	7afb      	ldrb	r3, [r7, #11]
 800957e:	4293      	cmp	r3, r2
 8009580:	d001      	beq.n	8009586 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009582:	2301      	movs	r3, #1
 8009584:	e025      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <SDMMC_GetCmdResp6+0xec>)
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800958c:	2100      	movs	r1, #0
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fc45 	bl	8008e1e <SDMMC_GetResponse>
 8009594:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e011      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095bc:	e009      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095cc:	e001      	b.n	80095d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20000000 	.word	0x20000000
 80095e0:	10624dd3 	.word	0x10624dd3
 80095e4:	002000c5 	.word	0x002000c5

080095e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80095f0:	4b22      	ldr	r3, [pc, #136]	; (800967c <SDMMC_GetCmdResp7+0x94>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a22      	ldr	r2, [pc, #136]	; (8009680 <SDMMC_GetCmdResp7+0x98>)
 80095f6:	fba2 2303 	umull	r2, r3, r2, r3
 80095fa:	0a5b      	lsrs	r3, r3, #9
 80095fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009600:	fb02 f303 	mul.w	r3, r2, r3
 8009604:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	1e5a      	subs	r2, r3, #1
 800960a:	60fa      	str	r2, [r7, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009614:	e02c      	b.n	8009670 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0ef      	beq.n	8009606 <SDMMC_GetCmdResp7+0x1e>
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1ea      	bne.n	8009606 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2204      	movs	r2, #4
 8009640:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009642:	2304      	movs	r3, #4
 8009644:	e014      	b.n	8009670 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009658:	2301      	movs	r3, #1
 800965a:	e009      	b.n	8009670 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2240      	movs	r2, #64	; 0x40
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800966e:	2300      	movs	r3, #0

}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20000000 	.word	0x20000000
 8009680:	10624dd3 	.word	0x10624dd3

08009684 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800968c:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <SDMMC_GetCmdError+0x50>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a11      	ldr	r2, [pc, #68]	; (80096d8 <SDMMC_GetCmdError+0x54>)
 8009692:	fba2 2303 	umull	r2, r3, r2, r3
 8009696:	0a5b      	lsrs	r3, r3, #9
 8009698:	f241 3288 	movw	r2, #5000	; 0x1388
 800969c:	fb02 f303 	mul.w	r3, r2, r3
 80096a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	1e5a      	subs	r2, r3, #1
 80096a6:	60fa      	str	r2, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d102      	bne.n	80096b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096b0:	e009      	b.n	80096c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0f1      	beq.n	80096a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a06      	ldr	r2, [pc, #24]	; (80096dc <SDMMC_GetCmdError+0x58>)
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20000000 	.word	0x20000000
 80096d8:	10624dd3 	.word	0x10624dd3
 80096dc:	002000c5 	.word	0x002000c5

080096e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	f043 0201 	orr.w	r2, r3, #1
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800970e:	b084      	sub	sp, #16
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	f107 001c 	add.w	r0, r7, #28
 800971c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e008      	b.n	800973c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff ffd8 	bl	80096e0 <USB_CoreReset>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009746:	b004      	add	sp, #16
 8009748:	4770      	bx	lr

0800974a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009752:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009756:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	43db      	mvns	r3, r3
 8009760:	401a      	ands	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	641a      	str	r2, [r3, #64]	; 0x40
 8009792:	e00b      	b.n	80097ac <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d106      	bne.n	80097a8 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	641a      	str	r2, [r3, #64]	; 0x40
 80097a6:	e001      	b.n	80097ac <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80097ba:	b084      	sub	sp, #16
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	f107 001c 	add.w	r0, r7, #28
 80097c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d6:	f023 0201 	bic.w	r2, r3, #1
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 80097de:	2100      	movs	r1, #0
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ffc7 	bl	8009774 <USB_SetCurrentMode>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097fc:	b004      	add	sp, #16
 80097fe:	4770      	bx	lr

08009800 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
	...

08009824 <__errno>:
 8009824:	4b01      	ldr	r3, [pc, #4]	; (800982c <__errno+0x8>)
 8009826:	6818      	ldr	r0, [r3, #0]
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	2000000c 	.word	0x2000000c

08009830 <__libc_init_array>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	4d0d      	ldr	r5, [pc, #52]	; (8009868 <__libc_init_array+0x38>)
 8009834:	2600      	movs	r6, #0
 8009836:	4c0d      	ldr	r4, [pc, #52]	; (800986c <__libc_init_array+0x3c>)
 8009838:	1b64      	subs	r4, r4, r5
 800983a:	10a4      	asrs	r4, r4, #2
 800983c:	42a6      	cmp	r6, r4
 800983e:	d109      	bne.n	8009854 <__libc_init_array+0x24>
 8009840:	4d0b      	ldr	r5, [pc, #44]	; (8009870 <__libc_init_array+0x40>)
 8009842:	2600      	movs	r6, #0
 8009844:	4c0b      	ldr	r4, [pc, #44]	; (8009874 <__libc_init_array+0x44>)
 8009846:	f000 fc9d 	bl	800a184 <_init>
 800984a:	1b64      	subs	r4, r4, r5
 800984c:	10a4      	asrs	r4, r4, #2
 800984e:	42a6      	cmp	r6, r4
 8009850:	d105      	bne.n	800985e <__libc_init_array+0x2e>
 8009852:	bd70      	pop	{r4, r5, r6, pc}
 8009854:	f855 3b04 	ldr.w	r3, [r5], #4
 8009858:	3601      	adds	r6, #1
 800985a:	4798      	blx	r3
 800985c:	e7ee      	b.n	800983c <__libc_init_array+0xc>
 800985e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009862:	3601      	adds	r6, #1
 8009864:	4798      	blx	r3
 8009866:	e7f2      	b.n	800984e <__libc_init_array+0x1e>
 8009868:	0800a318 	.word	0x0800a318
 800986c:	0800a318 	.word	0x0800a318
 8009870:	0800a318 	.word	0x0800a318
 8009874:	0800a31c 	.word	0x0800a31c

08009878 <memset>:
 8009878:	4402      	add	r2, r0
 800987a:	4603      	mov	r3, r0
 800987c:	4293      	cmp	r3, r2
 800987e:	d100      	bne.n	8009882 <memset+0xa>
 8009880:	4770      	bx	lr
 8009882:	f803 1b01 	strb.w	r1, [r3], #1
 8009886:	e7f9      	b.n	800987c <memset+0x4>

08009888 <siprintf>:
 8009888:	b40e      	push	{r1, r2, r3}
 800988a:	b500      	push	{lr}
 800988c:	b09c      	sub	sp, #112	; 0x70
 800988e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009892:	ab1d      	add	r3, sp, #116	; 0x74
 8009894:	9002      	str	r0, [sp, #8]
 8009896:	9006      	str	r0, [sp, #24]
 8009898:	9107      	str	r1, [sp, #28]
 800989a:	9104      	str	r1, [sp, #16]
 800989c:	4808      	ldr	r0, [pc, #32]	; (80098c0 <siprintf+0x38>)
 800989e:	4909      	ldr	r1, [pc, #36]	; (80098c4 <siprintf+0x3c>)
 80098a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a4:	9105      	str	r1, [sp, #20]
 80098a6:	a902      	add	r1, sp, #8
 80098a8:	6800      	ldr	r0, [r0, #0]
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	f000 f868 	bl	8009980 <_svfiprintf_r>
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	2200      	movs	r2, #0
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	b01c      	add	sp, #112	; 0x70
 80098b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098bc:	b003      	add	sp, #12
 80098be:	4770      	bx	lr
 80098c0:	2000000c 	.word	0x2000000c
 80098c4:	ffff0208 	.word	0xffff0208

080098c8 <__ssputs_r>:
 80098c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098cc:	688e      	ldr	r6, [r1, #8]
 80098ce:	4682      	mov	sl, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	4690      	mov	r8, r2
 80098d4:	429e      	cmp	r6, r3
 80098d6:	461f      	mov	r7, r3
 80098d8:	d838      	bhi.n	800994c <__ssputs_r+0x84>
 80098da:	898a      	ldrh	r2, [r1, #12]
 80098dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098e0:	d032      	beq.n	8009948 <__ssputs_r+0x80>
 80098e2:	6825      	ldr	r5, [r4, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	6909      	ldr	r1, [r1, #16]
 80098e8:	eba5 0901 	sub.w	r9, r5, r1
 80098ec:	6965      	ldr	r5, [r4, #20]
 80098ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098f2:	444b      	add	r3, r9
 80098f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098f8:	106d      	asrs	r5, r5, #1
 80098fa:	429d      	cmp	r5, r3
 80098fc:	bf38      	it	cc
 80098fe:	461d      	movcc	r5, r3
 8009900:	0553      	lsls	r3, r2, #21
 8009902:	d531      	bpl.n	8009968 <__ssputs_r+0xa0>
 8009904:	4629      	mov	r1, r5
 8009906:	f000 fb73 	bl	8009ff0 <_malloc_r>
 800990a:	4606      	mov	r6, r0
 800990c:	b950      	cbnz	r0, 8009924 <__ssputs_r+0x5c>
 800990e:	230c      	movs	r3, #12
 8009910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009914:	f8ca 3000 	str.w	r3, [sl]
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009924:	464a      	mov	r2, r9
 8009926:	6921      	ldr	r1, [r4, #16]
 8009928:	f000 face 	bl	8009ec8 <memcpy>
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	6126      	str	r6, [r4, #16]
 800993a:	444e      	add	r6, r9
 800993c:	6165      	str	r5, [r4, #20]
 800993e:	eba5 0509 	sub.w	r5, r5, r9
 8009942:	6026      	str	r6, [r4, #0]
 8009944:	463e      	mov	r6, r7
 8009946:	60a5      	str	r5, [r4, #8]
 8009948:	42be      	cmp	r6, r7
 800994a:	d900      	bls.n	800994e <__ssputs_r+0x86>
 800994c:	463e      	mov	r6, r7
 800994e:	4632      	mov	r2, r6
 8009950:	4641      	mov	r1, r8
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	f000 fac5 	bl	8009ee2 <memmove>
 8009958:	68a3      	ldr	r3, [r4, #8]
 800995a:	2000      	movs	r0, #0
 800995c:	1b9b      	subs	r3, r3, r6
 800995e:	60a3      	str	r3, [r4, #8]
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	4433      	add	r3, r6
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	e7db      	b.n	8009920 <__ssputs_r+0x58>
 8009968:	462a      	mov	r2, r5
 800996a:	f000 fbb5 	bl	800a0d8 <_realloc_r>
 800996e:	4606      	mov	r6, r0
 8009970:	2800      	cmp	r0, #0
 8009972:	d1e1      	bne.n	8009938 <__ssputs_r+0x70>
 8009974:	6921      	ldr	r1, [r4, #16]
 8009976:	4650      	mov	r0, sl
 8009978:	f000 face 	bl	8009f18 <_free_r>
 800997c:	e7c7      	b.n	800990e <__ssputs_r+0x46>
	...

08009980 <_svfiprintf_r>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	4698      	mov	r8, r3
 8009986:	898b      	ldrh	r3, [r1, #12]
 8009988:	b09d      	sub	sp, #116	; 0x74
 800998a:	4607      	mov	r7, r0
 800998c:	061b      	lsls	r3, r3, #24
 800998e:	460d      	mov	r5, r1
 8009990:	4614      	mov	r4, r2
 8009992:	d50e      	bpl.n	80099b2 <_svfiprintf_r+0x32>
 8009994:	690b      	ldr	r3, [r1, #16]
 8009996:	b963      	cbnz	r3, 80099b2 <_svfiprintf_r+0x32>
 8009998:	2140      	movs	r1, #64	; 0x40
 800999a:	f000 fb29 	bl	8009ff0 <_malloc_r>
 800999e:	6028      	str	r0, [r5, #0]
 80099a0:	6128      	str	r0, [r5, #16]
 80099a2:	b920      	cbnz	r0, 80099ae <_svfiprintf_r+0x2e>
 80099a4:	230c      	movs	r3, #12
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ac:	e0d1      	b.n	8009b52 <_svfiprintf_r+0x1d2>
 80099ae:	2340      	movs	r3, #64	; 0x40
 80099b0:	616b      	str	r3, [r5, #20]
 80099b2:	2300      	movs	r3, #0
 80099b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b8:	f04f 0901 	mov.w	r9, #1
 80099bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009b6c <_svfiprintf_r+0x1ec>
 80099c0:	9309      	str	r3, [sp, #36]	; 0x24
 80099c2:	2320      	movs	r3, #32
 80099c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c8:	2330      	movs	r3, #48	; 0x30
 80099ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ce:	4623      	mov	r3, r4
 80099d0:	469a      	mov	sl, r3
 80099d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099d6:	b10a      	cbz	r2, 80099dc <_svfiprintf_r+0x5c>
 80099d8:	2a25      	cmp	r2, #37	; 0x25
 80099da:	d1f9      	bne.n	80099d0 <_svfiprintf_r+0x50>
 80099dc:	ebba 0b04 	subs.w	fp, sl, r4
 80099e0:	d00b      	beq.n	80099fa <_svfiprintf_r+0x7a>
 80099e2:	465b      	mov	r3, fp
 80099e4:	4622      	mov	r2, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7ff ff6d 	bl	80098c8 <__ssputs_r>
 80099ee:	3001      	adds	r0, #1
 80099f0:	f000 80aa 	beq.w	8009b48 <_svfiprintf_r+0x1c8>
 80099f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099f6:	445a      	add	r2, fp
 80099f8:	9209      	str	r2, [sp, #36]	; 0x24
 80099fa:	f89a 3000 	ldrb.w	r3, [sl]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 80a2 	beq.w	8009b48 <_svfiprintf_r+0x1c8>
 8009a04:	2300      	movs	r3, #0
 8009a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a0a:	f10a 0a01 	add.w	sl, sl, #1
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	9307      	str	r3, [sp, #28]
 8009a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a16:	931a      	str	r3, [sp, #104]	; 0x68
 8009a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a1c:	4654      	mov	r4, sl
 8009a1e:	2205      	movs	r2, #5
 8009a20:	4852      	ldr	r0, [pc, #328]	; (8009b6c <_svfiprintf_r+0x1ec>)
 8009a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a26:	f000 fa41 	bl	8009eac <memchr>
 8009a2a:	9a04      	ldr	r2, [sp, #16]
 8009a2c:	b9d8      	cbnz	r0, 8009a66 <_svfiprintf_r+0xe6>
 8009a2e:	06d0      	lsls	r0, r2, #27
 8009a30:	bf44      	itt	mi
 8009a32:	2320      	movmi	r3, #32
 8009a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a38:	0711      	lsls	r1, r2, #28
 8009a3a:	bf44      	itt	mi
 8009a3c:	232b      	movmi	r3, #43	; 0x2b
 8009a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a42:	f89a 3000 	ldrb.w	r3, [sl]
 8009a46:	2b2a      	cmp	r3, #42	; 0x2a
 8009a48:	d015      	beq.n	8009a76 <_svfiprintf_r+0xf6>
 8009a4a:	9a07      	ldr	r2, [sp, #28]
 8009a4c:	4654      	mov	r4, sl
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f04f 0c0a 	mov.w	ip, #10
 8009a54:	4621      	mov	r1, r4
 8009a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a5a:	3b30      	subs	r3, #48	; 0x30
 8009a5c:	2b09      	cmp	r3, #9
 8009a5e:	d94e      	bls.n	8009afe <_svfiprintf_r+0x17e>
 8009a60:	b1b0      	cbz	r0, 8009a90 <_svfiprintf_r+0x110>
 8009a62:	9207      	str	r2, [sp, #28]
 8009a64:	e014      	b.n	8009a90 <_svfiprintf_r+0x110>
 8009a66:	eba0 0308 	sub.w	r3, r0, r8
 8009a6a:	46a2      	mov	sl, r4
 8009a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a70:	4313      	orrs	r3, r2
 8009a72:	9304      	str	r3, [sp, #16]
 8009a74:	e7d2      	b.n	8009a1c <_svfiprintf_r+0x9c>
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	1d19      	adds	r1, r3, #4
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	9103      	str	r1, [sp, #12]
 8009a80:	bfbb      	ittet	lt
 8009a82:	425b      	neglt	r3, r3
 8009a84:	f042 0202 	orrlt.w	r2, r2, #2
 8009a88:	9307      	strge	r3, [sp, #28]
 8009a8a:	9307      	strlt	r3, [sp, #28]
 8009a8c:	bfb8      	it	lt
 8009a8e:	9204      	strlt	r2, [sp, #16]
 8009a90:	7823      	ldrb	r3, [r4, #0]
 8009a92:	2b2e      	cmp	r3, #46	; 0x2e
 8009a94:	d10c      	bne.n	8009ab0 <_svfiprintf_r+0x130>
 8009a96:	7863      	ldrb	r3, [r4, #1]
 8009a98:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9a:	d135      	bne.n	8009b08 <_svfiprintf_r+0x188>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	3402      	adds	r4, #2
 8009aa0:	1d1a      	adds	r2, r3, #4
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	9203      	str	r2, [sp, #12]
 8009aa8:	bfb8      	it	lt
 8009aaa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b7c <_svfiprintf_r+0x1fc>
 8009ab4:	2203      	movs	r2, #3
 8009ab6:	7821      	ldrb	r1, [r4, #0]
 8009ab8:	4650      	mov	r0, sl
 8009aba:	f000 f9f7 	bl	8009eac <memchr>
 8009abe:	b140      	cbz	r0, 8009ad2 <_svfiprintf_r+0x152>
 8009ac0:	2340      	movs	r3, #64	; 0x40
 8009ac2:	eba0 000a 	sub.w	r0, r0, sl
 8009ac6:	3401      	adds	r4, #1
 8009ac8:	fa03 f000 	lsl.w	r0, r3, r0
 8009acc:	9b04      	ldr	r3, [sp, #16]
 8009ace:	4303      	orrs	r3, r0
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad6:	2206      	movs	r2, #6
 8009ad8:	4825      	ldr	r0, [pc, #148]	; (8009b70 <_svfiprintf_r+0x1f0>)
 8009ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ade:	f000 f9e5 	bl	8009eac <memchr>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d038      	beq.n	8009b58 <_svfiprintf_r+0x1d8>
 8009ae6:	4b23      	ldr	r3, [pc, #140]	; (8009b74 <_svfiprintf_r+0x1f4>)
 8009ae8:	bb1b      	cbnz	r3, 8009b32 <_svfiprintf_r+0x1b2>
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	3307      	adds	r3, #7
 8009aee:	f023 0307 	bic.w	r3, r3, #7
 8009af2:	3308      	adds	r3, #8
 8009af4:	9303      	str	r3, [sp, #12]
 8009af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af8:	4433      	add	r3, r6
 8009afa:	9309      	str	r3, [sp, #36]	; 0x24
 8009afc:	e767      	b.n	80099ce <_svfiprintf_r+0x4e>
 8009afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b02:	460c      	mov	r4, r1
 8009b04:	2001      	movs	r0, #1
 8009b06:	e7a5      	b.n	8009a54 <_svfiprintf_r+0xd4>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	3401      	adds	r4, #1
 8009b0c:	f04f 0c0a 	mov.w	ip, #10
 8009b10:	4619      	mov	r1, r3
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	4620      	mov	r0, r4
 8009b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b1a:	3a30      	subs	r2, #48	; 0x30
 8009b1c:	2a09      	cmp	r2, #9
 8009b1e:	d903      	bls.n	8009b28 <_svfiprintf_r+0x1a8>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d0c5      	beq.n	8009ab0 <_svfiprintf_r+0x130>
 8009b24:	9105      	str	r1, [sp, #20]
 8009b26:	e7c3      	b.n	8009ab0 <_svfiprintf_r+0x130>
 8009b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e7f0      	b.n	8009b14 <_svfiprintf_r+0x194>
 8009b32:	ab03      	add	r3, sp, #12
 8009b34:	462a      	mov	r2, r5
 8009b36:	a904      	add	r1, sp, #16
 8009b38:	4638      	mov	r0, r7
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <_svfiprintf_r+0x1f8>)
 8009b3e:	e000      	b.n	8009b42 <_svfiprintf_r+0x1c2>
 8009b40:	bf00      	nop
 8009b42:	1c42      	adds	r2, r0, #1
 8009b44:	4606      	mov	r6, r0
 8009b46:	d1d6      	bne.n	8009af6 <_svfiprintf_r+0x176>
 8009b48:	89ab      	ldrh	r3, [r5, #12]
 8009b4a:	065b      	lsls	r3, r3, #25
 8009b4c:	f53f af2c 	bmi.w	80099a8 <_svfiprintf_r+0x28>
 8009b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b52:	b01d      	add	sp, #116	; 0x74
 8009b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b58:	ab03      	add	r3, sp, #12
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	a904      	add	r1, sp, #16
 8009b5e:	4638      	mov	r0, r7
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <_svfiprintf_r+0x1f8>)
 8009b64:	f000 f87c 	bl	8009c60 <_printf_i>
 8009b68:	e7eb      	b.n	8009b42 <_svfiprintf_r+0x1c2>
 8009b6a:	bf00      	nop
 8009b6c:	0800a2dc 	.word	0x0800a2dc
 8009b70:	0800a2e6 	.word	0x0800a2e6
 8009b74:	00000000 	.word	0x00000000
 8009b78:	080098c9 	.word	0x080098c9
 8009b7c:	0800a2e2 	.word	0x0800a2e2

08009b80 <_printf_common>:
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	4616      	mov	r6, r2
 8009b86:	4699      	mov	r9, r3
 8009b88:	688a      	ldr	r2, [r1, #8]
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	690b      	ldr	r3, [r1, #16]
 8009b8e:	460c      	mov	r4, r1
 8009b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	bfb8      	it	lt
 8009b98:	4613      	movlt	r3, r2
 8009b9a:	6033      	str	r3, [r6, #0]
 8009b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ba0:	b10a      	cbz	r2, 8009ba6 <_printf_common+0x26>
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	6033      	str	r3, [r6, #0]
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	0699      	lsls	r1, r3, #26
 8009baa:	bf42      	ittt	mi
 8009bac:	6833      	ldrmi	r3, [r6, #0]
 8009bae:	3302      	addmi	r3, #2
 8009bb0:	6033      	strmi	r3, [r6, #0]
 8009bb2:	6825      	ldr	r5, [r4, #0]
 8009bb4:	f015 0506 	ands.w	r5, r5, #6
 8009bb8:	d106      	bne.n	8009bc8 <_printf_common+0x48>
 8009bba:	f104 0a19 	add.w	sl, r4, #25
 8009bbe:	68e3      	ldr	r3, [r4, #12]
 8009bc0:	6832      	ldr	r2, [r6, #0]
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	42ab      	cmp	r3, r5
 8009bc6:	dc29      	bgt.n	8009c1c <_printf_common+0x9c>
 8009bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bcc:	1e13      	subs	r3, r2, #0
 8009bce:	6822      	ldr	r2, [r4, #0]
 8009bd0:	bf18      	it	ne
 8009bd2:	2301      	movne	r3, #1
 8009bd4:	0692      	lsls	r2, r2, #26
 8009bd6:	d42e      	bmi.n	8009c36 <_printf_common+0xb6>
 8009bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4638      	mov	r0, r7
 8009be0:	47c0      	blx	r8
 8009be2:	3001      	adds	r0, #1
 8009be4:	d021      	beq.n	8009c2a <_printf_common+0xaa>
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	341a      	adds	r4, #26
 8009bea:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8009bee:	f003 0306 	and.w	r3, r3, #6
 8009bf2:	6832      	ldr	r2, [r6, #0]
 8009bf4:	2600      	movs	r6, #0
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009bfc:	bf08      	it	eq
 8009bfe:	1aad      	subeq	r5, r5, r2
 8009c00:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009c04:	bf14      	ite	ne
 8009c06:	2500      	movne	r5, #0
 8009c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bfc4      	itt	gt
 8009c10:	1a9b      	subgt	r3, r3, r2
 8009c12:	18ed      	addgt	r5, r5, r3
 8009c14:	42b5      	cmp	r5, r6
 8009c16:	d11a      	bne.n	8009c4e <_printf_common+0xce>
 8009c18:	2000      	movs	r0, #0
 8009c1a:	e008      	b.n	8009c2e <_printf_common+0xae>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4652      	mov	r2, sl
 8009c20:	4649      	mov	r1, r9
 8009c22:	4638      	mov	r0, r7
 8009c24:	47c0      	blx	r8
 8009c26:	3001      	adds	r0, #1
 8009c28:	d103      	bne.n	8009c32 <_printf_common+0xb2>
 8009c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c32:	3501      	adds	r5, #1
 8009c34:	e7c3      	b.n	8009bbe <_printf_common+0x3e>
 8009c36:	18e1      	adds	r1, r4, r3
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	2030      	movs	r0, #48	; 0x30
 8009c3c:	3302      	adds	r3, #2
 8009c3e:	4422      	add	r2, r4
 8009c40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c4c:	e7c4      	b.n	8009bd8 <_printf_common+0x58>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4622      	mov	r2, r4
 8009c52:	4649      	mov	r1, r9
 8009c54:	4638      	mov	r0, r7
 8009c56:	47c0      	blx	r8
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d0e6      	beq.n	8009c2a <_printf_common+0xaa>
 8009c5c:	3601      	adds	r6, #1
 8009c5e:	e7d9      	b.n	8009c14 <_printf_common+0x94>

08009c60 <_printf_i>:
 8009c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c64:	7e0f      	ldrb	r7, [r1, #24]
 8009c66:	4691      	mov	r9, r2
 8009c68:	4680      	mov	r8, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	2f78      	cmp	r7, #120	; 0x78
 8009c6e:	469a      	mov	sl, r3
 8009c70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c76:	d807      	bhi.n	8009c88 <_printf_i+0x28>
 8009c78:	2f62      	cmp	r7, #98	; 0x62
 8009c7a:	d80a      	bhi.n	8009c92 <_printf_i+0x32>
 8009c7c:	2f00      	cmp	r7, #0
 8009c7e:	f000 80d8 	beq.w	8009e32 <_printf_i+0x1d2>
 8009c82:	2f58      	cmp	r7, #88	; 0x58
 8009c84:	f000 80a3 	beq.w	8009dce <_printf_i+0x16e>
 8009c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c90:	e03a      	b.n	8009d08 <_printf_i+0xa8>
 8009c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c96:	2b15      	cmp	r3, #21
 8009c98:	d8f6      	bhi.n	8009c88 <_printf_i+0x28>
 8009c9a:	a101      	add	r1, pc, #4	; (adr r1, 8009ca0 <_printf_i+0x40>)
 8009c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ca0:	08009cf9 	.word	0x08009cf9
 8009ca4:	08009d0d 	.word	0x08009d0d
 8009ca8:	08009c89 	.word	0x08009c89
 8009cac:	08009c89 	.word	0x08009c89
 8009cb0:	08009c89 	.word	0x08009c89
 8009cb4:	08009c89 	.word	0x08009c89
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009c89 	.word	0x08009c89
 8009cc0:	08009c89 	.word	0x08009c89
 8009cc4:	08009c89 	.word	0x08009c89
 8009cc8:	08009c89 	.word	0x08009c89
 8009ccc:	08009e19 	.word	0x08009e19
 8009cd0:	08009d3d 	.word	0x08009d3d
 8009cd4:	08009dfb 	.word	0x08009dfb
 8009cd8:	08009c89 	.word	0x08009c89
 8009cdc:	08009c89 	.word	0x08009c89
 8009ce0:	08009e3b 	.word	0x08009e3b
 8009ce4:	08009c89 	.word	0x08009c89
 8009ce8:	08009d3d 	.word	0x08009d3d
 8009cec:	08009c89 	.word	0x08009c89
 8009cf0:	08009c89 	.word	0x08009c89
 8009cf4:	08009e03 	.word	0x08009e03
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	1d1a      	adds	r2, r3, #4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	602a      	str	r2, [r5, #0]
 8009d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e0a3      	b.n	8009e54 <_printf_i+0x1f4>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	6829      	ldr	r1, [r5, #0]
 8009d10:	0606      	lsls	r6, r0, #24
 8009d12:	f101 0304 	add.w	r3, r1, #4
 8009d16:	d50a      	bpl.n	8009d2e <_printf_i+0xce>
 8009d18:	680e      	ldr	r6, [r1, #0]
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	2e00      	cmp	r6, #0
 8009d1e:	da03      	bge.n	8009d28 <_printf_i+0xc8>
 8009d20:	232d      	movs	r3, #45	; 0x2d
 8009d22:	4276      	negs	r6, r6
 8009d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d28:	485e      	ldr	r0, [pc, #376]	; (8009ea4 <_printf_i+0x244>)
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	e019      	b.n	8009d62 <_printf_i+0x102>
 8009d2e:	680e      	ldr	r6, [r1, #0]
 8009d30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	bf18      	it	ne
 8009d38:	b236      	sxthne	r6, r6
 8009d3a:	e7ef      	b.n	8009d1c <_printf_i+0xbc>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1d19      	adds	r1, r3, #4
 8009d42:	6029      	str	r1, [r5, #0]
 8009d44:	0601      	lsls	r1, r0, #24
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0xec>
 8009d48:	681e      	ldr	r6, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <_printf_i+0xf2>
 8009d4c:	0646      	lsls	r6, r0, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0xe8>
 8009d50:	881e      	ldrh	r6, [r3, #0]
 8009d52:	2f6f      	cmp	r7, #111	; 0x6f
 8009d54:	4853      	ldr	r0, [pc, #332]	; (8009ea4 <_printf_i+0x244>)
 8009d56:	bf0c      	ite	eq
 8009d58:	2308      	moveq	r3, #8
 8009d5a:	230a      	movne	r3, #10
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d62:	6865      	ldr	r5, [r4, #4]
 8009d64:	2d00      	cmp	r5, #0
 8009d66:	60a5      	str	r5, [r4, #8]
 8009d68:	bfa2      	ittt	ge
 8009d6a:	6821      	ldrge	r1, [r4, #0]
 8009d6c:	f021 0104 	bicge.w	r1, r1, #4
 8009d70:	6021      	strge	r1, [r4, #0]
 8009d72:	b90e      	cbnz	r6, 8009d78 <_printf_i+0x118>
 8009d74:	2d00      	cmp	r5, #0
 8009d76:	d04d      	beq.n	8009e14 <_printf_i+0x1b4>
 8009d78:	4615      	mov	r5, r2
 8009d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d82:	5dc7      	ldrb	r7, [r0, r7]
 8009d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d88:	4637      	mov	r7, r6
 8009d8a:	460e      	mov	r6, r1
 8009d8c:	42bb      	cmp	r3, r7
 8009d8e:	d9f4      	bls.n	8009d7a <_printf_i+0x11a>
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d10b      	bne.n	8009dac <_printf_i+0x14c>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	07de      	lsls	r6, r3, #31
 8009d98:	d508      	bpl.n	8009dac <_printf_i+0x14c>
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	6861      	ldr	r1, [r4, #4]
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	bfde      	ittt	le
 8009da2:	2330      	movle	r3, #48	; 0x30
 8009da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009da8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009dac:	1b52      	subs	r2, r2, r5
 8009dae:	6122      	str	r2, [r4, #16]
 8009db0:	464b      	mov	r3, r9
 8009db2:	aa03      	add	r2, sp, #12
 8009db4:	4621      	mov	r1, r4
 8009db6:	4640      	mov	r0, r8
 8009db8:	f8cd a000 	str.w	sl, [sp]
 8009dbc:	f7ff fee0 	bl	8009b80 <_printf_common>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d14c      	bne.n	8009e5e <_printf_i+0x1fe>
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc8:	b004      	add	sp, #16
 8009dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dce:	4835      	ldr	r0, [pc, #212]	; (8009ea4 <_printf_i+0x244>)
 8009dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dd4:	6829      	ldr	r1, [r5, #0]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ddc:	6029      	str	r1, [r5, #0]
 8009dde:	061d      	lsls	r5, r3, #24
 8009de0:	d514      	bpl.n	8009e0c <_printf_i+0x1ac>
 8009de2:	07df      	lsls	r7, r3, #31
 8009de4:	bf44      	itt	mi
 8009de6:	f043 0320 	orrmi.w	r3, r3, #32
 8009dea:	6023      	strmi	r3, [r4, #0]
 8009dec:	b91e      	cbnz	r6, 8009df6 <_printf_i+0x196>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	f023 0320 	bic.w	r3, r3, #32
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	2310      	movs	r3, #16
 8009df8:	e7b0      	b.n	8009d5c <_printf_i+0xfc>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f043 0320 	orr.w	r3, r3, #32
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	2378      	movs	r3, #120	; 0x78
 8009e04:	4828      	ldr	r0, [pc, #160]	; (8009ea8 <_printf_i+0x248>)
 8009e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e0a:	e7e3      	b.n	8009dd4 <_printf_i+0x174>
 8009e0c:	0659      	lsls	r1, r3, #25
 8009e0e:	bf48      	it	mi
 8009e10:	b2b6      	uxthmi	r6, r6
 8009e12:	e7e6      	b.n	8009de2 <_printf_i+0x182>
 8009e14:	4615      	mov	r5, r2
 8009e16:	e7bb      	b.n	8009d90 <_printf_i+0x130>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	6826      	ldr	r6, [r4, #0]
 8009e1c:	1d18      	adds	r0, r3, #4
 8009e1e:	6961      	ldr	r1, [r4, #20]
 8009e20:	6028      	str	r0, [r5, #0]
 8009e22:	0635      	lsls	r5, r6, #24
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	d501      	bpl.n	8009e2c <_printf_i+0x1cc>
 8009e28:	6019      	str	r1, [r3, #0]
 8009e2a:	e002      	b.n	8009e32 <_printf_i+0x1d2>
 8009e2c:	0670      	lsls	r0, r6, #25
 8009e2e:	d5fb      	bpl.n	8009e28 <_printf_i+0x1c8>
 8009e30:	8019      	strh	r1, [r3, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	4615      	mov	r5, r2
 8009e36:	6123      	str	r3, [r4, #16]
 8009e38:	e7ba      	b.n	8009db0 <_printf_i+0x150>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	681d      	ldr	r5, [r3, #0]
 8009e44:	6862      	ldr	r2, [r4, #4]
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 f830 	bl	8009eac <memchr>
 8009e4c:	b108      	cbz	r0, 8009e52 <_printf_i+0x1f2>
 8009e4e:	1b40      	subs	r0, r0, r5
 8009e50:	6060      	str	r0, [r4, #4]
 8009e52:	6863      	ldr	r3, [r4, #4]
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	2300      	movs	r3, #0
 8009e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e5c:	e7a8      	b.n	8009db0 <_printf_i+0x150>
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4649      	mov	r1, r9
 8009e64:	4640      	mov	r0, r8
 8009e66:	47d0      	blx	sl
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d0ab      	beq.n	8009dc4 <_printf_i+0x164>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	079b      	lsls	r3, r3, #30
 8009e70:	d413      	bmi.n	8009e9a <_printf_i+0x23a>
 8009e72:	68e0      	ldr	r0, [r4, #12]
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	4298      	cmp	r0, r3
 8009e78:	bfb8      	it	lt
 8009e7a:	4618      	movlt	r0, r3
 8009e7c:	e7a4      	b.n	8009dc8 <_printf_i+0x168>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4632      	mov	r2, r6
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	47d0      	blx	sl
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d09b      	beq.n	8009dc4 <_printf_i+0x164>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	68e3      	ldr	r3, [r4, #12]
 8009e90:	9903      	ldr	r1, [sp, #12]
 8009e92:	1a5b      	subs	r3, r3, r1
 8009e94:	42ab      	cmp	r3, r5
 8009e96:	dcf2      	bgt.n	8009e7e <_printf_i+0x21e>
 8009e98:	e7eb      	b.n	8009e72 <_printf_i+0x212>
 8009e9a:	2500      	movs	r5, #0
 8009e9c:	f104 0619 	add.w	r6, r4, #25
 8009ea0:	e7f5      	b.n	8009e8e <_printf_i+0x22e>
 8009ea2:	bf00      	nop
 8009ea4:	0800a2ed 	.word	0x0800a2ed
 8009ea8:	0800a2fe 	.word	0x0800a2fe

08009eac <memchr>:
 8009eac:	b2c9      	uxtb	r1, r1
 8009eae:	4402      	add	r2, r0
 8009eb0:	b510      	push	{r4, lr}
 8009eb2:	4290      	cmp	r0, r2
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	d101      	bne.n	8009ebc <memchr+0x10>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e003      	b.n	8009ec4 <memchr+0x18>
 8009ebc:	781c      	ldrb	r4, [r3, #0]
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	428c      	cmp	r4, r1
 8009ec2:	d1f6      	bne.n	8009eb2 <memchr+0x6>
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	bd10      	pop	{r4, pc}

08009ec8 <memcpy>:
 8009ec8:	440a      	add	r2, r1
 8009eca:	1e43      	subs	r3, r0, #1
 8009ecc:	4291      	cmp	r1, r2
 8009ece:	d100      	bne.n	8009ed2 <memcpy+0xa>
 8009ed0:	4770      	bx	lr
 8009ed2:	b510      	push	{r4, lr}
 8009ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ed8:	4291      	cmp	r1, r2
 8009eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ede:	d1f9      	bne.n	8009ed4 <memcpy+0xc>
 8009ee0:	bd10      	pop	{r4, pc}

08009ee2 <memmove>:
 8009ee2:	4288      	cmp	r0, r1
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	eb01 0402 	add.w	r4, r1, r2
 8009eea:	d902      	bls.n	8009ef2 <memmove+0x10>
 8009eec:	4284      	cmp	r4, r0
 8009eee:	4623      	mov	r3, r4
 8009ef0:	d807      	bhi.n	8009f02 <memmove+0x20>
 8009ef2:	1e43      	subs	r3, r0, #1
 8009ef4:	42a1      	cmp	r1, r4
 8009ef6:	d008      	beq.n	8009f0a <memmove+0x28>
 8009ef8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009efc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f00:	e7f8      	b.n	8009ef4 <memmove+0x12>
 8009f02:	4402      	add	r2, r0
 8009f04:	4601      	mov	r1, r0
 8009f06:	428a      	cmp	r2, r1
 8009f08:	d100      	bne.n	8009f0c <memmove+0x2a>
 8009f0a:	bd10      	pop	{r4, pc}
 8009f0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f14:	e7f7      	b.n	8009f06 <memmove+0x24>
	...

08009f18 <_free_r>:
 8009f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1a:	2900      	cmp	r1, #0
 8009f1c:	d043      	beq.n	8009fa6 <_free_r+0x8e>
 8009f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f22:	1f0c      	subs	r4, r1, #4
 8009f24:	9001      	str	r0, [sp, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bfb8      	it	lt
 8009f2a:	18e4      	addlt	r4, r4, r3
 8009f2c:	f000 f914 	bl	800a158 <__malloc_lock>
 8009f30:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <_free_r+0x94>)
 8009f32:	9801      	ldr	r0, [sp, #4]
 8009f34:	6813      	ldr	r3, [r2, #0]
 8009f36:	b933      	cbnz	r3, 8009f46 <_free_r+0x2e>
 8009f38:	6063      	str	r3, [r4, #4]
 8009f3a:	6014      	str	r4, [r2, #0]
 8009f3c:	b003      	add	sp, #12
 8009f3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f42:	f000 b90f 	b.w	800a164 <__malloc_unlock>
 8009f46:	42a3      	cmp	r3, r4
 8009f48:	d908      	bls.n	8009f5c <_free_r+0x44>
 8009f4a:	6825      	ldr	r5, [r4, #0]
 8009f4c:	1961      	adds	r1, r4, r5
 8009f4e:	428b      	cmp	r3, r1
 8009f50:	bf01      	itttt	eq
 8009f52:	6819      	ldreq	r1, [r3, #0]
 8009f54:	685b      	ldreq	r3, [r3, #4]
 8009f56:	1949      	addeq	r1, r1, r5
 8009f58:	6021      	streq	r1, [r4, #0]
 8009f5a:	e7ed      	b.n	8009f38 <_free_r+0x20>
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	b10b      	cbz	r3, 8009f66 <_free_r+0x4e>
 8009f62:	42a3      	cmp	r3, r4
 8009f64:	d9fa      	bls.n	8009f5c <_free_r+0x44>
 8009f66:	6811      	ldr	r1, [r2, #0]
 8009f68:	1855      	adds	r5, r2, r1
 8009f6a:	42a5      	cmp	r5, r4
 8009f6c:	d10b      	bne.n	8009f86 <_free_r+0x6e>
 8009f6e:	6824      	ldr	r4, [r4, #0]
 8009f70:	4421      	add	r1, r4
 8009f72:	1854      	adds	r4, r2, r1
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	42a3      	cmp	r3, r4
 8009f78:	d1e0      	bne.n	8009f3c <_free_r+0x24>
 8009f7a:	681c      	ldr	r4, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	4421      	add	r1, r4
 8009f80:	6053      	str	r3, [r2, #4]
 8009f82:	6011      	str	r1, [r2, #0]
 8009f84:	e7da      	b.n	8009f3c <_free_r+0x24>
 8009f86:	d902      	bls.n	8009f8e <_free_r+0x76>
 8009f88:	230c      	movs	r3, #12
 8009f8a:	6003      	str	r3, [r0, #0]
 8009f8c:	e7d6      	b.n	8009f3c <_free_r+0x24>
 8009f8e:	6825      	ldr	r5, [r4, #0]
 8009f90:	1961      	adds	r1, r4, r5
 8009f92:	428b      	cmp	r3, r1
 8009f94:	bf02      	ittt	eq
 8009f96:	6819      	ldreq	r1, [r3, #0]
 8009f98:	685b      	ldreq	r3, [r3, #4]
 8009f9a:	1949      	addeq	r1, r1, r5
 8009f9c:	6063      	str	r3, [r4, #4]
 8009f9e:	bf08      	it	eq
 8009fa0:	6021      	streq	r1, [r4, #0]
 8009fa2:	6054      	str	r4, [r2, #4]
 8009fa4:	e7ca      	b.n	8009f3c <_free_r+0x24>
 8009fa6:	b003      	add	sp, #12
 8009fa8:	bd30      	pop	{r4, r5, pc}
 8009faa:	bf00      	nop
 8009fac:	20000654 	.word	0x20000654

08009fb0 <sbrk_aligned>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	4e0e      	ldr	r6, [pc, #56]	; (8009fec <sbrk_aligned+0x3c>)
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	6831      	ldr	r1, [r6, #0]
 8009fba:	b911      	cbnz	r1, 8009fc2 <sbrk_aligned+0x12>
 8009fbc:	f000 f8bc 	bl	800a138 <_sbrk_r>
 8009fc0:	6030      	str	r0, [r6, #0]
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 f8b7 	bl	800a138 <_sbrk_r>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	d00a      	beq.n	8009fe4 <sbrk_aligned+0x34>
 8009fce:	1cc4      	adds	r4, r0, #3
 8009fd0:	f024 0403 	bic.w	r4, r4, #3
 8009fd4:	42a0      	cmp	r0, r4
 8009fd6:	d007      	beq.n	8009fe8 <sbrk_aligned+0x38>
 8009fd8:	1a21      	subs	r1, r4, r0
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 f8ac 	bl	800a138 <_sbrk_r>
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d101      	bne.n	8009fe8 <sbrk_aligned+0x38>
 8009fe4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009fe8:	4620      	mov	r0, r4
 8009fea:	bd70      	pop	{r4, r5, r6, pc}
 8009fec:	20000658 	.word	0x20000658

08009ff0 <_malloc_r>:
 8009ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff4:	1ccd      	adds	r5, r1, #3
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	f025 0503 	bic.w	r5, r5, #3
 8009ffc:	3508      	adds	r5, #8
 8009ffe:	2d0c      	cmp	r5, #12
 800a000:	bf38      	it	cc
 800a002:	250c      	movcc	r5, #12
 800a004:	2d00      	cmp	r5, #0
 800a006:	db01      	blt.n	800a00c <_malloc_r+0x1c>
 800a008:	42a9      	cmp	r1, r5
 800a00a:	d905      	bls.n	800a018 <_malloc_r+0x28>
 800a00c:	230c      	movs	r3, #12
 800a00e:	2600      	movs	r6, #0
 800a010:	603b      	str	r3, [r7, #0]
 800a012:	4630      	mov	r0, r6
 800a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a018:	4e2e      	ldr	r6, [pc, #184]	; (800a0d4 <_malloc_r+0xe4>)
 800a01a:	f000 f89d 	bl	800a158 <__malloc_lock>
 800a01e:	6833      	ldr	r3, [r6, #0]
 800a020:	461c      	mov	r4, r3
 800a022:	bb34      	cbnz	r4, 800a072 <_malloc_r+0x82>
 800a024:	4629      	mov	r1, r5
 800a026:	4638      	mov	r0, r7
 800a028:	f7ff ffc2 	bl	8009fb0 <sbrk_aligned>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	4604      	mov	r4, r0
 800a030:	d14d      	bne.n	800a0ce <_malloc_r+0xde>
 800a032:	6834      	ldr	r4, [r6, #0]
 800a034:	4626      	mov	r6, r4
 800a036:	2e00      	cmp	r6, #0
 800a038:	d140      	bne.n	800a0bc <_malloc_r+0xcc>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	4631      	mov	r1, r6
 800a03e:	4638      	mov	r0, r7
 800a040:	eb04 0803 	add.w	r8, r4, r3
 800a044:	f000 f878 	bl	800a138 <_sbrk_r>
 800a048:	4580      	cmp	r8, r0
 800a04a:	d13a      	bne.n	800a0c2 <_malloc_r+0xd2>
 800a04c:	6821      	ldr	r1, [r4, #0]
 800a04e:	3503      	adds	r5, #3
 800a050:	4638      	mov	r0, r7
 800a052:	1a6d      	subs	r5, r5, r1
 800a054:	f025 0503 	bic.w	r5, r5, #3
 800a058:	3508      	adds	r5, #8
 800a05a:	2d0c      	cmp	r5, #12
 800a05c:	bf38      	it	cc
 800a05e:	250c      	movcc	r5, #12
 800a060:	4629      	mov	r1, r5
 800a062:	f7ff ffa5 	bl	8009fb0 <sbrk_aligned>
 800a066:	3001      	adds	r0, #1
 800a068:	d02b      	beq.n	800a0c2 <_malloc_r+0xd2>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	442b      	add	r3, r5
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	e00e      	b.n	800a090 <_malloc_r+0xa0>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	1b52      	subs	r2, r2, r5
 800a076:	d41e      	bmi.n	800a0b6 <_malloc_r+0xc6>
 800a078:	2a0b      	cmp	r2, #11
 800a07a:	d916      	bls.n	800a0aa <_malloc_r+0xba>
 800a07c:	1961      	adds	r1, r4, r5
 800a07e:	42a3      	cmp	r3, r4
 800a080:	6025      	str	r5, [r4, #0]
 800a082:	bf18      	it	ne
 800a084:	6059      	strne	r1, [r3, #4]
 800a086:	6863      	ldr	r3, [r4, #4]
 800a088:	bf08      	it	eq
 800a08a:	6031      	streq	r1, [r6, #0]
 800a08c:	5162      	str	r2, [r4, r5]
 800a08e:	604b      	str	r3, [r1, #4]
 800a090:	f104 060b 	add.w	r6, r4, #11
 800a094:	4638      	mov	r0, r7
 800a096:	f000 f865 	bl	800a164 <__malloc_unlock>
 800a09a:	1d23      	adds	r3, r4, #4
 800a09c:	f026 0607 	bic.w	r6, r6, #7
 800a0a0:	1af2      	subs	r2, r6, r3
 800a0a2:	d0b6      	beq.n	800a012 <_malloc_r+0x22>
 800a0a4:	1b9b      	subs	r3, r3, r6
 800a0a6:	50a3      	str	r3, [r4, r2]
 800a0a8:	e7b3      	b.n	800a012 <_malloc_r+0x22>
 800a0aa:	6862      	ldr	r2, [r4, #4]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	bf0c      	ite	eq
 800a0b0:	6032      	streq	r2, [r6, #0]
 800a0b2:	605a      	strne	r2, [r3, #4]
 800a0b4:	e7ec      	b.n	800a090 <_malloc_r+0xa0>
 800a0b6:	4623      	mov	r3, r4
 800a0b8:	6864      	ldr	r4, [r4, #4]
 800a0ba:	e7b2      	b.n	800a022 <_malloc_r+0x32>
 800a0bc:	4634      	mov	r4, r6
 800a0be:	6876      	ldr	r6, [r6, #4]
 800a0c0:	e7b9      	b.n	800a036 <_malloc_r+0x46>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	f000 f84c 	bl	800a164 <__malloc_unlock>
 800a0cc:	e7a1      	b.n	800a012 <_malloc_r+0x22>
 800a0ce:	6025      	str	r5, [r4, #0]
 800a0d0:	e7de      	b.n	800a090 <_malloc_r+0xa0>
 800a0d2:	bf00      	nop
 800a0d4:	20000654 	.word	0x20000654

0800a0d8 <_realloc_r>:
 800a0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0dc:	4680      	mov	r8, r0
 800a0de:	4614      	mov	r4, r2
 800a0e0:	460e      	mov	r6, r1
 800a0e2:	b921      	cbnz	r1, 800a0ee <_realloc_r+0x16>
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	f7ff bf81 	b.w	8009ff0 <_malloc_r>
 800a0ee:	b92a      	cbnz	r2, 800a0fc <_realloc_r+0x24>
 800a0f0:	4625      	mov	r5, r4
 800a0f2:	f7ff ff11 	bl	8009f18 <_free_r>
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fc:	f000 f838 	bl	800a170 <_malloc_usable_size_r>
 800a100:	4284      	cmp	r4, r0
 800a102:	4607      	mov	r7, r0
 800a104:	d802      	bhi.n	800a10c <_realloc_r+0x34>
 800a106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a10a:	d812      	bhi.n	800a132 <_realloc_r+0x5a>
 800a10c:	4621      	mov	r1, r4
 800a10e:	4640      	mov	r0, r8
 800a110:	f7ff ff6e 	bl	8009ff0 <_malloc_r>
 800a114:	4605      	mov	r5, r0
 800a116:	2800      	cmp	r0, #0
 800a118:	d0ed      	beq.n	800a0f6 <_realloc_r+0x1e>
 800a11a:	42bc      	cmp	r4, r7
 800a11c:	4622      	mov	r2, r4
 800a11e:	4631      	mov	r1, r6
 800a120:	bf28      	it	cs
 800a122:	463a      	movcs	r2, r7
 800a124:	f7ff fed0 	bl	8009ec8 <memcpy>
 800a128:	4631      	mov	r1, r6
 800a12a:	4640      	mov	r0, r8
 800a12c:	f7ff fef4 	bl	8009f18 <_free_r>
 800a130:	e7e1      	b.n	800a0f6 <_realloc_r+0x1e>
 800a132:	4635      	mov	r5, r6
 800a134:	e7df      	b.n	800a0f6 <_realloc_r+0x1e>
	...

0800a138 <_sbrk_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	2300      	movs	r3, #0
 800a13c:	4d05      	ldr	r5, [pc, #20]	; (800a154 <_sbrk_r+0x1c>)
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	602b      	str	r3, [r5, #0]
 800a144:	f7f7 fd16 	bl	8001b74 <_sbrk>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_sbrk_r+0x1a>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_sbrk_r+0x1a>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	2000065c 	.word	0x2000065c

0800a158 <__malloc_lock>:
 800a158:	4801      	ldr	r0, [pc, #4]	; (800a160 <__malloc_lock+0x8>)
 800a15a:	f000 b811 	b.w	800a180 <__retarget_lock_acquire_recursive>
 800a15e:	bf00      	nop
 800a160:	20000660 	.word	0x20000660

0800a164 <__malloc_unlock>:
 800a164:	4801      	ldr	r0, [pc, #4]	; (800a16c <__malloc_unlock+0x8>)
 800a166:	f000 b80c 	b.w	800a182 <__retarget_lock_release_recursive>
 800a16a:	bf00      	nop
 800a16c:	20000660 	.word	0x20000660

0800a170 <_malloc_usable_size_r>:
 800a170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a174:	1f18      	subs	r0, r3, #4
 800a176:	2b00      	cmp	r3, #0
 800a178:	bfbc      	itt	lt
 800a17a:	580b      	ldrlt	r3, [r1, r0]
 800a17c:	18c0      	addlt	r0, r0, r3
 800a17e:	4770      	bx	lr

0800a180 <__retarget_lock_acquire_recursive>:
 800a180:	4770      	bx	lr

0800a182 <__retarget_lock_release_recursive>:
 800a182:	4770      	bx	lr

0800a184 <_init>:
 800a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a186:	bf00      	nop
 800a188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18a:	bc08      	pop	{r3}
 800a18c:	469e      	mov	lr, r3
 800a18e:	4770      	bx	lr

0800a190 <_fini>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	bf00      	nop
 800a194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a196:	bc08      	pop	{r3}
 800a198:	469e      	mov	lr, r3
 800a19a:	4770      	bx	lr
