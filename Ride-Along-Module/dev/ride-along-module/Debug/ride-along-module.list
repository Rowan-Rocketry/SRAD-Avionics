
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df68  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800e1a0  0800e1a0  0000f1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e414  0800e414  0000f414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e418  0800e418  0000f418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000a  20000000  0800e41c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000052c  2000000c  0800e426  0001000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000538  0800e426  00010538  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0001000a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ee76  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003c39  00000000  00000000  0002eeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b58  00000000  00000000  00032af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001502  00000000  00000000  00034648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033804  00000000  00000000  00035b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000221e9  00000000  00000000  0006934e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00147f41  00000000  00000000  0008b537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d3478  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000074b4  00000000  00000000  001d34bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000a0  00000000  00000000  001da970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800e188 	.word	0x0800e188

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800e188 	.word	0x0800e188

08000278 <f_open_append>:
#include "fileio.h"

FRESULT f_open_append(FIL* fObj, const char* path)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
	FRESULT result;

	result = f_open(fObj, path, FA_WRITE | FA_OPEN_ALWAYS);
 8000282:	2212      	movs	r2, #18
 8000284:	6839      	ldr	r1, [r7, #0]
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f00c fe82 	bl	800cf90 <f_open>
 800028c:	4603      	mov	r3, r0
 800028e:	73fb      	strb	r3, [r7, #15]
	if (result == FR_OK)
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d10d      	bne.n	80002b2 <f_open_append+0x3a>
	{
		result = f_lseek(fObj, f_size(fObj));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4619      	mov	r1, r3
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f00d fa53 	bl	800d748 <f_lseek>
 80002a2:	4603      	mov	r3, r0
 80002a4:	73fb      	strb	r3, [r7, #15]
		if (result != FR_OK)
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d002      	beq.n	80002b2 <f_open_append+0x3a>
		{
			f_close(fObj);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f00d fa21 	bl	800d6f4 <f_close>
		}
	}

	return result;
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <log_init>:
#include "logging.h"

static FIL logFile;

FRESULT log_init()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	return f_open_append(&logFile, "latest.log");
 80002c0:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <log_init+0x14>)
 80002c2:	4804      	ldr	r0, [pc, #16]	@ (80002d4 <log_init+0x18>)
 80002c4:	f7ff ffd8 	bl	8000278 <f_open_append>
 80002c8:	4603      	mov	r3, r0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	0800e1a0 	.word	0x0800e1a0
 80002d4:	20000028 	.word	0x20000028

080002d8 <log_status>:
{
	return f_close(&logFile);
}

FRESULT log_status(char* status, char* message)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af02      	add	r7, sp, #8
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	f_printf(&logFile, "%d [%s] %s\n", 	HAL_GetTick(), status, message);
 80002e2:	f001 fbf1 	bl	8001ac8 <HAL_GetTick>
 80002e6:	4602      	mov	r2, r0
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4906      	ldr	r1, [pc, #24]	@ (8000308 <log_status+0x30>)
 80002f0:	4806      	ldr	r0, [pc, #24]	@ (800030c <log_status+0x34>)
 80002f2:	f00d fca3 	bl	800dc3c <f_printf>
	return f_sync(&logFile);
 80002f6:	4805      	ldr	r0, [pc, #20]	@ (800030c <log_status+0x34>)
 80002f8:	f00d f97c 	bl	800d5f4 <f_sync>
 80002fc:	4603      	mov	r3, r0
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	0800e1ac 	.word	0x0800e1ac
 800030c:	20000028 	.word	0x20000028

08000310 <LSM6DSL_config>:

static float accelSensitivity;
static float gyroSensitivity;

void LSM6DSL_config(LSM6DSL_HandleTypeDef* LSM6DSL_initStruct)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	config = LSM6DSL_initStruct;
 8000318:	4a36      	ldr	r2, [pc, #216]	@ (80003f4 <LSM6DSL_config+0xe4>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	6013      	str	r3, [r2, #0]

	switch (config->accelFullScale)
 800031e:	4b35      	ldr	r3, [pc, #212]	@ (80003f4 <LSM6DSL_config+0xe4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	7adb      	ldrb	r3, [r3, #11]
 8000324:	2b0a      	cmp	r3, #10
 8000326:	d828      	bhi.n	800037a <LSM6DSL_config+0x6a>
 8000328:	a201      	add	r2, pc, #4	@ (adr r2, 8000330 <LSM6DSL_config+0x20>)
 800032a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032e:	bf00      	nop
 8000330:	0800035d 	.word	0x0800035d
 8000334:	0800037b 	.word	0x0800037b
 8000338:	0800037b 	.word	0x0800037b
 800033c:	0800037b 	.word	0x0800037b
 8000340:	08000375 	.word	0x08000375
 8000344:	0800037b 	.word	0x0800037b
 8000348:	0800037b 	.word	0x0800037b
 800034c:	0800037b 	.word	0x0800037b
 8000350:	08000365 	.word	0x08000365
 8000354:	0800037b 	.word	0x0800037b
 8000358:	0800036d 	.word	0x0800036d
	{
		case LSM6DSL_ACCEL_FS_PM_2:
			accelSensitivity = 0.061f;
 800035c:	4b26      	ldr	r3, [pc, #152]	@ (80003f8 <LSM6DSL_config+0xe8>)
 800035e:	4a27      	ldr	r2, [pc, #156]	@ (80003fc <LSM6DSL_config+0xec>)
 8000360:	601a      	str	r2, [r3, #0]
			break;
 8000362:	e00a      	b.n	800037a <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_4:
			accelSensitivity = 0.122f;
 8000364:	4b24      	ldr	r3, [pc, #144]	@ (80003f8 <LSM6DSL_config+0xe8>)
 8000366:	4a26      	ldr	r2, [pc, #152]	@ (8000400 <LSM6DSL_config+0xf0>)
 8000368:	601a      	str	r2, [r3, #0]
			break;
 800036a:	e006      	b.n	800037a <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_8:
			accelSensitivity = 0.244f;
 800036c:	4b22      	ldr	r3, [pc, #136]	@ (80003f8 <LSM6DSL_config+0xe8>)
 800036e:	4a25      	ldr	r2, [pc, #148]	@ (8000404 <LSM6DSL_config+0xf4>)
 8000370:	601a      	str	r2, [r3, #0]
			break;
 8000372:	e002      	b.n	800037a <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_16:
			accelSensitivity = 0.488f;
 8000374:	4b20      	ldr	r3, [pc, #128]	@ (80003f8 <LSM6DSL_config+0xe8>)
 8000376:	4a24      	ldr	r2, [pc, #144]	@ (8000408 <LSM6DSL_config+0xf8>)
 8000378:	601a      	str	r2, [r3, #0]
	}

	switch (config->gyroFullScale)
 800037a:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <LSM6DSL_config+0xe4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	7b1b      	ldrb	r3, [r3, #12]
 8000380:	2b0c      	cmp	r3, #12
 8000382:	d831      	bhi.n	80003e8 <LSM6DSL_config+0xd8>
 8000384:	a201      	add	r2, pc, #4	@ (adr r2, 800038c <LSM6DSL_config+0x7c>)
 8000386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038a:	bf00      	nop
 800038c:	080003c9 	.word	0x080003c9
 8000390:	080003e9 	.word	0x080003e9
 8000394:	080003c1 	.word	0x080003c1
 8000398:	080003e9 	.word	0x080003e9
 800039c:	080003d1 	.word	0x080003d1
 80003a0:	080003e9 	.word	0x080003e9
 80003a4:	080003e9 	.word	0x080003e9
 80003a8:	080003e9 	.word	0x080003e9
 80003ac:	080003d9 	.word	0x080003d9
 80003b0:	080003e9 	.word	0x080003e9
 80003b4:	080003e9 	.word	0x080003e9
 80003b8:	080003e9 	.word	0x080003e9
 80003bc:	080003e1 	.word	0x080003e1
	{
		case LSM6DSL_GYRO_FS_PM_125:
			gyroSensitivity = 4.375f;
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <LSM6DSL_config+0xfc>)
 80003c2:	4a13      	ldr	r2, [pc, #76]	@ (8000410 <LSM6DSL_config+0x100>)
 80003c4:	601a      	str	r2, [r3, #0]
			break;
 80003c6:	e00f      	b.n	80003e8 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_250:	
			gyroSensitivity = 8.75f;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <LSM6DSL_config+0xfc>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <LSM6DSL_config+0x104>)
 80003cc:	601a      	str	r2, [r3, #0]
			break;
 80003ce:	e00b      	b.n	80003e8 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_500:	
			gyroSensitivity = 17.50f;
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <LSM6DSL_config+0xfc>)
 80003d2:	4a11      	ldr	r2, [pc, #68]	@ (8000418 <LSM6DSL_config+0x108>)
 80003d4:	601a      	str	r2, [r3, #0]
			break;
 80003d6:	e007      	b.n	80003e8 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_1000:	
			gyroSensitivity = 35.0f;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <LSM6DSL_config+0xfc>)
 80003da:	4a10      	ldr	r2, [pc, #64]	@ (800041c <LSM6DSL_config+0x10c>)
 80003dc:	601a      	str	r2, [r3, #0]
			break;
 80003de:	e003      	b.n	80003e8 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_2000:	
			gyroSensitivity = 70.0f;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <LSM6DSL_config+0xfc>)
 80003e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000420 <LSM6DSL_config+0x110>)
 80003e4:	601a      	str	r2, [r3, #0]
	}
}
 80003e6:	e7ff      	b.n	80003e8 <LSM6DSL_config+0xd8>
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	20000258 	.word	0x20000258
 80003f8:	2000025c 	.word	0x2000025c
 80003fc:	3d79db23 	.word	0x3d79db23
 8000400:	3df9db23 	.word	0x3df9db23
 8000404:	3e79db23 	.word	0x3e79db23
 8000408:	3ef9db23 	.word	0x3ef9db23
 800040c:	20000260 	.word	0x20000260
 8000410:	408c0000 	.word	0x408c0000
 8000414:	410c0000 	.word	0x410c0000
 8000418:	418c0000 	.word	0x418c0000
 800041c:	420c0000 	.word	0x420c0000
 8000420:	428c0000 	.word	0x428c0000

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042c:	f001 fa92 	bl	8001954 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000430:	4b6d      	ldr	r3, [pc, #436]	@ (80005e8 <main+0x1c4>)
 8000432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000436:	4a6c      	ldr	r2, [pc, #432]	@ (80005e8 <main+0x1c4>)
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000440:	4b69      	ldr	r3, [pc, #420]	@ (80005e8 <main+0x1c4>)
 8000442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000446:	f003 0204 	and.w	r2, r3, #4
 800044a:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800044e:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8000458:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 800045c:	681b      	ldr	r3, [r3, #0]

  // Configure MS5607
	MS5607_HandleTypeDef ms5607Config = {0};
 800045e:	f207 438c 	addw	r3, r7, #1164	@ 0x48c
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  	ms5607Config.spi = &hspi1;
 800046c:	4b5f      	ldr	r3, [pc, #380]	@ (80005ec <main+0x1c8>)
 800046e:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
  	ms5607Config.timer = &htim16;
 8000472:	4b5f      	ldr	r3, [pc, #380]	@ (80005f0 <main+0x1cc>)
 8000474:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
  	ms5607Config.csPort = GPIOA;
 8000478:	4b5e      	ldr	r3, [pc, #376]	@ (80005f4 <main+0x1d0>)
 800047a:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
  	ms5607Config.csPin = GPIO_PIN_3;
 800047e:	2308      	movs	r3, #8
 8000480:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498
  	ms5607Config.osr = MS5607_OSR_1024;
 8000484:	2304      	movs	r3, #4
 8000486:	f887 349a 	strb.w	r3, [r7, #1178]	@ 0x49a
	MS5607_config(&ms5607Config);
 800048a:	f207 438c 	addw	r3, r7, #1164	@ 0x48c
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fb56 	bl	8000b40 <MS5607_config>

	LSM6DSL_HandleTypeDef lsm6dslConfig = {0};
 8000494:	f207 437c 	addw	r3, r7, #1148	@ 0x47c
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
	lsm6dslConfig.spi = &hspi2;
 80004a2:	4b55      	ldr	r3, [pc, #340]	@ (80005f8 <main+0x1d4>)
 80004a4:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
	lsm6dslConfig.csPort = GPIOH;
 80004a8:	4b54      	ldr	r3, [pc, #336]	@ (80005fc <main+0x1d8>)
 80004aa:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
	lsm6dslConfig.csPin = GPIO_PIN_1;
 80004ae:	2302      	movs	r3, #2
 80004b0:	f8a7 3484 	strh.w	r3, [r7, #1156]	@ 0x484
	lsm6dslConfig.outputDataRate = LSM6DSL_ODR_104_HZ;
 80004b4:	2340      	movs	r3, #64	@ 0x40
 80004b6:	f887 3486 	strb.w	r3, [r7, #1158]	@ 0x486
	lsm6dslConfig.accelFullScale = LSM6DSL_ACCEL_FS_PM_16;
 80004ba:	2304      	movs	r3, #4
 80004bc:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
	lsm6dslConfig.gyroFullScale = LSM6DSL_GYRO_FS_PM_500;
 80004c0:	2304      	movs	r3, #4
 80004c2:	f887 3488 	strb.w	r3, [r7, #1160]	@ 0x488
	LSM6DSL_config(&lsm6dslConfig);
 80004c6:	f207 437c 	addw	r3, r7, #1148	@ 0x47c
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff20 	bl	8000310 <LSM6DSL_config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f8a6 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa6e 	bl	80009b4 <MX_GPIO_Init>
  MX_TIM16_Init();
 80004d8:	f000 fa40 	bl	800095c <MX_TIM16_Init>
  MX_SPI1_Init();
 80004dc:	f000 f962 	bl	80007a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004e0:	f000 f9ce 	bl	8000880 <MX_SPI2_Init>
  //MX_SDMMC1_SD_Init();
  MX_ADC1_Init();
 80004e4:	f000 f8ee 	bl	80006c4 <MX_ADC1_Init>

  	//MS5607_init();
	//LSM6DSL_init();

	//MS5607_readUncompPres();
  	HAL_Delay(1200000);
 80004e8:	4845      	ldr	r0, [pc, #276]	@ (8000600 <main+0x1dc>)
 80004ea:	f001 faf9 	bl	8001ae0 <HAL_Delay>
  	HAL_GPIO_WritePin(VALVE_FIRE_GPIO_Port, VALVE_FIRE_Pin, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f4:	4843      	ldr	r0, [pc, #268]	@ (8000604 <main+0x1e0>)
 80004f6:	f003 fadb 	bl	8003ab0 <HAL_GPIO_WritePin>
  	HAL_Delay(5000);
 80004fa:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004fe:	f001 faef 	bl	8001ae0 <HAL_Delay>
  	HAL_GPIO_WritePin(VALVE_FIRE_GPIO_Port, VALVE_FIRE_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	483e      	ldr	r0, [pc, #248]	@ (8000604 <main+0x1e0>)
 800050a:	f003 fad1 	bl	8003ab0 <HAL_GPIO_WritePin>

	int16_t accel[3];
	int16_t gyro[3];
	
	// Test MicroSD card write
	MX_FATFS_Init();
 800050e:	f00a fe3b 	bl	800b188 <MX_FATFS_Init>

	FRESULT res;
	FATFS fs;

	res = f_mount(&fs, "", 1);
 8000512:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8000516:	2201      	movs	r2, #1
 8000518:	493b      	ldr	r1, [pc, #236]	@ (8000608 <main+0x1e4>)
 800051a:	4618      	mov	r0, r3
 800051c:	f00c fcf2 	bl	800cf04 <f_mount>
 8000520:	4603      	mov	r3, r0
 8000522:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
	if (res != FR_OK)
 8000526:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <main+0x10e>
	{
		Error_Handler();
 800052e:	f000 fb01 	bl	8000b34 <Error_Handler>
	}
	res = log_init();
 8000532:	f7ff fec3 	bl	80002bc <log_init>
 8000536:	4603      	mov	r3, r0
 8000538:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf

	res = log_status("INFO", "Mounted successfully.");
 800053c:	4933      	ldr	r1, [pc, #204]	@ (800060c <main+0x1e8>)
 800053e:	4834      	ldr	r0, [pc, #208]	@ (8000610 <main+0x1ec>)
 8000540:	f7ff feca 	bl	80002d8 <log_status>
 8000544:	4603      	mov	r3, r0
 8000546:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
	if (res != FR_OK)
 800054a:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <main+0x132>
	{
		Error_Handler();
 8000552:	f000 faef 	bl	8000b34 <Error_Handler>
	}
	
	MS5607_init();
 8000556:	f000 fb49 	bl	8000bec <MS5607_init>
	//LSM6DSL_init();

	//uint8_t whoami = LSM6DSL_readRegister(LSM6DSL_CTRL2_G);

	FIL csv;
	res = f_open_append(&csv, "flight0.csv");
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	492d      	ldr	r1, [pc, #180]	@ (8000614 <main+0x1f0>)
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe89 	bl	8000278 <f_open_append>
 8000566:	4603      	mov	r3, r0
 8000568:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
	if (res != FR_OK)
 800056c:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <main+0x154>
	{
		Error_Handler();
 8000574:	f000 fade 	bl	8000b34 <Error_Handler>
	}

	f_printf(&csv, "Tick, Pressure, AccelX, AccelY, AccelZ, GyroX, GyroY, GyroZ\n");
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4926      	ldr	r1, [pc, #152]	@ (8000618 <main+0x1f4>)
 800057e:	4618      	mov	r0, r3
 8000580:	f00d fb5c 	bl	800dc3c <f_printf>
	res = f_sync(&csv);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f00d f833 	bl	800d5f4 <f_sync>
 800058e:	4603      	mov	r3, r0
 8000590:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
	if (res != FR_OK)
 8000594:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <main+0x17c>
	{
		Error_Handler();
 800059c:	f000 faca 	bl	8000b34 <Error_Handler>
	}

	MS5607_readUncompPres();
 80005a0:	f000 fe0e 	bl	80011c0 <MS5607_readUncompPres>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	//writePressure();
	if (MS5607_getState() == MS5607_IDLE)
 80005a4:	f000 fec6 	bl	8001334 <MS5607_getState>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	d1fa      	bne.n	80005a4 <main+0x180>
	{
		// Compensate digital reading
		MS5607_CompVal compVals = MS5607_getCompValues();
 80005ae:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80005b2:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fb86 	bl	8000cc8 <MS5607_getCompValues>

		//LSM6DSL_getAccel(accel);
		//LSM6DSL_getGyro(gyro);
		
		f_printf(&csv, "%d, %d\n", HAL_GetTick(), compVals.pres); 
 80005bc:	f001 fa84 	bl	8001ac8 <HAL_GetTick>
 80005c0:	4602      	mov	r2, r0
 80005c2:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80005c6:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f107 000c 	add.w	r0, r7, #12
 80005d0:	4912      	ldr	r1, [pc, #72]	@ (800061c <main+0x1f8>)
 80005d2:	f00d fb33 	bl	800dc3c <f_printf>
		f_sync(&csv);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4618      	mov	r0, r3
 80005dc:	f00d f80a 	bl	800d5f4 <f_sync>


		// Measure again
		MS5607_readUncompPres();
 80005e0:	f000 fdee 	bl	80011c0 <MS5607_readUncompPres>
	if (MS5607_getState() == MS5607_IDLE)
 80005e4:	e7de      	b.n	80005a4 <main+0x180>
 80005e6:	bf00      	nop
 80005e8:	46020c00 	.word	0x46020c00
 80005ec:	2000036c 	.word	0x2000036c
 80005f0:	2000048c 	.word	0x2000048c
 80005f4:	42020000 	.word	0x42020000
 80005f8:	200003fc 	.word	0x200003fc
 80005fc:	42021c00 	.word	0x42021c00
 8000600:	00124f80 	.word	0x00124f80
 8000604:	42020800 	.word	0x42020800
 8000608:	0800e1b8 	.word	0x0800e1b8
 800060c:	0800e1bc 	.word	0x0800e1bc
 8000610:	0800e1d4 	.word	0x0800e1d4
 8000614:	0800e1dc 	.word	0x0800e1dc
 8000618:	0800e1e8 	.word	0x0800e1e8
 800061c:	0800e228 	.word	0x0800e228

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09e      	sub	sp, #120	@ 0x78
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2260      	movs	r2, #96	@ 0x60
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00d fd7d 	bl	800e12e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
 8000642:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000644:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000648:	f003 fa4a 	bl	8003ae0 <HAL_PWREx_ControlVoltageScaling>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000652:	f000 fa6f 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000656:	2332      	movs	r3, #50	@ 0x32
 8000658:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2310      	movs	r3, #16
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000672:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000678:	2300      	movs	r3, #0
 800067a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	4618      	mov	r0, r3
 8000682:	f003 fac9 	bl	8003c18 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800068c:	f000 fa52 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	231f      	movs	r3, #31
 8000692:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 f98f 	bl	80049d0 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b8:	f000 fa3c 	bl	8000b34 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3778      	adds	r7, #120	@ 0x78
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2220      	movs	r2, #32
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f00d fd2c 	bl	800e12e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d6:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <MX_ADC1_Init+0xd4>)
 80006d8:	4a30      	ldr	r2, [pc, #192]	@ (800079c <MX_ADC1_Init+0xd8>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000798 <MX_ADC1_Init+0xd4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_ADC1_Init+0xd4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <MX_ADC1_Init+0xd4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_ADC1_Init+0xd4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <MX_ADC1_Init+0xd4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fa:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC1_Init+0xd4>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000702:	2200      	movs	r2, #0
 8000704:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000710:	2201      	movs	r2, #1
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_ADC1_Init+0xd4>)
 800071e:	2200      	movs	r2, #0
 8000720:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000724:	2200      	movs	r2, #0
 8000726:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_ADC1_Init+0xd4>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000732:	2200      	movs	r2, #0
 8000734:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_ADC1_Init+0xd4>)
 800073e:	2200      	movs	r2, #0
 8000740:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000744:	2200      	movs	r2, #0
 8000746:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_ADC1_Init+0xd4>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000750:	4811      	ldr	r0, [pc, #68]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000752:	f001 fce7 	bl	8002124 <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800075c:	f000 f9ea 	bl	8000b34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_ADC1_Init+0xdc>)
 8000762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000764:	2306      	movs	r3, #6
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000770:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000772:	2304      	movs	r3, #4
 8000774:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_ADC1_Init+0xd4>)
 8000780:	f001 ff9a 	bl	80026b8 <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800078a:	f000 f9d3 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000264 	.word	0x20000264
 800079c:	42028000 	.word	0x42028000
 80007a0:	3e008000 	.word	0x3e008000

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007b6:	4a31      	ldr	r2, [pc, #196]	@ (800087c <MX_SPI1_Init+0xd8>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_SPI1_Init+0xd4>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000802:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_SPI1_Init+0xd4>)
 800080a:	2200      	movs	r2, #0
 800080c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000810:	2200      	movs	r2, #0
 8000812:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000816:	2200      	movs	r2, #0
 8000818:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_SPI1_Init+0xd4>)
 800081c:	2200      	movs	r2, #0
 800081e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000822:	2200      	movs	r2, #0
 8000824:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000828:	2200      	movs	r2, #0
 800082a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_SPI1_Init+0xd4>)
 800082e:	2200      	movs	r2, #0
 8000830:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000834:	2200      	movs	r2, #0
 8000836:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_SPI1_Init+0xd4>)
 800083a:	2200      	movs	r2, #0
 800083c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000840:	f008 fc06 	bl	8009050 <HAL_SPI_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800084a:	f000 f973 	bl	8000b34 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000852:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000856:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_SPI1_Init+0xd4>)
 8000862:	f009 faa2 	bl	8009daa <HAL_SPIEx_SetConfigAutonomousMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 800086c:	f000 f962 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000036c 	.word	0x2000036c
 800087c:	40013000 	.word	0x40013000

08000880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <MX_SPI2_Init+0xd4>)
 8000892:	4a31      	ldr	r2, [pc, #196]	@ (8000958 <MX_SPI2_Init+0xd8>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b2f      	ldr	r3, [pc, #188]	@ (8000954 <MX_SPI2_Init+0xd4>)
 8000898:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800089c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008b6:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008be:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ca:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008d8:	2207      	movs	r2, #7
 80008da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_SPI2_Init+0xd4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_SPI2_Init+0xd4>)
 8000904:	2200      	movs	r2, #0
 8000906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_SPI2_Init+0xd4>)
 800090a:	2200      	movs	r2, #0
 800090c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_SPI2_Init+0xd4>)
 8000910:	2200      	movs	r2, #0
 8000912:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_SPI2_Init+0xd4>)
 8000916:	2200      	movs	r2, #0
 8000918:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <MX_SPI2_Init+0xd4>)
 800091c:	f008 fb98 	bl	8009050 <HAL_SPI_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000926:	f000 f905 	bl	8000b34 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800092e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000932:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_SPI2_Init+0xd4>)
 800093e:	f009 fa34 	bl	8009daa <HAL_SPIEx_SetConfigAutonomousMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000948:	f000 f8f4 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200003fc 	.word	0x200003fc
 8000958:	40003800 	.word	0x40003800

0800095c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	uint16_t ms5607MeasurementDelay = MS5607_getMeasurementDelay();
 8000962:	f000 fcdb 	bl	800131c <MS5607_getMeasurementDelay>
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_TIM16_Init+0x50>)
 800096c:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <MX_TIM16_Init+0x54>)
 800096e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40-1;
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_TIM16_Init+0x50>)
 8000972:	2227      	movs	r2, #39	@ 0x27
 8000974:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <MX_TIM16_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = ms5607MeasurementDelay;
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	4a0b      	ldr	r2, [pc, #44]	@ (80009ac <MX_TIM16_Init+0x50>)
 8000980:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <MX_TIM16_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_TIM16_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <MX_TIM16_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_TIM16_Init+0x50>)
 8000996:	f009 fa49 	bl	8009e2c <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM16_Init+0x48>
  {
    Error_Handler();
 80009a0:	f000 f8c8 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000048c 	.word	0x2000048c
 80009b0:	40014400 	.word	0x40014400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b4b      	ldr	r3, [pc, #300]	@ (8000af8 <MX_GPIO_Init+0x144>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	4a49      	ldr	r2, [pc, #292]	@ (8000af8 <MX_GPIO_Init+0x144>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009da:	4b47      	ldr	r3, [pc, #284]	@ (8000af8 <MX_GPIO_Init+0x144>)
 80009dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e8:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <MX_GPIO_Init+0x144>)
 80009ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ee:	4a42      	ldr	r2, [pc, #264]	@ (8000af8 <MX_GPIO_Init+0x144>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009f8:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <MX_GPIO_Init+0x144>)
 80009fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a16:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b34      	ldr	r3, [pc, #208]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a2a:	4a33      	ldr	r2, [pc, #204]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a34:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a48:	4a2b      	ldr	r2, [pc, #172]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a52:	4b29      	ldr	r3, [pc, #164]	@ (8000af8 <MX_GPIO_Init+0x144>)
 8000a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VALVE_FIRE_GPIO_Port, VALVE_FIRE_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a66:	4825      	ldr	r0, [pc, #148]	@ (8000afc <MX_GPIO_Init+0x148>)
 8000a68:	f003 f822 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PYRO1_FIRE_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2103      	movs	r1, #3
 8000a70:	4823      	ldr	r0, [pc, #140]	@ (8000b00 <MX_GPIO_Init+0x14c>)
 8000a72:	f003 f81d 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PYRO2_FIRE_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210c      	movs	r1, #12
 8000a7a:	4822      	ldr	r0, [pc, #136]	@ (8000b04 <MX_GPIO_Init+0x150>)
 8000a7c:	f003 f818 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VALVE_FIRE_Pin */
  GPIO_InitStruct.Pin = VALVE_FIRE_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VALVE_FIRE_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_GPIO_Init+0x148>)
 8000a9a:	f002 fe31 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO1_FIRE_Pin PH1 */
  GPIO_InitStruct.Pin = PYRO1_FIRE_Pin|GPIO_PIN_1;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4812      	ldr	r0, [pc, #72]	@ (8000b00 <MX_GPIO_Init+0x14c>)
 8000ab6:	f002 fe23 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8000aba:	2309      	movs	r3, #9
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_GPIO_Init+0x154>)
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	480b      	ldr	r0, [pc, #44]	@ (8000afc <MX_GPIO_Init+0x148>)
 8000ace:	f002 fe17 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_FIRE_Pin PA3 */
  GPIO_InitStruct.Pin = PYRO2_FIRE_Pin|GPIO_PIN_3;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <MX_GPIO_Init+0x150>)
 8000aea:	f002 fe09 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	@ 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	46020c00 	.word	0x46020c00
 8000afc:	42020800 	.word	0x42020800
 8000b00:	42021c00 	.word	0x42021c00
 8000b04:	42020000 	.word	0x42020000
 8000b08:	10110000 	.word	0x10110000

08000b0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d104      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b1e:	f009 fa7d 	bl	800a01c <HAL_TIM_Base_Stop_IT>
		MS5607_TimerCallback();
 8000b22:	f000 fbd9 	bl	80012d8 <MS5607_TimerCallback>
		//pressure = readMS5607ADC();
	}
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000048c 	.word	0x2000048c

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <MS5607_config>:
static uint16_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_config(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	config = MS5607_initStruct;
 8000b48:	4a24      	ldr	r2, [pc, #144]	@ (8000bdc <MS5607_config+0x9c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <MS5607_config+0x9c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	7b9b      	ldrb	r3, [r3, #14]
 8000b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MS5607_config+0xa0>)
 8000b5c:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <MS5607_config+0x9c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	7b9b      	ldrb	r3, [r3, #14]
 8000b64:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <MS5607_config+0xa4>)
 8000b6c:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MS5607_config+0x9c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	7b9b      	ldrb	r3, [r3, #14]
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d82b      	bhi.n	8000bd0 <MS5607_config+0x90>
 8000b78:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <MS5607_config+0x40>)
 8000b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7e:	bf00      	nop
 8000b80:	08000ba5 	.word	0x08000ba5
 8000b84:	08000bd1 	.word	0x08000bd1
 8000b88:	08000bad 	.word	0x08000bad
 8000b8c:	08000bd1 	.word	0x08000bd1
 8000b90:	08000bb5 	.word	0x08000bb5
 8000b94:	08000bd1 	.word	0x08000bd1
 8000b98:	08000bbd 	.word	0x08000bbd
 8000b9c:	08000bd1 	.word	0x08000bd1
 8000ba0:	08000bc7 	.word	0x08000bc7
	{
		case MS5607_OSR_256:
			measurementDelay = 50;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MS5607_config+0xa8>)
 8000ba6:	2232      	movs	r2, #50	@ 0x32
 8000ba8:	801a      	strh	r2, [r3, #0]
			break;
 8000baa:	e011      	b.n	8000bd0 <MS5607_config+0x90>
		case MS5607_OSR_512:
			measurementDelay = 110;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MS5607_config+0xa8>)
 8000bae:	226e      	movs	r2, #110	@ 0x6e
 8000bb0:	801a      	strh	r2, [r3, #0]
			break;
 8000bb2:	e00d      	b.n	8000bd0 <MS5607_config+0x90>
		case MS5607_OSR_1024:
			measurementDelay = 210;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MS5607_config+0xa8>)
 8000bb6:	22d2      	movs	r2, #210	@ 0xd2
 8000bb8:	801a      	strh	r2, [r3, #0]
			break;
 8000bba:	e009      	b.n	8000bd0 <MS5607_config+0x90>
		case MS5607_OSR_2048:
			measurementDelay = 410;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MS5607_config+0xa8>)
 8000bbe:	f44f 72cd 	mov.w	r2, #410	@ 0x19a
 8000bc2:	801a      	strh	r2, [r3, #0]
			break;
 8000bc4:	e004      	b.n	8000bd0 <MS5607_config+0x90>
		case MS5607_OSR_4096:
			measurementDelay = 822;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MS5607_config+0xa8>)
 8000bc8:	f240 3236 	movw	r2, #822	@ 0x336
 8000bcc:	801a      	strh	r2, [r3, #0]
	}

}
 8000bce:	e7ff      	b.n	8000bd0 <MS5607_config+0x90>
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	200004d8 	.word	0x200004d8
 8000be0:	200004f4 	.word	0x200004f4
 8000be4:	200004f5 	.word	0x200004f5
 8000be8:	200004f2 	.word	0x200004f2

08000bec <MS5607_init>:

void MS5607_init()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	MS5607_disable();
 8000bf0:	f000 fb62 	bl	80012b8 <MS5607_disable>

	MS5607_enable();
 8000bf4:	f000 fb50 	bl	8001298 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_RESET, 1, 100);
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MS5607_init+0x3c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	2364      	movs	r3, #100	@ 0x64
 8000c00:	2201      	movs	r2, #1
 8000c02:	490a      	ldr	r1, [pc, #40]	@ (8000c2c <MS5607_init+0x40>)
 8000c04:	f008 fb3a 	bl	800927c <HAL_SPI_Transmit>
	MS5607_disable();
 8000c08:	f000 fb56 	bl	80012b8 <MS5607_disable>

	HAL_Delay(3);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 ff67 	bl	8001ae0 <HAL_Delay>

	MS5607_readProm();
 8000c12:	f000 f813 	bl	8000c3c <MS5607_readProm>

	state = MS5607_STARTUP;
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MS5607_init+0x44>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]

	log_status("INFO", "Initialized MS5607");
 8000c1c:	4905      	ldr	r1, [pc, #20]	@ (8000c34 <MS5607_init+0x48>)
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <MS5607_init+0x4c>)
 8000c20:	f7ff fb5a 	bl	80002d8 <log_status>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200004d8 	.word	0x200004d8
 8000c2c:	0800e2a5 	.word	0x0800e2a5
 8000c30:	200004f0 	.word	0x200004f0
 8000c34:	0800e244 	.word	0x0800e244
 8000c38:	0800e258 	.word	0x0800e258

08000c3c <MS5607_readProm>:

void MS5607_readProm()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
	uint8_t cmdReadPromAddress;
	uint16_t* promDataPtr = (uint16_t*)&promData;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MS5607_readProm+0x84>)
 8000c44:	60bb      	str	r3, [r7, #8]
	uint8_t responseBuffer[2];

	// Loop over PROM registers C1 through C6
	for (uint8_t promAddr = 1; promAddr <= 6; ++promAddr)
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e030      	b.n	8000cae <MS5607_readProm+0x72>
	{
		// Prom Read Sequence: 1 0 1 0 Ad2 Ad1 Ad0 0
		cmdReadPromAddress = MS5607_READ_PROM | (promAddr<<1);
 8000c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	71fb      	strb	r3, [r7, #7]
		
		MS5607_enable();
 8000c5e:	f000 fb1b 	bl	8001298 <MS5607_enable>
		HAL_SPI_Transmit(config->spi, &cmdReadPromAddress, 1, 100);
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MS5607_readProm+0x88>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	1df9      	adds	r1, r7, #7
 8000c6a:	2364      	movs	r3, #100	@ 0x64
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f008 fb05 	bl	800927c <HAL_SPI_Transmit>
		HAL_SPI_Receive(config->spi, (uint8_t*)responseBuffer, 2, 100);
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MS5607_readProm+0x88>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	2364      	movs	r3, #100	@ 0x64
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	f008 fd11 	bl	80096a4 <HAL_SPI_Receive>
		MS5607_disable();
 8000c82:	f000 fb19 	bl	80012b8 <MS5607_disable>
		

		// Load response into promData struct
		promDataPtr[promAddr-1] = ((uint16_t)responseBuffer[0]<<8) | (uint16_t)responseBuffer[1];
 8000c86:	793b      	ldrb	r3, [r7, #4]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b219      	sxth	r1, r3
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b28a      	uxth	r2, r1
 8000ca6:	801a      	strh	r2, [r3, #0]
	for (uint8_t promAddr = 1; promAddr <= 6; ++promAddr)
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	3301      	adds	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d9cb      	bls.n	8000c4c <MS5607_readProm+0x10>
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200004dc 	.word	0x200004dc
 8000cc4:	200004d8 	.word	0x200004d8

08000cc8 <MS5607_getCompValues>:

MS5607_CompVal MS5607_getCompValues()
{
 8000cc8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ccc:	b0d5      	sub	sp, #340	@ 0x154
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	MS5607_CompVal compVals;

	uint32_t digTemp = rawValues.temp;
 8000cd4:	4bb4      	ldr	r3, [pc, #720]	@ (8000fa8 <MS5607_getCompValues+0x2e0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	uint32_t digPres = rawValues.pres;
 8000cdc:	4bb2      	ldr	r3, [pc, #712]	@ (8000fa8 <MS5607_getCompValues+0x2e0>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	// dT = D2 - TREF
	int32_t deltaTemp = digTemp - ((int32_t)promData.tRef << 8);
 8000ce4:	4bb1      	ldr	r3, [pc, #708]	@ (8000fac <MS5607_getCompValues+0x2e4>)
 8000ce6:	891b      	ldrh	r3, [r3, #8]
 8000ce8:	021a      	lsls	r2, r3, #8
 8000cea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	
	// TEMP = 20°C + dT*TEMPSENS
	int32_t temp1 = 2000 + deltaTemp*((int32_t)promData.tempSens << 23);
 8000cf4:	4bad      	ldr	r3, [pc, #692]	@ (8000fac <MS5607_getCompValues+0x2e4>)
 8000cf6:	895b      	ldrh	r3, [r3, #10]
 8000cf8:	05da      	lsls	r2, r3, #23
 8000cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000d06:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

	// OFF = OFFT1 + TCO*dT
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8000d0a:	4ba8      	ldr	r3, [pc, #672]	@ (8000fac <MS5607_getCompValues+0x2e4>)
 8000d0c:	885b      	ldrh	r3, [r3, #2]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	469a      	mov	sl, r3
 8000d14:	4693      	mov	fp, r2
 8000d16:	ea4f 33da 	mov.w	r3, sl, lsr #15
 8000d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000d1e:	ea4f 434a 	mov.w	r3, sl, lsl #17
 8000d22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				   + (((int64_t)promData.tco*deltaTemp) >> 6);
 8000d26:	4ba1      	ldr	r3, [pc, #644]	@ (8000fac <MS5607_getCompValues+0x2e4>)
 8000d28:	88db      	ldrh	r3, [r3, #6]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d32:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d3a:	17da      	asrs	r2, r3, #31
 8000d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000d40:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8000d44:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000d48:	460b      	mov	r3, r1
 8000d4a:	e9d7 ab3e 	ldrd	sl, fp, [r7, #248]	@ 0xf8
 8000d4e:	4652      	mov	r2, sl
 8000d50:	fb02 f203 	mul.w	r2, r2, r3
 8000d54:	e9c7 ab3e 	strd	sl, fp, [r7, #248]	@ 0xf8
 8000d58:	465b      	mov	r3, fp
 8000d5a:	4682      	mov	sl, r0
 8000d5c:	468b      	mov	fp, r1
 8000d5e:	4651      	mov	r1, sl
 8000d60:	fb01 f303 	mul.w	r3, r1, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	4652      	mov	r2, sl
 8000d68:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8000d6c:	fba2 4501 	umull	r4, r5, r2, r1
 8000d70:	442b      	add	r3, r5
 8000d72:	461d      	mov	r5, r3
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	09a2      	lsrs	r2, r4, #6
 8000d7e:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000d82:	11ab      	asrs	r3, r5, #6
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8000d84:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8000d88:	4621      	mov	r1, r4
 8000d8a:	1889      	adds	r1, r1, r2
 8000d8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8000d8e:	4629      	mov	r1, r5
 8000d90:	eb43 0101 	adc.w	r1, r3, r1
 8000d94:	6379      	str	r1, [r7, #52]	@ 0x34
 8000d96:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000d9a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
	
	// SENS = SENST1 + TCS* dT
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 8000d9e:	4b83      	ldr	r3, [pc, #524]	@ (8000fac <MS5607_getCompValues+0x2e4>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000daa:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000dae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8000db2:	460b      	mov	r3, r1
 8000db4:	0c1b      	lsrs	r3, r3, #16
 8000db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000dba:	460b      	mov	r3, r1
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						+ (((int64_t)promData.tcs*deltaTemp) >> 7);
 8000dc2:	4b7a      	ldr	r3, [pc, #488]	@ (8000fac <MS5607_getCompValues+0x2e4>)
 8000dc4:	889b      	ldrh	r3, [r3, #4]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000dce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000dd6:	17da      	asrs	r2, r3, #31
 8000dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ddc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000de0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8000de4:	462b      	mov	r3, r5
 8000de6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8000dea:	4652      	mov	r2, sl
 8000dec:	fb02 f203 	mul.w	r2, r2, r3
 8000df0:	465b      	mov	r3, fp
 8000df2:	4621      	mov	r1, r4
 8000df4:	fb01 f303 	mul.w	r3, r1, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	4651      	mov	r1, sl
 8000dfe:	fba2 1201 	umull	r1, r2, r2, r1
 8000e02:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000e06:	460a      	mov	r2, r1
 8000e08:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000e0c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000e10:	4413      	add	r3, r2
 8000e12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000e22:	4621      	mov	r1, r4
 8000e24:	09ca      	lsrs	r2, r1, #7
 8000e26:	4629      	mov	r1, r5
 8000e28:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	11cb      	asrs	r3, r1, #7
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 8000e30:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8000e34:	4621      	mov	r1, r4
 8000e36:	1889      	adds	r1, r1, r2
 8000e38:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	eb43 0101 	adc.w	r1, r3, r1
 8000e40:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000e42:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e46:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

	// Second order compensation
	if (temp1 < 2000)
 8000e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e4e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e52:	f280 815b 	bge.w	800110c <MS5607_getCompValues+0x444>
	{
		int32_t temp2 = (deltaTemp*deltaTemp) >> 31;
 8000e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e5a:	fb03 f303 	mul.w	r3, r3, r3
 8000e5e:	17db      	asrs	r3, r3, #31
 8000e60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		int32_t temp2000 = temp1 - 2000;
 8000e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000e68:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8000e6c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		int64_t offset2 = 61*((int64_t)temp2000 * (int64_t)temp2000) >> 4;
 8000e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e74:	17da      	asrs	r2, r3, #31
 8000e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8000e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e82:	17da      	asrs	r2, r3, #31
 8000e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000e88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000e8c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000e90:	462b      	mov	r3, r5
 8000e92:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	@ 0x88
 8000e96:	4652      	mov	r2, sl
 8000e98:	fb02 f203 	mul.w	r2, r2, r3
 8000e9c:	465b      	mov	r3, fp
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	fb01 f303 	mul.w	r3, r1, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4622      	mov	r2, r4
 8000ea8:	4651      	mov	r1, sl
 8000eaa:	fba2 1201 	umull	r1, r2, r2, r1
 8000eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8000eb2:	460a      	mov	r2, r1
 8000eb4:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8000eb8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	462b      	mov	r3, r5
 8000eca:	f04f 0000 	mov.w	r0, #0
 8000ece:	f04f 0100 	mov.w	r1, #0
 8000ed2:	0119      	lsls	r1, r3, #4
 8000ed4:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000ed8:	0110      	lsls	r0, r2, #4
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4621      	mov	r1, r4
 8000ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8000ef6:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8000efa:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8000efe:	4690      	mov	r8, r2
 8000f00:	4699      	mov	r9, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	eb18 0303 	adds.w	r3, r8, r3
 8000f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000f0c:	462b      	mov	r3, r5
 8000f0e:	eb49 0303 	adc.w	r3, r9, r3
 8000f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000f22:	4621      	mov	r1, r4
 8000f24:	090a      	lsrs	r2, r1, #4
 8000f26:	4629      	mov	r1, r5
 8000f28:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	110b      	asrs	r3, r1, #4
 8000f30:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		int64_t sense2 = ((int64_t)temp2000 * (int64_t)temp2000) << 1;
 8000f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f38:	17da      	asrs	r2, r3, #31
 8000f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000f3c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f42:	17da      	asrs	r2, r3, #31
 8000f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f46:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f48:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000f4c:	462b      	mov	r3, r5
 8000f4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8000f52:	4642      	mov	r2, r8
 8000f54:	fb02 f203 	mul.w	r2, r2, r3
 8000f58:	464b      	mov	r3, r9
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	4622      	mov	r2, r4
 8000f64:	4641      	mov	r1, r8
 8000f66:	fba2 1201 	umull	r1, r2, r2, r1
 8000f6a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000f6e:	460a      	mov	r2, r1
 8000f70:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000f74:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000f78:	4413      	add	r3, r2
 8000f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000f7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8000f82:	460b      	mov	r3, r1
 8000f84:	18db      	adds	r3, r3, r3
 8000f86:	623b      	str	r3, [r7, #32]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	eb42 0303 	adc.w	r3, r2, r3
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f90:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f94:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128

		if (temp1 < -1500)
 8000f98:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <MS5607_getCompValues+0x2e8>)
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	f280 8093 	bge.w	80010ca <MS5607_getCompValues+0x402>
 8000fa4:	e006      	b.n	8000fb4 <MS5607_getCompValues+0x2ec>
 8000fa6:	bf00      	nop
 8000fa8:	200004e8 	.word	0x200004e8
 8000fac:	200004dc 	.word	0x200004dc
 8000fb0:	fffffa24 	.word	0xfffffa24
		{
			int32_t temp1500 = temp1 + 1500;
 8000fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000fb8:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000fbc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
			offset2 += 15 * ((int64_t)temp1500 * (int64_t)temp1500);
 8000fc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000fc4:	17da      	asrs	r2, r3, #31
 8000fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000fc8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000fca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000fce:	17da      	asrs	r2, r3, #31
 8000fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8000fd4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000fd8:	462b      	mov	r3, r5
 8000fda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8000fde:	4642      	mov	r2, r8
 8000fe0:	fb02 f203 	mul.w	r2, r2, r3
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	4622      	mov	r2, r4
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	fba2 1201 	umull	r1, r2, r2, r1
 8000ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001000:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001004:	4413      	add	r3, r2
 8001006:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800100a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800100e:	4622      	mov	r2, r4
 8001010:	462b      	mov	r3, r5
 8001012:	f04f 0000 	mov.w	r0, #0
 8001016:	f04f 0100 	mov.w	r1, #0
 800101a:	0119      	lsls	r1, r3, #4
 800101c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001020:	0110      	lsls	r0, r2, #4
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4621      	mov	r1, r4
 8001028:	1a51      	subs	r1, r2, r1
 800102a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800102c:	4629      	mov	r1, r5
 800102e:	eb63 0301 	sbc.w	r3, r3, r1
 8001032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001034:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001038:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800103c:	4621      	mov	r1, r4
 800103e:	1851      	adds	r1, r2, r1
 8001040:	61b9      	str	r1, [r7, #24]
 8001042:	4629      	mov	r1, r5
 8001044:	eb43 0101 	adc.w	r1, r3, r1
 8001048:	61f9      	str	r1, [r7, #28]
 800104a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800104e:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
			sense2 += ((int64_t)temp1500 * (int64_t)temp1500) << 3;
 8001052:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001056:	17da      	asrs	r2, r3, #31
 8001058:	653b      	str	r3, [r7, #80]	@ 0x50
 800105a:	657a      	str	r2, [r7, #84]	@ 0x54
 800105c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001060:	17da      	asrs	r2, r3, #31
 8001062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001064:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001066:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800106a:	462b      	mov	r3, r5
 800106c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001070:	4642      	mov	r2, r8
 8001072:	fb02 f203 	mul.w	r2, r2, r3
 8001076:	464b      	mov	r3, r9
 8001078:	4621      	mov	r1, r4
 800107a:	fb01 f303 	mul.w	r3, r1, r3
 800107e:	4413      	add	r3, r2
 8001080:	4622      	mov	r2, r4
 8001082:	4641      	mov	r1, r8
 8001084:	fba2 1201 	umull	r1, r2, r2, r1
 8001088:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800108c:	460a      	mov	r2, r1
 800108e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001092:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001096:	4413      	add	r3, r2
 8001098:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800109c:	f04f 0000 	mov.w	r0, #0
 80010a0:	f04f 0100 	mov.w	r1, #0
 80010a4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80010a8:	462b      	mov	r3, r5
 80010aa:	00d9      	lsls	r1, r3, #3
 80010ac:	4623      	mov	r3, r4
 80010ae:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80010b2:	4623      	mov	r3, r4
 80010b4:	00d8      	lsls	r0, r3, #3
 80010b6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80010ba:	1814      	adds	r4, r2, r0
 80010bc:	613c      	str	r4, [r7, #16]
 80010be:	414b      	adcs	r3, r1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80010c6:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		}

		temp1 -= temp2;
 80010ca:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80010ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		offset -= offset2;
 80010d8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80010dc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80010e0:	1a84      	subs	r4, r0, r2
 80010e2:	60bc      	str	r4, [r7, #8]
 80010e4:	eb61 0303 	sbc.w	r3, r1, r3
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010ee:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		sensitivity -= sense2;
 80010f2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 80010f6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80010fa:	1a84      	subs	r4, r0, r2
 80010fc:	603c      	str	r4, [r7, #0]
 80010fe:	eb61 0303 	sbc.w	r3, r1, r3
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001108:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
	}

	// Populate and return the compensated values
	compVals.pres = (((int64_t)(digPres*sensitivity) >> 21) - offset) >> 15;
 800110c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001110:	2200      	movs	r2, #0
 8001112:	643b      	str	r3, [r7, #64]	@ 0x40
 8001114:	647a      	str	r2, [r7, #68]	@ 0x44
 8001116:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800111a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800111e:	462a      	mov	r2, r5
 8001120:	fb02 f203 	mul.w	r2, r2, r3
 8001124:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001128:	4621      	mov	r1, r4
 800112a:	fb01 f303 	mul.w	r3, r1, r3
 800112e:	4413      	add	r3, r2
 8001130:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8001134:	4621      	mov	r1, r4
 8001136:	fba2 1201 	umull	r1, r2, r2, r1
 800113a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800113e:	460a      	mov	r2, r1
 8001140:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001144:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001148:	4413      	add	r3, r2
 800114a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800115a:	4621      	mov	r1, r4
 800115c:	0d4a      	lsrs	r2, r1, #21
 800115e:	4629      	mov	r1, r5
 8001160:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001164:	4629      	mov	r1, r5
 8001166:	154b      	asrs	r3, r1, #21
 8001168:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800116c:	1a14      	subs	r4, r2, r0
 800116e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001170:	eb63 0301 	sbc.w	r3, r3, r1
 8001174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001182:	4621      	mov	r1, r4
 8001184:	0bca      	lsrs	r2, r1, #15
 8001186:	4629      	mov	r1, r5
 8001188:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800118c:	4629      	mov	r1, r5
 800118e:	13cb      	asrs	r3, r1, #15
 8001190:	4613      	mov	r3, r2
 8001192:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	compVals.temp = temp1;
 8001196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800119a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

	return compVals;
 800119e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80011a2:	461a      	mov	r2, r3
 80011a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80011b0:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80011b4:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80011b8:	46bd      	mov	sp, r7
 80011ba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011be:	4770      	bx	lr

080011c0 <MS5607_readUncompPres>:

void MS5607_readUncompPres()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	state = MS5607_PRES_READ;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MS5607_readUncompPres+0x34>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 80011ca:	f000 f865 	bl	8001298 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <MS5607_readUncompPres+0x38>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	2364      	movs	r3, #100	@ 0x64
 80011d6:	2201      	movs	r2, #1
 80011d8:	4908      	ldr	r1, [pc, #32]	@ (80011fc <MS5607_readUncompPres+0x3c>)
 80011da:	f008 f84f 	bl	800927c <HAL_SPI_Transmit>
	MS5607_disable();
 80011de:	f000 f86b 	bl	80012b8 <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <MS5607_readUncompPres+0x38>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f008 fe77 	bl	8009edc <HAL_TIM_Base_Start_IT>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200004f0 	.word	0x200004f0
 80011f8:	200004d8 	.word	0x200004d8
 80011fc:	200004f4 	.word	0x200004f4

08001200 <MS5607_readUncompTemp>:

void MS5607_readUncompTemp()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	state = MS5607_TEMP_READ;
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MS5607_readUncompTemp+0x34>)
 8001206:	2202      	movs	r2, #2
 8001208:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 800120a:	f000 f845 	bl	8001298 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasureTemp, 1, 100);
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MS5607_readUncompTemp+0x38>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	2364      	movs	r3, #100	@ 0x64
 8001216:	2201      	movs	r2, #1
 8001218:	4908      	ldr	r1, [pc, #32]	@ (800123c <MS5607_readUncompTemp+0x3c>)
 800121a:	f008 f82f 	bl	800927c <HAL_SPI_Transmit>
	MS5607_disable();
 800121e:	f000 f84b 	bl	80012b8 <MS5607_disable>
	
	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <MS5607_readUncompTemp+0x38>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f008 fe57 	bl	8009edc <HAL_TIM_Base_Start_IT>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200004f0 	.word	0x200004f0
 8001238:	200004d8 	.word	0x200004d8
 800123c:	200004f5 	.word	0x200004f5

08001240 <MS5607_readADC>:

uint32_t MS5607_readADC()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	// 3-byte SPI response buffer for 24-bit ADC read
	uint8_t responseBuffer[] = {0,0,0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2100      	movs	r1, #0
 800124a:	460a      	mov	r2, r1
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	460a      	mov	r2, r1
 8001250:	709a      	strb	r2, [r3, #2]
	
	MS5607_enable();
 8001252:	f000 f821 	bl	8001298 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_READ_ADC, 1, 100);
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MS5607_readADC+0x50>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	2364      	movs	r3, #100	@ 0x64
 800125e:	2201      	movs	r2, #1
 8001260:	490c      	ldr	r1, [pc, #48]	@ (8001294 <MS5607_readADC+0x54>)
 8001262:	f008 f80b 	bl	800927c <HAL_SPI_Transmit>
	HAL_SPI_Receive(config->spi, (uint8_t *)responseBuffer, 3, 100);
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MS5607_readADC+0x50>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	1d39      	adds	r1, r7, #4
 800126e:	2364      	movs	r3, #100	@ 0x64
 8001270:	2203      	movs	r2, #3
 8001272:	f008 fa17 	bl	80096a4 <HAL_SPI_Receive>
	MS5607_disable();
 8001276:	f000 f81f 	bl	80012b8 <MS5607_disable>

	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
 800127a:	793b      	ldrb	r3, [r7, #4]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	797b      	ldrb	r3, [r7, #5]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	4313      	orrs	r3, r2
 8001284:	79ba      	ldrb	r2, [r7, #6]
 8001286:	4313      	orrs	r3, r2
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200004d8 	.word	0x200004d8
 8001294:	0800e2a4 	.word	0x0800e2a4

08001298 <MS5607_enable>:

void MS5607_enable()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <MS5607_enable+0x1c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6898      	ldr	r0, [r3, #8]
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <MS5607_enable+0x1c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	899b      	ldrh	r3, [r3, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	f002 fc00 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200004d8 	.word	0x200004d8

080012b8 <MS5607_disable>:

void MS5607_disable()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <MS5607_disable+0x1c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6898      	ldr	r0, [r3, #8]
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <MS5607_disable+0x1c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	899b      	ldrh	r3, [r3, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4619      	mov	r1, r3
 80012cc:	f002 fbf0 	bl	8003ab0 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200004d8 	.word	0x200004d8

080012d8 <MS5607_TimerCallback>:

void MS5607_TimerCallback()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint32_t adcReading = MS5607_readADC();
 80012de:	f7ff ffaf 	bl	8001240 <MS5607_readADC>
 80012e2:	6078      	str	r0, [r7, #4]
	if (state == MS5607_PRES_READ)
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MS5607_TimerCallback+0x3c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d105      	bne.n	80012f8 <MS5607_TimerCallback+0x20>
	{
		rawValues.pres = adcReading;
 80012ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <MS5607_TimerCallback+0x40>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6053      	str	r3, [r2, #4]
		MS5607_readUncompTemp();
 80012f2:	f7ff ff85 	bl	8001200 <MS5607_readUncompTemp>
	else if (state == MS5607_TEMP_READ)
	{
		rawValues.temp = adcReading;
		state = MS5607_IDLE;
	}
}
 80012f6:	e009      	b.n	800130c <MS5607_TimerCallback+0x34>
	else if (state == MS5607_TEMP_READ)
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MS5607_TimerCallback+0x3c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d105      	bne.n	800130c <MS5607_TimerCallback+0x34>
		rawValues.temp = adcReading;
 8001300:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <MS5607_TimerCallback+0x40>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
		state = MS5607_IDLE;
 8001306:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <MS5607_TimerCallback+0x3c>)
 8001308:	2203      	movs	r2, #3
 800130a:	701a      	strb	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200004f0 	.word	0x200004f0
 8001318:	200004e8 	.word	0x200004e8

0800131c <MS5607_getMeasurementDelay>:
{
	return rawValues;
}

uint16_t MS5607_getMeasurementDelay()
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	return measurementDelay;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <MS5607_getMeasurementDelay+0x14>)
 8001322:	881b      	ldrh	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200004f2 	.word	0x200004f2

08001334 <MS5607_getState>:

MS5607_MeasureState MS5607_getState()
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	return state;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <MS5607_getState+0x14>)
 800133a:	781b      	ldrb	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200004f0 	.word	0x200004f0

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_MspInit+0x30>)
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001358:	4a08      	ldr	r2, [pc, #32]	@ (800137c <HAL_MspInit+0x30>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_MspInit+0x30>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001370:	f002 fc42 	bl	8003bf8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	46020c00 	.word	0x46020c00

08001380 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0bc      	sub	sp, #240	@ 0xf0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	22c0      	movs	r2, #192	@ 0xc0
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00c fec4 	bl	800e12e <memset>
  if(hadc->Instance==ADC1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a33      	ldr	r2, [pc, #204]	@ (8001478 <HAL_ADC_MspInit+0xf8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d15e      	bne.n	800146e <HAL_ADC_MspInit+0xee>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80013b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80013bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fed1 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80013d4:	f7ff fbae 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 80013da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013de:	4a27      	ldr	r2, [pc, #156]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 80013e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 80013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	4a1f      	ldr	r2, [pc, #124]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141a:	4a18      	ldr	r2, [pc, #96]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_ADC_MspInit+0xfc>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <HAL_ADC_MspInit+0x100>)
 800144c:	f002 f958 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001450:	2303      	movs	r3, #3
 8001452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001466:	4619      	mov	r1, r3
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <HAL_ADC_MspInit+0x104>)
 800146a:	f002 f949 	bl	8003700 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800146e:	bf00      	nop
 8001470:	37f0      	adds	r7, #240	@ 0xf0
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	42028000 	.word	0x42028000
 800147c:	46020c00 	.word	0x46020c00
 8001480:	42020000 	.word	0x42020000
 8001484:	42020400 	.word	0x42020400

08001488 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0bc      	sub	sp, #240	@ 0xf0
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	22c0      	movs	r2, #192	@ 0xc0
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00c fe40 	bl	800e12e <memset>
  if(hsd->Instance==SDMMC1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a46      	ldr	r2, [pc, #280]	@ (80015cc <HAL_SD_MspInit+0x144>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f040 8084 	bne.w	80015c2 <HAL_SD_MspInit+0x13a>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CLK48;
 80014ba:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_CLK48;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 fe4a 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_SD_MspInit+0x5e>
    {
      Error_Handler();
 80014e2:	f7ff fb27 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80014e6:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 80014e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ec:	4a38      	ldr	r2, [pc, #224]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 80014ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f6:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 80014f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	4b32      	ldr	r3, [pc, #200]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 8001506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150a:	4a31      	ldr	r2, [pc, #196]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001514:	4b2e      	ldr	r3, [pc, #184]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 8001516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 8001524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001528:	4a29      	ldr	r2, [pc, #164]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_SD_MspInit+0x148>)
 8001534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154e:	2301      	movs	r3, #1
 8001550:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001554:	2302      	movs	r3, #2
 8001556:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800155a:	230c      	movs	r3, #12
 800155c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001564:	4619      	mov	r1, r3
 8001566:	481b      	ldr	r0, [pc, #108]	@ (80015d4 <HAL_SD_MspInit+0x14c>)
 8001568:	f002 f8ca 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800156c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001570:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001586:	230c      	movs	r3, #12
 8001588:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001590:	4619      	mov	r1, r3
 8001592:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <HAL_SD_MspInit+0x14c>)
 8001594:	f002 f8b4 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001598:	2304      	movs	r3, #4
 800159a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015b0:	230c      	movs	r3, #12
 80015b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015ba:	4619      	mov	r1, r3
 80015bc:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <HAL_SD_MspInit+0x150>)
 80015be:	f002 f89f 	bl	8003700 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80015c2:	bf00      	nop
 80015c4:	37f0      	adds	r7, #240	@ 0xf0
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	420c8000 	.word	0x420c8000
 80015d0:	46020c00 	.word	0x46020c00
 80015d4:	42020800 	.word	0x42020800
 80015d8:	42020c00 	.word	0x42020c00

080015dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0be      	sub	sp, #248	@ 0xf8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	22c0      	movs	r2, #192	@ 0xc0
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00c fd96 	bl	800e12e <memset>
  if(hspi->Instance==SPI1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6b      	ldr	r2, [pc, #428]	@ (80017b4 <HAL_SPI_MspInit+0x1d8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d147      	bne.n	800169c <HAL_SPI_MspInit+0xc0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800160c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001618:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800161c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fda3 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001630:	f7ff fa80 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001634:	4b60      	ldr	r3, [pc, #384]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 8001636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800163a:	4a5f      	ldr	r2, [pc, #380]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 800163c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001640:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001644:	4b5c      	ldr	r3, [pc, #368]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 8001646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800164a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b59      	ldr	r3, [pc, #356]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 8001654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001658:	4a57      	ldr	r2, [pc, #348]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001662:	4b55      	ldr	r3, [pc, #340]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 8001664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23e0      	movs	r3, #224	@ 0xe0
 8001672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001688:	2305      	movs	r3, #5
 800168a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001692:	4619      	mov	r1, r3
 8001694:	4849      	ldr	r0, [pc, #292]	@ (80017bc <HAL_SPI_MspInit+0x1e0>)
 8001696:	f002 f833 	bl	8003700 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800169a:	e086      	b.n	80017aa <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a47      	ldr	r2, [pc, #284]	@ (80017c0 <HAL_SPI_MspInit+0x1e4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	f040 8081 	bne.w	80017aa <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80016b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fd55 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 80016cc:	f7ff fa32 	bl	8000b34 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d0:	4b39      	ldr	r3, [pc, #228]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 80016d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016d6:	4a38      	ldr	r2, [pc, #224]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016dc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016e0:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 80016e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 80016f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f4:	4a30      	ldr	r2, [pc, #192]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016fe:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 8001700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 800170e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001712:	4a29      	ldr	r2, [pc, #164]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800171c:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <HAL_SPI_MspInit+0x1dc>)
 800171e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001742:	2303      	movs	r3, #3
 8001744:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800174c:	4619      	mov	r1, r3
 800174e:	481d      	ldr	r0, [pc, #116]	@ (80017c4 <HAL_SPI_MspInit+0x1e8>)
 8001750:	f001 ffd6 	bl	8003700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001754:	2304      	movs	r3, #4
 8001756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800176c:	2305      	movs	r3, #5
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001776:	4619      	mov	r1, r3
 8001778:	4812      	ldr	r0, [pc, #72]	@ (80017c4 <HAL_SPI_MspInit+0x1e8>)
 800177a:	f001 ffc1 	bl	8003700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800177e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001798:	2305      	movs	r3, #5
 800179a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <HAL_SPI_MspInit+0x1ec>)
 80017a6:	f001 ffab 	bl	8003700 <HAL_GPIO_Init>
}
 80017aa:	bf00      	nop
 80017ac:	37f8      	adds	r7, #248	@ 0xf8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40013000 	.word	0x40013000
 80017b8:	46020c00 	.word	0x46020c00
 80017bc:	42020000 	.word	0x42020000
 80017c0:	40003800 	.word	0x40003800
 80017c4:	42020800 	.word	0x42020800
 80017c8:	42020400 	.word	0x42020400

080017cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <HAL_TIM_Base_MspInit+0x48>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d116      	bne.n	800180c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_TIM_Base_MspInit+0x4c>)
 80017e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <HAL_TIM_Base_MspInit+0x4c>)
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_TIM_Base_MspInit+0x4c>)
 80017f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2046      	movs	r0, #70	@ 0x46
 8001802:	f001 fea1 	bl	8003548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001806:	2046      	movs	r0, #70	@ 0x46
 8001808:	f001 feb8 	bl	800357c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40014400 	.word	0x40014400
 8001818:	46020c00 	.word	0x46020c00

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <NMI_Handler+0x4>

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <MemManage_Handler+0x4>

08001834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <UsageFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f915 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <TIM16_IRQHandler+0x10>)
 8001882:	f008 fbfa 	bl	800a07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000048c 	.word	0x2000048c

08001890 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <SystemInit+0x68>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <SystemInit+0x68>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80018a4:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <SystemInit+0x6c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <SystemInit+0x6c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <SystemInit+0x6c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <SystemInit+0x6c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <SystemInit+0x6c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0e      	ldr	r2, [pc, #56]	@ (80018fc <SystemInit+0x6c>)
 80018c2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80018c6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80018ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <SystemInit+0x6c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <SystemInit+0x6c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a09      	ldr	r2, [pc, #36]	@ (80018fc <SystemInit+0x6c>)
 80018d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <SystemInit+0x6c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <SystemInit+0x68>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
  #endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	46020c00 	.word	0x46020c00

08001900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001900:	480d      	ldr	r0, [pc, #52]	@ (8001938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001902:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001904:	f7ff ffc4 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	@ (800193c <LoopForever+0x6>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	@ (8001940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <LoopForever+0xe>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	@ (800194c <LoopForever+0x16>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800192e:	f00c fc07 	bl	800e140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001932:	f7fe fd77 	bl	8000424 <main>

08001936 <LoopForever>:

LoopForever:
    b LoopForever
 8001936:	e7fe      	b.n	8001936 <LoopForever>
  ldr   r0, =_estack
 8001938:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	2000000a 	.word	0x2000000a
  ldr r2, =_sidata
 8001944:	0800e41c 	.word	0x0800e41c
  ldr r2, =_sbss
 8001948:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800194c:	20000538 	.word	0x20000538

08001950 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_IRQHandler>
	...

08001954 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_Init+0x50>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a11      	ldr	r2, [pc, #68]	@ (80019a4 <HAL_Init+0x50>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f001 fde4 	bl	8003532 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800196a:	f003 fa23 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_Init+0x54>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	490c      	ldr	r1, [pc, #48]	@ (80019ac <HAL_Init+0x58>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <HAL_Init+0x5c>)
 8001982:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001984:	2004      	movs	r0, #4
 8001986:	f001 fe29 	bl	80035dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	200f      	movs	r0, #15
 800198c:	f000 f812 	bl	80019b4 <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e002      	b.n	80019a0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800199a:	f7ff fcd7 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40022000 	.word	0x40022000
 80019a8:	46020c00 	.word	0x46020c00
 80019ac:	0800e2a8 	.word	0x0800e2a8
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80019c0:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <HAL_InitTick+0xdc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e05c      	b.n	8001a86 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80019cc:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <HAL_InitTick+0xe0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d10c      	bne.n	80019f2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <HAL_InitTick+0xe4>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <HAL_InitTick+0xdc>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e037      	b.n	8001a62 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80019f2:	f001 fe4b 	bl	800368c <HAL_SYSTICK_GetCLKSourceConfig>
 80019f6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d023      	beq.n	8001a46 <HAL_InitTick+0x92>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d82d      	bhi.n	8001a60 <HAL_InitTick+0xac>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_InitTick+0x5e>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d00d      	beq.n	8001a2c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001a10:	e026      	b.n	8001a60 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_InitTick+0xe4>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <HAL_InitTick+0xdc>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a20:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	60fb      	str	r3, [r7, #12]
        break;
 8001a2a:	e01a      	b.n	8001a62 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_InitTick+0xdc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a3a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	60fb      	str	r3, [r7, #12]
        break;
 8001a44:	e00d      	b.n	8001a62 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_InitTick+0xdc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	60fb      	str	r3, [r7, #12]
        break;
 8001a5e:	e000      	b.n	8001a62 <HAL_InitTick+0xae>
        break;
 8001a60:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f001 fd98 	bl	8003598 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e009      	b.n	8001a86 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a72:	2200      	movs	r2, #0
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a7a:	f001 fd65 	bl	8003548 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <HAL_InitTick+0xe8>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	e000e010 	.word	0xe000e010
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	200004f8 	.word	0x200004f8

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200004f8 	.word	0x200004f8

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008

08001b28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001b2c:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <HAL_GetREVID+0x18>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	b29b      	uxth	r3, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e0044000 	.word	0xe0044000

08001b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <LL_ADC_SetResolution+0x3c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d104      	bne.n	8001bcc <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f023 020c 	bic.w	r2, r3, #12
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	46021000 	.word	0x46021000

08001bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3360      	adds	r3, #96	@ 0x60
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3360      	adds	r3, #96	@ 0x60
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0edb      	lsrs	r3, r3, #27
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	d807      	bhi.n	8001c68 <LL_ADC_GetOffsetChannel+0x3a>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	069a      	lsls	r2, r3, #26
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	e008      	b.n	8001c7a <LL_ADC_GetOffsetChannel+0x4c>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	069a      	lsls	r2, r3, #26
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3360      	adds	r3, #96	@ 0x60
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3360      	adds	r3, #96	@ 0x60
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3360      	adds	r3, #96	@ 0x60
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	d002      	beq.n	8001d5a <LL_ADC_SetGainCompensation+0x32>
 8001d54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001d58:	e000      	b.n	8001d5c <LL_ADC_SetGainCompensation+0x34>
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2107      	movs	r1, #7
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a2b      	ldr	r2, [pc, #172]	@ (8001e68 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d020      	beq.n	8001e02 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3330      	adds	r3, #48	@ 0x30
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	4413      	add	r3, r2
 8001dd2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	211f      	movs	r1, #31
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	f003 011f 	and.w	r1, r3, #31
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001e00:	e02b      	b.n	8001e5a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	401a      	ands	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d104      	bne.n	8001e2a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	e010      	b.n	8001e4c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	613b      	str	r3, [r7, #16]
  return result;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e003      	b.n	8001e4c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	f001 011f 	and.w	r1, r1, #31
 8001e52:	408b      	lsls	r3, r1
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e5a:	bf00      	nop
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	46021000 	.word	0x46021000

08001e6c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	0e9b      	lsrs	r3, r3, #26
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2201      	movs	r2, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	e015      	b.n	8001ebc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	60fb      	str	r3, [r7, #12]
  return result;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	0e9b      	lsrs	r3, r3, #26
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	@ 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d042      	beq.n	8001f9e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d104      	bne.n	8001f2c <LL_ADC_SetChannelSamplingTime+0x28>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	f003 021f 	and.w	r2, r3, #31
 8001f2a:	e011      	b.n	8001f50 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	617b      	str	r3, [r7, #20]
  return result;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001f42:	2320      	movs	r3, #32
 8001f44:	e003      	b.n	8001f4e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	0e5b      	lsrs	r3, r3, #25
 8001f54:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001f58:	460b      	mov	r3, r1
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	1ad2      	subs	r2, r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	0e5b      	lsrs	r3, r3, #25
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2107      	movs	r1, #7
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	431a      	orrs	r2, r3
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001f9c:	e00e      	b.n	8001fbc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	401a      	ands	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	0219      	lsls	r1, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	615a      	str	r2, [r3, #20]
}
 8001fbc:	bf00      	nop
 8001fbe:	372c      	adds	r7, #44	@ 0x2c
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	46021000 	.word	0x46021000

08001fcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0318 	and.w	r3, r3, #24
 8001fee:	4908      	ldr	r1, [pc, #32]	@ (8002010 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ff0:	40d9      	lsrs	r1, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	000fffff 	.word	0x000fffff

08002014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6093      	str	r3, [r2, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002074:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800209c:	d101      	bne.n	80020a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_IsEnabled+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_IsEnabled+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d101      	bne.n	80020ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b08      	cmp	r3, #8
 800210e:	d101      	bne.n	8002114 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	@ 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e2b3      	b.n	80026ac <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a8b      	ldr	r2, [pc, #556]	@ (8002380 <HAL_ADC_Init+0x25c>)
 8002152:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff f90f 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5f 	bl	8002038 <LL_ADC_IsDeepPowerDownEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff45 	bl	8002014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff7a 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff5e 	bl	8002060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a4:	4b77      	ldr	r3, [pc, #476]	@ (8002384 <HAL_ADC_Init+0x260>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	4a77      	ldr	r2, [pc, #476]	@ (8002388 <HAL_ADC_Init+0x264>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021b8:	e002      	b.n	80021c0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3b01      	subs	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f9      	bne.n	80021ba <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff5c 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10e      	bne.n	80021f4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff6c 	bl	80020d6 <LL_ADC_REG_IsConversionOngoing>
 80021fe:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 8244 	bne.w	8002696 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 8240 	bne.w	8002696 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800221a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800221e:	f043 0202 	orr.w	r2, r3, #2
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff40 	bl	80020b0 <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d140      	bne.n	80022b8 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a51      	ldr	r2, [pc, #324]	@ (8002380 <HAL_ADC_Init+0x25c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d028      	beq.n	8002292 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a51      	ldr	r2, [pc, #324]	@ (800238c <HAL_ADC_Init+0x268>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d109      	bne.n	800225e <HAL_ADC_Init+0x13a>
 800224a:	4850      	ldr	r0, [pc, #320]	@ (800238c <HAL_ADC_Init+0x268>)
 800224c:	f7ff ff30 	bl	80020b0 <LL_ADC_IsEnabled>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e008      	b.n	8002270 <HAL_ADC_Init+0x14c>
 800225e:	4848      	ldr	r0, [pc, #288]	@ (8002380 <HAL_ADC_Init+0x25c>)
 8002260:	f7ff ff26 	bl	80020b0 <LL_ADC_IsEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d021      	beq.n	80022b8 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a44      	ldr	r2, [pc, #272]	@ (800238c <HAL_ADC_Init+0x268>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Init+0x15e>
 800227e:	4a44      	ldr	r2, [pc, #272]	@ (8002390 <HAL_ADC_Init+0x26c>)
 8002280:	e000      	b.n	8002284 <HAL_ADC_Init+0x160>
 8002282:	4a44      	ldr	r2, [pc, #272]	@ (8002394 <HAL_ADC_Init+0x270>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f7ff fc5a 	bl	8001b44 <LL_ADC_SetCommonClock>
 8002290:	e012      	b.n	80022b8 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4619      	mov	r1, r3
 800229c:	4610      	mov	r0, r2
 800229e:	f7ff fc85 	bl	8001bac <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80022a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002394 <HAL_ADC_Init+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80022b2:	4938      	ldr	r1, [pc, #224]	@ (8002394 <HAL_ADC_Init+0x270>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <HAL_ADC_Init+0x25c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d010      	beq.n	80022e4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022c8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022ce:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80022d4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80022dc:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80022de:	4313      	orrs	r3, r2
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	e030      	b.n	8002346 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7f1b      	ldrb	r3, [r3, #28]
 80022e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022f0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022f2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	d002      	beq.n	8002302 <HAL_ADC_Init+0x1de>
 80022fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002300:	e000      	b.n	8002304 <HAL_ADC_Init+0x1e0>
 8002302:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002304:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800230a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	da04      	bge.n	800231e <HAL_ADC_Init+0x1fa>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800231c:	e001      	b.n	8002322 <HAL_ADC_Init+0x1fe>
 800231e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002322:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4918      	ldr	r1, [pc, #96]	@ (800238c <HAL_ADC_Init+0x268>)
 800232a:	428b      	cmp	r3, r1
 800232c:	d103      	bne.n	8002336 <HAL_ADC_Init+0x212>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002334:	e003      	b.n	800233e <HAL_ADC_Init+0x21a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800233c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800233e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	4313      	orrs	r3, r2
 8002344:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d12f      	bne.n	80023b0 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_ADC_Init+0x25c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	3b01      	subs	r3, #1
 8002360:	045b      	lsls	r3, r3, #17
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	4313      	orrs	r3, r2
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	e022      	b.n	80023b0 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	e018      	b.n	80023b0 <HAL_ADC_Init+0x28c>
 800237e:	bf00      	nop
 8002380:	46021000 	.word	0x46021000
 8002384:	20000000 	.word	0x20000000
 8002388:	053e2d63 	.word	0x053e2d63
 800238c:	42028000 	.word	0x42028000
 8002390:	42028308 	.word	0x42028308
 8002394:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a92      	ldr	r2, [pc, #584]	@ (8002600 <HAL_ADC_Init+0x4dc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d018      	beq.n	80023ec <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ce:	4313      	orrs	r3, r2
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4b89      	ldr	r3, [pc, #548]	@ (8002604 <HAL_ADC_Init+0x4e0>)
 80023de:	4013      	ands	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	430b      	orrs	r3, r1
 80023e8:	60d3      	str	r3, [r2, #12]
 80023ea:	e031      	b.n	8002450 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002400:	4313      	orrs	r3, r2
 8002402:	6a3a      	ldr	r2, [r7, #32]
 8002404:	4313      	orrs	r3, r2
 8002406:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	4b7e      	ldr	r3, [pc, #504]	@ (8002608 <HAL_ADC_Init+0x4e4>)
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	6a39      	ldr	r1, [r7, #32]
 8002418:	430b      	orrs	r3, r1
 800241a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a6a      	ldr	r2, [pc, #424]	@ (8002600 <HAL_ADC_Init+0x4dc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	f000 8093 	beq.w	8002582 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fe38 	bl	80020d6 <LL_ADC_REG_IsConversionOngoing>
 8002466:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe45 	bl	80020fc <LL_ADC_INJ_IsConversionOngoing>
 8002472:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d161      	bne.n	800253e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d15e      	bne.n	800253e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7f1b      	ldrb	r3, [r3, #28]
 8002484:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4960      	ldr	r1, [pc, #384]	@ (800260c <HAL_ADC_Init+0x4e8>)
 800248c:	428b      	cmp	r3, r1
 800248e:	d102      	bne.n	8002496 <HAL_ADC_Init+0x372>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002494:	e002      	b.n	800249c <HAL_ADC_Init+0x378>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800249c:	4313      	orrs	r3, r2
 800249e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	6a39      	ldr	r1, [r7, #32]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f7ff fc2c 	bl	8001d28 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d11e      	bne.n	8002518 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024de:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002610 <HAL_ADC_Init+0x4ec>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80024ee:	0411      	lsls	r1, r2, #16
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002506:	0892      	lsrs	r2, r2, #2
 8002508:	430a      	orrs	r2, r1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e007      	b.n	8002528 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10c      	bne.n	8002560 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	f023 010f 	bic.w	r1, r3, #15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	1e5a      	subs	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	631a      	str	r2, [r3, #48]	@ 0x30
 800255e:	e007      	b.n	8002570 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 020f 	bic.w	r2, r2, #15
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002574:	f023 0303 	bic.w	r3, r3, #3
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002580:	e092      	b.n	80026a8 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002588:	2b01      	cmp	r3, #1
 800258a:	d111      	bne.n	80025b0 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002594:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800259a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80025a0:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <HAL_ADC_Init+0x4f0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	69f9      	ldr	r1, [r7, #28]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025cc:	461a      	mov	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f7ff fbcd 	bl	8001d6e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025dc:	461a      	mov	r2, r3
 80025de:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80025e2:	f7ff fbc4 	bl	8001d6e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d114      	bne.n	8002618 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f062 020f 	orn	r2, r2, #15
 80025fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80025fe:	e024      	b.n	800264a <HAL_ADC_Init+0x526>
 8002600:	46021000 	.word	0x46021000
 8002604:	fff0c013 	.word	0xfff0c013
 8002608:	ffde800d 	.word	0xffde800d
 800260c:	42028000 	.word	0x42028000
 8002610:	fc00f81e 	.word	0xfc00f81e
 8002614:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002620:	d113      	bne.n	800264a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	f003 031c 	and.w	r3, r3, #28
 8002634:	f06f 020f 	mvn.w	r2, #15
 8002638:	fa02 f103 	lsl.w	r1, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <HAL_ADC_Init+0x590>)
 8002652:	4013      	ands	r3, r2
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10b      	bne.n	8002672 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002664:	f023 0303 	bic.w	r3, r3, #3
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002670:	e01a      	b.n	80026a8 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002676:	f023 0312 	bic.w	r3, r3, #18
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002694:	e008      	b.n	80026a8 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800269a:	f043 0210 	orr.w	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80026a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3728      	adds	r7, #40	@ 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	833ffff3 	.word	0x833ffff3

080026b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b0bc      	sub	sp, #240	@ 0xf0
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4aa8      	ldr	r2, [pc, #672]	@ (8002974 <HAL_ADC_ConfigChannel+0x2bc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d103      	bne.n	80026de <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x36>
 80026e8:	2302      	movs	r3, #2
 80026ea:	f000 be6d 	b.w	80033c8 <HAL_ADC_ConfigChannel+0xd10>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fceb 	bl	80020d6 <LL_ADC_REG_IsConversionOngoing>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 864d 	bne.w	80033a2 <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a99      	ldr	r2, [pc, #612]	@ (8002974 <HAL_ADC_ConfigChannel+0x2bc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	f000 83ea 	beq.w	8002ee8 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d108      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x7a>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2201      	movs	r2, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	e01d      	b.n	800276e <HAL_ADC_ConfigChannel+0xb6>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 8002746:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800274a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 800274e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800275a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2201      	movs	r2, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	69d1      	ldr	r1, [r2, #28]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	f7ff fb0f 	bl	8001dac <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fc9f 	bl	80020d6 <LL_ADC_REG_IsConversionOngoing>
 8002798:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fcab 	bl	80020fc <LL_ADC_INJ_IsConversionOngoing>
 80027a6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 81ed 	bne.w	8002b8e <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 81e8 	bne.w	8002b8e <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f7ff fb9a 	bl	8001f04 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d046      	beq.n	8002880 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6919      	ldr	r1, [r3, #16]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002802:	f7ff f9f3 	bl	8001bec <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	461a      	mov	r2, r3
 8002814:	f7ff fa37 	bl	8001c86 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	7e9b      	ldrb	r3, [r3, #26]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d11e      	bne.n	800285e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x17e>
 8002830:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002834:	e000      	b.n	8002838 <HAL_ADC_ConfigChannel+0x180>
 8002836:	2300      	movs	r3, #0
 8002838:	461a      	mov	r2, r3
 800283a:	f7ff fa5a 	bl	8001cf2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x19c>
 800284e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002852:	e000      	b.n	8002856 <HAL_ADC_ConfigChannel+0x19e>
 8002854:	2300      	movs	r3, #0
 8002856:	461a      	mov	r2, r3
 8002858:	f7ff fa30 	bl	8001cbc <LL_ADC_SetOffsetSignedSaturation>
 800285c:	e197      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2200      	movs	r2, #0
 8002868:	4619      	mov	r1, r3
 800286a:	f7ff fa42 	bl	8001cf2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2200      	movs	r2, #0
 8002878:	4619      	mov	r1, r3
 800287a:	f7ff fa1f 	bl	8001cbc <LL_ADC_SetOffsetSignedSaturation>
 800287e:	e186      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f9d1 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1f4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f9c6 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 021f 	and.w	r2, r3, #31
 80028aa:	e01e      	b.n	80028ea <HAL_ADC_ConfigChannel+0x232>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f9bb 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 80028ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 80028d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e004      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80028de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x24a>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	e018      	b.n	8002934 <HAL_ADC_ConfigChannel+0x27c>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800291a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800291e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e004      	b.n	8002934 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800292a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2300      	movs	r3, #0
 8002942:	2100      	movs	r1, #0
 8002944:	f7ff f952 	bl	8001bec <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f96d 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x2c0>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff f962 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 800296a:	4603      	mov	r3, r0
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	e020      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x2fe>
 8002974:	46021000 	.word	0x46021000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f955 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800299a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800299e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e004      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80029aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x316>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	e018      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x348>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80029e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80029ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e004      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80029f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f7ff f8ec 	bl	8001bec <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f907 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x388>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff f8fc 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	e01e      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x3c6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2102      	movs	r1, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f8f1 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x3de>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	e018      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x410>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e004      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d107      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	f7ff f888 	bl	8001bec <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2103      	movs	r1, #3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f8a3 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x450>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2103      	movs	r1, #3
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f898 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	f003 021f 	and.w	r2, r3, #31
 8002b06:	e01a      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x486>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f88d 	bl	8001c2e <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e004      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x49e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	e011      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x4c2>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e003      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d107      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2103      	movs	r1, #3
 8002b8a:	f7ff f82f 	bl	8001bec <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fa8c 	bl	80020b0 <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 840e 	bne.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f7ff fa0d 	bl	8001fcc <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bba:	f040 80d6 	bne.w	8002d6a <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x52a>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2b09      	cmp	r3, #9
 8002bd8:	bf94      	ite	ls
 8002bda:	2301      	movls	r3, #1
 8002bdc:	2300      	movhi	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e019      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x55e>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002bf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e003      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2b09      	cmp	r3, #9
 8002c0e:	bf94      	ite	ls
 8002c10:	2301      	movls	r3, #1
 8002c12:	2300      	movhi	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04d      	beq.n	8002cb6 <HAL_ADC_ConfigChannel+0x5fe>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x57e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	069b      	lsls	r3, r3, #26
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c34:	e015      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x5aa>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e003      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x5ca>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	e017      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x5fa>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c92:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	e04e      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x69c>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x61a>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	3301      	adds	r3, #1
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd0:	e015      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x646>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e003      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	069b      	lsls	r3, r3, #26
 8002cfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x666>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	e017      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x696>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e003      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002d66:	f7ff f8cd 	bl	8001f04 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f280 8324 	bge.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a99      	ldr	r2, [pc, #612]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x6ca>
 8002d7e:	4b99      	ldr	r3, [pc, #612]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x92c>)
 8002d80:	e000      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x6cc>
 8002d82:	4b99      	ldr	r3, [pc, #612]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x930>)
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe ff03 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 8002d8a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a93      	ldr	r2, [pc, #588]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d109      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x6f4>
 8002d98:	4891      	ldr	r0, [pc, #580]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002d9a:	f7ff f989 	bl	80020b0 <LL_ADC_IsEnabled>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e008      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x706>
 8002dac:	488f      	ldr	r0, [pc, #572]	@ (8002fec <HAL_ADC_ConfigChannel+0x934>)
 8002dae:	f7ff f97f 	bl	80020b0 <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8088 	beq.w	8002ed4 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a89      	ldr	r2, [pc, #548]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x938>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d132      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d12c      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a80      	ldr	r2, [pc, #512]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d005      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x738>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a80      	ldr	r2, [pc, #512]	@ (8002fec <HAL_ADC_ConfigChannel+0x934>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f040 82e3 	bne.w	80033b6 <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x746>
 8002dfa:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x92c>)
 8002dfc:	e000      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x748>
 8002dfe:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x930>)
 8002e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fe fead 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e10:	4b78      	ldr	r3, [pc, #480]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x93c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	4a78      	ldr	r2, [pc, #480]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x940>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002e22:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002e24:	e002      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e32:	e2c0      	b.n	80033b6 <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a70      	ldr	r2, [pc, #448]	@ (8002ffc <HAL_ADC_ConfigChannel+0x944>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d121      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11b      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a64      	ldr	r2, [pc, #400]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d005      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x7a8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a64      	ldr	r2, [pc, #400]	@ (8002fec <HAL_ADC_ConfigChannel+0x934>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	f040 82ad 	bne.w	80033ba <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x7b6>
 8002e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x92c>)
 8002e6c:	e000      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x7b8>
 8002e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x930>)
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7fe fe75 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e80:	e29b      	b.n	80033ba <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5e      	ldr	r2, [pc, #376]	@ (8003000 <HAL_ADC_ConfigChannel+0x948>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	f040 8297 	bne.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 8290 	bne.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d005      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x7fa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a50      	ldr	r2, [pc, #320]	@ (8002fec <HAL_ADC_ConfigChannel+0x934>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	f040 8285 	bne.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x928>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x808>
 8002ebc:	4a49      	ldr	r2, [pc, #292]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x92c>)
 8002ebe:	e000      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x80a>
 8002ec0:	4a49      	ldr	r2, [pc, #292]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x930>)
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f7fe fe4c 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 8002ed2:	e273      	b.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8002ee6:	e269      	b.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f000 8191 	beq.w	800321c <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f02:	d004      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002f08:	4a3e      	ldr	r2, [pc, #248]	@ (8003004 <HAL_ADC_ConfigChannel+0x94c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d107      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe ffa8 	bl	8001e6c <LL_ADC_REG_SetSequencerChAdd>
 8002f1c:	e0b0      	b.n	8003080 <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	210f      	movs	r1, #15
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	401a      	ands	r2, r3
 8002f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002f3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x896>
 8002f42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002f46:	0e9b      	lsrs	r3, r3, #26
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	e011      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x8ba>
 8002f4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 8002f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	6839      	ldr	r1, [r7, #0]
 8002f74:	6849      	ldr	r1, [r1, #4]
 8002f76:	f001 011f 	and.w	r1, r1, #31
 8002f7a:	408b      	lsls	r3, r1
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d875      	bhi.n	8003080 <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002f94:	f7fe fdc8 	bl	8001b28 <HAL_GetREVID>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f9e:	d866      	bhi.n	800306e <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8002fa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002fa4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x90a>
 8002fac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b13      	cmp	r3, #19
 8002fb8:	bf8c      	ite	hi
 8002fba:	2301      	movhi	r3, #1
 8002fbc:	2300      	movls	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e02b      	b.n	800301a <HAL_ADC_ConfigChannel+0x962>
 8002fc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002fc6:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	61bb      	str	r3, [r7, #24]
  return result;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e018      	b.n	8003010 <HAL_ADC_ConfigChannel+0x958>
 8002fde:	bf00      	nop
 8002fe0:	42028000 	.word	0x42028000
 8002fe4:	42028308 	.word	0x42028308
 8002fe8:	46021308 	.word	0x46021308
 8002fec:	46021000 	.word	0x46021000
 8002ff0:	ce080000 	.word	0xce080000
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	053e2d63 	.word	0x053e2d63
 8002ffc:	ca040000 	.word	0xca040000
 8003000:	80000001 	.word	0x80000001
 8003004:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b13      	cmp	r3, #19
 8003012:	bf8c      	ite	hi
 8003014:	2301      	movhi	r3, #1
 8003016:	2300      	movls	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d027      	beq.n	800306e <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800301e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003022:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_ADC_ConfigChannel+0x986>
 800302a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	3b09      	subs	r3, #9
 8003036:	2201      	movs	r2, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	e015      	b.n	800306a <HAL_ADC_ConfigChannel+0x9b2>
 800303e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003042:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	60fb      	str	r3, [r7, #12]
  return result;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3b09      	subs	r3, #9
 8003064:	2201      	movs	r2, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800307a:	4619      	mov	r1, r3
 800307c:	f7fe fe96 	bl	8001dac <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	461a      	mov	r2, r3
 800308a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800308e:	f7fe ff39 	bl	8001f04 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f280 8190 	bge.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a97      	ldr	r2, [pc, #604]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x9f2>
 80030a6:	4b97      	ldr	r3, [pc, #604]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 80030a8:	e000      	b.n	80030ac <HAL_ADC_ConfigChannel+0x9f4>
 80030aa:	4b97      	ldr	r3, [pc, #604]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fd6f 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 80030b2:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a94      	ldr	r2, [pc, #592]	@ (800330c <HAL_ADC_ConfigChannel+0xc54>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d126      	bne.n	800310e <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d120      	bne.n	800310e <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0xa22>
 80030d6:	4a8b      	ldr	r2, [pc, #556]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 80030d8:	e000      	b.n	80030dc <HAL_ADC_ConfigChannel+0xa24>
 80030da:	4a8b      	ldr	r2, [pc, #556]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f7fe fd3f 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030ec:	4b88      	ldr	r3, [pc, #544]	@ (8003310 <HAL_ADC_ConfigChannel+0xc58>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	4a88      	ldr	r2, [pc, #544]	@ (8003314 <HAL_ADC_ConfigChannel+0xc5c>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80030fe:	e002      	b.n	8003106 <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800310c:	e067      	b.n	80031de <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a81      	ldr	r2, [pc, #516]	@ (8003318 <HAL_ADC_ConfigChannel+0xc60>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d116      	bne.n	8003146 <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003120:	2b00      	cmp	r3, #0
 8003122:	d110      	bne.n	8003146 <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a75      	ldr	r2, [pc, #468]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_ADC_ConfigChannel+0xa7a>
 800312e:	4a75      	ldr	r2, [pc, #468]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 8003130:	e000      	b.n	8003134 <HAL_ADC_ConfigChannel+0xa7c>
 8003132:	4a75      	ldr	r2, [pc, #468]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003138:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7fe fd13 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 8003144:	e04b      	b.n	80031de <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a74      	ldr	r2, [pc, #464]	@ (800331c <HAL_ADC_ConfigChannel+0xc64>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d116      	bne.n	800317e <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d110      	bne.n	800317e <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a67      	ldr	r2, [pc, #412]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0xab2>
 8003166:	4a67      	ldr	r2, [pc, #412]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 8003168:	e000      	b.n	800316c <HAL_ADC_ConfigChannel+0xab4>
 800316a:	4a67      	ldr	r2, [pc, #412]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003170:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f7fe fcf7 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 800317c:	e02f      	b.n	80031de <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a67      	ldr	r2, [pc, #412]	@ (8003320 <HAL_ADC_ConfigChannel+0xc68>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d12a      	bne.n	80031de <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d124      	bne.n	80031de <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a62      	ldr	r2, [pc, #392]	@ (8003324 <HAL_ADC_ConfigChannel+0xc6c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d11f      	bne.n	80031de <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a57      	ldr	r2, [pc, #348]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0xaf4>
 80031a8:	4a56      	ldr	r2, [pc, #344]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 80031aa:	e000      	b.n	80031ae <HAL_ADC_ConfigChannel+0xaf6>
 80031ac:	4a56      	ldr	r2, [pc, #344]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f7fe fcd6 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80031be:	f7fe fcb3 	bl	8001b28 <HAL_GetREVID>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c8:	d809      	bhi.n	80031de <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80031de:	f7fe fca3 	bl	8001b28 <HAL_GetREVID>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e8:	f040 80e8 	bne.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003328 <HAL_ADC_ConfigChannel+0xc70>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	f040 80e2 	bne.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 80db 	bne.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800321a:	e0cf      	b.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003224:	d004      	beq.n	8003230 <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800322a:	4a40      	ldr	r2, [pc, #256]	@ (800332c <HAL_ADC_ConfigChannel+0xc74>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d106      	bne.n	800323e <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fe4a 	bl	8001ed2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f280 80ba 	bge.w	80033bc <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0xb9e>
 8003252:	4b2c      	ldr	r3, [pc, #176]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 8003254:	e000      	b.n	8003258 <HAL_ADC_ConfigChannel+0xba0>
 8003256:	4b2c      	ldr	r3, [pc, #176]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe fc99 	bl	8001b90 <LL_ADC_GetCommonPathInternalCh>
 800325e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a32      	ldr	r2, [pc, #200]	@ (8003330 <HAL_ADC_ConfigChannel+0xc78>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d110      	bne.n	800328e <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a23      	ldr	r2, [pc, #140]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0xbc2>
 8003276:	4a23      	ldr	r2, [pc, #140]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 8003278:	e000      	b.n	800327c <HAL_ADC_ConfigChannel+0xbc4>
 800327a:	4a23      	ldr	r2, [pc, #140]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003280:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f7fe fc6f 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 800328c:	e06d      	b.n	800336a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a28      	ldr	r2, [pc, #160]	@ (8003334 <HAL_ADC_ConfigChannel+0xc7c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d110      	bne.n	80032ba <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0xbee>
 80032a2:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_ConfigChannel+0xbf0>
 80032a6:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f7fe fc59 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 80032b8:	e057      	b.n	800336a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a17      	ldr	r2, [pc, #92]	@ (800331c <HAL_ADC_ConfigChannel+0xc64>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d110      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0xc1a>
 80032ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_ConfigChannel+0xc1c>
 80032d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_ADC_ConfigChannel+0xc50>)
 80032d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fe fc43 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
 80032e4:	e041      	b.n	800336a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <HAL_ADC_ConfigChannel+0xc68>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d13c      	bne.n	800336a <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a02      	ldr	r2, [pc, #8]	@ (8003300 <HAL_ADC_ConfigChannel+0xc48>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d11e      	bne.n	8003338 <HAL_ADC_ConfigChannel+0xc80>
 80032fa:	4a02      	ldr	r2, [pc, #8]	@ (8003304 <HAL_ADC_ConfigChannel+0xc4c>)
 80032fc:	e01d      	b.n	800333a <HAL_ADC_ConfigChannel+0xc82>
 80032fe:	bf00      	nop
 8003300:	42028000 	.word	0x42028000
 8003304:	42028308 	.word	0x42028308
 8003308:	46021308 	.word	0x46021308
 800330c:	b6002000 	.word	0xb6002000
 8003310:	20000000 	.word	0x20000000
 8003314:	053e2d63 	.word	0x053e2d63
 8003318:	ba004000 	.word	0xba004000
 800331c:	80000001 	.word	0x80000001
 8003320:	b2001000 	.word	0xb2001000
 8003324:	46021000 	.word	0x46021000
 8003328:	d7200000 	.word	0xd7200000
 800332c:	80000010 	.word	0x80000010
 8003330:	ce080000 	.word	0xce080000
 8003334:	ca040000 	.word	0xca040000
 8003338:	4a25      	ldr	r2, [pc, #148]	@ (80033d0 <HAL_ADC_ConfigChannel+0xd18>)
 800333a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f7fe fc10 	bl	8001b6a <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800334a:	f7fe fbed 	bl	8001b28 <HAL_GetREVID>
 800334e:	4603      	mov	r3, r0
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003354:	d809      	bhi.n	800336a <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800336a:	f7fe fbdd 	bl	8001b28 <HAL_GetREVID>
 800336e:	4603      	mov	r3, r0
 8003370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003374:	d122      	bne.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a16      	ldr	r2, [pc, #88]	@ (80033d4 <HAL_ADC_ConfigChannel+0xd1c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d11d      	bne.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d117      	bne.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80033a0:	e00c      	b.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80033b4:	e002      	b.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ba:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80033c4:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	37f0      	adds	r7, #240	@ 0xf0
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	46021308 	.word	0x46021308
 80033d4:	d7200000 	.word	0xd7200000

080033d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033f4:	4013      	ands	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003400:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	@ (800341c <__NVIC_SetPriorityGrouping+0x44>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003424:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <__NVIC_GetPriorityGrouping+0x18>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 0307 	and.w	r3, r3, #7
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db0b      	blt.n	8003466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4907      	ldr	r1, [pc, #28]	@ (8003474 <__NVIC_EnableIRQ+0x38>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000e100 	.word	0xe000e100

08003478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db0a      	blt.n	80034a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	490c      	ldr	r1, [pc, #48]	@ (80034c4 <__NVIC_SetPriority+0x4c>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	440b      	add	r3, r1
 800349c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a0:	e00a      	b.n	80034b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4908      	ldr	r1, [pc, #32]	@ (80034c8 <__NVIC_SetPriority+0x50>)
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	3b04      	subs	r3, #4
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	440b      	add	r3, r1
 80034b6:	761a      	strb	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000e100 	.word	0xe000e100
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	@ 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	bf28      	it	cs
 80034ea:	2304      	movcs	r3, #4
 80034ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d902      	bls.n	80034fc <NVIC_EncodePriority+0x30>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3b03      	subs	r3, #3
 80034fa:	e000      	b.n	80034fe <NVIC_EncodePriority+0x32>
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003514:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	43d9      	mvns	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	4313      	orrs	r3, r2
         );
}
 8003526:	4618      	mov	r0, r3
 8003528:	3724      	adds	r7, #36	@ 0x24
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff4c 	bl	80033d8 <__NVIC_SetPriorityGrouping>
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003556:	f7ff ff63 	bl	8003420 <__NVIC_GetPriorityGrouping>
 800355a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	6978      	ldr	r0, [r7, #20]
 8003562:	f7ff ffb3 	bl	80034cc <NVIC_EncodePriority>
 8003566:	4602      	mov	r2, r0
 8003568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff ff82 	bl	8003478 <__NVIC_SetPriority>
}
 8003574:	bf00      	nop
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff56 	bl	800343c <__NVIC_EnableIRQ>
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a8:	d301      	bcc.n	80035ae <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00d      	b.n	80035ca <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80035ae:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <HAL_SYSTICK_Config+0x40>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80035b6:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <HAL_SYSTICK_Config+0x40>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_SYSTICK_Config+0x40>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a05      	ldr	r2, [pc, #20]	@ (80035d8 <HAL_SYSTICK_Config+0x40>)
 80035c2:	f043 0303 	orr.w	r3, r3, #3
 80035c6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e010 	.word	0xe000e010

080035dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d844      	bhi.n	8003674 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80035ea:	a201      	add	r2, pc, #4	@ (adr r2, 80035f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003613 	.word	0x08003613
 80035f4:	08003631 	.word	0x08003631
 80035f8:	08003653 	.word	0x08003653
 80035fc:	08003675 	.word	0x08003675
 8003600:	08003605 	.word	0x08003605
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003604:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1e      	ldr	r2, [pc, #120]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6013      	str	r3, [r2, #0]
      break;
 8003610:	e031      	b.n	8003676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003612:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1b      	ldr	r2, [pc, #108]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800361e:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003626:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800362a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800362e:	e022      	b.n	8003676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003630:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003636:	f023 0304 	bic.w	r3, r3, #4
 800363a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800363c:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800363e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003642:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003646:	4a10      	ldr	r2, [pc, #64]	@ (8003688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003648:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800364c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003650:	e011      	b.n	8003676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003652:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a0b      	ldr	r2, [pc, #44]	@ (8003684 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800365e:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003664:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003668:	4a07      	ldr	r2, [pc, #28]	@ (8003688 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800366a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800366e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003672:	e000      	b.n	8003676 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003674:	bf00      	nop
  }
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010
 8003688:	46020c00 	.word	0x46020c00

0800368c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003692:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800369e:	2304      	movs	r3, #4
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	e021      	b.n	80036e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80036a4:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80036a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036aa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80036ae:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036b6:	d011      	beq.n	80036dc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036be:	d810      	bhi.n	80036e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036cc:	d003      	beq.n	80036d6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80036ce:	e008      	b.n	80036e2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80036d0:	2300      	movs	r3, #0
 80036d2:	607b      	str	r3, [r7, #4]
        break;
 80036d4:	e008      	b.n	80036e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80036d6:	2301      	movs	r3, #1
 80036d8:	607b      	str	r3, [r7, #4]
        break;
 80036da:	e005      	b.n	80036e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80036dc:	2302      	movs	r3, #2
 80036de:	607b      	str	r3, [r7, #4]
        break;
 80036e0:	e002      	b.n	80036e8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]
        break;
 80036e6:	bf00      	nop
    }
  }
  return systick_source;
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010
 80036fc:	46020c00 	.word	0x46020c00

08003700 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003712:	e1ba      	b.n	8003a8a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2101      	movs	r1, #1
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 81aa 	beq.w	8003a84 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a55      	ldr	r2, [pc, #340]	@ (8003888 <HAL_GPIO_Init+0x188>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d15d      	bne.n	80037f4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800373e:	2201      	movs	r2, #1
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	4013      	ands	r3, r2
 800374c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0201 	and.w	r2, r3, #1
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	4313      	orrs	r3, r2
 8003760:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003768:	4a48      	ldr	r2, [pc, #288]	@ (800388c <HAL_GPIO_Init+0x18c>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003770:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003772:	4a46      	ldr	r2, [pc, #280]	@ (800388c <HAL_GPIO_Init+0x18c>)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3208      	adds	r2, #8
 8003786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	220f      	movs	r2, #15
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	4013      	ands	r3, r2
 80037a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	220b      	movs	r2, #11
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	08da      	lsrs	r2, r3, #3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3208      	adds	r2, #8
 80037be:	69f9      	ldr	r1, [r7, #28]
 80037c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	4013      	ands	r3, r2
 80037da:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2202      	movs	r2, #2
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e067      	b.n	80038c4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x104>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b12      	cmp	r3, #18
 8003802:	d145      	bne.n	8003890 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003810:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	220f      	movs	r2, #15
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	4013      	ands	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	4313      	orrs	r3, r2
 8003840:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	4013      	ands	r3, r2
 8003866:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	4313      	orrs	r3, r2
 800387c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e01e      	b.n	80038c4 <HAL_GPIO_Init+0x1c4>
 8003886:	bf00      	nop
 8003888:	46020000 	.word	0x46020000
 800388c:	0800e300 	.word	0x0800e300
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0203 	and.w	r2, r3, #3
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d00b      	beq.n	80038e4 <HAL_GPIO_Init+0x1e4>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d007      	beq.n	80038e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038d8:	2b11      	cmp	r3, #17
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b12      	cmp	r3, #18
 80038e2:	d130      	bne.n	8003946 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	4313      	orrs	r3, r2
 800390c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800391a:	2201      	movs	r2, #1
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	4013      	ands	r3, r2
 8003928:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	f003 0201 	and.w	r2, r3, #1
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	4313      	orrs	r3, r2
 800393e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d017      	beq.n	800397e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	4013      	ands	r3, r2
 8003964:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	4313      	orrs	r3, r2
 8003976:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d07c      	beq.n	8003a84 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800398a:	4a47      	ldr	r2, [pc, #284]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3318      	adds	r3, #24
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0a9a      	lsrs	r2, r3, #10
 80039b2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aac <HAL_GPIO_Init+0x3ac>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	f002 0203 	and.w	r2, r2, #3
 80039bc:	00d2      	lsls	r2, r2, #3
 80039be:	4093      	lsls	r3, r2
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80039c6:	4938      	ldr	r1, [pc, #224]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3318      	adds	r3, #24
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80039d4:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80039f8:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80039fe:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003a22:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003a28:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003a56:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 8003a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa8 <HAL_GPIO_Init+0x3a8>)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	3301      	adds	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f ae3d 	bne.w	8003714 <HAL_GPIO_Init+0x14>
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	@ 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	46022000 	.word	0x46022000
 8003aac:	002f7f7f 	.word	0x002f7f7f

08003ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
 8003abc:	4613      	mov	r3, r2
 8003abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ac0:	787b      	ldrb	r3, [r7, #1]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003acc:	e002      	b.n	8003ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003ae8:	4b39      	ldr	r3, [pc, #228]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003af0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d10b      	bne.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d905      	bls.n	8003b0e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003b02:	4b33      	ldr	r3, [pc, #204]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a32      	ldr	r2, [pc, #200]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e057      	b.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b18:	d90a      	bls.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	60d3      	str	r3, [r2, #12]
 8003b2e:	e007      	b.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003b30:	4b27      	ldr	r3, [pc, #156]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003b38:	4925      	ldr	r1, [pc, #148]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a24      	ldr	r2, [pc, #144]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	2232      	movs	r2, #50	@ 0x32
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	4a21      	ldr	r2, [pc, #132]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003b5e:	e002      	b.n	8003b66 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003b66:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f3      	bne.n	8003b60 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01b      	beq.n	8003bb6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b7e:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	099b      	lsrs	r3, r3, #6
 8003b8a:	2232      	movs	r2, #50	@ 0x32
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	4a11      	ldr	r2, [pc, #68]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003b9c:	e002      	b.n	8003ba4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f3      	bne.n	8003b9e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e000      	b.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	46020800 	.word	0x46020800
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	10624dd3 	.word	0x10624dd3

08003bdc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	46020800 	.word	0x46020800

08003bf8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_PWREx_EnableVddA+0x1c>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <HAL_PWREx_EnableVddA+0x1c>)
 8003c02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c06:	6113      	str	r3, [r2, #16]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	46020800 	.word	0x46020800

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	@ 0x38
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f000 bec8 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c32:	4b99      	ldr	r3, [pc, #612]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3c:	4b96      	ldr	r3, [pc, #600]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 816c 	beq.w	8003f2c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_RCC_OscConfig+0x52>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	f040 80de 	bne.w	8003e1e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 80da 	bne.w	8003e1e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f000 bea5 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c7c:	4b86      	ldr	r3, [pc, #536]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_RCC_OscConfig+0x7a>
 8003c88:	4b83      	ldr	r3, [pc, #524]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c90:	e005      	b.n	8003c9e <HAL_RCC_OscConfig+0x86>
 8003c92:	4b81      	ldr	r3, [pc, #516]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d255      	bcs.n	8003d4e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 f9d9 	bl	8005064 <RCC_SetFlashLatencyFromMSIRange>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f000 be82 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003cbe:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4a75      	ldr	r2, [pc, #468]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cc8:	6093      	str	r3, [r2, #8]
 8003cca:	4b73      	ldr	r3, [pc, #460]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd6:	4970      	ldr	r1, [pc, #448]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ce4:	d309      	bcc.n	8003cfa <HAL_RCC_OscConfig+0xe2>
 8003ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f023 021f 	bic.w	r2, r3, #31
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4969      	ldr	r1, [pc, #420]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60cb      	str	r3, [r1, #12]
 8003cf8:	e07e      	b.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	da0a      	bge.n	8003d18 <HAL_RCC_OscConfig+0x100>
 8003d02:	4b65      	ldr	r3, [pc, #404]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	015b      	lsls	r3, r3, #5
 8003d10:	4961      	ldr	r1, [pc, #388]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60cb      	str	r3, [r1, #12]
 8003d16:	e06f      	b.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d30a      	bcc.n	8003d38 <HAL_RCC_OscConfig+0x120>
 8003d22:	4b5d      	ldr	r3, [pc, #372]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	029b      	lsls	r3, r3, #10
 8003d30:	4959      	ldr	r1, [pc, #356]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
 8003d36:	e05f      	b.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
 8003d38:	4b57      	ldr	r3, [pc, #348]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	03db      	lsls	r3, r3, #15
 8003d46:	4954      	ldr	r1, [pc, #336]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60cb      	str	r3, [r1, #12]
 8003d4c:	e054      	b.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d4e:	4b52      	ldr	r3, [pc, #328]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4a51      	ldr	r2, [pc, #324]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d58:	6093      	str	r3, [r2, #8]
 8003d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	494c      	ldr	r1, [pc, #304]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003d74:	d309      	bcc.n	8003d8a <HAL_RCC_OscConfig+0x172>
 8003d76:	4b48      	ldr	r3, [pc, #288]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f023 021f 	bic.w	r2, r3, #31
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	4945      	ldr	r1, [pc, #276]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60cb      	str	r3, [r1, #12]
 8003d88:	e028      	b.n	8003ddc <HAL_RCC_OscConfig+0x1c4>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da0a      	bge.n	8003da8 <HAL_RCC_OscConfig+0x190>
 8003d92:	4b41      	ldr	r3, [pc, #260]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	015b      	lsls	r3, r3, #5
 8003da0:	493d      	ldr	r1, [pc, #244]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60cb      	str	r3, [r1, #12]
 8003da6:	e019      	b.n	8003ddc <HAL_RCC_OscConfig+0x1c4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db0:	d30a      	bcc.n	8003dc8 <HAL_RCC_OscConfig+0x1b0>
 8003db2:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	029b      	lsls	r3, r3, #10
 8003dc0:	4935      	ldr	r1, [pc, #212]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60cb      	str	r3, [r1, #12]
 8003dc6:	e009      	b.n	8003ddc <HAL_RCC_OscConfig+0x1c4>
 8003dc8:	4b33      	ldr	r3, [pc, #204]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	03db      	lsls	r3, r3, #15
 8003dd6:	4930      	ldr	r1, [pc, #192]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 f93c 	bl	8005064 <RCC_SetFlashLatencyFromMSIRange>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f000 bde5 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003df8:	f001 f8de 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dfc:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <HAL_RCC_OscConfig+0x284>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fdd7 	bl	80019b4 <HAL_InitTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 808a 	beq.w	8003f2a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e1a:	f000 bdd2 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d066      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003e26:	4b1c      	ldr	r3, [pc, #112]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e32:	f7fd fe49 	bl	8001ac8 <HAL_GetTick>
 8003e36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003e38:	e009      	b.n	8003e4e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fe45 	bl	8001ac8 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d902      	bls.n	8003e4e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	f000 bdba 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003e4e:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0ef      	beq.n	8003e3a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e64:	6093      	str	r3, [r2, #8]
 8003e66:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	4909      	ldr	r1, [pc, #36]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e80:	d30e      	bcc.n	8003ea0 <HAL_RCC_OscConfig+0x288>
 8003e82:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 021f 	bic.w	r2, r3, #31
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4902      	ldr	r1, [pc, #8]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60cb      	str	r3, [r1, #12]
 8003e94:	e04a      	b.n	8003f2c <HAL_RCC_OscConfig+0x314>
 8003e96:	bf00      	nop
 8003e98:	46020c00 	.word	0x46020c00
 8003e9c:	20000004 	.word	0x20000004
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da0a      	bge.n	8003ebe <HAL_RCC_OscConfig+0x2a6>
 8003ea8:	4b98      	ldr	r3, [pc, #608]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	015b      	lsls	r3, r3, #5
 8003eb6:	4995      	ldr	r1, [pc, #596]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60cb      	str	r3, [r1, #12]
 8003ebc:	e036      	b.n	8003f2c <HAL_RCC_OscConfig+0x314>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec6:	d30a      	bcc.n	8003ede <HAL_RCC_OscConfig+0x2c6>
 8003ec8:	4b90      	ldr	r3, [pc, #576]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	029b      	lsls	r3, r3, #10
 8003ed6:	498d      	ldr	r1, [pc, #564]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60cb      	str	r3, [r1, #12]
 8003edc:	e026      	b.n	8003f2c <HAL_RCC_OscConfig+0x314>
 8003ede:	4b8b      	ldr	r3, [pc, #556]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	03db      	lsls	r3, r3, #15
 8003eec:	4987      	ldr	r1, [pc, #540]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60cb      	str	r3, [r1, #12]
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003ef4:	4b85      	ldr	r3, [pc, #532]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a84      	ldr	r2, [pc, #528]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f00:	f7fd fde2 	bl	8001ac8 <HAL_GetTick>
 8003f04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003f06:	e009      	b.n	8003f1c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f08:	f7fd fdde 	bl	8001ac8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d902      	bls.n	8003f1c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	f000 bd53 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ef      	bne.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
 8003f28:	e000      	b.n	8003f2c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 808b 	beq.w	8004050 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_OscConfig+0x334>
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d17d      	bne.n	8004050 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f000 bd34 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x35a>
 8003f64:	4b69      	ldr	r3, [pc, #420]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a68      	ldr	r2, [pc, #416]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e041      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3de>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f7a:	d112      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x38a>
 8003f7c:	4b63      	ldr	r3, [pc, #396]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a62      	ldr	r2, [pc, #392]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b60      	ldr	r3, [pc, #384]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b5d      	ldr	r3, [pc, #372]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a5c      	ldr	r2, [pc, #368]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e029      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3de>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003faa:	d112      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3ba>
 8003fac:	4b57      	ldr	r3, [pc, #348]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a56      	ldr	r2, [pc, #344]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b54      	ldr	r3, [pc, #336]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a53      	ldr	r2, [pc, #332]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b51      	ldr	r3, [pc, #324]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a50      	ldr	r2, [pc, #320]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e011      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3de>
 8003fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b4b      	ldr	r3, [pc, #300]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b48      	ldr	r3, [pc, #288]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a47      	ldr	r2, [pc, #284]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d014      	beq.n	8004028 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fd63 	bl	8001ac8 <HAL_GetTick>
 8004002:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004004:	e009      	b.n	800401a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004006:	f7fd fd5f 	bl	8001ac8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b64      	cmp	r3, #100	@ 0x64
 8004012:	d902      	bls.n	800401a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	f000 bcd4 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	4b3c      	ldr	r3, [pc, #240]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ef      	beq.n	8004006 <HAL_RCC_OscConfig+0x3ee>
 8004026:	e013      	b.n	8004050 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004028:	f7fd fd4e 	bl	8001ac8 <HAL_GetTick>
 800402c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800402e:	e009      	b.n	8004044 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fd fd4a 	bl	8001ac8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	@ 0x64
 800403c:	d902      	bls.n	8004044 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	f000 bcbf 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004044:	4b31      	ldr	r3, [pc, #196]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ef      	bne.n	8004030 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05f      	beq.n	800411c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	2b04      	cmp	r3, #4
 8004060:	d005      	beq.n	800406e <HAL_RCC_OscConfig+0x456>
 8004062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d114      	bne.n	8004092 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406a:	2b02      	cmp	r3, #2
 800406c:	d111      	bne.n	8004092 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f000 bca3 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b23      	ldr	r3, [pc, #140]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	4920      	ldr	r1, [pc, #128]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004090:	e044      	b.n	800411c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d024      	beq.n	80040e4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800409a:	4b1c      	ldr	r3, [pc, #112]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1b      	ldr	r2, [pc, #108]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040a6:	f7fd fd0f 	bl	8001ac8 <HAL_GetTick>
 80040aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	e009      	b.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fd fd0b 	bl	8001ac8 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d902      	bls.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	f000 bc80 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c2:	4b12      	ldr	r3, [pc, #72]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ef      	beq.n	80040ae <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	490b      	ldr	r1, [pc, #44]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	610b      	str	r3, [r1, #16]
 80040e2:	e01b      	b.n	800411c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80040e4:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a08      	ldr	r2, [pc, #32]	@ (800410c <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040f0:	f7fd fcea 	bl	8001ac8 <HAL_GetTick>
 80040f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f8:	f7fd fce6 	bl	8001ac8 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d904      	bls.n	8004110 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	f000 bc5b 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
 800410c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004110:	4baf      	ldr	r3, [pc, #700]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ed      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80c8 	beq.w	80042ba <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004130:	4ba7      	ldr	r3, [pc, #668]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d111      	bne.n	8004162 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	4ba4      	ldr	r3, [pc, #656]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004144:	4aa2      	ldr	r2, [pc, #648]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800414e:	4ba0      	ldr	r3, [pc, #640]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004162:	4b9c      	ldr	r3, [pc, #624]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800416e:	4b99      	ldr	r3, [pc, #612]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	4a98      	ldr	r2, [pc, #608]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417a:	f7fd fca5 	bl	8001ac8 <HAL_GetTick>
 800417e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004180:	e009      	b.n	8004196 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004182:	f7fd fca1 	bl	8001ac8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d902      	bls.n	8004196 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	f000 bc16 	b.w	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004196:	4b8f      	ldr	r3, [pc, #572]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0ef      	beq.n	8004182 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d05f      	beq.n	800426a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80041aa:	4b89      	ldr	r3, [pc, #548]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80041ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041b0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	429a      	cmp	r2, r3
 80041be:	d037      	beq.n	8004230 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d006      	beq.n	80041d8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e3f4      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01b      	beq.n	800421a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80041e2:	4b7b      	ldr	r3, [pc, #492]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80041e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e8:	4a79      	ldr	r2, [pc, #484]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80041ea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80041ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80041f2:	f7fd fc69 	bl	8001ac8 <HAL_GetTick>
 80041f6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fd fc65 	bl	8001ac8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b05      	cmp	r3, #5
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e3da      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800420c:	4b70      	ldr	r3, [pc, #448]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800420e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ef      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800421a:	4b6d      	ldr	r3, [pc, #436]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800421c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004220:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4969      	ldr	r1, [pc, #420]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004230:	4b67      	ldr	r3, [pc, #412]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004236:	4a66      	ldr	r2, [pc, #408]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004238:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800423c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004240:	f7fd fc42 	bl	8001ac8 <HAL_GetTick>
 8004244:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004248:	f7fd fc3e 	bl	8001ac8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b05      	cmp	r3, #5
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e3b3      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800425a:	4b5d      	ldr	r3, [pc, #372]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800425c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ef      	beq.n	8004248 <HAL_RCC_OscConfig+0x630>
 8004268:	e01b      	b.n	80042a2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b59      	ldr	r3, [pc, #356]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800426c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004270:	4a57      	ldr	r2, [pc, #348]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004272:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800427a:	f7fd fc25 	bl	8001ac8 <HAL_GetTick>
 800427e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004282:	f7fd fc21 	bl	8001ac8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b05      	cmp	r3, #5
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e396      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004294:	4b4e      	ldr	r3, [pc, #312]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800429a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ef      	bne.n	8004282 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b49      	ldr	r3, [pc, #292]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80042ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b0:	4a47      	ldr	r2, [pc, #284]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8111 	beq.w	80044ea <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ce:	4b40      	ldr	r3, [pc, #256]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d111      	bne.n	8004300 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042dc:	4b3c      	ldr	r3, [pc, #240]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e2:	4a3b      	ldr	r2, [pc, #236]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80042ec:	4b38      	ldr	r3, [pc, #224]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004300:	4b34      	ldr	r3, [pc, #208]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d118      	bne.n	800433e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800430c:	4b31      	ldr	r3, [pc, #196]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	4a30      	ldr	r2, [pc, #192]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004318:	f7fd fbd6 	bl	8001ac8 <HAL_GetTick>
 800431c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7fd fbd2 	bl	8001ac8 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e347      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004332:	4b28      	ldr	r3, [pc, #160]	@ (80043d4 <HAL_RCC_OscConfig+0x7bc>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01f      	beq.n	800438a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004356:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800435c:	4a1c      	ldr	r2, [pc, #112]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800435e:	f043 0304 	orr.w	r3, r3, #4
 8004362:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004366:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800436c:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004376:	e018      	b.n	80043aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004378:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800437a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800437e:	4a14      	ldr	r2, [pc, #80]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004388:	e00f      	b.n	80043aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800438a:	4b11      	ldr	r3, [pc, #68]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800438c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004390:	4a0f      	ldr	r2, [pc, #60]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 800439c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a0:	4a0b      	ldr	r2, [pc, #44]	@ (80043d0 <HAL_RCC_OscConfig+0x7b8>)
 80043a2:	f023 0304 	bic.w	r3, r3, #4
 80043a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d057      	beq.n	8004462 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80043b2:	f7fd fb89 	bl	8001ac8 <HAL_GetTick>
 80043b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b8:	e00e      	b.n	80043d8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fd fb85 	bl	8001ac8 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d905      	bls.n	80043d8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e2f8      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
 80043d0:	46020c00 	.word	0x46020c00
 80043d4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d8:	4b9c      	ldr	r3, [pc, #624]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80043da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0e9      	beq.n	80043ba <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01b      	beq.n	800442a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043f2:	4b96      	ldr	r3, [pc, #600]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80043f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043f8:	4a94      	ldr	r2, [pc, #592]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80043fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd fb60 	bl	8001ac8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e2d3      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800441a:	4b8c      	ldr	r3, [pc, #560]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800441c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ed      	beq.n	8004404 <HAL_RCC_OscConfig+0x7ec>
 8004428:	e053      	b.n	80044d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800442a:	4b88      	ldr	r3, [pc, #544]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800442c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004430:	4a86      	ldr	r2, [pc, #536]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fd fb44 	bl	8001ac8 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e2b7      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004452:	4b7e      	ldr	r3, [pc, #504]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ed      	bne.n	800443c <HAL_RCC_OscConfig+0x824>
 8004460:	e037      	b.n	80044d2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004462:	f7fd fb31 	bl	8001ac8 <HAL_GetTick>
 8004466:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004468:	e00a      	b.n	8004480 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446a:	f7fd fb2d 	bl	8001ac8 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e2a0      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004480:	4b72      	ldr	r3, [pc, #456]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ed      	bne.n	800446a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800448e:	4b6f      	ldr	r3, [pc, #444]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01a      	beq.n	80044d2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800449c:	4b6b      	ldr	r3, [pc, #428]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800449e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a2:	4a6a      	ldr	r2, [pc, #424]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80044a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fd fb0b 	bl	8001ac8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e27e      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80044c4:	4b61      	ldr	r3, [pc, #388]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80044c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1ed      	bne.n	80044ae <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4b5c      	ldr	r3, [pc, #368]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80044dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e0:	4a5a      	ldr	r2, [pc, #360]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d036      	beq.n	8004564 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d019      	beq.n	8004532 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80044fe:	4b53      	ldr	r3, [pc, #332]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a52      	ldr	r2, [pc, #328]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004508:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800450a:	f7fd fadd 	bl	8001ac8 <HAL_GetTick>
 800450e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004512:	f7fd fad9 	bl	8001ac8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e24e      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004524:	4b49      	ldr	r3, [pc, #292]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x8fa>
 8004530:	e018      	b.n	8004564 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004532:	4b46      	ldr	r3, [pc, #280]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a45      	ldr	r2, [pc, #276]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800453c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800453e:	f7fd fac3 	bl	8001ac8 <HAL_GetTick>
 8004542:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004546:	f7fd fabf 	bl	8001ac8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e234      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004558:	4b3c      	ldr	r3, [pc, #240]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456c:	2b00      	cmp	r3, #0
 800456e:	d036      	beq.n	80045de <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d019      	beq.n	80045ac <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004578:	4b34      	ldr	r3, [pc, #208]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a33      	ldr	r2, [pc, #204]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800457e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004582:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004584:	f7fd faa0 	bl	8001ac8 <HAL_GetTick>
 8004588:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800458c:	f7fd fa9c 	bl	8001ac8 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e211      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800459e:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0x974>
 80045aa:	e018      	b.n	80045de <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80045ac:	4b27      	ldr	r3, [pc, #156]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a26      	ldr	r2, [pc, #152]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80045b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80045b8:	f7fd fa86 	bl	8001ac8 <HAL_GetTick>
 80045bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80045c0:	f7fd fa82 	bl	8001ac8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e1f7      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80045d2:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d07f      	beq.n	80046ea <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d062      	beq.n	80046b8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80045f2:	4b16      	ldr	r3, [pc, #88]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4a15      	ldr	r2, [pc, #84]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 80045f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045fc:	6093      	str	r3, [r2, #8]
 80045fe:	4b13      	ldr	r3, [pc, #76]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	4910      	ldr	r1, [pc, #64]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004618:	d309      	bcc.n	800462e <HAL_RCC_OscConfig+0xa16>
 800461a:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 021f 	bic.w	r2, r3, #31
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4909      	ldr	r1, [pc, #36]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004628:	4313      	orrs	r3, r2
 800462a:	60cb      	str	r3, [r1, #12]
 800462c:	e02a      	b.n	8004684 <HAL_RCC_OscConfig+0xa6c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	da0c      	bge.n	8004650 <HAL_RCC_OscConfig+0xa38>
 8004636:	4b05      	ldr	r3, [pc, #20]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	015b      	lsls	r3, r3, #5
 8004644:	4901      	ldr	r1, [pc, #4]	@ (800464c <HAL_RCC_OscConfig+0xa34>)
 8004646:	4313      	orrs	r3, r2
 8004648:	60cb      	str	r3, [r1, #12]
 800464a:	e01b      	b.n	8004684 <HAL_RCC_OscConfig+0xa6c>
 800464c:	46020c00 	.word	0x46020c00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004658:	d30a      	bcc.n	8004670 <HAL_RCC_OscConfig+0xa58>
 800465a:	4ba1      	ldr	r3, [pc, #644]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	499d      	ldr	r1, [pc, #628]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800466a:	4313      	orrs	r3, r2
 800466c:	60cb      	str	r3, [r1, #12]
 800466e:	e009      	b.n	8004684 <HAL_RCC_OscConfig+0xa6c>
 8004670:	4b9b      	ldr	r3, [pc, #620]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	03db      	lsls	r3, r3, #15
 800467e:	4998      	ldr	r1, [pc, #608]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004680:	4313      	orrs	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004684:	4b96      	ldr	r3, [pc, #600]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a95      	ldr	r2, [pc, #596]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800468a:	f043 0310 	orr.w	r3, r3, #16
 800468e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004690:	f7fd fa1a 	bl	8001ac8 <HAL_GetTick>
 8004694:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004698:	f7fd fa16 	bl	8001ac8 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e18b      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80046aa:	4b8d      	ldr	r3, [pc, #564]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0xa80>
 80046b6:	e018      	b.n	80046ea <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80046b8:	4b89      	ldr	r3, [pc, #548]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a88      	ldr	r2, [pc, #544]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80046be:	f023 0310 	bic.w	r3, r3, #16
 80046c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046c4:	f7fd fa00 	bl	8001ac8 <HAL_GetTick>
 80046c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80046cc:	f7fd f9fc 	bl	8001ac8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e171      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80046de:	4b80      	ldr	r3, [pc, #512]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8166 	beq.w	80049c0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046fa:	4b79      	ldr	r3, [pc, #484]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b0c      	cmp	r3, #12
 8004704:	f000 80f2 	beq.w	80048ec <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	2b02      	cmp	r3, #2
 800470e:	f040 80c5 	bne.w	800489c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b73      	ldr	r3, [pc, #460]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a72      	ldr	r2, [pc, #456]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800471c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800471e:	f7fd f9d3 	bl	8001ac8 <HAL_GetTick>
 8004722:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004726:	f7fd f9cf 	bl	8001ac8 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e144      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004738:	4b69      	ldr	r3, [pc, #420]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004744:	4b66      	ldr	r3, [pc, #408]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d111      	bne.n	8004776 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	4b63      	ldr	r3, [pc, #396]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004758:	4a61      	ldr	r2, [pc, #388]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004762:	4b5f      	ldr	r3, [pc, #380]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004776:	4b5b      	ldr	r3, [pc, #364]	@ (80048e4 <HAL_RCC_OscConfig+0xccc>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800477e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004782:	d102      	bne.n	800478a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800478a:	4b56      	ldr	r3, [pc, #344]	@ (80048e4 <HAL_RCC_OscConfig+0xccc>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4a55      	ldr	r2, [pc, #340]	@ (80048e4 <HAL_RCC_OscConfig+0xccc>)
 8004790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004794:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004796:	4b52      	ldr	r3, [pc, #328]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047aa:	3a01      	subs	r2, #1
 80047ac:	0212      	lsls	r2, r2, #8
 80047ae:	4311      	orrs	r1, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80047b4:	430a      	orrs	r2, r1
 80047b6:	494a      	ldr	r1, [pc, #296]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80047bc:	4b48      	ldr	r3, [pc, #288]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80047be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c0:	4b49      	ldr	r3, [pc, #292]	@ (80048e8 <HAL_RCC_OscConfig+0xcd0>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80047c8:	3a01      	subs	r2, #1
 80047ca:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80047d2:	3a01      	subs	r2, #1
 80047d4:	0252      	lsls	r2, r2, #9
 80047d6:	b292      	uxth	r2, r2
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047de:	3a01      	subs	r2, #1
 80047e0:	0412      	lsls	r2, r2, #16
 80047e2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80047e6:	4311      	orrs	r1, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047ec:	3a01      	subs	r2, #1
 80047ee:	0612      	lsls	r2, r2, #24
 80047f0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80047f4:	430a      	orrs	r2, r1
 80047f6:	493a      	ldr	r1, [pc, #232]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80047fc:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	4a37      	ldr	r2, [pc, #220]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004802:	f023 0310 	bic.w	r3, r3, #16
 8004806:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480c:	4a34      	ldr	r2, [pc, #208]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004812:	4b33      	ldr	r3, [pc, #204]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	4a32      	ldr	r2, [pc, #200]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004818:	f043 0310 	orr.w	r3, r3, #16
 800481c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800481e:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	f023 020c 	bic.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482a:	492d      	ldr	r1, [pc, #180]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800482c:	4313      	orrs	r3, r2
 800482e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004830:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004838:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <HAL_RCC_OscConfig+0xccc>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a29      	ldr	r2, [pc, #164]	@ (80048e4 <HAL_RCC_OscConfig+0xccc>)
 800483e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004842:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004844:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800484c:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800484e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004852:	4a23      	ldr	r2, [pc, #140]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800485c:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1f      	ldr	r2, [pc, #124]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004866:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004868:	f7fd f92e 	bl	8001ac8 <HAL_GetTick>
 800486c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fd f92a 	bl	8001ac8 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e09f      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004882:	4b17      	ldr	r3, [pc, #92]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800488e:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004892:	4a13      	ldr	r2, [pc, #76]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 8004894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004898:	6293      	str	r3, [r2, #40]	@ 0x28
 800489a:	e091      	b.n	80049c0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800489c:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0f      	ldr	r2, [pc, #60]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80048a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80048a8:	f7fd f90e 	bl	8001ac8 <HAL_GetTick>
 80048ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd f90a 	bl	8001ac8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e07f      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048c2:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80048ce:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	4a03      	ldr	r2, [pc, #12]	@ (80048e0 <HAL_RCC_OscConfig+0xcc8>)
 80048d4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80048d8:	f023 0303 	bic.w	r3, r3, #3
 80048dc:	6293      	str	r3, [r2, #40]	@ 0x28
 80048de:	e06f      	b.n	80049c0 <HAL_RCC_OscConfig+0xda8>
 80048e0:	46020c00 	.word	0x46020c00
 80048e4:	46020800 	.word	0x46020800
 80048e8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80048ec:	4b37      	ldr	r3, [pc, #220]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048f2:	4b36      	ldr	r3, [pc, #216]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d039      	beq.n	8004974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0203 	and.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490a:	429a      	cmp	r2, r3
 800490c:	d132      	bne.n	8004974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d129      	bne.n	8004974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d122      	bne.n	8004974 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004938:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d11a      	bne.n	8004974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	0a5b      	lsrs	r3, r3, #9
 8004942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d111      	bne.n	8004974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	0c1b      	lsrs	r3, r3, #16
 8004954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800495c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d108      	bne.n	8004974 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e024      	b.n	80049c2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004978:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	08db      	lsrs	r3, r3, #3
 800497e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004986:	429a      	cmp	r2, r3
 8004988:	d01a      	beq.n	80049c0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800498a:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 800498c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498e:	4a0f      	ldr	r2, [pc, #60]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 8004990:	f023 0310 	bic.w	r3, r3, #16
 8004994:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fd f897 	bl	8001ac8 <HAL_GetTick>
 800499a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800499c:	bf00      	nop
 800499e:	f7fd f893 	bl	8001ac8 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d0f9      	beq.n	800499e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ae:	4a07      	ldr	r2, [pc, #28]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80049b4:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	4a04      	ldr	r2, [pc, #16]	@ (80049cc <HAL_RCC_OscConfig+0xdb4>)
 80049ba:	f043 0310 	orr.w	r3, r3, #16
 80049be:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3738      	adds	r7, #56	@ 0x38
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	46020c00 	.word	0x46020c00

080049d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e1d9      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b9b      	ldr	r3, [pc, #620]	@ (8004c54 <HAL_RCC_ClockConfig+0x284>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d910      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b98      	ldr	r3, [pc, #608]	@ (8004c54 <HAL_RCC_ClockConfig+0x284>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 020f 	bic.w	r2, r3, #15
 80049fa:	4996      	ldr	r1, [pc, #600]	@ (8004c54 <HAL_RCC_ClockConfig+0x284>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b94      	ldr	r3, [pc, #592]	@ (8004c54 <HAL_RCC_ClockConfig+0x284>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e1c1      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	4b8c      	ldr	r3, [pc, #560]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d908      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004a30:	4b89      	ldr	r3, [pc, #548]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	4986      	ldr	r1, [pc, #536]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	4b81      	ldr	r3, [pc, #516]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d909      	bls.n	8004a74 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004a60:	4b7d      	ldr	r3, [pc, #500]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	497a      	ldr	r1, [pc, #488]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d010      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b74      	ldr	r3, [pc, #464]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d908      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4b71      	ldr	r3, [pc, #452]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	496e      	ldr	r1, [pc, #440]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d010      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	4b69      	ldr	r3, [pc, #420]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d908      	bls.n	8004ad0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004abe:	4b66      	ldr	r3, [pc, #408]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 020f 	bic.w	r2, r3, #15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	4963      	ldr	r1, [pc, #396]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80d2 	beq.w	8004c82 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d143      	bne.n	8004b72 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b5b      	ldr	r3, [pc, #364]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d110      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004af8:	4b57      	ldr	r3, [pc, #348]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afe:	4a56      	ldr	r2, [pc, #344]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b08:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004b1a:	f7fc ffd5 	bl	8001ac8 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004b20:	4b4e      	ldr	r3, [pc, #312]	@ (8004c5c <HAL_RCC_ClockConfig+0x28c>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00f      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004b2e:	f7fc ffcb 	bl	8001ac8 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e12b      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004b40:	4b46      	ldr	r3, [pc, #280]	@ (8004c5c <HAL_RCC_ClockConfig+0x28c>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b52:	4b41      	ldr	r3, [pc, #260]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b58:	4a3f      	ldr	r2, [pc, #252]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004b5a:	f023 0304 	bic.w	r3, r3, #4
 8004b5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b62:	4b3d      	ldr	r3, [pc, #244]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d121      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e112      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d107      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7a:	4b37      	ldr	r3, [pc, #220]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d115      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e106      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b92:	4b31      	ldr	r3, [pc, #196]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0fa      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0f2      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004bb2:	4b29      	ldr	r3, [pc, #164]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4926      	ldr	r1, [pc, #152]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004bc4:	f7fc ff80 	bl	8001ac8 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d112      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd4:	f7fc ff78 	bl	8001ac8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e0d6      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d1ee      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x204>
 8004bf6:	e044      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d112      	bne.n	8004c26 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c00:	e00a      	b.n	8004c18 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c02:	f7fc ff61 	bl	8001ac8 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0bf      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c18:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d1ee      	bne.n	8004c02 <HAL_RCC_ClockConfig+0x232>
 8004c24:	e02d      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d123      	bne.n	8004c76 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c30:	f7fc ff4a 	bl	8001ac8 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0a8      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c46:	4b04      	ldr	r3, [pc, #16]	@ (8004c58 <HAL_RCC_ClockConfig+0x288>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ee      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x260>
 8004c52:	e016      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2b2>
 8004c54:	40022000 	.word	0x40022000
 8004c58:	46020c00 	.word	0x46020c00
 8004c5c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c60:	f7fc ff32 	bl	8001ac8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e090      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c76:	4b4a      	ldr	r3, [pc, #296]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d1ee      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	4b43      	ldr	r3, [pc, #268]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d208      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004c9e:	4b40      	ldr	r3, [pc, #256]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 020f 	bic.w	r2, r3, #15
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	493d      	ldr	r1, [pc, #244]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8004da4 <HAL_RCC_ClockConfig+0x3d4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d210      	bcs.n	8004ce0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <HAL_RCC_ClockConfig+0x3d4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 020f 	bic.w	r2, r3, #15
 8004cc6:	4937      	ldr	r1, [pc, #220]	@ (8004da4 <HAL_RCC_ClockConfig+0x3d4>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b35      	ldr	r3, [pc, #212]	@ (8004da4 <HAL_RCC_ClockConfig+0x3d4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e05b      	b.n	8004d98 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d208      	bcs.n	8004d0e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b28      	ldr	r3, [pc, #160]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4925      	ldr	r1, [pc, #148]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d012      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	4b20      	ldr	r3, [pc, #128]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d209      	bcs.n	8004d40 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	4919      	ldr	r1, [pc, #100]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d010      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d208      	bcs.n	8004d6e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004d5c:	4b10      	ldr	r3, [pc, #64]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	490d      	ldr	r1, [pc, #52]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004d6e:	f000 f821 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <HAL_RCC_ClockConfig+0x3d0>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	490a      	ldr	r1, [pc, #40]	@ (8004da8 <HAL_RCC_ClockConfig+0x3d8>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	4a09      	ldr	r2, [pc, #36]	@ (8004dac <HAL_RCC_ClockConfig+0x3dc>)
 8004d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <HAL_RCC_ClockConfig+0x3e0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fc fe11 	bl	80019b4 <HAL_InitTick>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	46020c00 	.word	0x46020c00
 8004da4:	40022000 	.word	0x40022000
 8004da8:	0800e2a8 	.word	0x0800e2a8
 8004dac:	20000000 	.word	0x20000000
 8004db0:	20000004 	.word	0x20000004

08004db4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b08b      	sub	sp, #44	@ 0x2c
 8004db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc2:	4b78      	ldr	r3, [pc, #480]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dcc:	4b75      	ldr	r3, [pc, #468]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d121      	bne.n	8004e26 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d11e      	bne.n	8004e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004de8:	4b6e      	ldr	r3, [pc, #440]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004df4:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dfa:	0b1b      	lsrs	r3, r3, #12
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e02:	e005      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004e04:	4b67      	ldr	r3, [pc, #412]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	0f1b      	lsrs	r3, r3, #28
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e10:	4a65      	ldr	r2, [pc, #404]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e24:	e00d      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e26:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d102      	bne.n	8004e38 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e32:	4b5e      	ldr	r3, [pc, #376]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	e004      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004e40:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	f040 80a5 	bne.w	8004f94 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e4a:	4b56      	ldr	r3, [pc, #344]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004e54:	4b53      	ldr	r3, [pc, #332]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004e62:	4b50      	ldr	r3, [pc, #320]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	08db      	lsrs	r3, r3, #3
 8004e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d003      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0xe4>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d022      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x128>
 8004e96:	e043      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004eba:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ebe:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x200>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eda:	e046      	b.n	8004f6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004efe:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f02:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x200>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	e024      	b.n	8004f6a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f38:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f48:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f4c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x200>
 8004f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f68:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6e:	0e1b      	lsrs	r3, r3, #24
 8004f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f74:	3301      	adds	r3, #1
 8004f76:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8e:	ee17 3a90 	vmov	r3, s15
 8004f92:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004f94:	6a3b      	ldr	r3, [r7, #32]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	372c      	adds	r7, #44	@ 0x2c
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	46020c00 	.word	0x46020c00
 8004fa8:	0800e2c0 	.word	0x0800e2c0
 8004fac:	00f42400 	.word	0x00f42400
 8004fb0:	4b742400 	.word	0x4b742400
 8004fb4:	46000000 	.word	0x46000000

08004fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004fbc:	f7ff fefa 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <HAL_RCC_GetHCLKFreq+0x28>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	4906      	ldr	r1, [pc, #24]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	4a05      	ldr	r2, [pc, #20]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004fd4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004fd6:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	46020c00 	.word	0x46020c00
 8004fe4:	0800e2a8 	.word	0x0800e2a8
 8004fe8:	20000000 	.word	0x20000000

08004fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004ff0:	f7ff ffe2 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b05      	ldr	r3, [pc, #20]	@ (800500c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4903      	ldr	r1, [pc, #12]	@ (8005010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	46020c00 	.word	0x46020c00
 8005010:	0800e2b8 	.word	0x0800e2b8

08005014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005018:	f7ff ffce 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4903      	ldr	r1, [pc, #12]	@ (8005038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd80      	pop	{r7, pc}
 8005034:	46020c00 	.word	0x46020c00
 8005038:	0800e2b8 	.word	0x0800e2b8

0800503c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005040:	f7ff ffba 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8005044:	4602      	mov	r2, r0
 8005046:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4903      	ldr	r1, [pc, #12]	@ (8005060 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005052:	5ccb      	ldrb	r3, [r1, r3]
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}
 800505c:	46020c00 	.word	0x46020c00
 8005060:	0800e2b8 	.word	0x0800e2b8

08005064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800506c:	4b3e      	ldr	r3, [pc, #248]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800506e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800507a:	f7fe fdaf 	bl	8003bdc <HAL_PWREx_GetVoltageRange>
 800507e:	6178      	str	r0, [r7, #20]
 8005080:	e019      	b.n	80050b6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	4b39      	ldr	r3, [pc, #228]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005088:	4a37      	ldr	r2, [pc, #220]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005092:	4b35      	ldr	r3, [pc, #212]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a0:	f7fe fd9c 	bl	8003bdc <HAL_PWREx_GetVoltageRange>
 80050a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050a6:	4b30      	ldr	r3, [pc, #192]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80050a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050bc:	d003      	beq.n	80050c6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050c4:	d109      	bne.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050cc:	d202      	bcs.n	80050d4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80050ce:	2301      	movs	r3, #1
 80050d0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80050d2:	e033      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80050d8:	e030      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050e0:	d208      	bcs.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e8:	d102      	bne.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80050ea:	2303      	movs	r3, #3
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	e025      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e035      	b.n	8005160 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050fa:	d90f      	bls.n	800511c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005108:	d902      	bls.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e015      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005110:	2301      	movs	r3, #1
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	e012      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e00f      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005122:	d109      	bne.n	8005138 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800512a:	d102      	bne.n	8005132 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800512c:	2301      	movs	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e004      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005132:	2302      	movs	r3, #2
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e001      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005138:	2301      	movs	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 020f 	bic.w	r2, r3, #15
 8005144:	4909      	ldr	r1, [pc, #36]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d001      	beq.n	800515e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	46020c00 	.word	0x46020c00
 800516c:	40022000 	.word	0x40022000

08005170 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005174:	b0b6      	sub	sp, #216	@ 0xd8
 8005176:	af00      	add	r7, sp, #0
 8005178:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800517c:	2300      	movs	r3, #0
 800517e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005182:	2300      	movs	r3, #0
 8005184:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f002 0401 	and.w	r4, r2, #1
 8005194:	2500      	movs	r5, #0
 8005196:	ea54 0305 	orrs.w	r3, r4, r5
 800519a:	d00b      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800519c:	4bc5      	ldr	r3, [pc, #788]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800519e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051a2:	f023 0103 	bic.w	r1, r3, #3
 80051a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ac:	4ac1      	ldr	r2, [pc, #772]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80051ae:	430b      	orrs	r3, r1
 80051b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f002 0804 	and.w	r8, r2, #4
 80051c0:	f04f 0900 	mov.w	r9, #0
 80051c4:	ea58 0309 	orrs.w	r3, r8, r9
 80051c8:	d00b      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80051ca:	4bba      	ldr	r3, [pc, #744]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80051cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80051d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	4ab6      	ldr	r2, [pc, #728]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80051dc:	430b      	orrs	r3, r1
 80051de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f002 0a08 	and.w	sl, r2, #8
 80051ee:	f04f 0b00 	mov.w	fp, #0
 80051f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80051f6:	d00b      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80051f8:	4bae      	ldr	r3, [pc, #696]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80051fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005208:	4aaa      	ldr	r2, [pc, #680]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800520a:	430b      	orrs	r3, r1
 800520c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f002 0310 	and.w	r3, r2, #16
 800521c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005226:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800522a:	460b      	mov	r3, r1
 800522c:	4313      	orrs	r3, r2
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005230:	4ba0      	ldr	r3, [pc, #640]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800523a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800523e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005240:	4a9c      	ldr	r2, [pc, #624]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005242:	430b      	orrs	r3, r1
 8005244:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f002 0320 	and.w	r3, r2, #32
 8005254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800525e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	d00b      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005268:	4b92      	ldr	r3, [pc, #584]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800526a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800526e:	f023 0107 	bic.w	r1, r3, #7
 8005272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005278:	4a8e      	ldr	r2, [pc, #568]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800527a:	430b      	orrs	r3, r1
 800527c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800528c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005296:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800529a:	460b      	mov	r3, r1
 800529c:	4313      	orrs	r3, r2
 800529e:	d00b      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80052a0:	4b84      	ldr	r3, [pc, #528]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80052a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052a6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80052aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b0:	4a80      	ldr	r2, [pc, #512]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80052b2:	430b      	orrs	r3, r1
 80052b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80052c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052c8:	2300      	movs	r3, #0
 80052ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052ce:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4313      	orrs	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80052d8:	4b76      	ldr	r3, [pc, #472]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80052da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052e8:	4a72      	ldr	r2, [pc, #456]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80052ea:	430b      	orrs	r3, r1
 80052ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80052fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005306:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800530a:	460b      	mov	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	d00b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005310:	4b68      	ldr	r3, [pc, #416]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005316:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800531a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800531e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005320:	4a64      	ldr	r2, [pc, #400]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005322:	430b      	orrs	r3, r1
 8005324:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005334:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005338:	2300      	movs	r3, #0
 800533a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800533e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005342:	460b      	mov	r3, r1
 8005344:	4313      	orrs	r3, r2
 8005346:	d00b      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005348:	4b5a      	ldr	r3, [pc, #360]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800534a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800534e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	4a56      	ldr	r2, [pc, #344]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800535a:	430b      	orrs	r3, r1
 800535c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800536c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005370:	2300      	movs	r3, #0
 8005372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005376:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800537a:	460b      	mov	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	d00b      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005380:	4b4c      	ldr	r3, [pc, #304]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005386:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800538a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800538e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005390:	4a48      	ldr	r2, [pc, #288]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005392:	430b      	orrs	r3, r1
 8005394:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80053a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80053b8:	4b3e      	ldr	r3, [pc, #248]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053be:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80053c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053c8:	4a3a      	ldr	r2, [pc, #232]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80053d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80053dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053de:	2300      	movs	r3, #0
 80053e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80053e6:	460b      	mov	r3, r1
 80053e8:	4313      	orrs	r3, r2
 80053ea:	d00b      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80053ec:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053fc:	4a2d      	ldr	r2, [pc, #180]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053fe:	430b      	orrs	r3, r1
 8005400:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005410:	673b      	str	r3, [r7, #112]	@ 0x70
 8005412:	2300      	movs	r3, #0
 8005414:	677b      	str	r3, [r7, #116]	@ 0x74
 8005416:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d04f      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005420:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005428:	2b80      	cmp	r3, #128	@ 0x80
 800542a:	d02d      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800542c:	2b80      	cmp	r3, #128	@ 0x80
 800542e:	d827      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005430:	2b60      	cmp	r3, #96	@ 0x60
 8005432:	d02b      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005434:	2b60      	cmp	r3, #96	@ 0x60
 8005436:	d823      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005438:	2b40      	cmp	r3, #64	@ 0x40
 800543a:	d006      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800543c:	2b40      	cmp	r3, #64	@ 0x40
 800543e:	d81f      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005444:	2b20      	cmp	r3, #32
 8005446:	d011      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005448:	e01a      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800544a:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	4a19      	ldr	r2, [pc, #100]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005456:	e01a      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800545c:	3308      	adds	r3, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f002 f914 	bl	800768c <RCCEx_PLL2_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800546a:	e010      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800546c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005470:	332c      	adds	r3, #44	@ 0x2c
 8005472:	4618      	mov	r0, r3
 8005474:	f002 f9a2 	bl	80077bc <RCCEx_PLL3_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800547e:	e006      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005486:	e002      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8005488:	bf00      	nop
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800548c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d110      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005496:	4b07      	ldr	r3, [pc, #28]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800549c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80054a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054a8:	4a02      	ldr	r2, [pc, #8]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80054aa:	430b      	orrs	r3, r1
 80054ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054b0:	e006      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80054b2:	bf00      	nop
 80054b4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80054bc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80054c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ce:	2300      	movs	r3, #0
 80054d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80054d6:	460b      	mov	r3, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	d046      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80054dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054e8:	d028      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80054ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054ee:	d821      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80054f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054f4:	d022      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80054f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054fa:	d81b      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80054fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005500:	d01c      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005502:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005506:	d815      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550c:	d008      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005512:	d80f      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d011      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551c:	d00e      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800551e:	e009      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005524:	3308      	adds	r3, #8
 8005526:	4618      	mov	r0, r3
 8005528:	f002 f8b0 	bl	800768c <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005532:	e004      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 800553c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005546:	4bb6      	ldr	r3, [pc, #728]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800554c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005554:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005558:	4ab1      	ldr	r2, [pc, #708]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800555a:	430b      	orrs	r3, r1
 800555c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005566:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800556a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005576:	663b      	str	r3, [r7, #96]	@ 0x60
 8005578:	2300      	movs	r3, #0
 800557a:	667b      	str	r3, [r7, #100]	@ 0x64
 800557c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d03e      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800558a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800558e:	2b04      	cmp	r3, #4
 8005590:	d81d      	bhi.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8005592:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055d7 	.word	0x080055d7
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055bb 	.word	0x080055bb
 80055a4:	080055d7 	.word	0x080055d7
 80055a8:	080055d7 	.word	0x080055d7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055ac:	4b9c      	ldr	r3, [pc, #624]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	4a9b      	ldr	r2, [pc, #620]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80055b8:	e00e      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055be:	332c      	adds	r3, #44	@ 0x2c
 80055c0:	4618      	mov	r0, r3
 80055c2:	f002 f8fb 	bl	80077bc <RCCEx_PLL3_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80055cc:	e004      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80055d4:	e000      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80055d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055d8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10d      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80055e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80055e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055e6:	f023 0107 	bic.w	r1, r3, #7
 80055ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f2:	4a8b      	ldr	r2, [pc, #556]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005600:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005610:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005612:	2300      	movs	r3, #0
 8005614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005616:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800561a:	460b      	mov	r3, r1
 800561c:	4313      	orrs	r3, r2
 800561e:	d04a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005628:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800562c:	d028      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800562e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005632:	d821      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005634:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005638:	d024      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800563a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800563e:	d81b      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005644:	d00e      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800564a:	d815      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d110      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005656:	4b72      	ldr	r3, [pc, #456]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	4a71      	ldr	r2, [pc, #452]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005660:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005662:	e012      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005668:	332c      	adds	r3, #44	@ 0x2c
 800566a:	4618      	mov	r0, r3
 800566c:	f002 f8a6 	bl	80077bc <RCCEx_PLL3_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005676:	e008      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800567e:	e004      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005680:	bf00      	nop
 8005682:	e002      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005684:	bf00      	nop
 8005686:	e000      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005688:	bf00      	nop
    }
    if (ret == HAL_OK)
 800568a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10d      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005692:	4b63      	ldr	r3, [pc, #396]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005698:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800569c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a4:	4a5e      	ldr	r2, [pc, #376]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80056a6:	430b      	orrs	r3, r1
 80056a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80056ac:	e003      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80056b2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c4:	2300      	movs	r3, #0
 80056c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80056cc:	460b      	mov	r3, r1
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f000 80ba 	beq.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056da:	4b51      	ldr	r3, [pc, #324]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80056dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d113      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80056ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80056f0:	f043 0304 	orr.w	r3, r3, #4
 80056f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80056f8:	4b49      	ldr	r3, [pc, #292]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80056fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005710:	4b44      	ldr	r3, [pc, #272]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	4a43      	ldr	r2, [pc, #268]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800571c:	f7fc f9d4 	bl	8001ac8 <HAL_GetTick>
 8005720:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005724:	e00b      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005726:	f7fc f9cf 	bl	8001ac8 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d903      	bls.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800573c:	e005      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800573e:	4b39      	ldr	r3, [pc, #228]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0ed      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800574a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d16a      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005752:	4b33      	ldr	r3, [pc, #204]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005758:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d023      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8005768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800576c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005774:	4293      	cmp	r3, r2
 8005776:	d01b      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005778:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800577a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800577e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005782:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005786:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800578c:	4a24      	ldr	r2, [pc, #144]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800578e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005796:	4b22      	ldr	r3, [pc, #136]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800579c:	4a20      	ldr	r2, [pc, #128]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800579e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80057a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d019      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fc f984 	bl	8001ac8 <HAL_GetTick>
 80057c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c4:	e00d      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fc f97f 	bl	8001ac8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057d0:	1ad2      	subs	r2, r2, r3
 80057d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d903      	bls.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80057e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ea      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80057f0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10d      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80057f8:	4b09      	ldr	r3, [pc, #36]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80057fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005806:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800580a:	4a05      	ldr	r2, [pc, #20]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800580c:	430b      	orrs	r3, r1
 800580e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005812:	e00d      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005814:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005818:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 800581c:	e008      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800581e:	bf00      	nop
 8005820:	46020c00 	.word	0x46020c00
 8005824:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800582c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005830:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005838:	4bb2      	ldr	r3, [pc, #712]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800583a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583e:	4ab1      	ldr	r2, [pc, #708]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005840:	f023 0304 	bic.w	r3, r3, #4
 8005844:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005856:	2300      	movs	r3, #0
 8005858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800585a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d042      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800586c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005870:	d022      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005872:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005876:	d81b      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800587c:	d011      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x732>
 800587e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005882:	d815      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800588c:	d110      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800588e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005892:	3308      	adds	r3, #8
 8005894:	4618      	mov	r0, r3
 8005896:	f001 fef9 	bl	800768c <RCCEx_PLL2_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80058a0:	e00d      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a2:	4b98      	ldr	r3, [pc, #608]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	4a97      	ldr	r2, [pc, #604]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80058a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ac:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80058ae:	e006      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80058b6:	e002      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80058bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058be:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10d      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80058c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80058c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058cc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80058d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058d8:	4a8a      	ldr	r2, [pc, #552]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80058da:	430b      	orrs	r3, r1
 80058dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058e0:	e003      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80058e6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80058f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80058f8:	2300      	movs	r3, #0
 80058fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80058fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d02d      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005912:	d00b      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005918:	d804      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800591e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005922:	d007      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800592a:	e004      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800592c:	bf00      	nop
 800592e:	e002      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005934:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005936:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10d      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800593e:	4b71      	ldr	r3, [pc, #452]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005940:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005944:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005950:	4a6c      	ldr	r2, [pc, #432]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005952:	430b      	orrs	r3, r1
 8005954:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005958:	e003      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800595e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800596e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005970:	2300      	movs	r3, #0
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005974:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d00c      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800597e:	4b61      	ldr	r3, [pc, #388]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005980:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005984:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800598c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005990:	4a5c      	ldr	r2, [pc, #368]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005992:	430b      	orrs	r3, r1
 8005994:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80059a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a6:	2300      	movs	r3, #0
 80059a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059ae:	460b      	mov	r3, r1
 80059b0:	4313      	orrs	r3, r2
 80059b2:	d019      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80059b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059c0:	d105      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059c2:	4b50      	ldr	r3, [pc, #320]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	4a4f      	ldr	r2, [pc, #316]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059cc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80059ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80059d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80059d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e0:	4a48      	ldr	r2, [pc, #288]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80059e2:	430b      	orrs	r3, r1
 80059e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80059e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059f6:	2300      	movs	r3, #0
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059fe:	460b      	mov	r3, r1
 8005a00:	4313      	orrs	r3, r2
 8005a02:	d00c      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005a04:	4b3f      	ldr	r3, [pc, #252]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a16:	493b      	ldr	r1, [pc, #236]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d00c      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005a3a:	4b32      	ldr	r3, [pc, #200]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a4c:	492d      	ldr	r1, [pc, #180]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	d00c      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005a70:	4b24      	ldr	r3, [pc, #144]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a76:	f023 0218 	bic.w	r2, r3, #24
 8005a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a82:	4920      	ldr	r1, [pc, #128]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d034      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005aae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab4:	4b13      	ldr	r3, [pc, #76]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	4a12      	ldr	r2, [pc, #72]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005abe:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005ac0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ac8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005acc:	d108      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 fdd9 	bl	800768c <RCCEx_PLL2_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8005ae0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10f      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005ae8:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005aea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005aee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005af6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005afa:	4902      	ldr	r1, [pc, #8]	@ (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005b02:	e005      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005b04:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005b0c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b26:	460b      	mov	r3, r1
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	d03a      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b38:	d00e      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005b3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b3e:	d815      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b48:	d110      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4a:	4b27      	ldr	r3, [pc, #156]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	4a26      	ldr	r2, [pc, #152]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b54:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b56:	e00e      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fd94 	bl	800768c <RCCEx_PLL2_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005b6a:	e004      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8005b74:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b76:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b84:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b90:	4915      	ldr	r1, [pc, #84]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005b98:	e003      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005b9e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	607b      	str	r3, [r7, #4]
 8005bb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bc4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bd0:	4905      	ldr	r1, [pc, #20]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005bd8:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	37d8      	adds	r7, #216	@ 0xd8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005be6:	bf00      	nop
 8005be8:	46020c00 	.word	0x46020c00

08005bec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	@ 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005bf4:	4ba6      	ldr	r3, [pc, #664]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005c08:	4ba1      	ldr	r3, [pc, #644]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	3301      	adds	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005c16:	4b9e      	ldr	r3, [pc, #632]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c22:	4b9b      	ldr	r3, [pc, #620]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d062      	beq.n	8005d0a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	f200 8081 	bhi.w	8005d4e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d024      	beq.n	8005c9c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d17a      	bne.n	8005d4e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6a:	4b89      	ldr	r3, [pc, #548]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c7e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c9a:	e08f      	b.n	8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c9c:	4b7c      	ldr	r3, [pc, #496]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005ca8:	4b79      	ldr	r3, [pc, #484]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	0f1b      	lsrs	r3, r3, #28
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	e006      	b.n	8005cc2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005cb4:	4b76      	ldr	r3, [pc, #472]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	0f1b      	lsrs	r3, r3, #28
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a76      	ldr	r2, [pc, #472]	@ (8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d08:	e058      	b.n	8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	ee07 3a90 	vmov	s15, r3
 8005d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d14:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d30:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d4c:	e036      	b.n	8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d4e:	4b50      	ldr	r3, [pc, #320]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	0f1b      	lsrs	r3, r3, #28
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	e006      	b.n	8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005d66:	4b4a      	ldr	r3, [pc, #296]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d6c:	041b      	lsls	r3, r3, #16
 8005d6e:	0f1b      	lsrs	r3, r3, #28
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	4a49      	ldr	r2, [pc, #292]	@ (8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d9e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005dbc:	4b34      	ldr	r3, [pc, #208]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dc8:	4b31      	ldr	r3, [pc, #196]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dcc:	0a5b      	lsrs	r3, r3, #9
 8005dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dde:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dee:	ee17 2a90 	vmov	r2, s15
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e002      	b.n	8005dfe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005dfe:	4b24      	ldr	r3, [pc, #144]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d017      	beq.n	8005e3a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e0a:	4b21      	ldr	r3, [pc, #132]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0e:	0c1b      	lsrs	r3, r3, #16
 8005e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e20:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e30:	ee17 2a90 	vmov	r2, s15
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005e40:	4b13      	ldr	r3, [pc, #76]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d017      	beq.n	8005e7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e4c:	4b10      	ldr	r3, [pc, #64]	@ (8005e90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e50:	0e1b      	lsrs	r3, r3, #24
 8005e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e62:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e72:	ee17 2a90 	vmov	r2, s15
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e7a:	e002      	b.n	8005e82 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	bf00      	nop
 8005e84:	3724      	adds	r7, #36	@ 0x24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	46020c00 	.word	0x46020c00
 8005e94:	4b742400 	.word	0x4b742400
 8005e98:	46000000 	.word	0x46000000
 8005e9c:	0800e2c0 	.word	0x0800e2c0

08005ea0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	@ 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005ea8:	4ba6      	ldr	r3, [pc, #664]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005eb2:	4ba4      	ldr	r3, [pc, #656]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005eca:	4b9e      	ldr	r3, [pc, #632]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005ed6:	4b9b      	ldr	r3, [pc, #620]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d062      	beq.n	8005fbe <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	f200 8081 	bhi.w	8006002 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d024      	beq.n	8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d17a      	bne.n	8006002 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006148 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b89      	ldr	r3, [pc, #548]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f32:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f4e:	e08f      	b.n	8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005f50:	4b7c      	ldr	r3, [pc, #496]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005f5c:	4b79      	ldr	r3, [pc, #484]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	0f1b      	lsrs	r3, r3, #28
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	e006      	b.n	8005f76 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005f68:	4b76      	ldr	r3, [pc, #472]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	0f1b      	lsrs	r3, r3, #28
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	4a76      	ldr	r2, [pc, #472]	@ (8006150 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fbc:	e058      	b.n	8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006148 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd0:	4b5c      	ldr	r3, [pc, #368]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fe0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fe4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006000:	e036      	b.n	8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006002:	4b50      	ldr	r3, [pc, #320]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800600e:	4b4d      	ldr	r3, [pc, #308]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	0f1b      	lsrs	r3, r3, #28
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	e006      	b.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800601c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	0f1b      	lsrs	r3, r3, #28
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	4a49      	ldr	r2, [pc, #292]	@ (8006150 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800602a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006052:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800614c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006062:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800606e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006070:	4b34      	ldr	r3, [pc, #208]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d017      	beq.n	80060ac <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800607c:	4b31      	ldr	r3, [pc, #196]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800607e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006080:	0a5b      	lsrs	r3, r3, #9
 8006082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800608e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006092:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006096:	edd7 6a07 	vldr	s13, [r7, #28]
 800609a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a2:	ee17 2a90 	vmov	r2, s15
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80060b2:	4b24      	ldr	r3, [pc, #144]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d017      	beq.n	80060ee <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060be:	4b21      	ldr	r3, [pc, #132]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c2:	0c1b      	lsrs	r3, r3, #16
 80060c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80060d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060d4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e4:	ee17 2a90 	vmov	r2, s15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e002      	b.n	80060f4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80060f4:	4b13      	ldr	r3, [pc, #76]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d017      	beq.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006100:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	0e1b      	lsrs	r3, r3, #24
 8006106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006112:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006116:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800611a:	edd7 6a07 	vldr	s13, [r7, #28]
 800611e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006126:	ee17 2a90 	vmov	r2, s15
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800612e:	e002      	b.n	8006136 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	609a      	str	r2, [r3, #8]
}
 8006136:	bf00      	nop
 8006138:	3724      	adds	r7, #36	@ 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	46020c00 	.word	0x46020c00
 8006148:	4b742400 	.word	0x4b742400
 800614c:	46000000 	.word	0x46000000
 8006150:	0800e2c0 	.word	0x0800e2c0

08006154 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	@ 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800615c:	4ba6      	ldr	r3, [pc, #664]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800615e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006164:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006166:	4ba4      	ldr	r3, [pc, #656]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006170:	4ba1      	ldr	r3, [pc, #644]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	3301      	adds	r3, #1
 800617c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800617e:	4b9e      	ldr	r3, [pc, #632]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800618a:	4b9b      	ldr	r3, [pc, #620]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800618c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800618e:	08db      	lsrs	r3, r3, #3
 8006190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d062      	beq.n	8006272 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f200 8081 	bhi.w	80062b6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d024      	beq.n	8006204 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d17a      	bne.n	80062b6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80061ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d2:	4b89      	ldr	r3, [pc, #548]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061e6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006400 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80061ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fe:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006202:	e08f      	b.n	8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006204:	4b7c      	ldr	r3, [pc, #496]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006210:	4b79      	ldr	r3, [pc, #484]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0f1b      	lsrs	r3, r3, #28
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	e006      	b.n	800622a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800621c:	4b76      	ldr	r3, [pc, #472]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800621e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	0f1b      	lsrs	r3, r3, #28
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	4a76      	ldr	r2, [pc, #472]	@ (8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800622c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006250:	ed97 6a02 	vldr	s12, [r7, #8]
 8006254:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006400 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006264:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006270:	e058      	b.n	8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006284:	4b5c      	ldr	r3, [pc, #368]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006294:	ed97 6a02 	vldr	s12, [r7, #8]
 8006298:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006400 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800629c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80062a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062b4:	e036      	b.n	8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062b6:	4b50      	ldr	r3, [pc, #320]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80062c2:	4b4d      	ldr	r3, [pc, #308]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	0f1b      	lsrs	r3, r3, #28
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	e006      	b.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80062ce:	4b4a      	ldr	r3, [pc, #296]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	0f1b      	lsrs	r3, r3, #28
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	4a49      	ldr	r2, [pc, #292]	@ (8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80062de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006302:	ed97 6a02 	vldr	s12, [r7, #8]
 8006306:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006400 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800630a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006316:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006322:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006324:	4b34      	ldr	r3, [pc, #208]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d017      	beq.n	8006360 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006330:	4b31      	ldr	r3, [pc, #196]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006334:	0a5b      	lsrs	r3, r3, #9
 8006336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006346:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800634a:	edd7 6a07 	vldr	s13, [r7, #28]
 800634e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006356:	ee17 2a90 	vmov	r2, s15
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e002      	b.n	8006366 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006366:	4b24      	ldr	r3, [pc, #144]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d017      	beq.n	80063a2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006372:	4b21      	ldr	r3, [pc, #132]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006376:	0c1b      	lsrs	r3, r3, #16
 8006378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006388:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800638c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006398:	ee17 2a90 	vmov	r2, s15
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	605a      	str	r2, [r3, #4]
 80063a0:	e002      	b.n	80063a8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80063a8:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063b4:	4b10      	ldr	r3, [pc, #64]	@ (80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b8:	0e1b      	lsrs	r3, r3, #24
 80063ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80063c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063da:	ee17 2a90 	vmov	r2, s15
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80063e2:	e002      	b.n	80063ea <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
}
 80063ea:	bf00      	nop
 80063ec:	3724      	adds	r7, #36	@ 0x24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	46020c00 	.word	0x46020c00
 80063fc:	4b742400 	.word	0x4b742400
 8006400:	46000000 	.word	0x46000000
 8006404:	0800e2c0 	.word	0x0800e2c0

08006408 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08e      	sub	sp, #56	@ 0x38
 800640c:	af00      	add	r7, sp, #0
 800640e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006416:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800641a:	430b      	orrs	r3, r1
 800641c:	d145      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800641e:	4b9b      	ldr	r3, [pc, #620]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006428:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800642a:	4b98      	ldr	r3, [pc, #608]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800642c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d108      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643e:	d104      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
 8006446:	f001 b912 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800644a:	4b90      	ldr	r3, [pc, #576]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800644c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006458:	d114      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006460:	d110      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006462:	4b8a      	ldr	r3, [pc, #552]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800646c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006470:	d103      	bne.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006472:	23fa      	movs	r3, #250	@ 0xfa
 8006474:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006476:	f001 b8fa 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800647a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800647e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006480:	f001 b8f5 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006484:	4b81      	ldr	r3, [pc, #516]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800648c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006490:	d107      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006498:	d103      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800649a:	4b7d      	ldr	r3, [pc, #500]	@ (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800649c:	637b      	str	r3, [r7, #52]	@ 0x34
 800649e:	f001 b8e6 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a6:	f001 b8e2 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ae:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80064b2:	430b      	orrs	r3, r1
 80064b4:	d151      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80064b6:	4b75      	ldr	r3, [pc, #468]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80064b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064bc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80064c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	2b80      	cmp	r3, #128	@ 0x80
 80064c6:	d035      	beq.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	2b80      	cmp	r3, #128	@ 0x80
 80064cc:	d841      	bhi.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	2b60      	cmp	r3, #96	@ 0x60
 80064d2:	d02a      	beq.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	2b60      	cmp	r3, #96	@ 0x60
 80064d8:	d83b      	bhi.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d009      	beq.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	2b40      	cmp	r3, #64	@ 0x40
 80064e4:	d835      	bhi.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00c      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d012      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80064f2:	e02e      	b.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fb77 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006502:	f001 b8b4 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006506:	f107 0318 	add.w	r3, r7, #24
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fcc8 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006514:	f001 b8ab 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006518:	f107 030c 	add.w	r3, r7, #12
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fe19 	bl	8006154 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006526:	f001 b8a2 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800652a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006530:	f001 b89d 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006534:	4b55      	ldr	r3, [pc, #340]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006540:	d103      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006542:	4b54      	ldr	r3, [pc, #336]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006546:	f001 b892 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800654e:	f001 b88e 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006556:	f001 b88a 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800655a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006562:	430b      	orrs	r3, r1
 8006564:	d126      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006566:	4b49      	ldr	r3, [pc, #292]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006568:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800656c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006570:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006572:	4b46      	ldr	r3, [pc, #280]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800657a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657e:	d106      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8006586:	4b43      	ldr	r3, [pc, #268]	@ (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	f001 b870 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800658e:	4b3f      	ldr	r3, [pc, #252]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659a:	d107      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a2:	d103      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 80065a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	f001 b861 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b0:	f001 b85d 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80065b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80065bc:	430b      	orrs	r3, r1
 80065be:	d171      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80065c0:	4b32      	ldr	r3, [pc, #200]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80065c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065c6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80065ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065d2:	d034      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065da:	d853      	bhi.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e2:	d00b      	beq.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ea:	d84b      	bhi.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065f8:	d009      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80065fa:	e043      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff faf3 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800660a:	f001 b830 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800660e:	f107 0318 	add.w	r3, r7, #24
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fc44 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800661c:	f001 b827 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006620:	4b1a      	ldr	r3, [pc, #104]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662c:	d103      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 800662e:	4b1b      	ldr	r3, [pc, #108]	@ (800669c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006632:	f001 b81c 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800663a:	f001 b818 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800663e:	4b13      	ldr	r3, [pc, #76]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b20      	cmp	r3, #32
 8006648:	d118      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800664a:	4b10      	ldr	r3, [pc, #64]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006656:	4b0d      	ldr	r3, [pc, #52]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0e1b      	lsrs	r3, r3, #24
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	e006      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006662:	4b0a      	ldr	r3, [pc, #40]	@ (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006668:	041b      	lsls	r3, r3, #16
 800666a:	0e1b      	lsrs	r3, r3, #24
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	4a0b      	ldr	r2, [pc, #44]	@ (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006678:	f000 bff9 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006680:	f000 bff5 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006688:	f000 bff1 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800668c:	46020c00 	.word	0x46020c00
 8006690:	0007a120 	.word	0x0007a120
 8006694:	00f42400 	.word	0x00f42400
 8006698:	007a1200 	.word	0x007a1200
 800669c:	02dc6c00 	.word	0x02dc6c00
 80066a0:	0800e2c0 	.word	0x0800e2c0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80066a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80066ac:	430b      	orrs	r3, r1
 80066ae:	d17f      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80066b0:	4ba8      	ldr	r3, [pc, #672]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80066b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ba:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d165      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80066c2:	4ba4      	ldr	r3, [pc, #656]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80066c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066c8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80066cc:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066d4:	d034      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066dc:	d853      	bhi.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066e4:	d00b      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ec:	d84b      	bhi.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d016      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066fa:	d009      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80066fc:	e043      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff fa72 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800670c:	f000 bfaf 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006710:	f107 0318 	add.w	r3, r7, #24
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fbc3 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800671e:	f000 bfa6 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006722:	4b8c      	ldr	r3, [pc, #560]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800672a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672e:	d103      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8006730:	4b89      	ldr	r3, [pc, #548]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006734:	f000 bf9b 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800673c:	f000 bf97 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006740:	4b84      	ldr	r3, [pc, #528]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b20      	cmp	r3, #32
 800674a:	d118      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800674c:	4b81      	ldr	r3, [pc, #516]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8006758:	4b7e      	ldr	r3, [pc, #504]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	0e1b      	lsrs	r3, r3, #24
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	e006      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8006764:	4b7b      	ldr	r3, [pc, #492]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	0e1b      	lsrs	r3, r3, #24
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	4a7a      	ldr	r2, [pc, #488]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006778:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800677a:	f000 bf78 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006782:	f000 bf74 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800678a:	f000 bf70 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006794:	d108      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fa26 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a4:	f000 bf63 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ac:	f000 bf5f 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80067b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b4:	1e51      	subs	r1, r2, #1
 80067b6:	430b      	orrs	r3, r1
 80067b8:	d136      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80067ba:	4b66      	ldr	r3, [pc, #408]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80067bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fe fc22 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 80067d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067d2:	f000 bf4c 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d104      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067dc:	f7fe faea 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80067e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067e2:	f000 bf44 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80067e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f2:	d106      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d103      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80067fa:	4b59      	ldr	r3, [pc, #356]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fe:	f000 bf36 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006802:	4b54      	ldr	r3, [pc, #336]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d107      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	2b03      	cmp	r3, #3
 8006814:	d104      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8006816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800681a:	637b      	str	r3, [r7, #52]	@ 0x34
 800681c:	f000 bf27 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	637b      	str	r3, [r7, #52]	@ 0x34
 8006824:	f000 bf23 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682c:	1f11      	subs	r1, r2, #4
 800682e:	430b      	orrs	r3, r1
 8006830:	d136      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006832:	4b48      	ldr	r3, [pc, #288]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006838:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800683c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006844:	f7fe fbd2 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 8006848:	6378      	str	r0, [r7, #52]	@ 0x34
 800684a:	f000 bf10 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	2b10      	cmp	r3, #16
 8006852:	d104      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006854:	f7fe faae 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006858:	6378      	str	r0, [r7, #52]	@ 0x34
 800685a:	f000 bf08 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800685e:	4b3d      	ldr	r3, [pc, #244]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686a:	d106      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2b20      	cmp	r3, #32
 8006870:	d103      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8006872:	4b3b      	ldr	r3, [pc, #236]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
 8006876:	f000 befa 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800687a:	4b36      	ldr	r3, [pc, #216]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800687c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b02      	cmp	r3, #2
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	2b30      	cmp	r3, #48	@ 0x30
 800688c:	d104      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800688e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006892:	637b      	str	r3, [r7, #52]	@ 0x34
 8006894:	f000 beeb 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
 800689c:	f000 bee7 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80068a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a4:	f1a2 0108 	sub.w	r1, r2, #8
 80068a8:	430b      	orrs	r3, r1
 80068aa:	d136      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80068ac:	4b29      	ldr	r3, [pc, #164]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80068ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068be:	f7fe fb95 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 80068c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80068c4:	f000 bed3 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d104      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068ce:	f7fe fa71 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80068d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80068d4:	f000 becb 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80068d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068e4:	d106      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	2b80      	cmp	r3, #128	@ 0x80
 80068ea:	d103      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 80068ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80068ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f0:	f000 bebd 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80068f4:	4b17      	ldr	r3, [pc, #92]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80068f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d107      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	2bc0      	cmp	r3, #192	@ 0xc0
 8006906:	d104      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8006908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800690c:	637b      	str	r3, [r7, #52]	@ 0x34
 800690e:	f000 beae 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
 8006916:	f000 beaa 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800691a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691e:	f1a2 0110 	sub.w	r1, r2, #16
 8006922:	430b      	orrs	r3, r1
 8006924:	d141      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800692c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006938:	f7fe fb58 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 800693c:	6378      	str	r0, [r7, #52]	@ 0x34
 800693e:	f000 be96 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006948:	d10c      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800694a:	f7fe fa33 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 800694e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006950:	f000 be8d 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006954:	46020c00 	.word	0x46020c00
 8006958:	02dc6c00 	.word	0x02dc6c00
 800695c:	0800e2c0 	.word	0x0800e2c0
 8006960:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006964:	4baa      	ldr	r3, [pc, #680]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006970:	d107      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006978:	d103      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800697a:	4ba6      	ldr	r3, [pc, #664]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
 800697e:	f000 be76 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006982:	4ba3      	ldr	r3, [pc, #652]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b02      	cmp	r3, #2
 800698e:	d108      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006996:	d104      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8006998:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
 800699e:	f000 be66 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a6:	f000 be62 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80069aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ae:	f1a2 0120 	sub.w	r1, r2, #32
 80069b2:	430b      	orrs	r3, r1
 80069b4:	d158      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80069b6:	4b96      	ldr	r3, [pc, #600]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80069b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80069c8:	f7fe fb38 	bl	800503c <HAL_RCC_GetPCLK3Freq>
 80069cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80069ce:	f000 be4e 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d104      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069d8:	f7fe f9ec 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80069dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80069de:	f000 be46 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80069e2:	4b8b      	ldr	r3, [pc, #556]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ee:	d106      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d103      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 80069f6:	4b87      	ldr	r3, [pc, #540]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069fa:	f000 be38 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80069fe:	4b84      	ldr	r3, [pc, #528]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d104      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8006a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a18:	f000 be29 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d11b      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d118      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a2e:	4b78      	ldr	r3, [pc, #480]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8006a3a:	4b75      	ldr	r3, [pc, #468]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	0e1b      	lsrs	r3, r3, #24
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	e006      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006a46:	4b72      	ldr	r3, [pc, #456]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a4c:	041b      	lsls	r3, r3, #16
 8006a4e:	0e1b      	lsrs	r3, r3, #24
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	4a70      	ldr	r2, [pc, #448]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5c:	f000 be07 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a64:	f000 be03 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006a70:	430b      	orrs	r3, r1
 8006a72:	d16c      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006a74:	4b66      	ldr	r3, [pc, #408]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a7a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006a7e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a86:	d104      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a88:	f7fe f994 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006a8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a8e:	f000 bdee 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a98:	d108      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a9a:	f107 0318 	add.w	r3, r7, #24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff f9fe 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	f000 bde1 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006ab2:	f7fe fa81 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8006ab6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ab8:	f000 bdd9 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ac2:	d122      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ac4:	4b52      	ldr	r3, [pc, #328]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d118      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006adc:	4b4c      	ldr	r3, [pc, #304]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	0e1b      	lsrs	r3, r3, #24
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	e006      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006ae8:	4b49      	ldr	r3, [pc, #292]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	0e1b      	lsrs	r3, r3, #24
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	4a48      	ldr	r2, [pc, #288]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afe:	f000 bdb6 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b06:	f000 bdb2 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006b0a:	4b41      	ldr	r3, [pc, #260]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b16:	d107      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b1e:	d103      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8006b20:	4b3c      	ldr	r3, [pc, #240]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b24:	f000 bda3 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006b28:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b34:	d107      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b3c:	d103      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8006b3e:	4b35      	ldr	r3, [pc, #212]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b42:	f000 bd94 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4a:	f000 bd90 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b52:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006b56:	430b      	orrs	r3, r1
 8006b58:	d160      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006b5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d84c      	bhi.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006bad 	.word	0x08006bad
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006b9b 	.word	0x08006b9b
 8006b80:	08006bb7 	.word	0x08006bb7
 8006b84:	08006bc1 	.word	0x08006bc1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff f82d 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b96:	f000 bd6a 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fad8 	bl	8006154 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba8:	f000 bd61 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006bac:	f7fe fa04 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8006bb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bb2:	f000 bd5c 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006bb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bbc:	f000 bd57 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bc0:	4b13      	ldr	r3, [pc, #76]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d118      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bcc:	4b10      	ldr	r3, [pc, #64]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	0e1b      	lsrs	r3, r3, #24
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	e006      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006be4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	0e1b      	lsrs	r3, r3, #24
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	4a09      	ldr	r2, [pc, #36]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bfa:	f000 bd38 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c02:	f000 bd34 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c0a:	f000 bd30 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006c0e:	bf00      	nop
 8006c10:	46020c00 	.word	0x46020c00
 8006c14:	00f42400 	.word	0x00f42400
 8006c18:	0800e2c0 	.word	0x0800e2c0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c20:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006c24:	430b      	orrs	r3, r1
 8006c26:	d167      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006c28:	4ba0      	ldr	r3, [pc, #640]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c2e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006c32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c3a:	d036      	beq.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c42:	d855      	bhi.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c4a:	d029      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c52:	d84d      	bhi.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c5a:	d013      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c62:	d845      	bhi.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c70:	d13e      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe ffb8 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c80:	f000 bcf5 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c84:	f107 030c 	add.w	r3, r7, #12
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fa63 	bl	8006154 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c92:	f000 bcec 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006c96:	f7fe f98f 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8006c9a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c9c:	f000 bce7 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ca0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca6:	f000 bce2 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006caa:	4b80      	ldr	r3, [pc, #512]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d118      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	0e1b      	lsrs	r3, r3, #24
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	e006      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8006cce:	4b77      	ldr	r3, [pc, #476]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	0e1b      	lsrs	r3, r3, #24
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	4a74      	ldr	r2, [pc, #464]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ce4:	f000 bcc3 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cec:	f000 bcbf 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cf4:	f000 bcbb 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006d00:	430b      	orrs	r3, r1
 8006d02:	d14c      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006d04:	4b69      	ldr	r3, [pc, #420]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d0a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d0e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d16:	f7fe f969 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 8006d1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d1c:	f000 bca7 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d26:	d104      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d28:	f7fe f844 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006d2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d2e:	f000 bc9e 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006d32:	4b5e      	ldr	r3, [pc, #376]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d46:	d103      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8006d48:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4c:	f000 bc8f 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006d50:	4b56      	ldr	r3, [pc, #344]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d11c      	bne.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d62:	d118      	bne.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d64:	4b51      	ldr	r3, [pc, #324]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8006d70:	4b4e      	ldr	r3, [pc, #312]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	0e1b      	lsrs	r3, r3, #24
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	e006      	b.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8006d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d82:	041b      	lsls	r3, r3, #16
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	4a49      	ldr	r2, [pc, #292]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d92:	f000 bc6c 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9a:	f000 bc68 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da2:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006da6:	430b      	orrs	r3, r1
 8006da8:	d14c      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006daa:	4b40      	ldr	r3, [pc, #256]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006db0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006db4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fe f916 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 8006dc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dc2:	f000 bc54 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dcc:	d104      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dce:	f7fd fff1 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006dd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dd4:	f000 bc4b 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006dd8:	4b34      	ldr	r3, [pc, #208]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de4:	d107      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dec:	d103      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8006dee:	4b31      	ldr	r3, [pc, #196]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df2:	f000 bc3c 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006df6:	4b2d      	ldr	r3, [pc, #180]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d11c      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e08:	d118      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e0a:	4b28      	ldr	r3, [pc, #160]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006e16:	4b25      	ldr	r3, [pc, #148]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	0e1b      	lsrs	r3, r3, #24
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	e006      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8006e22:	4b22      	ldr	r3, [pc, #136]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	0e1b      	lsrs	r3, r3, #24
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e38:	f000 bc19 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e40:	f000 bc15 	b.w	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e48:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	d157      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006e50:	4b16      	ldr	r3, [pc, #88]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e60:	d02a      	beq.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e66:	d848      	bhi.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	2b80      	cmp	r3, #128	@ 0x80
 8006e6c:	d00d      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	2b80      	cmp	r3, #128	@ 0x80
 8006e72:	d842      	bhi.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	2b40      	cmp	r3, #64	@ 0x40
 8006e7e:	d011      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006e80:	e03b      	b.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006e82:	f7fe f8db 	bl	800503c <HAL_RCC_GetPCLK3Freq>
 8006e86:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e88:	e3f1      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e8a:	4b08      	ldr	r3, [pc, #32]	@ (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8006e98:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e9c:	e3e7      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ea2:	e3e4      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006ea4:	f7fd ff86 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006ea8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006eaa:	e3e0      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006eac:	46020c00 	.word	0x46020c00
 8006eb0:	0800e2c0 	.word	0x0800e2c0
 8006eb4:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006eb8:	4ba3      	ldr	r3, [pc, #652]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d117      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ec4:	4ba0      	ldr	r3, [pc, #640]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8006ed0:	4b9d      	ldr	r3, [pc, #628]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	0e1b      	lsrs	r3, r3, #24
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	e006      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8006edc:	4b9a      	ldr	r3, [pc, #616]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	0e1b      	lsrs	r3, r3, #24
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	4a98      	ldr	r2, [pc, #608]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ef2:	e3bc      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef8:	e3b9      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006efe:	e3b6      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f04:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	d147      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f0c:	4b8e      	ldr	r3, [pc, #568]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fe f865 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 8006f22:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f24:	e3a3      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f2c:	d103      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fd ff41 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006f32:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f34:	e39b      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006f36:	4b84      	ldr	r3, [pc, #528]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f42:	d106      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4a:	d102      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8006f4c:	4b80      	ldr	r3, [pc, #512]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f50:	e38d      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006f52:	4b7d      	ldr	r3, [pc, #500]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d11b      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006f64:	d117      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f66:	4b78      	ldr	r3, [pc, #480]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8006f72:	4b75      	ldr	r3, [pc, #468]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	0e1b      	lsrs	r3, r3, #24
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	e006      	b.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006f7e:	4b72      	ldr	r3, [pc, #456]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	0e1b      	lsrs	r3, r3, #24
 8006f88:	f003 030f 	and.w	r3, r3, #15
 8006f8c:	4a6f      	ldr	r2, [pc, #444]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f94:	e36b      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9a:	e368      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	d164      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006fa8:	4b67      	ldr	r3, [pc, #412]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fb2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d120      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fba:	4b63      	ldr	r3, [pc, #396]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d117      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fc6:	4b60      	ldr	r3, [pc, #384]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	0e1b      	lsrs	r3, r3, #24
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	e006      	b.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8006fde:	4b5a      	ldr	r3, [pc, #360]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	0e1b      	lsrs	r3, r3, #24
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	4a57      	ldr	r2, [pc, #348]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff4:	e33b      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ffa:	e338      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006ffc:	4b52      	ldr	r3, [pc, #328]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800700a:	d112      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007012:	d10e      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007014:	4b4c      	ldr	r3, [pc, #304]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800701a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800701e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007022:	d102      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8007024:	23fa      	movs	r3, #250	@ 0xfa
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007028:	e321      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800702a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007030:	e31d      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007032:	4b45      	ldr	r3, [pc, #276]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800703a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800703e:	d106      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007046:	d102      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8007048:	4b41      	ldr	r3, [pc, #260]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800704a:	637b      	str	r3, [r7, #52]	@ 0x34
 800704c:	e30f      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800704e:	4b3e      	ldr	r3, [pc, #248]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b02      	cmp	r3, #2
 800705a:	d107      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007062:	d103      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8007064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
 800706a:	e300      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007070:	e2fd      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007076:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800707a:	430b      	orrs	r3, r1
 800707c:	d16a      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800707e:	4b32      	ldr	r3, [pc, #200]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007084:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007088:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	2b00      	cmp	r3, #0
 800708e:	d120      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007090:	4b2d      	ldr	r3, [pc, #180]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b20      	cmp	r3, #32
 800709a:	d117      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800709c:	4b2a      	ldr	r3, [pc, #168]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80070a8:	4b27      	ldr	r3, [pc, #156]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	0e1b      	lsrs	r3, r3, #24
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	e006      	b.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80070b4:	4b24      	ldr	r3, [pc, #144]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	0e1b      	lsrs	r3, r3, #24
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	4a22      	ldr	r2, [pc, #136]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80070c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ca:	e2d0      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d0:	e2cd      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80070d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e0:	d112      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e8:	d10e      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070ea:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070f8:	d102      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80070fa:	23fa      	movs	r3, #250	@ 0xfa
 80070fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070fe:	e2b6      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007100:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007104:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007106:	e2b2      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007108:	4b0f      	ldr	r3, [pc, #60]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007114:	d106      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800711c:	d102      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800711e:	4b0c      	ldr	r3, [pc, #48]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
 8007122:	e2a4      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007124:	4b08      	ldr	r3, [pc, #32]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b02      	cmp	r3, #2
 8007130:	d107      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007138:	d103      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800713a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007140:	e295      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
 8007146:	e292      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007148:	46020c00 	.word	0x46020c00
 800714c:	0800e2c0 	.word	0x0800e2c0
 8007150:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007158:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800715c:	430b      	orrs	r3, r1
 800715e:	d147      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007160:	4b9a      	ldr	r3, [pc, #616]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007166:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800716a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007172:	f7fd ff3b 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 8007176:	6378      	str	r0, [r7, #52]	@ 0x34
 8007178:	e279      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800717a:	4b94      	ldr	r3, [pc, #592]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800717c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007188:	d112      	bne.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007190:	d10e      	bne.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007192:	4b8e      	ldr	r3, [pc, #568]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071a0:	d102      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 80071a2:	23fa      	movs	r3, #250	@ 0xfa
 80071a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071a6:	e262      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80071a8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071ae:	e25e      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80071b0:	4b86      	ldr	r3, [pc, #536]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071bc:	d106      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071c4:	d102      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 80071c6:	4b82      	ldr	r3, [pc, #520]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ca:	e250      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80071cc:	4b7f      	ldr	r3, [pc, #508]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80071ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d107      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071e0:	d103      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 80071e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e8:	e241      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ee:	e23e      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80071f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80071f8:	430b      	orrs	r3, r1
 80071fa:	d12d      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80071fc:	4b73      	ldr	r3, [pc, #460]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80071fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007202:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007206:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007208:	4b70      	ldr	r3, [pc, #448]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007214:	d105      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 800721c:	4b6c      	ldr	r3, [pc, #432]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007220:	e225      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007228:	d107      	bne.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800722a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fcdc 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007236:	637b      	str	r3, [r7, #52]	@ 0x34
 8007238:	e219      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007240:	d107      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007242:	f107 0318 	add.w	r3, r7, #24
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fe2a 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007250:	e20d      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	637b      	str	r3, [r7, #52]	@ 0x34
 8007256:	e20a      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800725c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007260:	430b      	orrs	r3, r1
 8007262:	d156      	bne.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007264:	4b59      	ldr	r3, [pc, #356]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800726a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800726e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007276:	d028      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800727e:	d845      	bhi.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007286:	d013      	beq.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800728e:	d83d      	bhi.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729c:	d004      	beq.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800729e:	e035      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fd feb8 	bl	8005014 <HAL_RCC_GetPCLK2Freq>
 80072a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072a6:	e1e2      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80072a8:	f7fd fd84 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80072ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072ae:	e1de      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072b0:	4b46      	ldr	r3, [pc, #280]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072bc:	d102      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 80072be:	4b44      	ldr	r3, [pc, #272]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072c2:	e1d4      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072c8:	e1d1      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072ca:	4b40      	ldr	r3, [pc, #256]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d117      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072d6:	4b3d      	ldr	r3, [pc, #244]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 80072e2:	4b3a      	ldr	r3, [pc, #232]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	e006      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80072ee:	4b37      	ldr	r3, [pc, #220]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80072f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	0e1b      	lsrs	r3, r3, #24
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	4a35      	ldr	r2, [pc, #212]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80072fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007304:	e1b3      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800730a:	e1b0      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007310:	e1ad      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007316:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800731a:	430b      	orrs	r3, r1
 800731c:	d15c      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800731e:	4b2b      	ldr	r3, [pc, #172]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007324:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007328:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007330:	d028      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007338:	d845      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007340:	d013      	beq.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8007342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007348:	d83d      	bhi.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007356:	d004      	beq.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8007358:	e035      	b.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800735a:	f7fd fe47 	bl	8004fec <HAL_RCC_GetPCLK1Freq>
 800735e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007360:	e185      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007362:	f7fd fd27 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8007366:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007368:	e181      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800736a:	4b18      	ldr	r3, [pc, #96]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007376:	d102      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8007378:	4b15      	ldr	r3, [pc, #84]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800737a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800737c:	e177      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007382:	e174      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007384:	4b11      	ldr	r3, [pc, #68]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b20      	cmp	r3, #32
 800738e:	d117      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007390:	4b0e      	ldr	r3, [pc, #56]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 800739c:	4b0b      	ldr	r3, [pc, #44]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	0e1b      	lsrs	r3, r3, #24
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	e006      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 80073a8:	4b08      	ldr	r3, [pc, #32]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80073aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	0e1b      	lsrs	r3, r3, #24
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	4a07      	ldr	r2, [pc, #28]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80073b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073be:	e156      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073c4:	e153      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ca:	e150      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80073cc:	46020c00 	.word	0x46020c00
 80073d0:	00f42400 	.word	0x00f42400
 80073d4:	0800e2c0 	.word	0x0800e2c0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80073d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073dc:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80073e0:	430b      	orrs	r3, r1
 80073e2:	d176      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80073e4:	4ba4      	ldr	r3, [pc, #656]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80073e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073ea:	f003 0318 	and.w	r3, r3, #24
 80073ee:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	2b18      	cmp	r3, #24
 80073f4:	d86a      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80073f6:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007461 	.word	0x08007461
 8007400:	080074cd 	.word	0x080074cd
 8007404:	080074cd 	.word	0x080074cd
 8007408:	080074cd 	.word	0x080074cd
 800740c:	080074cd 	.word	0x080074cd
 8007410:	080074cd 	.word	0x080074cd
 8007414:	080074cd 	.word	0x080074cd
 8007418:	080074cd 	.word	0x080074cd
 800741c:	08007469 	.word	0x08007469
 8007420:	080074cd 	.word	0x080074cd
 8007424:	080074cd 	.word	0x080074cd
 8007428:	080074cd 	.word	0x080074cd
 800742c:	080074cd 	.word	0x080074cd
 8007430:	080074cd 	.word	0x080074cd
 8007434:	080074cd 	.word	0x080074cd
 8007438:	080074cd 	.word	0x080074cd
 800743c:	08007471 	.word	0x08007471
 8007440:	080074cd 	.word	0x080074cd
 8007444:	080074cd 	.word	0x080074cd
 8007448:	080074cd 	.word	0x080074cd
 800744c:	080074cd 	.word	0x080074cd
 8007450:	080074cd 	.word	0x080074cd
 8007454:	080074cd 	.word	0x080074cd
 8007458:	080074cd 	.word	0x080074cd
 800745c:	0800748b 	.word	0x0800748b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007460:	f7fd fdec 	bl	800503c <HAL_RCC_GetPCLK3Freq>
 8007464:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007466:	e102      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007468:	f7fd fca4 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 800746c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800746e:	e0fe      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007470:	4b81      	ldr	r3, [pc, #516]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800747c:	d102      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 800747e:	4b7f      	ldr	r3, [pc, #508]	@ (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8007480:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007482:	e0f4      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007488:	e0f1      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800748a:	4b7b      	ldr	r3, [pc, #492]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b20      	cmp	r3, #32
 8007494:	d117      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007496:	4b78      	ldr	r3, [pc, #480]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80074a2:	4b75      	ldr	r3, [pc, #468]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	e006      	b.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 80074ae:	4b72      	ldr	r3, [pc, #456]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80074b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074b4:	041b      	lsls	r3, r3, #16
 80074b6:	0e1b      	lsrs	r3, r3, #24
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	4a70      	ldr	r2, [pc, #448]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80074be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074c4:	e0d3      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074ca:	e0d0      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074d0:	e0cd      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80074d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80074da:	430b      	orrs	r3, r1
 80074dc:	d155      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80074de:	4b66      	ldr	r3, [pc, #408]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80074e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80074e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074f0:	d013      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074f8:	d844      	bhi.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007500:	d013      	beq.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007508:	d83c      	bhi.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	2b00      	cmp	r3, #0
 800750e:	d014      	beq.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007516:	d014      	beq.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007518:	e034      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751a:	f107 0318 	add.w	r3, r7, #24
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fcbe 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007528:	e0a1      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800752a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fb5c 	bl	8005bec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007538:	e099      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800753a:	f7fd fc3b 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 800753e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007540:	e095      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007542:	4b4d      	ldr	r3, [pc, #308]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b20      	cmp	r3, #32
 800754c:	d117      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800754e:	4b4a      	ldr	r3, [pc, #296]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800755a:	4b47      	ldr	r3, [pc, #284]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	0e1b      	lsrs	r3, r3, #24
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	e006      	b.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8007566:	4b44      	ldr	r3, [pc, #272]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800756c:	041b      	lsls	r3, r3, #16
 800756e:	0e1b      	lsrs	r3, r3, #24
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	4a42      	ldr	r2, [pc, #264]	@ (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800757a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800757c:	e077      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007582:	e074      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007588:	e071      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800758a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007592:	430b      	orrs	r3, r1
 8007594:	d131      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007596:	4b38      	ldr	r3, [pc, #224]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800759c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80075a2:	4b35      	ldr	r3, [pc, #212]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80075a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d106      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d103      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 80075b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80075bc:	e057      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80075be:	4b2e      	ldr	r3, [pc, #184]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80075c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075cc:	d112      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075d4:	d10e      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075d6:	4b28      	ldr	r3, [pc, #160]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80075d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075e4:	d102      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 80075e6:	23fa      	movs	r3, #250	@ 0xfa
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075ea:	e040      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80075ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075f2:	e03c      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f8:	e039      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80075fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fe:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007602:	430b      	orrs	r3, r1
 8007604:	d131      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007606:	4b1c      	ldr	r3, [pc, #112]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007608:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800760c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007610:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007612:	4b19      	ldr	r3, [pc, #100]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800761a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800761e:	d105      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8007626:	4b17      	ldr	r3, [pc, #92]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8007628:	637b      	str	r3, [r7, #52]	@ 0x34
 800762a:	e020      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800762c:	4b12      	ldr	r3, [pc, #72]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007638:	d106      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007640:	d102      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007642:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007644:	637b      	str	r3, [r7, #52]	@ 0x34
 8007646:	e012      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007648:	4b0b      	ldr	r3, [pc, #44]	@ (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007654:	d106      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800765c:	d102      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 800765e:	4b07      	ldr	r3, [pc, #28]	@ (800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
 8007662:	e004      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	637b      	str	r3, [r7, #52]	@ 0x34
 8007668:	e001      	b.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800766e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007670:	4618      	mov	r0, r3
 8007672:	3738      	adds	r7, #56	@ 0x38
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	46020c00 	.word	0x46020c00
 800767c:	00f42400 	.word	0x00f42400
 8007680:	0800e2c0 	.word	0x0800e2c0
 8007684:	02dc6c00 	.word	0x02dc6c00
 8007688:	016e3600 	.word	0x016e3600

0800768c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007694:	4b47      	ldr	r3, [pc, #284]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a46      	ldr	r2, [pc, #280]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 800769a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800769e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076a0:	f7fa fa12 	bl	8001ac8 <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076a6:	e008      	b.n	80076ba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076a8:	f7fa fa0e 	bl	8001ac8 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e077      	b.n	80077aa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076ba:	4b3e      	ldr	r3, [pc, #248]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f0      	bne.n	80076a8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80076c6:	4b3b      	ldr	r3, [pc, #236]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6811      	ldr	r1, [r2, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6852      	ldr	r2, [r2, #4]
 80076da:	3a01      	subs	r2, #1
 80076dc:	0212      	lsls	r2, r2, #8
 80076de:	430a      	orrs	r2, r1
 80076e0:	4934      	ldr	r1, [pc, #208]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80076e6:	4b33      	ldr	r3, [pc, #204]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 80076e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076ea:	4b33      	ldr	r3, [pc, #204]	@ (80077b8 <RCCEx_PLL2_Config+0x12c>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6892      	ldr	r2, [r2, #8]
 80076f2:	3a01      	subs	r2, #1
 80076f4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68d2      	ldr	r2, [r2, #12]
 80076fc:	3a01      	subs	r2, #1
 80076fe:	0252      	lsls	r2, r2, #9
 8007700:	b292      	uxth	r2, r2
 8007702:	4311      	orrs	r1, r2
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6912      	ldr	r2, [r2, #16]
 8007708:	3a01      	subs	r2, #1
 800770a:	0412      	lsls	r2, r2, #16
 800770c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007710:	4311      	orrs	r1, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6952      	ldr	r2, [r2, #20]
 8007716:	3a01      	subs	r2, #1
 8007718:	0612      	lsls	r2, r2, #24
 800771a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800771e:	430a      	orrs	r2, r1
 8007720:	4924      	ldr	r1, [pc, #144]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007722:	4313      	orrs	r3, r2
 8007724:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007726:	4b23      	ldr	r3, [pc, #140]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772a:	f023 020c 	bic.w	r2, r3, #12
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	4920      	ldr	r1, [pc, #128]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007734:	4313      	orrs	r3, r2
 8007736:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007738:	4b1e      	ldr	r3, [pc, #120]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 800773a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	491c      	ldr	r1, [pc, #112]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007742:	4313      	orrs	r3, r2
 8007744:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007746:	4b1b      	ldr	r3, [pc, #108]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774a:	4a1a      	ldr	r2, [pc, #104]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 800774c:	f023 0310 	bic.w	r3, r3, #16
 8007750:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007752:	4b18      	ldr	r3, [pc, #96]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800775a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	69d2      	ldr	r2, [r2, #28]
 8007762:	00d2      	lsls	r2, r2, #3
 8007764:	4913      	ldr	r1, [pc, #76]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007766:	4313      	orrs	r3, r2
 8007768:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800776a:	4b12      	ldr	r3, [pc, #72]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 800776c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776e:	4a11      	ldr	r2, [pc, #68]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007770:	f043 0310 	orr.w	r3, r3, #16
 8007774:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007776:	4b0f      	ldr	r3, [pc, #60]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a0e      	ldr	r2, [pc, #56]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 800777c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007780:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007782:	f7fa f9a1 	bl	8001ac8 <HAL_GetTick>
 8007786:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007788:	e008      	b.n	800779c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800778a:	f7fa f99d 	bl	8001ac8 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d901      	bls.n	800779c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e006      	b.n	80077aa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800779c:	4b05      	ldr	r3, [pc, #20]	@ (80077b4 <RCCEx_PLL2_Config+0x128>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0f0      	beq.n	800778a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0

}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	46020c00 	.word	0x46020c00
 80077b8:	80800000 	.word	0x80800000

080077bc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80077c4:	4b47      	ldr	r3, [pc, #284]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a46      	ldr	r2, [pc, #280]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80077ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077d0:	f7fa f97a 	bl	8001ac8 <HAL_GetTick>
 80077d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077d6:	e008      	b.n	80077ea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077d8:	f7fa f976 	bl	8001ac8 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e077      	b.n	80078da <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077ea:	4b3e      	ldr	r3, [pc, #248]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80077f6:	4b3b      	ldr	r3, [pc, #236]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80077fe:	f023 0303 	bic.w	r3, r3, #3
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6811      	ldr	r1, [r2, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6852      	ldr	r2, [r2, #4]
 800780a:	3a01      	subs	r2, #1
 800780c:	0212      	lsls	r2, r2, #8
 800780e:	430a      	orrs	r2, r1
 8007810:	4934      	ldr	r1, [pc, #208]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007812:	4313      	orrs	r3, r2
 8007814:	630b      	str	r3, [r1, #48]	@ 0x30
 8007816:	4b33      	ldr	r3, [pc, #204]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800781a:	4b33      	ldr	r3, [pc, #204]	@ (80078e8 <RCCEx_PLL3_Config+0x12c>)
 800781c:	4013      	ands	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6892      	ldr	r2, [r2, #8]
 8007822:	3a01      	subs	r2, #1
 8007824:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	68d2      	ldr	r2, [r2, #12]
 800782c:	3a01      	subs	r2, #1
 800782e:	0252      	lsls	r2, r2, #9
 8007830:	b292      	uxth	r2, r2
 8007832:	4311      	orrs	r1, r2
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6912      	ldr	r2, [r2, #16]
 8007838:	3a01      	subs	r2, #1
 800783a:	0412      	lsls	r2, r2, #16
 800783c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007840:	4311      	orrs	r1, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6952      	ldr	r2, [r2, #20]
 8007846:	3a01      	subs	r2, #1
 8007848:	0612      	lsls	r2, r2, #24
 800784a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800784e:	430a      	orrs	r2, r1
 8007850:	4924      	ldr	r1, [pc, #144]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007852:	4313      	orrs	r3, r2
 8007854:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007856:	4b23      	ldr	r3, [pc, #140]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785a:	f023 020c 	bic.w	r2, r3, #12
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	4920      	ldr	r1, [pc, #128]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007864:	4313      	orrs	r3, r2
 8007866:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007868:	4b1e      	ldr	r3, [pc, #120]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 800786a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	491c      	ldr	r1, [pc, #112]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007872:	4313      	orrs	r3, r2
 8007874:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007876:	4b1b      	ldr	r3, [pc, #108]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	4a1a      	ldr	r2, [pc, #104]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 800787c:	f023 0310 	bic.w	r3, r3, #16
 8007880:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007882:	4b18      	ldr	r3, [pc, #96]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800788a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	69d2      	ldr	r2, [r2, #28]
 8007892:	00d2      	lsls	r2, r2, #3
 8007894:	4913      	ldr	r1, [pc, #76]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 8007896:	4313      	orrs	r3, r2
 8007898:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800789a:	4b12      	ldr	r3, [pc, #72]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789e:	4a11      	ldr	r2, [pc, #68]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80078a0:	f043 0310 	orr.w	r3, r3, #16
 80078a4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80078a6:	4b0f      	ldr	r3, [pc, #60]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a0e      	ldr	r2, [pc, #56]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80078ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078b0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078b2:	f7fa f909 	bl	8001ac8 <HAL_GetTick>
 80078b6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078b8:	e008      	b.n	80078cc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078ba:	f7fa f905 	bl	8001ac8 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e006      	b.n	80078da <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <RCCEx_PLL3_Config+0x128>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0f0      	beq.n	80078ba <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	46020c00 	.word	0x46020c00
 80078e8:	80800000 	.word	0x80800000

080078ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	@ 0x28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e075      	b.n	80079ea <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7f9 fdb9 	bl	8001488 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2204      	movs	r2, #4
 800791a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f868 	bl	80079f4 <HAL_SD_InitCard>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e05d      	b.n	80079ea <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800792e:	f107 0308 	add.w	r3, r7, #8
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fdb5 	bl	80084a4 <HAL_SD_GetCardStatus>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e052      	b.n	80079ea <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007944:	7e3b      	ldrb	r3, [r7, #24]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800794a:	7e7b      	ldrb	r3, [r7, #25]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007954:	2b01      	cmp	r3, #1
 8007956:	d10a      	bne.n	800796e <HAL_SD_Init+0x82>
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	2b00      	cmp	r3, #0
 800795c:	d102      	bne.n	8007964 <HAL_SD_Init+0x78>
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800796a:	659a      	str	r2, [r3, #88]	@ 0x58
 800796c:	e00b      	b.n	8007986 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007972:	2b01      	cmp	r3, #1
 8007974:	d104      	bne.n	8007980 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800797c:	659a      	str	r2, [r3, #88]	@ 0x58
 800797e:	e002      	b.n	8007986 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fe73 	bl	8008678 <HAL_SD_ConfigWideBusOperation>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e026      	b.n	80079ea <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800799c:	f7fa f894 	bl	8001ac8 <HAL_GetTick>
 80079a0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079a2:	e011      	b.n	80079c8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80079a4:	f7fa f890 	bl	8001ac8 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079b2:	d109      	bne.n	80079c8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079ba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e010      	b.n	80079ea <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 ff67 	bl	800889c <HAL_SD_GetCardState>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d1e7      	bne.n	80079a4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3728      	adds	r7, #40	@ 0x28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b08d      	sub	sp, #52	@ 0x34
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a0c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007a10:	f04f 0100 	mov.w	r1, #0
 8007a14:	f7fe fcf8 	bl	8006408 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a18:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007a2e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e070      	b.n	8007b16 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	4a39      	ldr	r2, [pc, #228]	@ (8007b20 <HAL_SD_InitCard+0x12c>)
 8007a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681c      	ldr	r4, [r3, #0]
 8007a46:	466a      	mov	r2, sp
 8007a48:	f107 0318 	add.w	r3, r7, #24
 8007a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a50:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a54:	f107 030c 	add.w	r3, r7, #12
 8007a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f002 fdca 	bl	800a5f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 fe0d 	bl	800a684 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007a82:	4a28      	ldr	r2, [pc, #160]	@ (8007b24 <HAL_SD_InitCard+0x130>)
 8007a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fa f827 	bl	8001ae0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fff0 	bl	8008a78 <SD_PowerON>
 8007a98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e02e      	b.n	8007b16 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 ff0f 	bl	80088dc <SD_InitCard>
 8007abe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e01b      	b.n	8007b16 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f002 fe62 	bl	800a7b0 <SDMMC_CmdBlockLength>
 8007aec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00f      	beq.n	8007b14 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a0b      	ldr	r2, [pc, #44]	@ (8007b28 <HAL_SD_InitCard+0x134>)
 8007afa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	372c      	adds	r7, #44	@ 0x2c
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd90      	pop	{r4, r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	014f8b59 	.word	0x014f8b59
 8007b24:	00012110 	.word	0x00012110
 8007b28:	1fe00fff 	.word	0x1fe00fff

08007b2c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b092      	sub	sp, #72	@ 0x48
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b3a:	f7f9 ffc5 	bl	8001ac8 <HAL_GetTick>
 8007b3e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d107      	bne.n	8007b5e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b52:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e167      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	f040 815a 	bne.w	8007e20 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	441a      	add	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d907      	bls.n	8007b90 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b84:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e14e      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2203      	movs	r2, #3
 8007b94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d002      	beq.n	8007bae <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	025b      	lsls	r3, r3, #9
 8007bac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bb2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	025b      	lsls	r3, r3, #9
 8007bb8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007bba:	2390      	movs	r3, #144	@ 0x90
 8007bbc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f107 0214 	add.w	r2, r7, #20
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f002 fdbf 	bl	800a758 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d90a      	bls.n	8007c06 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f002 fe1d 	bl	800a83c <SDMMC_CmdReadMultiBlock>
 8007c02:	6478      	str	r0, [r7, #68]	@ 0x44
 8007c04:	e009      	b.n	8007c1a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 fdef 	bl	800a7f6 <SDMMC_CmdReadSingleBlock>
 8007c18:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d012      	beq.n	8007c46 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a84      	ldr	r2, [pc, #528]	@ (8007e38 <HAL_SD_ReadBlocks+0x30c>)
 8007c26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e0f3      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007c4a:	e058      	b.n	8007cfe <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d033      	beq.n	8007cc2 <HAL_SD_ReadBlocks+0x196>
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c5c:	2b1f      	cmp	r3, #31
 8007c5e:	d930      	bls.n	8007cc2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007c60:	2300      	movs	r3, #0
 8007c62:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c64:	e027      	b.n	8007cb6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f002 fcec 	bl	800a648 <SDMMC_ReadFIFO>
 8007c70:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c82:	0a1b      	lsrs	r3, r3, #8
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c98:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca2:	0e1b      	lsrs	r3, r3, #24
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cac:	3301      	adds	r3, #1
 8007cae:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb8:	2b07      	cmp	r3, #7
 8007cba:	d9d4      	bls.n	8007c66 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cbe:	3b20      	subs	r3, #32
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007cc2:	f7f9 ff01 	bl	8001ac8 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d902      	bls.n	8007cd8 <HAL_SD_ReadBlocks+0x1ac>
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d112      	bne.n	8007cfe <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a56      	ldr	r2, [pc, #344]	@ (8007e38 <HAL_SD_ReadBlocks+0x30c>)
 8007cde:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e097      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d04:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d09f      	beq.n	8007c4c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d1a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d022      	beq.n	8007d70 <HAL_SD_ReadBlocks+0x244>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d91f      	bls.n	8007d70 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d01b      	beq.n	8007d70 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 fde7 	bl	800a910 <SDMMC_CmdStopTransfer>
 8007d42:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d012      	beq.n	8007d70 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8007e38 <HAL_SD_ReadBlocks+0x30c>)
 8007d50:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e05e      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d012      	beq.n	8007da4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a2d      	ldr	r2, [pc, #180]	@ (8007e38 <HAL_SD_ReadBlocks+0x30c>)
 8007d84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8a:	f043 0208 	orr.w	r2, r3, #8
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e044      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d012      	beq.n	8007dd8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a20      	ldr	r2, [pc, #128]	@ (8007e38 <HAL_SD_ReadBlocks+0x30c>)
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dbe:	f043 0202 	orr.w	r2, r3, #2
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e02a      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a13      	ldr	r2, [pc, #76]	@ (8007e38 <HAL_SD_ReadBlocks+0x30c>)
 8007dec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df2:	f043 0220 	orr.w	r2, r3, #32
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e010      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	@ (8007e3c <HAL_SD_ReadBlocks+0x310>)
 8007e12:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e006      	b.n	8007e2e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
  }
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3748      	adds	r7, #72	@ 0x48
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	1fe00fff 	.word	0x1fe00fff
 8007e3c:	18000f3a 	.word	0x18000f3a

08007e40 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b092      	sub	sp, #72	@ 0x48
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e4e:	f7f9 fe3b 	bl	8001ac8 <HAL_GetTick>
 8007e52:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d107      	bne.n	8007e72 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e16b      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	f040 815e 	bne.w	800813c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	441a      	add	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d907      	bls.n	8007ea4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e98:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e152      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d002      	beq.n	8007ec2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebe:	025b      	lsls	r3, r3, #9
 8007ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ec6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	025b      	lsls	r3, r3, #9
 8007ecc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ece:	2390      	movs	r3, #144	@ 0x90
 8007ed0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f107 0218 	add.w	r2, r7, #24
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f002 fc35 	bl	800a758 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007efc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d90a      	bls.n	8007f1a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2220      	movs	r2, #32
 8007f08:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fcd9 	bl	800a8c8 <SDMMC_CmdWriteMultiBlock>
 8007f16:	6478      	str	r0, [r7, #68]	@ 0x44
 8007f18:	e009      	b.n	8007f2e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f26:	4618      	mov	r0, r3
 8007f28:	f002 fcab 	bl	800a882 <SDMMC_CmdWriteSingleBlock>
 8007f2c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d012      	beq.n	8007f5a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a86      	ldr	r2, [pc, #536]	@ (8008154 <HAL_SD_WriteBlocks+0x314>)
 8007f3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f42:	431a      	orrs	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e0f7      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007f5e:	e05c      	b.n	800801a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d037      	beq.n	8007fde <HAL_SD_WriteBlocks+0x19e>
 8007f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f70:	2b1f      	cmp	r3, #31
 8007f72:	d934      	bls.n	8007fde <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007f74:	2300      	movs	r3, #0
 8007f76:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f78:	e02b      	b.n	8007fd2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	3301      	adds	r3, #1
 8007f84:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	021a      	lsls	r2, r3, #8
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f94:	3301      	adds	r3, #1
 8007f96:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	041a      	lsls	r2, r3, #16
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	061a      	lsls	r2, r3, #24
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb8:	3301      	adds	r3, #1
 8007fba:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f107 0214 	add.w	r2, r7, #20
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f002 fb4b 	bl	800a662 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fce:	3301      	adds	r3, #1
 8007fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fd4:	2b07      	cmp	r3, #7
 8007fd6:	d9d0      	bls.n	8007f7a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8007fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fda:	3b20      	subs	r3, #32
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007fde:	f7f9 fd73 	bl	8001ac8 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d902      	bls.n	8007ff4 <HAL_SD_WriteBlocks+0x1b4>
 8007fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d112      	bne.n	800801a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a56      	ldr	r2, [pc, #344]	@ (8008154 <HAL_SD_WriteBlocks+0x314>)
 8007ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008002:	431a      	orrs	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e097      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008020:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008024:	2b00      	cmp	r3, #0
 8008026:	d09b      	beq.n	8007f60 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008036:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800803e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d022      	beq.n	800808c <HAL_SD_WriteBlocks+0x24c>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d91f      	bls.n	800808c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008050:	2b03      	cmp	r3, #3
 8008052:	d01b      	beq.n	800808c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f002 fc59 	bl	800a910 <SDMMC_CmdStopTransfer>
 800805e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a3a      	ldr	r2, [pc, #232]	@ (8008154 <HAL_SD_WriteBlocks+0x314>)
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008074:	431a      	orrs	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e05e      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d012      	beq.n	80080c0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a2d      	ldr	r2, [pc, #180]	@ (8008154 <HAL_SD_WriteBlocks+0x314>)
 80080a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a6:	f043 0208 	orr.w	r2, r3, #8
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e044      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d012      	beq.n	80080f4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a20      	ldr	r2, [pc, #128]	@ (8008154 <HAL_SD_WriteBlocks+0x314>)
 80080d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080da:	f043 0202 	orr.w	r2, r3, #2
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e02a      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d012      	beq.n	8008128 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a13      	ldr	r2, [pc, #76]	@ (8008154 <HAL_SD_WriteBlocks+0x314>)
 8008108:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800810e:	f043 0210 	orr.w	r2, r3, #16
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e010      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a0a      	ldr	r2, [pc, #40]	@ (8008158 <HAL_SD_WriteBlocks+0x318>)
 800812e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	e006      	b.n	800814a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008140:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3748      	adds	r7, #72	@ 0x48
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	1fe00fff 	.word	0x1fe00fff
 8008158:	18000f3a 	.word	0x18000f3a

0800815c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800816a:	0f9b      	lsrs	r3, r3, #30
 800816c:	b2da      	uxtb	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008176:	0e9b      	lsrs	r3, r3, #26
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	b2da      	uxtb	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008188:	0e1b      	lsrs	r3, r3, #24
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 0303 	and.w	r3, r3, #3
 8008190:	b2da      	uxtb	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800819a:	0c1b      	lsrs	r3, r3, #16
 800819c:	b2da      	uxtb	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	0d1b      	lsrs	r3, r3, #20
 80081be:	b29a      	uxth	r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081da:	0bdb      	lsrs	r3, r3, #15
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ec:	0b9b      	lsrs	r3, r3, #14
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081fe:	0b5b      	lsrs	r3, r3, #13
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008210:	0b1b      	lsrs	r3, r3, #12
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2200      	movs	r2, #0
 8008222:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d163      	bne.n	80082f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008230:	009a      	lsls	r2, r3, #2
 8008232:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008236:	4013      	ands	r3, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800823c:	0f92      	lsrs	r2, r2, #30
 800823e:	431a      	orrs	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008248:	0edb      	lsrs	r3, r3, #27
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f003 0307 	and.w	r3, r3, #7
 8008250:	b2da      	uxtb	r2, r3
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800825a:	0e1b      	lsrs	r3, r3, #24
 800825c:	b2db      	uxtb	r3, r3
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	b2da      	uxtb	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800826c:	0d5b      	lsrs	r3, r3, #21
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	b2da      	uxtb	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800827e:	0c9b      	lsrs	r3, r3, #18
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008290:	0bdb      	lsrs	r3, r3, #15
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	b2da      	uxtb	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	7e1b      	ldrb	r3, [r3, #24]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	3302      	adds	r3, #2
 80082b4:	2201      	movs	r2, #1
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082be:	fb03 f202 	mul.w	r2, r3, r2
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	7a1b      	ldrb	r3, [r3, #8]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	2201      	movs	r2, #1
 80082d2:	409a      	lsls	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80082e0:	0a52      	lsrs	r2, r2, #9
 80082e2:	fb03 f202 	mul.w	r2, r3, r2
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80082f2:	e031      	b.n	8008358 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d11d      	bne.n	8008338 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008300:	041b      	lsls	r3, r3, #16
 8008302:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800830a:	0c1b      	lsrs	r3, r3, #16
 800830c:	431a      	orrs	r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	3301      	adds	r3, #1
 8008318:	029a      	lsls	r2, r3, #10
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800832c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	655a      	str	r2, [r3, #84]	@ 0x54
 8008336:	e00f      	b.n	8008358 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a58      	ldr	r2, [pc, #352]	@ (80084a0 <HAL_SD_GetCardCSD+0x344>)
 800833e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008344:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e09d      	b.n	8008494 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800835c:	0b9b      	lsrs	r3, r3, #14
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	b2da      	uxtb	r2, r3
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800836e:	09db      	lsrs	r3, r3, #7
 8008370:	b2db      	uxtb	r3, r3
 8008372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008376:	b2da      	uxtb	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008386:	b2da      	uxtb	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008390:	0fdb      	lsrs	r3, r3, #31
 8008392:	b2da      	uxtb	r2, r3
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800839c:	0f5b      	lsrs	r3, r3, #29
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083ae:	0e9b      	lsrs	r3, r3, #26
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083c0:	0d9b      	lsrs	r3, r3, #22
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083d2:	0d5b      	lsrs	r3, r3, #21
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083ee:	0c1b      	lsrs	r3, r3, #16
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008402:	0bdb      	lsrs	r3, r3, #15
 8008404:	b2db      	uxtb	r3, r3
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	b2da      	uxtb	r2, r3
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008416:	0b9b      	lsrs	r3, r3, #14
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	b2da      	uxtb	r2, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800842a:	0b5b      	lsrs	r3, r3, #13
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	b2da      	uxtb	r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800843e:	0b1b      	lsrs	r3, r3, #12
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008452:	0a9b      	lsrs	r3, r3, #10
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	b2da      	uxtb	r2, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	b2da      	uxtb	r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	b2db      	uxtb	r3, r3
 800847e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008482:	b2da      	uxtb	r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	1fe00fff 	.word	0x1fe00fff

080084a4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b094      	sub	sp, #80	@ 0x50
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d101      	bne.n	80084c4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e0a7      	b.n	8008614 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80084c4:	f107 0308 	add.w	r3, r7, #8
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb62 	bl	8008b94 <SD_SendSDStatus>
 80084d0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80084d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d011      	beq.n	80084fc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a4f      	ldr	r2, [pc, #316]	@ (800861c <HAL_SD_GetCardStatus+0x178>)
 80084de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80084fa:	e070      	b.n	80085de <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	099b      	lsrs	r3, r3, #6
 8008500:	b2db      	uxtb	r3, r3
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	b2da      	uxtb	r2, r3
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	0a1b      	lsrs	r3, r3, #8
 8008520:	b29b      	uxth	r3, r3
 8008522:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008526:	b29a      	uxth	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	0e1b      	lsrs	r3, r3, #24
 800852c:	b29b      	uxth	r3, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	b29a      	uxth	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	061a      	lsls	r2, r3, #24
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008542:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800854c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	0e1b      	lsrs	r3, r3, #24
 8008552:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	0a1b      	lsrs	r3, r3, #8
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	0d1b      	lsrs	r3, r3, #20
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	b2da      	uxtb	r2, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	0c1b      	lsrs	r3, r3, #16
 800857e:	b29b      	uxth	r3, r3
 8008580:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008584:	b29a      	uxth	r2, r3
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	b29b      	uxth	r3, r3
 800858a:	b2db      	uxtb	r3, r3
 800858c:	b29b      	uxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	0a9b      	lsrs	r3, r3, #10
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	0a1b      	lsrs	r3, r3, #8
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	091b      	lsrs	r3, r3, #4
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	0e1b      	lsrs	r3, r3, #24
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80085e6:	4618      	mov	r0, r3
 80085e8:	f002 f8e2 	bl	800a7b0 <SDMMC_CmdBlockLength>
 80085ec:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80085ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00d      	beq.n	8008610 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a08      	ldr	r2, [pc, #32]	@ (800861c <HAL_SD_GetCardStatus+0x178>)
 80085fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008600:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8008610:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008614:	4618      	mov	r0, r3
 8008616:	3750      	adds	r7, #80	@ 0x50
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	1fe00fff 	.word	0x1fe00fff

08008620 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b08d      	sub	sp, #52	@ 0x34
 800867c:	af02      	add	r7, sp, #8
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2203      	movs	r2, #3
 800868c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008694:	2b03      	cmp	r3, #3
 8008696:	d02e      	beq.n	80086f6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800869e:	d106      	bne.n	80086ae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80086ac:	e029      	b.n	8008702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086b4:	d10a      	bne.n	80086cc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fb64 	bl	8008d84 <SD_WideBus_Enable>
 80086bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80086ca:	e01a      	b.n	8008702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fba1 	bl	8008e1a <SD_WideBus_Disable>
 80086d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80086e6:	e00c      	b.n	8008702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80086f4:	e005      	b.n	8008702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a5f      	ldr	r2, [pc, #380]	@ (800888c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008710:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008718:	e096      	b.n	8008848 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800871a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800871e:	f04f 0100 	mov.w	r1, #0
 8008722:	f7fd fe71 	bl	8006408 <HAL_RCCEx_GetPeriphCLKFreq>
 8008726:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 8083 	beq.w	8008836 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	695a      	ldr	r2, [r3, #20]
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	4950      	ldr	r1, [pc, #320]	@ (8008890 <HAL_SD_ConfigWideBusOperation+0x218>)
 800874e:	fba1 1303 	umull	r1, r3, r1, r3
 8008752:	0e1b      	lsrs	r3, r3, #24
 8008754:	429a      	cmp	r2, r3
 8008756:	d303      	bcc.n	8008760 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	e05a      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008768:	d103      	bne.n	8008772 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	61bb      	str	r3, [r7, #24]
 8008770:	e051      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800877a:	d126      	bne.n	80087ca <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10e      	bne.n	80087a2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	4a43      	ldr	r2, [pc, #268]	@ (8008894 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d906      	bls.n	800879a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4a40      	ldr	r2, [pc, #256]	@ (8008890 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008790:	fba2 2303 	umull	r2, r3, r2, r3
 8008794:	0e5b      	lsrs	r3, r3, #25
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	e03d      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e039      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	4a39      	ldr	r2, [pc, #228]	@ (8008894 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d906      	bls.n	80087c2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4a36      	ldr	r2, [pc, #216]	@ (8008890 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087b8:	fba2 2303 	umull	r2, r3, r2, r3
 80087bc:	0e5b      	lsrs	r3, r3, #25
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	e029      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	61bb      	str	r3, [r7, #24]
 80087c8:	e025      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10e      	bne.n	80087f0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4a30      	ldr	r2, [pc, #192]	@ (8008898 <HAL_SD_ConfigWideBusOperation+0x220>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d906      	bls.n	80087e8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008890 <HAL_SD_ConfigWideBusOperation+0x218>)
 80087de:	fba2 2303 	umull	r2, r3, r2, r3
 80087e2:	0e1b      	lsrs	r3, r3, #24
 80087e4:	61bb      	str	r3, [r7, #24]
 80087e6:	e016      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	e012      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fc:	4a26      	ldr	r2, [pc, #152]	@ (8008898 <HAL_SD_ConfigWideBusOperation+0x220>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d906      	bls.n	8008810 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4a22      	ldr	r2, [pc, #136]	@ (8008890 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	0e1b      	lsrs	r3, r3, #24
 800880c:	61bb      	str	r3, [r7, #24]
 800880e:	e002      	b.n	8008816 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681c      	ldr	r4, [r3, #0]
 800881a:	466a      	mov	r2, sp
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008824:	e882 0003 	stmia.w	r2, {r0, r1}
 8008828:	f107 0308 	add.w	r3, r7, #8
 800882c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800882e:	4620      	mov	r0, r4
 8008830:	f001 fee0 	bl	800a5f4 <SDMMC_Init>
 8008834:	e008      	b.n	8008848 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008850:	4618      	mov	r0, r3
 8008852:	f001 ffad 	bl	800a7b0 <SDMMC_CmdBlockLength>
 8008856:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00c      	beq.n	8008878 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a0a      	ldr	r2, [pc, #40]	@ (800888c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008864:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008884:	4618      	mov	r0, r3
 8008886:	372c      	adds	r7, #44	@ 0x2c
 8008888:	46bd      	mov	sp, r7
 800888a:	bd90      	pop	{r4, r7, pc}
 800888c:	1fe00fff 	.word	0x1fe00fff
 8008890:	55e63b89 	.word	0x55e63b89
 8008894:	02faf080 	.word	0x02faf080
 8008898:	017d7840 	.word	0x017d7840

0800889c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088a8:	f107 030c 	add.w	r3, r7, #12
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa40 	bl	8008d34 <SD_SendStatus>
 80088b4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	0a5b      	lsrs	r3, r3, #9
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80088d2:	693b      	ldr	r3, [r7, #16]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b090      	sub	sp, #64	@ 0x40
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80088e8:	f7f9 f8ee 	bl	8001ac8 <HAL_GetTick>
 80088ec:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 fed7 	bl	800a6a6 <SDMMC_GetPowerState>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d102      	bne.n	8008904 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008902:	e0b5      	b.n	8008a70 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008908:	2b03      	cmp	r3, #3
 800890a:	d02e      	beq.n	800896a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f002 f922 	bl	800ab5a <SDMMC_CmdSendCID>
 8008916:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <SD_InitCard+0x46>
    {
      return errorstate;
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	e0a6      	b.n	8008a70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f001 ff02 	bl	800a732 <SDMMC_GetResponse>
 800892e:	4602      	mov	r2, r0
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2104      	movs	r1, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fef9 	bl	800a732 <SDMMC_GetResponse>
 8008940:	4602      	mov	r2, r0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2108      	movs	r1, #8
 800894c:	4618      	mov	r0, r3
 800894e:	f001 fef0 	bl	800a732 <SDMMC_GetResponse>
 8008952:	4602      	mov	r2, r0
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	210c      	movs	r1, #12
 800895e:	4618      	mov	r0, r3
 8008960:	f001 fee7 	bl	800a732 <SDMMC_GetResponse>
 8008964:	4602      	mov	r2, r0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896e:	2b03      	cmp	r3, #3
 8008970:	d01d      	beq.n	80089ae <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008972:	e019      	b.n	80089a8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f107 020a 	add.w	r2, r7, #10
 800897c:	4611      	mov	r1, r2
 800897e:	4618      	mov	r0, r3
 8008980:	f002 f92a 	bl	800abd8 <SDMMC_CmdSetRelAdd>
 8008984:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <SD_InitCard+0xb4>
      {
        return errorstate;
 800898c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898e:	e06f      	b.n	8008a70 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008990:	f7f9 f89a 	bl	8001ac8 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800899e:	4293      	cmp	r3, r2
 80089a0:	d902      	bls.n	80089a8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80089a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80089a6:	e063      	b.n	8008a70 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80089a8:	897b      	ldrh	r3, [r7, #10]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0e2      	beq.n	8008974 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d036      	beq.n	8008a24 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80089b6:	897b      	ldrh	r3, [r7, #10]
 80089b8:	461a      	mov	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c6:	041b      	lsls	r3, r3, #16
 80089c8:	4619      	mov	r1, r3
 80089ca:	4610      	mov	r0, r2
 80089cc:	f002 f8e4 	bl	800ab98 <SDMMC_CmdSendCSD>
 80089d0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80089d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <SD_InitCard+0x100>
    {
      return errorstate;
 80089d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089da:	e049      	b.n	8008a70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 fea5 	bl	800a732 <SDMMC_GetResponse>
 80089e8:	4602      	mov	r2, r0
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2104      	movs	r1, #4
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 fe9c 	bl	800a732 <SDMMC_GetResponse>
 80089fa:	4602      	mov	r2, r0
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2108      	movs	r1, #8
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fe93 	bl	800a732 <SDMMC_GetResponse>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	210c      	movs	r1, #12
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 fe8a 	bl	800a732 <SDMMC_GetResponse>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2104      	movs	r1, #4
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f001 fe81 	bl	800a732 <SDMMC_GetResponse>
 8008a30:	4603      	mov	r3, r0
 8008a32:	0d1a      	lsrs	r2, r3, #20
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a38:	f107 030c 	add.w	r3, r7, #12
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff fb8c 	bl	800815c <HAL_SD_GetCardCSD>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008a4e:	e00f      	b.n	8008a70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a58:	041b      	lsls	r3, r3, #16
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f001 ff93 	bl	800a988 <SDMMC_CmdSelDesel>
 8008a62:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <SD_InitCard+0x192>
  {
    return errorstate;
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6c:	e000      	b.n	8008a70 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3740      	adds	r7, #64	@ 0x40
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 ff9c 	bl	800a9ce <SDMMC_CmdGoIdleState>
 8008a96:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	e072      	b.n	8008b88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 ffaf 	bl	800aa0a <SDMMC_CmdOperCond>
 8008aac:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ab4:	d10d      	bne.n	8008ad2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f001 ff84 	bl	800a9ce <SDMMC_CmdGoIdleState>
 8008ac6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d004      	beq.n	8008ad8 <SD_PowerON+0x60>
    {
      return errorstate;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	e05a      	b.n	8008b88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d137      	bne.n	8008b50 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 ffaf 	bl	800aa4a <SDMMC_CmdAppCommand>
 8008aec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d02d      	beq.n	8008b50 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008af4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008af8:	e046      	b.n	8008b88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2100      	movs	r1, #0
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 ffa2 	bl	800aa4a <SDMMC_CmdAppCommand>
 8008b06:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	e03a      	b.n	8008b88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	491e      	ldr	r1, [pc, #120]	@ (8008b90 <SD_PowerON+0x118>)
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 ffb9 	bl	800aa90 <SDMMC_CmdAppOperCommand>
 8008b1e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b2a:	e02d      	b.n	8008b88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 fdfd 	bl	800a732 <SDMMC_GetResponse>
 8008b38:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	0fdb      	lsrs	r3, r3, #31
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d101      	bne.n	8008b46 <SD_PowerON+0xce>
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <SD_PowerON+0xd0>
 8008b46:	2300      	movs	r3, #0
 8008b48:	613b      	str	r3, [r7, #16]

    count++;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d802      	bhi.n	8008b60 <SD_PowerON+0xe8>
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0cc      	beq.n	8008afa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d902      	bls.n	8008b70 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b6e:	e00b      	b.n	8008b88 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	c1100000 	.word	0xc1100000

08008b94 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08c      	sub	sp, #48	@ 0x30
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b9e:	f7f8 ff93 	bl	8001ac8 <HAL_GetTick>
 8008ba2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2100      	movs	r1, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 fdbf 	bl	800a732 <SDMMC_GetResponse>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bbe:	d102      	bne.n	8008bc6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008bc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008bc4:	e0b0      	b.n	8008d28 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2140      	movs	r1, #64	@ 0x40
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 fdef 	bl	800a7b0 <SDMMC_CmdBlockLength>
 8008bd2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	e0a0      	b.n	8008d28 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f001 ff29 	bl	800aa4a <SDMMC_CmdAppCommand>
 8008bf8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	e08d      	b.n	8008d28 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c10:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008c12:	2340      	movs	r3, #64	@ 0x40
 8008c14:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008c16:	2360      	movs	r3, #96	@ 0x60
 8008c18:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c22:	2301      	movs	r3, #1
 8008c24:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f107 0208 	add.w	r2, r7, #8
 8008c2e:	4611      	mov	r1, r2
 8008c30:	4618      	mov	r0, r3
 8008c32:	f001 fd91 	bl	800a758 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 f811 	bl	800ac62 <SDMMC_CmdStatusRegister>
 8008c40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d02b      	beq.n	8008ca0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	e069      	b.n	8008d28 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d013      	beq.n	8008c8a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c66:	e00d      	b.n	8008c84 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 fceb 	bl	800a648 <SDMMC_ReadFIFO>
 8008c72:	4602      	mov	r2, r0
 8008c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c76:	601a      	str	r2, [r3, #0]
        pData++;
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c80:	3301      	adds	r3, #1
 8008c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	d9ee      	bls.n	8008c68 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008c8a:	f7f8 ff1d 	bl	8001ac8 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c98:	d102      	bne.n	8008ca0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008c9e:	e043      	b.n	8008d28 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0d2      	beq.n	8008c54 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	e033      	b.n	8008d28 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e02a      	b.n	8008d28 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d017      	beq.n	8008d10 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	e021      	b.n	8008d28 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 fcad 	bl	800a648 <SDMMC_ReadFIFO>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf2:	601a      	str	r2, [r3, #0]
    pData++;
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008cfa:	f7f8 fee5 	bl	8001ac8 <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d08:	d102      	bne.n	8008d10 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d0a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d0e:	e00b      	b.n	8008d28 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e2      	bne.n	8008ce4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a03      	ldr	r2, [pc, #12]	@ (8008d30 <SD_SendSDStatus+0x19c>)
 8008d24:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3730      	adds	r7, #48	@ 0x30
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	18000f3a 	.word	0x18000f3a

08008d34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008d44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d48:	e018      	b.n	8008d7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	4619      	mov	r1, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	f001 ff60 	bl	800ac1c <SDMMC_CmdSendStatus>
 8008d5c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	e009      	b.n	8008d7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 fcdf 	bl	800a732 <SDMMC_GetResponse>
 8008d74:	4602      	mov	r2, r0
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 fcc9 	bl	800a732 <SDMMC_GetResponse>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008da6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008daa:	d102      	bne.n	8008db2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008dac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008db0:	e02f      	b.n	8008e12 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008db2:	f107 030c 	add.w	r3, r7, #12
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f879 	bl	8008eb0 <SD_FindSCR>
 8008dbe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	e023      	b.n	8008e12 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01c      	beq.n	8008e0e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ddc:	041b      	lsls	r3, r3, #16
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f001 fe32 	bl	800aa4a <SDMMC_CmdAppCommand>
 8008de6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	e00f      	b.n	8008e12 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2102      	movs	r1, #2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 fe69 	bl	800aad0 <SDMMC_CmdBusWidth>
 8008dfe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	e003      	b.n	8008e12 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e001      	b.n	8008e12 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b086      	sub	sp, #24
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	2300      	movs	r3, #0
 8008e28:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2100      	movs	r1, #0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 fc7e 	bl	800a732 <SDMMC_GetResponse>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e40:	d102      	bne.n	8008e48 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e46:	e02f      	b.n	8008ea8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e48:	f107 030c 	add.w	r3, r7, #12
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f82e 	bl	8008eb0 <SD_FindSCR>
 8008e54:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	e023      	b.n	8008ea8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01c      	beq.n	8008ea4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e72:	041b      	lsls	r3, r3, #16
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f001 fde7 	bl	800aa4a <SDMMC_CmdAppCommand>
 8008e7c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	e00f      	b.n	8008ea8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f001 fe1e 	bl	800aad0 <SDMMC_CmdBusWidth>
 8008e94:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	e003      	b.n	8008ea8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e001      	b.n	8008ea8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ea4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08e      	sub	sp, #56	@ 0x38
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008eba:	f7f8 fe05 	bl	8001ac8 <HAL_GetTick>
 8008ebe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60bb      	str	r3, [r7, #8]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2108      	movs	r1, #8
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 fc6a 	bl	800a7b0 <SDMMC_CmdBlockLength>
 8008edc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	e0ad      	b.n	8009044 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ef0:	041b      	lsls	r3, r3, #16
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	f001 fda8 	bl	800aa4a <SDMMC_CmdAppCommand>
 8008efa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	e09e      	b.n	8009044 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f0a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008f0c:	2308      	movs	r3, #8
 8008f0e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008f10:	2330      	movs	r3, #48	@ 0x30
 8008f12:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f14:	2302      	movs	r3, #2
 8008f16:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f107 0210 	add.w	r2, r7, #16
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 fc14 	bl	800a758 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 fdee 	bl	800ab16 <SDMMC_CmdSendSCR>
 8008f3a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d027      	beq.n	8008f92 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f44:	e07e      	b.n	8009044 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d113      	bne.n	8008f7c <SD_FindSCR+0xcc>
 8008f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d110      	bne.n	8008f7c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fb72 	bl	800a648 <SDMMC_ReadFIFO>
 8008f64:	4603      	mov	r3, r0
 8008f66:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 fb6b 	bl	800a648 <SDMMC_ReadFIFO>
 8008f72:	4603      	mov	r3, r0
 8008f74:	60fb      	str	r3, [r7, #12]
      index++;
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	3301      	adds	r3, #1
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008f7c:	f7f8 fda4 	bl	8001ac8 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f8a:	d102      	bne.n	8008f92 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008f90:	e058      	b.n	8009044 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f98:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0d1      	beq.n	8008f46 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008fb8:	2308      	movs	r3, #8
 8008fba:	e043      	b.n	8009044 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e036      	b.n	8009044 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008fec:	2320      	movs	r3, #32
 8008fee:	e029      	b.n	8009044 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a15      	ldr	r2, [pc, #84]	@ (800904c <SD_FindSCR+0x19c>)
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	061a      	lsls	r2, r3, #24
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009004:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	0a1b      	lsrs	r3, r3, #8
 800900a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800900e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	0e1b      	lsrs	r3, r3, #24
 8009014:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	601a      	str	r2, [r3, #0]
    scr++;
 800901a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901c:	3304      	adds	r3, #4
 800901e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	061a      	lsls	r2, r3, #24
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800902c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009036:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800903e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009040:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3738      	adds	r7, #56	@ 0x38
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	18000f3a 	.word	0x18000f3a

08009050 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e0fb      	b.n	800925a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a7f      	ldr	r2, [pc, #508]	@ (8009264 <HAL_SPI_Init+0x214>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d004      	beq.n	8009076 <HAL_SPI_Init+0x26>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a7d      	ldr	r2, [pc, #500]	@ (8009268 <HAL_SPI_Init+0x218>)
 8009072:	4293      	cmp	r3, r2
 8009074:	e000      	b.n	8009078 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009076:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a78      	ldr	r2, [pc, #480]	@ (8009264 <HAL_SPI_Init+0x214>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d004      	beq.n	8009092 <HAL_SPI_Init+0x42>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a76      	ldr	r2, [pc, #472]	@ (8009268 <HAL_SPI_Init+0x218>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d105      	bne.n	800909e <HAL_SPI_Init+0x4e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d901      	bls.n	800909e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e0dd      	b.n	800925a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fe68 	bl	8009d74 <SPI_GetPacketSize>
 80090a4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a6e      	ldr	r2, [pc, #440]	@ (8009264 <HAL_SPI_Init+0x214>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d004      	beq.n	80090ba <HAL_SPI_Init+0x6a>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a6c      	ldr	r2, [pc, #432]	@ (8009268 <HAL_SPI_Init+0x218>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d102      	bne.n	80090c0 <HAL_SPI_Init+0x70>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d816      	bhi.n	80090ee <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090c4:	4a69      	ldr	r2, [pc, #420]	@ (800926c <HAL_SPI_Init+0x21c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d00e      	beq.n	80090e8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a68      	ldr	r2, [pc, #416]	@ (8009270 <HAL_SPI_Init+0x220>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d009      	beq.n	80090e8 <HAL_SPI_Init+0x98>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a66      	ldr	r2, [pc, #408]	@ (8009274 <HAL_SPI_Init+0x224>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d004      	beq.n	80090e8 <HAL_SPI_Init+0x98>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a65      	ldr	r2, [pc, #404]	@ (8009278 <HAL_SPI_Init+0x228>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d104      	bne.n	80090f2 <HAL_SPI_Init+0xa2>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b10      	cmp	r3, #16
 80090ec:	d901      	bls.n	80090f2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e0b3      	b.n	800925a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7f8 fa68 	bl	80015dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0201 	bic.w	r2, r2, #1
 8009122:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800912e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009138:	d119      	bne.n	800916e <HAL_SPI_Init+0x11e>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009142:	d103      	bne.n	800914c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009148:	2b00      	cmp	r3, #0
 800914a:	d008      	beq.n	800915e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10c      	bne.n	800916e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800915c:	d107      	bne.n	800916e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800916c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00f      	beq.n	800919a <HAL_SPI_Init+0x14a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2b06      	cmp	r3, #6
 8009180:	d90b      	bls.n	800919a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	e007      	b.n	80091aa <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69da      	ldr	r2, [r3, #28]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b2:	431a      	orrs	r2, r3
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091bc:	ea42 0103 	orr.w	r1, r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	431a      	orrs	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	431a      	orrs	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	431a      	orrs	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091fe:	431a      	orrs	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009216:	ea42 0103 	orr.w	r1, r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	46002000 	.word	0x46002000
 8009268:	56002000 	.word	0x56002000
 800926c:	40013000 	.word	0x40013000
 8009270:	50013000 	.word	0x50013000
 8009274:	40003800 	.word	0x40003800
 8009278:	50003800 	.word	0x50003800

0800927c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af02      	add	r7, sp, #8
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	4613      	mov	r3, r2
 800928a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3320      	adds	r3, #32
 8009292:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a90      	ldr	r2, [pc, #576]	@ (80094dc <HAL_SPI_Transmit+0x260>)
 800929a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800929c:	f7f8 fc14 	bl	8001ac8 <HAL_GetTick>
 80092a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d001      	beq.n	80092b2 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80092ae:	2302      	movs	r3, #2
 80092b0:	e1f4      	b.n	800969c <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <HAL_SPI_Transmit+0x42>
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e1ec      	b.n	800969c <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_SPI_Transmit+0x54>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e1e5      	b.n	800969c <HAL_SPI_Transmit+0x420>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2203      	movs	r2, #3
 80092dc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	88fa      	ldrh	r2, [r7, #6]
 80092f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	88fa      	ldrh	r2, [r7, #6]
 80092fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009328:	d108      	bne.n	800933c <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e009      	b.n	8009350 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800934e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	0c1b      	lsrs	r3, r3, #16
 8009358:	041b      	lsls	r3, r3, #16
 800935a:	88f9      	ldrh	r1, [r7, #6]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	430b      	orrs	r3, r1
 8009362:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10c      	bne.n	800939c <HAL_SPI_Transmit+0x120>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800938a:	d107      	bne.n	800939c <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800939a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	2b0f      	cmp	r3, #15
 80093a2:	d95b      	bls.n	800945c <HAL_SPI_Transmit+0x1e0>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a4d      	ldr	r2, [pc, #308]	@ (80094e0 <HAL_SPI_Transmit+0x264>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d04f      	beq.n	800944e <HAL_SPI_Transmit+0x1d2>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a4c      	ldr	r2, [pc, #304]	@ (80094e4 <HAL_SPI_Transmit+0x268>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d04a      	beq.n	800944e <HAL_SPI_Transmit+0x1d2>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a4a      	ldr	r2, [pc, #296]	@ (80094e8 <HAL_SPI_Transmit+0x26c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d045      	beq.n	800944e <HAL_SPI_Transmit+0x1d2>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a49      	ldr	r2, [pc, #292]	@ (80094ec <HAL_SPI_Transmit+0x270>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d147      	bne.n	800945c <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80093cc:	e03f      	b.n	800944e <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d114      	bne.n	8009406 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6812      	ldr	r2, [r2, #0]
 80093e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ec:	1d1a      	adds	r2, r3, #4
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	3b01      	subs	r3, #1
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009404:	e023      	b.n	800944e <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009406:	f7f8 fb5f 	bl	8001ac8 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d803      	bhi.n	800941e <HAL_SPI_Transmit+0x1a2>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800941c:	d102      	bne.n	8009424 <HAL_SPI_Transmit+0x1a8>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d114      	bne.n	800944e <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fbd7 	bl	8009bd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009430:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e126      	b.n	800969c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1b9      	bne.n	80093ce <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800945a:	e0f9      	b.n	8009650 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	2b07      	cmp	r3, #7
 8009462:	f240 80ee 	bls.w	8009642 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009466:	e067      	b.n	8009538 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b02      	cmp	r3, #2
 8009474:	d13c      	bne.n	80094f0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800947c:	b29b      	uxth	r3, r3
 800947e:	2b01      	cmp	r3, #1
 8009480:	d918      	bls.n	80094b4 <HAL_SPI_Transmit+0x238>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009486:	2b00      	cmp	r3, #0
 8009488:	d014      	beq.n	80094b4 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800949a:	1d1a      	adds	r2, r3, #4
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	3b02      	subs	r3, #2
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80094b2:	e041      	b.n	8009538 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b8:	881a      	ldrh	r2, [r3, #0]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c2:	1c9a      	adds	r2, r3, #2
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80094da:	e02d      	b.n	8009538 <HAL_SPI_Transmit+0x2bc>
 80094dc:	46002000 	.word	0x46002000
 80094e0:	40013000 	.word	0x40013000
 80094e4:	50013000 	.word	0x50013000
 80094e8:	40003800 	.word	0x40003800
 80094ec:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094f0:	f7f8 faea 	bl	8001ac8 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d803      	bhi.n	8009508 <HAL_SPI_Transmit+0x28c>
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009506:	d102      	bne.n	800950e <HAL_SPI_Transmit+0x292>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d114      	bne.n	8009538 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fb62 	bl	8009bd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800951a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e0b1      	b.n	800969c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d191      	bne.n	8009468 <HAL_SPI_Transmit+0x1ec>
 8009544:	e084      	b.n	8009650 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b02      	cmp	r3, #2
 8009552:	d152      	bne.n	80095fa <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800955a:	b29b      	uxth	r3, r3
 800955c:	2b03      	cmp	r3, #3
 800955e:	d918      	bls.n	8009592 <HAL_SPI_Transmit+0x316>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009564:	2b40      	cmp	r3, #64	@ 0x40
 8009566:	d914      	bls.n	8009592 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009578:	1d1a      	adds	r2, r3, #4
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b04      	subs	r3, #4
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009590:	e057      	b.n	8009642 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b01      	cmp	r3, #1
 800959c:	d917      	bls.n	80095ce <HAL_SPI_Transmit+0x352>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d013      	beq.n	80095ce <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095aa:	881a      	ldrh	r2, [r3, #0]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095b4:	1c9a      	adds	r2, r3, #2
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b02      	subs	r3, #2
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80095cc:	e039      	b.n	8009642 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3320      	adds	r3, #32
 80095d8:	7812      	ldrb	r2, [r2, #0]
 80095da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80095f8:	e023      	b.n	8009642 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095fa:	f7f8 fa65 	bl	8001ac8 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d803      	bhi.n	8009612 <HAL_SPI_Transmit+0x396>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009610:	d102      	bne.n	8009618 <HAL_SPI_Transmit+0x39c>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d114      	bne.n	8009642 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fadd 	bl	8009bd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009624:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e02c      	b.n	800969c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	f47f af7b 	bne.w	8009546 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2200      	movs	r2, #0
 8009658:	2108      	movs	r1, #8
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 fb5c 	bl	8009d18 <SPI_WaitOnFlagUntilTimeout>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d007      	beq.n	8009676 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 faae 	bl	8009bd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e000      	b.n	800969c <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800969a:	2300      	movs	r3, #0
  }
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	4613      	mov	r3, r2
 80096b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b8:	095b      	lsrs	r3, r3, #5
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	3301      	adds	r3, #1
 80096be:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3330      	adds	r3, #48	@ 0x30
 80096c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a96      	ldr	r2, [pc, #600]	@ (8009928 <HAL_SPI_Receive+0x284>)
 80096ce:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096d0:	f7f8 f9fa 	bl	8001ac8 <HAL_GetTick>
 80096d4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d001      	beq.n	80096e6 <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 80096e2:	2302      	movs	r3, #2
 80096e4:	e274      	b.n	8009bd0 <HAL_SPI_Receive+0x52c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <HAL_SPI_Receive+0x4e>
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e26c      	b.n	8009bd0 <HAL_SPI_Receive+0x52c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_SPI_Receive+0x60>
 8009700:	2302      	movs	r3, #2
 8009702:	e265      	b.n	8009bd0 <HAL_SPI_Receive+0x52c>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2204      	movs	r2, #4
 8009710:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	88fa      	ldrh	r2, [r7, #6]
 8009726:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	88fa      	ldrh	r2, [r7, #6]
 800972e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800975c:	d108      	bne.n	8009770 <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e009      	b.n	8009784 <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009782:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	0c1b      	lsrs	r3, r3, #16
 800978c:	041b      	lsls	r3, r3, #16
 800978e:	88f9      	ldrh	r1, [r7, #6]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	6812      	ldr	r2, [r2, #0]
 8009794:	430b      	orrs	r3, r1
 8009796:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0201 	orr.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10c      	bne.n	80097d0 <HAL_SPI_Receive+0x12c>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097be:	d107      	bne.n	80097d0 <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b0f      	cmp	r3, #15
 80097d6:	f240 8081 	bls.w	80098dc <HAL_SPI_Receive+0x238>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a53      	ldr	r2, [pc, #332]	@ (800992c <HAL_SPI_Receive+0x288>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d074      	beq.n	80098ce <HAL_SPI_Receive+0x22a>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a51      	ldr	r2, [pc, #324]	@ (8009930 <HAL_SPI_Receive+0x28c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d06f      	beq.n	80098ce <HAL_SPI_Receive+0x22a>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a50      	ldr	r2, [pc, #320]	@ (8009934 <HAL_SPI_Receive+0x290>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d06a      	beq.n	80098ce <HAL_SPI_Receive+0x22a>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a4e      	ldr	r2, [pc, #312]	@ (8009938 <HAL_SPI_Receive+0x294>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d16c      	bne.n	80098dc <HAL_SPI_Receive+0x238>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009802:	e064      	b.n	80098ce <HAL_SPI_Receive+0x22a>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b01      	cmp	r3, #1
 8009818:	d114      	bne.n	8009844 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009822:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009824:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800982a:	1d1a      	adds	r2, r3, #4
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009836:	b29b      	uxth	r3, r3
 8009838:	3b01      	subs	r3, #1
 800983a:	b29a      	uxth	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009842:	e044      	b.n	80098ce <HAL_SPI_Receive+0x22a>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800984a:	b29b      	uxth	r3, r3
 800984c:	8bfa      	ldrh	r2, [r7, #30]
 800984e:	429a      	cmp	r2, r3
 8009850:	d919      	bls.n	8009886 <HAL_SPI_Receive+0x1e2>
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d014      	beq.n	8009886 <HAL_SPI_Receive+0x1e2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009864:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009866:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800986c:	1d1a      	adds	r2, r3, #4
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009878:	b29b      	uxth	r3, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009884:	e023      	b.n	80098ce <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009886:	f7f8 f91f 	bl	8001ac8 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d803      	bhi.n	800989e <HAL_SPI_Receive+0x1fa>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800989c:	d102      	bne.n	80098a4 <HAL_SPI_Receive+0x200>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d114      	bne.n	80098ce <HAL_SPI_Receive+0x22a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 f997 	bl	8009bd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e180      	b.n	8009bd0 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d194      	bne.n	8009804 <HAL_SPI_Receive+0x160>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80098da:	e166      	b.n	8009baa <HAL_SPI_Receive+0x506>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	2b07      	cmp	r3, #7
 80098e2:	f240 815b 	bls.w	8009b9c <HAL_SPI_Receive+0x4f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80098e6:	e099      	b.n	8009a1c <HAL_SPI_Receive+0x378>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d11e      	bne.n	800993c <HAL_SPI_Receive+0x298>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	8812      	ldrh	r2, [r2, #0]
 8009906:	b292      	uxth	r2, r2
 8009908:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800990e:	1c9a      	adds	r2, r3, #2
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b01      	subs	r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009926:	e079      	b.n	8009a1c <HAL_SPI_Receive+0x378>
 8009928:	46002000 	.word	0x46002000
 800992c:	40013000 	.word	0x40013000
 8009930:	50013000 	.word	0x50013000
 8009934:	40003800 	.word	0x40003800
 8009938:	50003800 	.word	0x50003800
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009942:	b29b      	uxth	r3, r3
 8009944:	8bfa      	ldrh	r2, [r7, #30]
 8009946:	429a      	cmp	r2, r3
 8009948:	d924      	bls.n	8009994 <HAL_SPI_Receive+0x2f0>
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01f      	beq.n	8009994 <HAL_SPI_Receive+0x2f0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	8812      	ldrh	r2, [r2, #0]
 800995c:	b292      	uxth	r2, r2
 800995e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009964:	1c9a      	adds	r2, r3, #2
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	8812      	ldrh	r2, [r2, #0]
 8009972:	b292      	uxth	r2, r2
 8009974:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800997a:	1c9a      	adds	r2, r3, #2
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b02      	subs	r3, #2
 800998a:	b29a      	uxth	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009992:	e043      	b.n	8009a1c <HAL_SPI_Receive+0x378>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800999a:	b29b      	uxth	r3, r3
 800999c:	2b01      	cmp	r3, #1
 800999e:	d119      	bne.n	80099d4 <HAL_SPI_Receive+0x330>
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d014      	beq.n	80099d4 <HAL_SPI_Receive+0x330>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	8812      	ldrh	r2, [r2, #0]
 80099b2:	b292      	uxth	r2, r2
 80099b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ba:	1c9a      	adds	r2, r3, #2
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80099d2:	e023      	b.n	8009a1c <HAL_SPI_Receive+0x378>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099d4:	f7f8 f878 	bl	8001ac8 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d803      	bhi.n	80099ec <HAL_SPI_Receive+0x348>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099ea:	d102      	bne.n	80099f2 <HAL_SPI_Receive+0x34e>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d114      	bne.n	8009a1c <HAL_SPI_Receive+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 f8f0 	bl	8009bd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e0d9      	b.n	8009bd0 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f47f af5f 	bne.w	80098e8 <HAL_SPI_Receive+0x244>
 8009a2a:	e0be      	b.n	8009baa <HAL_SPI_Receive+0x506>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d117      	bne.n	8009a72 <HAL_SPI_Receive+0x3ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a4e:	7812      	ldrb	r2, [r2, #0]
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	3b01      	subs	r3, #1
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009a70:	e094      	b.n	8009b9c <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	8bfa      	ldrh	r2, [r7, #30]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d946      	bls.n	8009b0e <HAL_SPI_Receive+0x46a>
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d041      	beq.n	8009b0e <HAL_SPI_Receive+0x46a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a96:	7812      	ldrb	r2, [r2, #0]
 8009a98:	b2d2      	uxtb	r2, r2
 8009a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ab2:	7812      	ldrb	r2, [r2, #0]
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ace:	7812      	ldrb	r2, [r2, #0]
 8009ad0:	b2d2      	uxtb	r2, r2
 8009ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aea:	7812      	ldrb	r2, [r2, #0]
 8009aec:	b2d2      	uxtb	r2, r2
 8009aee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b04      	subs	r3, #4
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009b0c:	e046      	b.n	8009b9c <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d81c      	bhi.n	8009b54 <HAL_SPI_Receive+0x4b0>
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d017      	beq.n	8009b54 <HAL_SPI_Receive+0x4b0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b30:	7812      	ldrb	r2, [r2, #0]
 8009b32:	b2d2      	uxtb	r2, r2
 8009b34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009b52:	e023      	b.n	8009b9c <HAL_SPI_Receive+0x4f8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b54:	f7f7 ffb8 	bl	8001ac8 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d803      	bhi.n	8009b6c <HAL_SPI_Receive+0x4c8>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b6a:	d102      	bne.n	8009b72 <HAL_SPI_Receive+0x4ce>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d114      	bne.n	8009b9c <HAL_SPI_Receive+0x4f8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 f830 	bl	8009bd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e019      	b.n	8009bd0 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f47f af41 	bne.w	8009a2c <HAL_SPI_Receive+0x388>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f814 	bl	8009bd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <HAL_SPI_Receive+0x52a>
  {
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <HAL_SPI_Receive+0x52c>
  }
  else
  {
    return HAL_OK;
 8009bce:	2300      	movs	r3, #0
  }
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3720      	adds	r7, #32
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	699a      	ldr	r2, [r3, #24]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0208 	orr.w	r2, r2, #8
 8009bf6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0210 	orr.w	r2, r2, #16
 8009c06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0201 	bic.w	r2, r2, #1
 8009c16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6812      	ldr	r2, [r2, #0]
 8009c22:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8009c26:	f023 0303 	bic.w	r3, r3, #3
 8009c2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009c3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	d014      	beq.n	8009c72 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00f      	beq.n	8009c72 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	699a      	ldr	r2, [r3, #24]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f042 0220 	orr.w	r2, r2, #32
 8009c70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d014      	beq.n	8009ca8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00f      	beq.n	8009ca8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c8e:	f043 0204 	orr.w	r2, r3, #4
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ca6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00f      	beq.n	8009cd2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cb8:	f043 0201 	orr.w	r2, r3, #1
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699a      	ldr	r2, [r3, #24]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00f      	beq.n	8009cfc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ce2:	f043 0208 	orr.w	r2, r3, #8
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8009d0c:	bf00      	nop
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	4613      	mov	r3, r2
 8009d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d28:	e010      	b.n	8009d4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d2a:	f7f7 fecd 	bl	8001ac8 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d803      	bhi.n	8009d42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d40:	d102      	bne.n	8009d48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e00f      	b.n	8009d6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	695a      	ldr	r2, [r3, #20]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4013      	ands	r3, r2
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	bf0c      	ite	eq
 8009d5c:	2301      	moveq	r3, #1
 8009d5e:	2300      	movne	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	461a      	mov	r2, r3
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d0df      	beq.n	8009d2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	3301      	adds	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	3307      	adds	r3, #7
 8009d92:	08db      	lsrs	r3, r3, #3
 8009d94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d12e      	bne.n	8009e1e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e028      	b.n	8009e20 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f022 0201 	bic.w	r2, r2, #1
 8009dec:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8009dfa:	ea42 0103 	orr.w	r1, r2, r3
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e000      	b.n	8009e20 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
  }
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e049      	b.n	8009ed2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7f7 fcba 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	f000 fa7c 	bl	800a368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d001      	beq.n	8009ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e072      	b.n	8009fda <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a35      	ldr	r2, [pc, #212]	@ (8009fe8 <HAL_TIM_Base_Start_IT+0x10c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d040      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a34      	ldr	r2, [pc, #208]	@ (8009fec <HAL_TIM_Base_Start_IT+0x110>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d03b      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f28:	d036      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f32:	d031      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a2d      	ldr	r2, [pc, #180]	@ (8009ff0 <HAL_TIM_Base_Start_IT+0x114>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d02c      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a2c      	ldr	r2, [pc, #176]	@ (8009ff4 <HAL_TIM_Base_Start_IT+0x118>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d027      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8009ff8 <HAL_TIM_Base_Start_IT+0x11c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d022      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a29      	ldr	r2, [pc, #164]	@ (8009ffc <HAL_TIM_Base_Start_IT+0x120>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d01d      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a27      	ldr	r2, [pc, #156]	@ (800a000 <HAL_TIM_Base_Start_IT+0x124>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d018      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a26      	ldr	r2, [pc, #152]	@ (800a004 <HAL_TIM_Base_Start_IT+0x128>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d013      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a24      	ldr	r2, [pc, #144]	@ (800a008 <HAL_TIM_Base_Start_IT+0x12c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00e      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a23      	ldr	r2, [pc, #140]	@ (800a00c <HAL_TIM_Base_Start_IT+0x130>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d009      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a21      	ldr	r2, [pc, #132]	@ (800a010 <HAL_TIM_Base_Start_IT+0x134>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d004      	beq.n	8009f98 <HAL_TIM_Base_Start_IT+0xbc>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a20      	ldr	r2, [pc, #128]	@ (800a014 <HAL_TIM_Base_Start_IT+0x138>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d115      	bne.n	8009fc4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689a      	ldr	r2, [r3, #8]
 8009f9e:	4b1e      	ldr	r3, [pc, #120]	@ (800a018 <HAL_TIM_Base_Start_IT+0x13c>)
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	d015      	beq.n	8009fd6 <HAL_TIM_Base_Start_IT+0xfa>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fb0:	d011      	beq.n	8009fd6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 0201 	orr.w	r2, r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc2:	e008      	b.n	8009fd6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	e000      	b.n	8009fd8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40012c00 	.word	0x40012c00
 8009fec:	50012c00 	.word	0x50012c00
 8009ff0:	40000400 	.word	0x40000400
 8009ff4:	50000400 	.word	0x50000400
 8009ff8:	40000800 	.word	0x40000800
 8009ffc:	50000800 	.word	0x50000800
 800a000:	40000c00 	.word	0x40000c00
 800a004:	50000c00 	.word	0x50000c00
 800a008:	40013400 	.word	0x40013400
 800a00c:	50013400 	.word	0x50013400
 800a010:	40014000 	.word	0x40014000
 800a014:	50014000 	.word	0x50014000
 800a018:	00010007 	.word	0x00010007

0800a01c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 0201 	bic.w	r2, r2, #1
 800a032:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6a1a      	ldr	r2, [r3, #32]
 800a03a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a03e:	4013      	ands	r3, r2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10f      	bne.n	800a064 <HAL_TIM_Base_Stop_IT+0x48>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6a1a      	ldr	r2, [r3, #32]
 800a04a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a04e:	4013      	ands	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <HAL_TIM_Base_Stop_IT+0x48>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0201 	bic.w	r2, r2, #1
 800a062:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d020      	beq.n	800a0de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d01b      	beq.n	800a0de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f06f 0202 	mvn.w	r2, #2
 800a0ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f931 	bl	800a32c <HAL_TIM_IC_CaptureCallback>
 800a0ca:	e005      	b.n	800a0d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f923 	bl	800a318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f934 	bl	800a340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f003 0304 	and.w	r3, r3, #4
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d020      	beq.n	800a12a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d01b      	beq.n	800a12a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f06f 0204 	mvn.w	r2, #4
 800a0fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f90b 	bl	800a32c <HAL_TIM_IC_CaptureCallback>
 800a116:	e005      	b.n	800a124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f8fd 	bl	800a318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f90e 	bl	800a340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f003 0308 	and.w	r3, r3, #8
 800a130:	2b00      	cmp	r3, #0
 800a132:	d020      	beq.n	800a176 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d01b      	beq.n	800a176 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f06f 0208 	mvn.w	r2, #8
 800a146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2204      	movs	r2, #4
 800a14c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	f003 0303 	and.w	r3, r3, #3
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f8e5 	bl	800a32c <HAL_TIM_IC_CaptureCallback>
 800a162:	e005      	b.n	800a170 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f8d7 	bl	800a318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f8e8 	bl	800a340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d020      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f003 0310 	and.w	r3, r3, #16
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01b      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f06f 0210 	mvn.w	r2, #16
 800a192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2208      	movs	r2, #8
 800a198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f8bf 	bl	800a32c <HAL_TIM_IC_CaptureCallback>
 800a1ae:	e005      	b.n	800a1bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f8b1 	bl	800a318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f8c2 	bl	800a340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00c      	beq.n	800a1e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d007      	beq.n	800a1e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f06f 0201 	mvn.w	r2, #1
 800a1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7f6 fc93 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d104      	bne.n	800a1fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00c      	beq.n	800a214 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a200:	2b00      	cmp	r3, #0
 800a202:	d007      	beq.n	800a214 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f9b4 	bl	800a57c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00c      	beq.n	800a238 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a224:	2b00      	cmp	r3, #0
 800a226:	d007      	beq.n	800a238 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f9ac 	bl	800a590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00c      	beq.n	800a25c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f87c 	bl	800a354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00c      	beq.n	800a280 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f003 0320 	and.w	r3, r3, #32
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f06f 0220 	mvn.w	r2, #32
 800a278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f974 	bl	800a568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a29c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f980 	bl	800a5a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00c      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d007      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f978 	bl	800a5b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00c      	beq.n	800a2ec <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f970 	bl	800a5cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00c      	beq.n	800a310 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f968 	bl	800a5e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a310:	bf00      	nop
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a6b      	ldr	r2, [pc, #428]	@ (800a528 <TIM_Base_SetConfig+0x1c0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d02b      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a6a      	ldr	r2, [pc, #424]	@ (800a52c <TIM_Base_SetConfig+0x1c4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d027      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a38e:	d023      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a396:	d01f      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a65      	ldr	r2, [pc, #404]	@ (800a530 <TIM_Base_SetConfig+0x1c8>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d01b      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a64      	ldr	r2, [pc, #400]	@ (800a534 <TIM_Base_SetConfig+0x1cc>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d017      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a63      	ldr	r2, [pc, #396]	@ (800a538 <TIM_Base_SetConfig+0x1d0>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d013      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a62      	ldr	r2, [pc, #392]	@ (800a53c <TIM_Base_SetConfig+0x1d4>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00f      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a61      	ldr	r2, [pc, #388]	@ (800a540 <TIM_Base_SetConfig+0x1d8>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d00b      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a60      	ldr	r2, [pc, #384]	@ (800a544 <TIM_Base_SetConfig+0x1dc>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d007      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a5f      	ldr	r2, [pc, #380]	@ (800a548 <TIM_Base_SetConfig+0x1e0>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d003      	beq.n	800a3d8 <TIM_Base_SetConfig+0x70>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a5e      	ldr	r2, [pc, #376]	@ (800a54c <TIM_Base_SetConfig+0x1e4>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d108      	bne.n	800a3ea <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a4e      	ldr	r2, [pc, #312]	@ (800a528 <TIM_Base_SetConfig+0x1c0>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d043      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a4d      	ldr	r2, [pc, #308]	@ (800a52c <TIM_Base_SetConfig+0x1c4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d03f      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a400:	d03b      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a408:	d037      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a48      	ldr	r2, [pc, #288]	@ (800a530 <TIM_Base_SetConfig+0x1c8>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d033      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a47      	ldr	r2, [pc, #284]	@ (800a534 <TIM_Base_SetConfig+0x1cc>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d02f      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a46      	ldr	r2, [pc, #280]	@ (800a538 <TIM_Base_SetConfig+0x1d0>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d02b      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a45      	ldr	r2, [pc, #276]	@ (800a53c <TIM_Base_SetConfig+0x1d4>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d027      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a44      	ldr	r2, [pc, #272]	@ (800a540 <TIM_Base_SetConfig+0x1d8>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d023      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a43      	ldr	r2, [pc, #268]	@ (800a544 <TIM_Base_SetConfig+0x1dc>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d01f      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a42      	ldr	r2, [pc, #264]	@ (800a548 <TIM_Base_SetConfig+0x1e0>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d01b      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a41      	ldr	r2, [pc, #260]	@ (800a54c <TIM_Base_SetConfig+0x1e4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d017      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a40      	ldr	r2, [pc, #256]	@ (800a550 <TIM_Base_SetConfig+0x1e8>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d013      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a3f      	ldr	r2, [pc, #252]	@ (800a554 <TIM_Base_SetConfig+0x1ec>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d00f      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a3e      	ldr	r2, [pc, #248]	@ (800a558 <TIM_Base_SetConfig+0x1f0>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d00b      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a3d      	ldr	r2, [pc, #244]	@ (800a55c <TIM_Base_SetConfig+0x1f4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d007      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a3c      	ldr	r2, [pc, #240]	@ (800a560 <TIM_Base_SetConfig+0x1f8>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d003      	beq.n	800a47a <TIM_Base_SetConfig+0x112>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a3b      	ldr	r2, [pc, #236]	@ (800a564 <TIM_Base_SetConfig+0x1fc>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d108      	bne.n	800a48c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	4313      	orrs	r3, r2
 800a498:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a1e      	ldr	r2, [pc, #120]	@ (800a528 <TIM_Base_SetConfig+0x1c0>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d023      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a52c <TIM_Base_SetConfig+0x1c4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d01f      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a22      	ldr	r2, [pc, #136]	@ (800a548 <TIM_Base_SetConfig+0x1e0>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d01b      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a21      	ldr	r2, [pc, #132]	@ (800a54c <TIM_Base_SetConfig+0x1e4>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d017      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a20      	ldr	r2, [pc, #128]	@ (800a550 <TIM_Base_SetConfig+0x1e8>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d013      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a554 <TIM_Base_SetConfig+0x1ec>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d00f      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a1e      	ldr	r2, [pc, #120]	@ (800a558 <TIM_Base_SetConfig+0x1f0>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d00b      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a55c <TIM_Base_SetConfig+0x1f4>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d007      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a560 <TIM_Base_SetConfig+0x1f8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d003      	beq.n	800a4fa <TIM_Base_SetConfig+0x192>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a564 <TIM_Base_SetConfig+0x1fc>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d103      	bne.n	800a502 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	691a      	ldr	r2, [r3, #16]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f043 0204 	orr.w	r2, r3, #4
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	601a      	str	r2, [r3, #0]
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	40012c00 	.word	0x40012c00
 800a52c:	50012c00 	.word	0x50012c00
 800a530:	40000400 	.word	0x40000400
 800a534:	50000400 	.word	0x50000400
 800a538:	40000800 	.word	0x40000800
 800a53c:	50000800 	.word	0x50000800
 800a540:	40000c00 	.word	0x40000c00
 800a544:	50000c00 	.word	0x50000c00
 800a548:	40013400 	.word	0x40013400
 800a54c:	50013400 	.word	0x50013400
 800a550:	40014000 	.word	0x40014000
 800a554:	50014000 	.word	0x50014000
 800a558:	40014400 	.word	0x40014400
 800a55c:	50014400 	.word	0x50014400
 800a560:	40014800 	.word	0x40014800
 800a564:	50014800 	.word	0x50014800

0800a568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	b480      	push	{r7}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	f107 001c 	add.w	r0, r7, #28
 800a602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a60a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a60c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a60e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a612:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a616:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a61a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	4313      	orrs	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	4b07      	ldr	r3, [pc, #28]	@ (800a644 <SDMMC_Init+0x50>)
 800a628:	4013      	ands	r3, r2
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	431a      	orrs	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	b004      	add	sp, #16
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	ffc02c00 	.word	0xffc02c00

0800a648 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f043 0203 	orr.w	r2, r3, #3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0303 	and.w	r3, r3, #3
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a6e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a6e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a6ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	4b06      	ldr	r3, [pc, #24]	@ (800a714 <SDMMC_SendCommand+0x50>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	431a      	orrs	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	fffee0c0 	.word	0xfffee0c0

0800a718 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	b2db      	uxtb	r3, r3
}
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a732:	b480      	push	{r7}
 800a734:	b085      	sub	sp, #20
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3314      	adds	r3, #20
 800a740:	461a      	mov	r2, r3
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	4413      	add	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a77e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a784:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a78a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a796:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	431a      	orrs	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0

}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b088      	sub	sp, #32
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a7be:	2310      	movs	r3, #16
 800a7c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a7d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7d2:	f107 0308 	add.w	r3, r7, #8
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7ff ff73 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a7de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7e2:	2110      	movs	r1, #16
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fa5f 	bl	800aca8 <SDMMC_GetCmdResp1>
 800a7ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3720      	adds	r7, #32
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b088      	sub	sp, #32
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a804:	2311      	movs	r3, #17
 800a806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a80e:	2300      	movs	r3, #0
 800a810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a816:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff ff50 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a824:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a828:	2111      	movs	r1, #17
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fa3c 	bl	800aca8 <SDMMC_GetCmdResp1>
 800a830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a832:	69fb      	ldr	r3, [r7, #28]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a84a:	2312      	movs	r3, #18
 800a84c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a84e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a854:	2300      	movs	r3, #0
 800a856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a85e:	f107 0308 	add.w	r3, r7, #8
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff ff2d 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a86a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a86e:	2112      	movs	r1, #18
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fa19 	bl	800aca8 <SDMMC_GetCmdResp1>
 800a876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a878:	69fb      	ldr	r3, [r7, #28]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3720      	adds	r7, #32
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b088      	sub	sp, #32
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a890:	2318      	movs	r3, #24
 800a892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a89a:	2300      	movs	r3, #0
 800a89c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a89e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8a4:	f107 0308 	add.w	r3, r7, #8
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7ff ff0a 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a8b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8b4:	2118      	movs	r1, #24
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f9f6 	bl	800aca8 <SDMMC_GetCmdResp1>
 800a8bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8be:	69fb      	ldr	r3, [r7, #28]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3720      	adds	r7, #32
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a8d6:	2319      	movs	r3, #25
 800a8d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ea:	f107 0308 	add.w	r3, r7, #8
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff fee7 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a8f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8fa:	2119      	movs	r1, #25
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f9d3 	bl	800aca8 <SDMMC_GetCmdResp1>
 800a902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a904:	69fb      	ldr	r3, [r7, #28]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3720      	adds	r7, #32
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a918:	2300      	movs	r3, #0
 800a91a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a91c:	230c      	movs	r3, #12
 800a91e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a92a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a92e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a948:	f107 0308 	add.w	r3, r7, #8
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff feb8 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a954:	4a0b      	ldr	r2, [pc, #44]	@ (800a984 <SDMMC_CmdStopTransfer+0x74>)
 800a956:	210c      	movs	r1, #12
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f9a5 	bl	800aca8 <SDMMC_GetCmdResp1>
 800a95e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a972:	d101      	bne.n	800a978 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a974:	2300      	movs	r3, #0
 800a976:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a978:	69fb      	ldr	r3, [r7, #28]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	05f5e100 	.word	0x05f5e100

0800a988 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a996:	2307      	movs	r3, #7
 800a998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a99a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a99e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7ff fe87 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a9b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ba:	2107      	movs	r1, #7
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f973 	bl	800aca8 <SDMMC_GetCmdResp1>
 800a9c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c4:	69fb      	ldr	r3, [r7, #28]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3720      	adds	r7, #32
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b088      	sub	sp, #32
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ec:	f107 0308 	add.w	r3, r7, #8
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff fe66 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fb97 	bl	800b12c <SDMMC_GetCmdError>
 800a9fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa00:	69fb      	ldr	r3, [r7, #28]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b088      	sub	sp, #32
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aa12:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800aa16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aa18:	2308      	movs	r3, #8
 800aa1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa22:	2300      	movs	r3, #0
 800aa24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa2c:	f107 0308 	add.w	r3, r7, #8
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff fe46 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fb29 	bl	800b090 <SDMMC_GetCmdResp7>
 800aa3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa40:	69fb      	ldr	r3, [r7, #28]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3720      	adds	r7, #32
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b088      	sub	sp, #32
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aa58:	2337      	movs	r3, #55	@ 0x37
 800aa5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa6c:	f107 0308 	add.w	r3, r7, #8
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7ff fe26 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aa78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa7c:	2137      	movs	r1, #55	@ 0x37
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f912 	bl	800aca8 <SDMMC_GetCmdResp1>
 800aa84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa86:	69fb      	ldr	r3, [r7, #28]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3720      	adds	r7, #32
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aa9e:	2329      	movs	r3, #41	@ 0x29
 800aaa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aaa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aab0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aab2:	f107 0308 	add.w	r3, r7, #8
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff fe03 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa2e 	bl	800af20 <SDMMC_GetCmdResp3>
 800aac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aac6:	69fb      	ldr	r3, [r7, #28]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aade:	2306      	movs	r3, #6
 800aae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aae2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaf2:	f107 0308 	add.w	r3, r7, #8
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff fde3 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aafe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab02:	2106      	movs	r1, #6
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f8cf 	bl	800aca8 <SDMMC_GetCmdResp1>
 800ab0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3720      	adds	r7, #32
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b088      	sub	sp, #32
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab22:	2333      	movs	r3, #51	@ 0x33
 800ab24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab36:	f107 0308 	add.w	r3, r7, #8
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff fdc1 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ab42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab46:	2133      	movs	r1, #51	@ 0x33
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f8ad 	bl	800aca8 <SDMMC_GetCmdResp1>
 800ab4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab50:	69fb      	ldr	r3, [r7, #28]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3720      	adds	r7, #32
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b088      	sub	sp, #32
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ab66:	2302      	movs	r3, #2
 800ab68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ab6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab70:	2300      	movs	r3, #0
 800ab72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab7a:	f107 0308 	add.w	r3, r7, #8
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7ff fd9f 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f980 	bl	800ae8c <SDMMC_GetCmdResp2>
 800ab8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab8e:	69fb      	ldr	r3, [r7, #28]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3720      	adds	r7, #32
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aba6:	2309      	movs	r3, #9
 800aba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800abaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800abae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abb0:	2300      	movs	r3, #0
 800abb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff fd7f 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f960 	bl	800ae8c <SDMMC_GetCmdResp2>
 800abcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abce:	69fb      	ldr	r3, [r7, #28]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3720      	adds	r7, #32
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800abe6:	2303      	movs	r3, #3
 800abe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abf0:	2300      	movs	r3, #0
 800abf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abfa:	f107 0308 	add.w	r3, r7, #8
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff fd5f 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	2103      	movs	r1, #3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f9c8 	bl	800afa0 <SDMMC_GetCmdResp6>
 800ac10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac12:	69fb      	ldr	r3, [r7, #28]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3720      	adds	r7, #32
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ac2a:	230d      	movs	r3, #13
 800ac2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac34:	2300      	movs	r3, #0
 800ac36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac3e:	f107 0308 	add.w	r3, r7, #8
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff fd3d 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ac4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac4e:	210d      	movs	r1, #13
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f829 	bl	800aca8 <SDMMC_GetCmdResp1>
 800ac56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac58:	69fb      	ldr	r3, [r7, #28]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b088      	sub	sp, #32
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ac6e:	230d      	movs	r3, #13
 800ac70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff fd1b 	bl	800a6c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ac8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac92:	210d      	movs	r1, #13
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f807 	bl	800aca8 <SDMMC_GetCmdResp1>
 800ac9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9c:	69fb      	ldr	r3, [r7, #28]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	460b      	mov	r3, r1
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800acb6:	4b70      	ldr	r3, [pc, #448]	@ (800ae78 <SDMMC_GetCmdResp1+0x1d0>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a70      	ldr	r2, [pc, #448]	@ (800ae7c <SDMMC_GetCmdResp1+0x1d4>)
 800acbc:	fba2 2303 	umull	r2, r3, r2, r3
 800acc0:	0a5a      	lsrs	r2, r3, #9
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	fb02 f303 	mul.w	r3, r2, r3
 800acc8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	1e5a      	subs	r2, r3, #1
 800acce:	61fa      	str	r2, [r7, #28]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acd8:	e0c9      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acde:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ace0:	69ba      	ldr	r2, [r7, #24]
 800ace2:	4b67      	ldr	r3, [pc, #412]	@ (800ae80 <SDMMC_GetCmdResp1+0x1d8>)
 800ace4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0ef      	beq.n	800acca <SDMMC_GetCmdResp1+0x22>
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1ea      	bne.n	800acca <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf8:	f003 0304 	and.w	r3, r3, #4
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2204      	movs	r2, #4
 800ad04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad06:	2304      	movs	r3, #4
 800ad08:	e0b1      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e0a6      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a58      	ldr	r2, [pc, #352]	@ (800ae84 <SDMMC_GetCmdResp1+0x1dc>)
 800ad24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7ff fcf6 	bl	800a718 <SDMMC_GetCommandResponse>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d001      	beq.n	800ad3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e099      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff fcf8 	bl	800a732 <SDMMC_GetResponse>
 800ad42:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4b50      	ldr	r3, [pc, #320]	@ (800ae88 <SDMMC_GetCmdResp1+0x1e0>)
 800ad48:	4013      	ands	r3, r2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e08d      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	da02      	bge.n	800ad5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ad58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad5c:	e087      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ad68:	2340      	movs	r3, #64	@ 0x40
 800ad6a:	e080      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ad76:	2380      	movs	r3, #128	@ 0x80
 800ad78:	e079      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ad84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad88:	e071      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ad94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad98:	e069      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ada4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ada8:	e061      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800adb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800adb8:	e059      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800adc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adc8:	e051      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800add4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800add8:	e049      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ade4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ade8:	e041      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800adf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adf8:	e039      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ae08:	e031      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ae18:	e029      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ae28:	e021      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ae38:	e019      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ae48:	e011      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ae54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ae58:	e009      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f003 0308 	and.w	r3, r3, #8
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ae64:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ae68:	e001      	b.n	800ae6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3720      	adds	r7, #32
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20000000 	.word	0x20000000
 800ae7c:	10624dd3 	.word	0x10624dd3
 800ae80:	00200045 	.word	0x00200045
 800ae84:	002000c5 	.word	0x002000c5
 800ae88:	fdffe008 	.word	0xfdffe008

0800ae8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae94:	4b1f      	ldr	r3, [pc, #124]	@ (800af14 <SDMMC_GetCmdResp2+0x88>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a1f      	ldr	r2, [pc, #124]	@ (800af18 <SDMMC_GetCmdResp2+0x8c>)
 800ae9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae9e:	0a5b      	lsrs	r3, r3, #9
 800aea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aea4:	fb02 f303 	mul.w	r3, r2, r3
 800aea8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	1e5a      	subs	r2, r3, #1
 800aeae:	60fa      	str	r2, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d102      	bne.n	800aeba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aeb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aeb8:	e026      	b.n	800af08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aebe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d0ef      	beq.n	800aeaa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1ea      	bne.n	800aeaa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aed8:	f003 0304 	and.w	r3, r3, #4
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d004      	beq.n	800aeea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2204      	movs	r2, #4
 800aee4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aee6:	2304      	movs	r3, #4
 800aee8:	e00e      	b.n	800af08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d004      	beq.n	800af00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e003      	b.n	800af08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a06      	ldr	r2, [pc, #24]	@ (800af1c <SDMMC_GetCmdResp2+0x90>)
 800af04:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	20000000 	.word	0x20000000
 800af18:	10624dd3 	.word	0x10624dd3
 800af1c:	002000c5 	.word	0x002000c5

0800af20 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af28:	4b1a      	ldr	r3, [pc, #104]	@ (800af94 <SDMMC_GetCmdResp3+0x74>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a1a      	ldr	r2, [pc, #104]	@ (800af98 <SDMMC_GetCmdResp3+0x78>)
 800af2e:	fba2 2303 	umull	r2, r3, r2, r3
 800af32:	0a5b      	lsrs	r3, r3, #9
 800af34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af38:	fb02 f303 	mul.w	r3, r2, r3
 800af3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	1e5a      	subs	r2, r3, #1
 800af42:	60fa      	str	r2, [r7, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d102      	bne.n	800af4e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af4c:	e01b      	b.n	800af86 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af52:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0ef      	beq.n	800af3e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1ea      	bne.n	800af3e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d004      	beq.n	800af7e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2204      	movs	r2, #4
 800af78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af7a:	2304      	movs	r3, #4
 800af7c:	e003      	b.n	800af86 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a06      	ldr	r2, [pc, #24]	@ (800af9c <SDMMC_GetCmdResp3+0x7c>)
 800af82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	20000000 	.word	0x20000000
 800af98:	10624dd3 	.word	0x10624dd3
 800af9c:	002000c5 	.word	0x002000c5

0800afa0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	460b      	mov	r3, r1
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800afae:	4b35      	ldr	r3, [pc, #212]	@ (800b084 <SDMMC_GetCmdResp6+0xe4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a35      	ldr	r2, [pc, #212]	@ (800b088 <SDMMC_GetCmdResp6+0xe8>)
 800afb4:	fba2 2303 	umull	r2, r3, r2, r3
 800afb8:	0a5b      	lsrs	r3, r3, #9
 800afba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afbe:	fb02 f303 	mul.w	r3, r2, r3
 800afc2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	1e5a      	subs	r2, r3, #1
 800afc8:	61fa      	str	r2, [r7, #28]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d102      	bne.n	800afd4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afd2:	e052      	b.n	800b07a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0ef      	beq.n	800afc4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1ea      	bne.n	800afc4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d004      	beq.n	800b004 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2204      	movs	r2, #4
 800affe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b000:	2304      	movs	r3, #4
 800b002:	e03a      	b.n	800b07a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d004      	beq.n	800b01a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b016:	2301      	movs	r3, #1
 800b018:	e02f      	b.n	800b07a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff fb7c 	bl	800a718 <SDMMC_GetCommandResponse>
 800b020:	4603      	mov	r3, r0
 800b022:	461a      	mov	r2, r3
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	4293      	cmp	r3, r2
 800b028:	d001      	beq.n	800b02e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e025      	b.n	800b07a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	4a16      	ldr	r2, [pc, #88]	@ (800b08c <SDMMC_GetCmdResp6+0xec>)
 800b032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b034:	2100      	movs	r1, #0
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff fb7b 	bl	800a732 <SDMMC_GetResponse>
 800b03c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d106      	bne.n	800b056 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	0c1b      	lsrs	r3, r3, #16
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b052:	2300      	movs	r3, #0
 800b054:	e011      	b.n	800b07a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b064:	e009      	b.n	800b07a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b074:	e001      	b.n	800b07a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b076:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3720      	adds	r7, #32
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000000 	.word	0x20000000
 800b088:	10624dd3 	.word	0x10624dd3
 800b08c:	002000c5 	.word	0x002000c5

0800b090 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b098:	4b22      	ldr	r3, [pc, #136]	@ (800b124 <SDMMC_GetCmdResp7+0x94>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a22      	ldr	r2, [pc, #136]	@ (800b128 <SDMMC_GetCmdResp7+0x98>)
 800b09e:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a2:	0a5b      	lsrs	r3, r3, #9
 800b0a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0a8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	1e5a      	subs	r2, r3, #1
 800b0b2:	60fa      	str	r2, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d102      	bne.n	800b0be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b0bc:	e02c      	b.n	800b118 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0ef      	beq.n	800b0ae <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1ea      	bne.n	800b0ae <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0dc:	f003 0304 	and.w	r3, r3, #4
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d004      	beq.n	800b0ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2204      	movs	r2, #4
 800b0e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0ea:	2304      	movs	r3, #4
 800b0ec:	e014      	b.n	800b118 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d004      	beq.n	800b104 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b100:	2301      	movs	r3, #1
 800b102:	e009      	b.n	800b118 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2240      	movs	r2, #64	@ 0x40
 800b114:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b116:	2300      	movs	r3, #0

}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	20000000 	.word	0x20000000
 800b128:	10624dd3 	.word	0x10624dd3

0800b12c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b134:	4b11      	ldr	r3, [pc, #68]	@ (800b17c <SDMMC_GetCmdError+0x50>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a11      	ldr	r2, [pc, #68]	@ (800b180 <SDMMC_GetCmdError+0x54>)
 800b13a:	fba2 2303 	umull	r2, r3, r2, r3
 800b13e:	0a5b      	lsrs	r3, r3, #9
 800b140:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b144:	fb02 f303 	mul.w	r3, r2, r3
 800b148:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	1e5a      	subs	r2, r3, #1
 800b14e:	60fa      	str	r2, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b154:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b158:	e009      	b.n	800b16e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b15e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b162:	2b00      	cmp	r3, #0
 800b164:	d0f1      	beq.n	800b14a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a06      	ldr	r2, [pc, #24]	@ (800b184 <SDMMC_GetCmdError+0x58>)
 800b16a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	20000000 	.word	0x20000000
 800b180:	10624dd3 	.word	0x10624dd3
 800b184:	002000c5 	.word	0x002000c5

0800b188 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b18c:	4904      	ldr	r1, [pc, #16]	@ (800b1a0 <MX_FATFS_Init+0x18>)
 800b18e:	4805      	ldr	r0, [pc, #20]	@ (800b1a4 <MX_FATFS_Init+0x1c>)
 800b190:	f002 ffbe 	bl	800e110 <FATFS_LinkDriver>
 800b194:	4603      	mov	r3, r0
 800b196:	461a      	mov	r2, r3
 800b198:	4b03      	ldr	r3, [pc, #12]	@ (800b1a8 <MX_FATFS_Init+0x20>)
 800b19a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b19c:	bf00      	nop
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20000500 	.word	0x20000500
 800b1a4:	0800e380 	.word	0x0800e380
 800b1a8:	200004fc 	.word	0x200004fc

0800b1ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b1b6:	f000 f86b 	bl	800b290 <BSP_SD_IsDetected>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d001      	beq.n	800b1c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e005      	b.n	800b1d0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b1c4:	4804      	ldr	r0, [pc, #16]	@ (800b1d8 <BSP_SD_Init+0x2c>)
 800b1c6:	f7fc fb91 	bl	80078ec <HAL_SD_Init>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	71fb      	strb	r3, [r7, #7]
    //{
    //  sd_state = MSD_ERROR;
    //}
  }

  return sd_state;
 800b1ce:	79fb      	ldrb	r3, [r7, #7]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200002f0 	.word	0x200002f0

0800b1dc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint8_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af02      	add	r7, sp, #8
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	68f9      	ldr	r1, [r7, #12]
 800b1f8:	4806      	ldr	r0, [pc, #24]	@ (800b214 <BSP_SD_ReadBlocks+0x38>)
 800b1fa:	f7fc fc97 	bl	8007b2c <HAL_SD_ReadBlocks>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b208:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200002f0 	.word	0x200002f0

0800b218 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint8_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b088      	sub	sp, #32
 800b21c:	af02      	add	r7, sp, #8
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	68f9      	ldr	r1, [r7, #12]
 800b234:	4806      	ldr	r0, [pc, #24]	@ (800b250 <BSP_SD_WriteBlocks+0x38>)
 800b236:	f7fc fe03 	bl	8007e40 <HAL_SD_WriteBlocks>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b244:	7dfb      	ldrb	r3, [r7, #23]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	200002f0 	.word	0x200002f0

0800b254 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b258:	4805      	ldr	r0, [pc, #20]	@ (800b270 <BSP_SD_GetCardState+0x1c>)
 800b25a:	f7fd fb1f 	bl	800889c <HAL_SD_GetCardState>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b04      	cmp	r3, #4
 800b262:	bf14      	ite	ne
 800b264:	2301      	movne	r3, #1
 800b266:	2300      	moveq	r3, #0
 800b268:	b2db      	uxtb	r3, r3
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	200002f0 	.word	0x200002f0

0800b274 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b27c:	6879      	ldr	r1, [r7, #4]
 800b27e:	4803      	ldr	r0, [pc, #12]	@ (800b28c <BSP_SD_GetCardInfo+0x18>)
 800b280:	f7fd f9ce 	bl	8008620 <HAL_SD_GetCardInfo>
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200002f0 	.word	0x200002f0

0800b290 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b296:	2301      	movs	r3, #1
 800b298:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	b2db      	uxtb	r3, r3
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
	...

0800b2ac <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e4 <SD_CheckStatus+0x38>)
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b2bc:	f7ff ffca 	bl	800b254 <BSP_SD_GetCardState>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d107      	bne.n	800b2d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b2c6:	4b07      	ldr	r3, [pc, #28]	@ (800b2e4 <SD_CheckStatus+0x38>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	f023 0301 	bic.w	r3, r3, #1
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	4b04      	ldr	r3, [pc, #16]	@ (800b2e4 <SD_CheckStatus+0x38>)
 800b2d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b2d6:	4b03      	ldr	r3, [pc, #12]	@ (800b2e4 <SD_CheckStatus+0x38>)
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b2db      	uxtb	r3, r3
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20000009 	.word	0x20000009

0800b2e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b320 <SD_initialize+0x38>)
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b2f8:	f7ff ff58 	bl	800b1ac <BSP_SD_Init>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d107      	bne.n	800b312 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff ffd1 	bl	800b2ac <SD_CheckStatus>
 800b30a:	4603      	mov	r3, r0
 800b30c:	461a      	mov	r2, r3
 800b30e:	4b04      	ldr	r3, [pc, #16]	@ (800b320 <SD_initialize+0x38>)
 800b310:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b312:	4b03      	ldr	r3, [pc, #12]	@ (800b320 <SD_initialize+0x38>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	b2db      	uxtb	r3, r3
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20000009 	.word	0x20000009

0800b324 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff ffbb 	bl	800b2ac <SD_CheckStatus>
 800b336:	4603      	mov	r3, r0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	607a      	str	r2, [r7, #4]
 800b34a:	603b      	str	r3, [r7, #0]
 800b34c:	4603      	mov	r3, r0
 800b34e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint8_t*)buff,
 800b354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	68b8      	ldr	r0, [r7, #8]
 800b35e:	f7ff ff3d 	bl	800b1dc <BSP_SD_ReadBlocks>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d107      	bne.n	800b378 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b368:	bf00      	nop
 800b36a:	f7ff ff73 	bl	800b254 <BSP_SD_GetCardState>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1fa      	bne.n	800b36a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b378:	7dfb      	ldrb	r3, [r7, #23]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3718      	adds	r7, #24
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b086      	sub	sp, #24
 800b386:	af00      	add	r7, sp, #0
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	603b      	str	r3, [r7, #0]
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint8_t*)buff,
 800b396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	6879      	ldr	r1, [r7, #4]
 800b39e:	68b8      	ldr	r0, [r7, #8]
 800b3a0:	f7ff ff3a 	bl	800b218 <BSP_SD_WriteBlocks>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d107      	bne.n	800b3ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b3aa:	bf00      	nop
 800b3ac:	f7ff ff52 	bl	800b254 <BSP_SD_GetCardState>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1fa      	bne.n	800b3ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08c      	sub	sp, #48	@ 0x30
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	603a      	str	r2, [r7, #0]
 800b3ce:	71fb      	strb	r3, [r7, #7]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b3da:	4b25      	ldr	r3, [pc, #148]	@ (800b470 <SD_ioctl+0xac>)
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <SD_ioctl+0x28>
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e03c      	b.n	800b466 <SD_ioctl+0xa2>

  switch (cmd)
 800b3ec:	79bb      	ldrb	r3, [r7, #6]
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d834      	bhi.n	800b45c <SD_ioctl+0x98>
 800b3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f8 <SD_ioctl+0x34>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b409 	.word	0x0800b409
 800b3fc:	0800b411 	.word	0x0800b411
 800b400:	0800b429 	.word	0x0800b429
 800b404:	0800b443 	.word	0x0800b443
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b40e:	e028      	b.n	800b462 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b410:	f107 0308 	add.w	r3, r7, #8
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff ff2d 	bl	800b274 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b41a:	6a3a      	ldr	r2, [r7, #32]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b426:	e01c      	b.n	800b462 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b428:	f107 0308 	add.w	r3, r7, #8
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7ff ff21 	bl	800b274 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b434:	b29a      	uxth	r2, r3
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b440:	e00f      	b.n	800b462 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b442:	f107 0308 	add.w	r3, r7, #8
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff ff14 	bl	800b274 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44e:	0a5a      	lsrs	r2, r3, #9
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 800b454:	2300      	movs	r3, #0
 800b456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b45a:	e002      	b.n	800b462 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b45c:	2304      	movs	r3, #4
 800b45e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b466:	4618      	mov	r0, r3
 800b468:	3730      	adds	r7, #48	@ 0x30
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000009 	.word	0x20000009

0800b474 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	4a08      	ldr	r2, [pc, #32]	@ (800b4a4 <disk_status+0x30>)
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	79fa      	ldrb	r2, [r7, #7]
 800b48c:	4905      	ldr	r1, [pc, #20]	@ (800b4a4 <disk_status+0x30>)
 800b48e:	440a      	add	r2, r1
 800b490:	7a12      	ldrb	r2, [r2, #8]
 800b492:	4610      	mov	r0, r2
 800b494:	4798      	blx	r3
 800b496:	4603      	mov	r3, r0
 800b498:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	2000052c 	.word	0x2000052c

0800b4a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	4a0e      	ldr	r2, [pc, #56]	@ (800b4f4 <disk_initialize+0x4c>)
 800b4ba:	5cd3      	ldrb	r3, [r2, r3]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d114      	bne.n	800b4ea <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f4 <disk_initialize+0x4c>)
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	79fa      	ldrb	r2, [r7, #7]
 800b4ce:	4909      	ldr	r1, [pc, #36]	@ (800b4f4 <disk_initialize+0x4c>)
 800b4d0:	440a      	add	r2, r1
 800b4d2:	7a12      	ldrb	r2, [r2, #8]
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d103      	bne.n	800b4ea <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b4e2:	79fb      	ldrb	r3, [r7, #7]
 800b4e4:	4a03      	ldr	r2, [pc, #12]	@ (800b4f4 <disk_initialize+0x4c>)
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	2000052c 	.word	0x2000052c

0800b4f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60b9      	str	r1, [r7, #8]
 800b500:	607a      	str	r2, [r7, #4]
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b508:	7bfb      	ldrb	r3, [r7, #15]
 800b50a:	4a0a      	ldr	r2, [pc, #40]	@ (800b534 <disk_read+0x3c>)
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	689c      	ldr	r4, [r3, #8]
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	4a07      	ldr	r2, [pc, #28]	@ (800b534 <disk_read+0x3c>)
 800b518:	4413      	add	r3, r2
 800b51a:	7a18      	ldrb	r0, [r3, #8]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	68b9      	ldr	r1, [r7, #8]
 800b522:	47a0      	blx	r4
 800b524:	4603      	mov	r3, r0
 800b526:	75fb      	strb	r3, [r7, #23]
  return res;
 800b528:	7dfb      	ldrb	r3, [r7, #23]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	371c      	adds	r7, #28
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd90      	pop	{r4, r7, pc}
 800b532:	bf00      	nop
 800b534:	2000052c 	.word	0x2000052c

0800b538 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b538:	b590      	push	{r4, r7, lr}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	607a      	str	r2, [r7, #4]
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	4603      	mov	r3, r0
 800b546:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	4a0a      	ldr	r2, [pc, #40]	@ (800b574 <disk_write+0x3c>)
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	68dc      	ldr	r4, [r3, #12]
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	4a07      	ldr	r2, [pc, #28]	@ (800b574 <disk_write+0x3c>)
 800b558:	4413      	add	r3, r2
 800b55a:	7a18      	ldrb	r0, [r3, #8]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	68b9      	ldr	r1, [r7, #8]
 800b562:	47a0      	blx	r4
 800b564:	4603      	mov	r3, r0
 800b566:	75fb      	strb	r3, [r7, #23]
  return res;
 800b568:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd90      	pop	{r4, r7, pc}
 800b572:	bf00      	nop
 800b574:	2000052c 	.word	0x2000052c

0800b578 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	603a      	str	r2, [r7, #0]
 800b582:	71fb      	strb	r3, [r7, #7]
 800b584:	460b      	mov	r3, r1
 800b586:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b588:	79fb      	ldrb	r3, [r7, #7]
 800b58a:	4a09      	ldr	r2, [pc, #36]	@ (800b5b0 <disk_ioctl+0x38>)
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	79fa      	ldrb	r2, [r7, #7]
 800b596:	4906      	ldr	r1, [pc, #24]	@ (800b5b0 <disk_ioctl+0x38>)
 800b598:	440a      	add	r2, r1
 800b59a:	7a10      	ldrb	r0, [r2, #8]
 800b59c:	79b9      	ldrb	r1, [r7, #6]
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	4798      	blx	r3
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	2000052c 	.word	0x2000052c

0800b5b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b5c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	b21a      	sxth	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	b21b      	sxth	r3, r3
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	b21b      	sxth	r3, r3
 800b5d6:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b5d8:	89fb      	ldrh	r3, [r7, #14]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b085      	sub	sp, #20
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3303      	adds	r3, #3
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	021b      	lsls	r3, r3, #8
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	3202      	adds	r2, #2
 800b5fe:	7812      	ldrb	r2, [r2, #0]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	021b      	lsls	r3, r3, #8
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	3201      	adds	r2, #1
 800b60c:	7812      	ldrb	r2, [r2, #0]
 800b60e:	4313      	orrs	r3, r2
 800b610:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	7812      	ldrb	r2, [r2, #0]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]
	return rv;
 800b61e:	68fb      	ldr	r3, [r7, #12]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	607a      	str	r2, [r7, #4]
 800b63e:	887a      	ldrh	r2, [r7, #2]
 800b640:	b2d2      	uxtb	r2, r2
 800b642:	701a      	strb	r2, [r3, #0]
 800b644:	887b      	ldrh	r3, [r7, #2]
 800b646:	0a1b      	lsrs	r3, r3, #8
 800b648:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	887a      	ldrh	r2, [r7, #2]
 800b652:	b2d2      	uxtb	r2, r2
 800b654:	701a      	strb	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	607a      	str	r2, [r7, #4]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	b2d2      	uxtb	r2, r2
 800b688:	701a      	strb	r2, [r3, #0]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	0a1b      	lsrs	r3, r3, #8
 800b68e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	1c5a      	adds	r2, r3, #1
 800b694:	607a      	str	r2, [r7, #4]
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	b2d2      	uxtb	r2, r2
 800b69a:	701a      	strb	r2, [r3, #0]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	0a1b      	lsrs	r3, r3, #8
 800b6a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	b2d2      	uxtb	r2, r2
 800b6ac:	701a      	strb	r2, [r3, #0]
}
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b6ba:	b480      	push	{r7}
 800b6bc:	b087      	sub	sp, #28
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00d      	beq.n	800b6f0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	1c53      	adds	r3, r2, #1
 800b6d8:	613b      	str	r3, [r7, #16]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	1c59      	adds	r1, r3, #1
 800b6de:	6179      	str	r1, [r7, #20]
 800b6e0:	7812      	ldrb	r2, [r2, #0]
 800b6e2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	607b      	str	r3, [r7, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1f1      	bne.n	800b6d4 <mem_cpy+0x1a>
	}
}
 800b6f0:	bf00      	nop
 800b6f2:	371c      	adds	r7, #28
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b6fc:	b480      	push	{r7}
 800b6fe:	b087      	sub	sp, #28
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	617a      	str	r2, [r7, #20]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	607b      	str	r3, [r7, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1f3      	bne.n	800b70c <mem_set+0x10>
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b732:	b480      	push	{r7}
 800b734:	b089      	sub	sp, #36	@ 0x24
 800b736:	af00      	add	r7, sp, #0
 800b738:	60f8      	str	r0, [r7, #12]
 800b73a:	60b9      	str	r1, [r7, #8]
 800b73c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	61fa      	str	r2, [r7, #28]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	4619      	mov	r1, r3
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	61ba      	str	r2, [r7, #24]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	1acb      	subs	r3, r1, r3
 800b75e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3b01      	subs	r3, #1
 800b764:	607b      	str	r3, [r7, #4]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d002      	beq.n	800b772 <mem_cmp+0x40>
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0eb      	beq.n	800b74a <mem_cmp+0x18>

	return r;
 800b772:	697b      	ldr	r3, [r7, #20]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3724      	adds	r7, #36	@ 0x24
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b78a:	e002      	b.n	800b792 <chk_chr+0x12>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3301      	adds	r3, #1
 800b790:	607b      	str	r3, [r7, #4]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d005      	beq.n	800b7a6 <chk_chr+0x26>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d1f2      	bne.n	800b78c <chk_chr+0xc>
	return *str;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60bb      	str	r3, [r7, #8]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	60fb      	str	r3, [r7, #12]
 800b7ca:	e029      	b.n	800b820 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b7cc:	4a27      	ldr	r2, [pc, #156]	@ (800b86c <chk_lock+0xb4>)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	011b      	lsls	r3, r3, #4
 800b7d2:	4413      	add	r3, r2
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d01d      	beq.n	800b816 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b7da:	4a24      	ldr	r2, [pc, #144]	@ (800b86c <chk_lock+0xb4>)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	4413      	add	r3, r2
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d116      	bne.n	800b81a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b7ec:	4a1f      	ldr	r2, [pc, #124]	@ (800b86c <chk_lock+0xb4>)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	4413      	add	r3, r2
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d10c      	bne.n	800b81a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b800:	4a1a      	ldr	r2, [pc, #104]	@ (800b86c <chk_lock+0xb4>)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	011b      	lsls	r3, r3, #4
 800b806:	4413      	add	r3, r2
 800b808:	3308      	adds	r3, #8
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b810:	429a      	cmp	r2, r3
 800b812:	d102      	bne.n	800b81a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b814:	e007      	b.n	800b826 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b816:	2301      	movs	r3, #1
 800b818:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3301      	adds	r3, #1
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d9d2      	bls.n	800b7cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d109      	bne.n	800b840 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d102      	bne.n	800b838 <chk_lock+0x80>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b02      	cmp	r3, #2
 800b836:	d101      	bne.n	800b83c <chk_lock+0x84>
 800b838:	2300      	movs	r3, #0
 800b83a:	e010      	b.n	800b85e <chk_lock+0xa6>
 800b83c:	2312      	movs	r3, #18
 800b83e:	e00e      	b.n	800b85e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d108      	bne.n	800b858 <chk_lock+0xa0>
 800b846:	4a09      	ldr	r2, [pc, #36]	@ (800b86c <chk_lock+0xb4>)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	4413      	add	r3, r2
 800b84e:	330c      	adds	r3, #12
 800b850:	881b      	ldrh	r3, [r3, #0]
 800b852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b856:	d101      	bne.n	800b85c <chk_lock+0xa4>
 800b858:	2310      	movs	r3, #16
 800b85a:	e000      	b.n	800b85e <chk_lock+0xa6>
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	2000050c 	.word	0x2000050c

0800b870 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b876:	2300      	movs	r3, #0
 800b878:	607b      	str	r3, [r7, #4]
 800b87a:	e002      	b.n	800b882 <enq_lock+0x12>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3301      	adds	r3, #1
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d806      	bhi.n	800b896 <enq_lock+0x26>
 800b888:	4a09      	ldr	r2, [pc, #36]	@ (800b8b0 <enq_lock+0x40>)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	4413      	add	r3, r2
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1f2      	bne.n	800b87c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	bf14      	ite	ne
 800b89c:	2301      	movne	r3, #1
 800b89e:	2300      	moveq	r3, #0
 800b8a0:	b2db      	uxtb	r3, r3
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	2000050c 	.word	0x2000050c

0800b8b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	e01f      	b.n	800b904 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b8c4:	4a41      	ldr	r2, [pc, #260]	@ (800b9cc <inc_lock+0x118>)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	011b      	lsls	r3, r3, #4
 800b8ca:	4413      	add	r3, r2
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d113      	bne.n	800b8fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b8d6:	4a3d      	ldr	r2, [pc, #244]	@ (800b9cc <inc_lock+0x118>)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	4413      	add	r3, r2
 800b8de:	3304      	adds	r3, #4
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d109      	bne.n	800b8fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b8ea:	4a38      	ldr	r2, [pc, #224]	@ (800b9cc <inc_lock+0x118>)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	4413      	add	r3, r2
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d006      	beq.n	800b90c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d9dc      	bls.n	800b8c4 <inc_lock+0x10>
 800b90a:	e000      	b.n	800b90e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b90c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b02      	cmp	r3, #2
 800b912:	d132      	bne.n	800b97a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b914:	2300      	movs	r3, #0
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	e002      	b.n	800b920 <inc_lock+0x6c>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d806      	bhi.n	800b934 <inc_lock+0x80>
 800b926:	4a29      	ldr	r2, [pc, #164]	@ (800b9cc <inc_lock+0x118>)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	4413      	add	r3, r2
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1f2      	bne.n	800b91a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b02      	cmp	r3, #2
 800b938:	d101      	bne.n	800b93e <inc_lock+0x8a>
 800b93a:	2300      	movs	r3, #0
 800b93c:	e040      	b.n	800b9c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4922      	ldr	r1, [pc, #136]	@ (800b9cc <inc_lock+0x118>)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	440b      	add	r3, r1
 800b94a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	491e      	ldr	r1, [pc, #120]	@ (800b9cc <inc_lock+0x118>)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	011b      	lsls	r3, r3, #4
 800b956:	440b      	add	r3, r1
 800b958:	3304      	adds	r3, #4
 800b95a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	695a      	ldr	r2, [r3, #20]
 800b960:	491a      	ldr	r1, [pc, #104]	@ (800b9cc <inc_lock+0x118>)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	440b      	add	r3, r1
 800b968:	3308      	adds	r3, #8
 800b96a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b96c:	4a17      	ldr	r2, [pc, #92]	@ (800b9cc <inc_lock+0x118>)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	4413      	add	r3, r2
 800b974:	330c      	adds	r3, #12
 800b976:	2200      	movs	r2, #0
 800b978:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d009      	beq.n	800b994 <inc_lock+0xe0>
 800b980:	4a12      	ldr	r2, [pc, #72]	@ (800b9cc <inc_lock+0x118>)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	4413      	add	r3, r2
 800b988:	330c      	adds	r3, #12
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <inc_lock+0xe0>
 800b990:	2300      	movs	r3, #0
 800b992:	e015      	b.n	800b9c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d108      	bne.n	800b9ac <inc_lock+0xf8>
 800b99a:	4a0c      	ldr	r2, [pc, #48]	@ (800b9cc <inc_lock+0x118>)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	4413      	add	r3, r2
 800b9a2:	330c      	adds	r3, #12
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	e001      	b.n	800b9b0 <inc_lock+0xfc>
 800b9ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9b0:	4906      	ldr	r1, [pc, #24]	@ (800b9cc <inc_lock+0x118>)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	011b      	lsls	r3, r3, #4
 800b9b6:	440b      	add	r3, r1
 800b9b8:	330c      	adds	r3, #12
 800b9ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	3301      	adds	r3, #1
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	2000050c 	.word	0x2000050c

0800b9d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	607b      	str	r3, [r7, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d825      	bhi.n	800ba30 <dec_lock+0x60>
		n = Files[i].ctr;
 800b9e4:	4a17      	ldr	r2, [pc, #92]	@ (800ba44 <dec_lock+0x74>)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	011b      	lsls	r3, r3, #4
 800b9ea:	4413      	add	r3, r2
 800b9ec:	330c      	adds	r3, #12
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b9f2:	89fb      	ldrh	r3, [r7, #14]
 800b9f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9f8:	d101      	bne.n	800b9fe <dec_lock+0x2e>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b9fe:	89fb      	ldrh	r3, [r7, #14]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <dec_lock+0x3a>
 800ba04:	89fb      	ldrh	r3, [r7, #14]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba0a:	4a0e      	ldr	r2, [pc, #56]	@ (800ba44 <dec_lock+0x74>)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	011b      	lsls	r3, r3, #4
 800ba10:	4413      	add	r3, r2
 800ba12:	330c      	adds	r3, #12
 800ba14:	89fa      	ldrh	r2, [r7, #14]
 800ba16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d105      	bne.n	800ba2a <dec_lock+0x5a>
 800ba1e:	4a09      	ldr	r2, [pc, #36]	@ (800ba44 <dec_lock+0x74>)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	4413      	add	r3, r2
 800ba26:	2200      	movs	r2, #0
 800ba28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	737b      	strb	r3, [r7, #13]
 800ba2e:	e001      	b.n	800ba34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ba30:	2302      	movs	r3, #2
 800ba32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ba34:	7b7b      	ldrb	r3, [r7, #13]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	2000050c 	.word	0x2000050c

0800ba48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ba50:	2300      	movs	r3, #0
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	e010      	b.n	800ba78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ba56:	4a0d      	ldr	r2, [pc, #52]	@ (800ba8c <clear_lock+0x44>)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	011b      	lsls	r3, r3, #4
 800ba5c:	4413      	add	r3, r2
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d105      	bne.n	800ba72 <clear_lock+0x2a>
 800ba66:	4a09      	ldr	r2, [pc, #36]	@ (800ba8c <clear_lock+0x44>)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	4413      	add	r3, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3301      	adds	r3, #1
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d9eb      	bls.n	800ba56 <clear_lock+0xe>
	}
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	2000050c 	.word	0x2000050c

0800ba90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	78db      	ldrb	r3, [r3, #3]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d034      	beq.n	800bb0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	7858      	ldrb	r0, [r3, #1]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bab4:	2301      	movs	r3, #1
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	f7ff fd3e 	bl	800b538 <disk_write>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	73fb      	strb	r3, [r7, #15]
 800bac6:	e022      	b.n	800bb0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	1ad2      	subs	r2, r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	429a      	cmp	r2, r3
 800badc:	d217      	bcs.n	800bb0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	789b      	ldrb	r3, [r3, #2]
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	e010      	b.n	800bb08 <sync_window+0x78>
					wsect += fs->fsize;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	699b      	ldr	r3, [r3, #24]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4413      	add	r3, r2
 800baee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	7858      	ldrb	r0, [r3, #1]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bafa:	2301      	movs	r3, #1
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	f7ff fd1b 	bl	800b538 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d8eb      	bhi.n	800bae6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d01b      	beq.n	800bb68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff ffad 	bl	800ba90 <sync_window>
 800bb36:	4603      	mov	r3, r0
 800bb38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d113      	bne.n	800bb68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	7858      	ldrb	r0, [r3, #1]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	f7ff fcd3 	bl	800b4f8 <disk_read>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d004      	beq.n	800bb62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bb58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff ff87 	bl	800ba90 <sync_window>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d158      	bne.n	800bc3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d148      	bne.n	800bc26 <sync_fs+0xb2>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	791b      	ldrb	r3, [r3, #4]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d144      	bne.n	800bc26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	3330      	adds	r3, #48	@ 0x30
 800bba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bba4:	2100      	movs	r1, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fda8 	bl	800b6fc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3330      	adds	r3, #48	@ 0x30
 800bbb0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bbb4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7ff fd37 	bl	800b62c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	3330      	adds	r3, #48	@ 0x30
 800bbc2:	4921      	ldr	r1, [pc, #132]	@ (800bc48 <sync_fs+0xd4>)
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7ff fd4c 	bl	800b662 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3330      	adds	r3, #48	@ 0x30
 800bbce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bbd2:	491e      	ldr	r1, [pc, #120]	@ (800bc4c <sync_fs+0xd8>)
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff fd44 	bl	800b662 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3330      	adds	r3, #48	@ 0x30
 800bbde:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	4610      	mov	r0, r2
 800bbea:	f7ff fd3a 	bl	800b662 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3330      	adds	r3, #48	@ 0x30
 800bbf2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	f7ff fd30 	bl	800b662 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7858      	ldrb	r0, [r3, #1]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	f7ff fc8c 	bl	800b538 <disk_write>
			fs->fsi_flag = 0;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	785b      	ldrb	r3, [r3, #1]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff fca2 	bl	800b578 <disk_ioctl>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <sync_fs+0xca>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	41615252 	.word	0x41615252
 800bc4c:	61417272 	.word	0x61417272

0800bc50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	3b02      	subs	r3, #2
 800bc5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	3b02      	subs	r3, #2
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d301      	bcc.n	800bc70 <clust2sect+0x20>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e008      	b.n	800bc82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	895b      	ldrh	r3, [r3, #10]
 800bc74:	461a      	mov	r2, r3
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	fb03 f202 	mul.w	r2, r3, r2
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc80:	4413      	add	r3, r2
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b086      	sub	sp, #24
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d904      	bls.n	800bcae <get_fat+0x20>
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	695b      	ldr	r3, [r3, #20]
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d302      	bcc.n	800bcb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bcae:	2301      	movs	r3, #1
 800bcb0:	617b      	str	r3, [r7, #20]
 800bcb2:	e08e      	b.n	800bdd2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bcb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d061      	beq.n	800bd86 <get_fat+0xf8>
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	dc7b      	bgt.n	800bdbe <get_fat+0x130>
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d002      	beq.n	800bcd0 <get_fat+0x42>
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d041      	beq.n	800bd52 <get_fat+0xc4>
 800bcce:	e076      	b.n	800bdbe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	085b      	lsrs	r3, r3, #1
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	6a1a      	ldr	r2, [r3, #32]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	0a5b      	lsrs	r3, r3, #9
 800bce6:	4413      	add	r3, r2
 800bce8:	4619      	mov	r1, r3
 800bcea:	6938      	ldr	r0, [r7, #16]
 800bcec:	f7ff ff14 	bl	800bb18 <move_window>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d166      	bne.n	800bdc4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	60fa      	str	r2, [r7, #12]
 800bcfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	4413      	add	r3, r2
 800bd04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	6a1a      	ldr	r2, [r3, #32]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	0a5b      	lsrs	r3, r3, #9
 800bd12:	4413      	add	r3, r2
 800bd14:	4619      	mov	r1, r3
 800bd16:	6938      	ldr	r0, [r7, #16]
 800bd18:	f7ff fefe 	bl	800bb18 <move_window>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d152      	bne.n	800bdc8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd30:	021b      	lsls	r3, r3, #8
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	f003 0301 	and.w	r3, r3, #1
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d002      	beq.n	800bd48 <get_fat+0xba>
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	091b      	lsrs	r3, r3, #4
 800bd46:	e002      	b.n	800bd4e <get_fat+0xc0>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd4e:	617b      	str	r3, [r7, #20]
			break;
 800bd50:	e03f      	b.n	800bdd2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	6a1a      	ldr	r2, [r3, #32]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	0a1b      	lsrs	r3, r3, #8
 800bd5a:	4413      	add	r3, r2
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6938      	ldr	r0, [r7, #16]
 800bd60:	f7ff feda 	bl	800bb18 <move_window>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d130      	bne.n	800bdcc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bd78:	4413      	add	r3, r2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff fc1a 	bl	800b5b4 <ld_word>
 800bd80:	4603      	mov	r3, r0
 800bd82:	617b      	str	r3, [r7, #20]
			break;
 800bd84:	e025      	b.n	800bdd2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	6a1a      	ldr	r2, [r3, #32]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	09db      	lsrs	r3, r3, #7
 800bd8e:	4413      	add	r3, r2
 800bd90:	4619      	mov	r1, r3
 800bd92:	6938      	ldr	r0, [r7, #16]
 800bd94:	f7ff fec0 	bl	800bb18 <move_window>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d118      	bne.n	800bdd0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bdac:	4413      	add	r3, r2
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff fc19 	bl	800b5e6 <ld_dword>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bdba:	617b      	str	r3, [r7, #20]
			break;
 800bdbc:	e009      	b.n	800bdd2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	e006      	b.n	800bdd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdc4:	bf00      	nop
 800bdc6:	e004      	b.n	800bdd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdc8:	bf00      	nop
 800bdca:	e002      	b.n	800bdd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bdcc:	bf00      	nop
 800bdce:	e000      	b.n	800bdd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bdd0:	bf00      	nop
		}
	}

	return val;
 800bdd2:	697b      	ldr	r3, [r7, #20]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3718      	adds	r7, #24
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bddc:	b590      	push	{r4, r7, lr}
 800bdde:	b089      	sub	sp, #36	@ 0x24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bde8:	2302      	movs	r3, #2
 800bdea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	f240 80d9 	bls.w	800bfa6 <put_fat+0x1ca>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	f080 80d3 	bcs.w	800bfa6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b03      	cmp	r3, #3
 800be06:	f000 8096 	beq.w	800bf36 <put_fat+0x15a>
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	f300 80cb 	bgt.w	800bfa6 <put_fat+0x1ca>
 800be10:	2b01      	cmp	r3, #1
 800be12:	d002      	beq.n	800be1a <put_fat+0x3e>
 800be14:	2b02      	cmp	r3, #2
 800be16:	d06e      	beq.n	800bef6 <put_fat+0x11a>
 800be18:	e0c5      	b.n	800bfa6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	61bb      	str	r3, [r7, #24]
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	085b      	lsrs	r3, r3, #1
 800be22:	69ba      	ldr	r2, [r7, #24]
 800be24:	4413      	add	r3, r2
 800be26:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6a1a      	ldr	r2, [r3, #32]
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	0a5b      	lsrs	r3, r3, #9
 800be30:	4413      	add	r3, r2
 800be32:	4619      	mov	r1, r3
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff fe6f 	bl	800bb18 <move_window>
 800be3a:	4603      	mov	r3, r0
 800be3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be3e:	7ffb      	ldrb	r3, [r7, #31]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f040 80a9 	bne.w	800bf98 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	1c59      	adds	r1, r3, #1
 800be50:	61b9      	str	r1, [r7, #24]
 800be52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be56:	4413      	add	r3, r2
 800be58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00d      	beq.n	800be80 <put_fat+0xa4>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	b25b      	sxtb	r3, r3
 800be6a:	f003 030f 	and.w	r3, r3, #15
 800be6e:	b25a      	sxtb	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	b25b      	sxtb	r3, r3
 800be74:	011b      	lsls	r3, r3, #4
 800be76:	b25b      	sxtb	r3, r3
 800be78:	4313      	orrs	r3, r2
 800be7a:	b25b      	sxtb	r3, r3
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	e001      	b.n	800be84 <put_fat+0xa8>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	b2db      	uxtb	r3, r3
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2201      	movs	r2, #1
 800be8c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6a1a      	ldr	r2, [r3, #32]
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	0a5b      	lsrs	r3, r3, #9
 800be96:	4413      	add	r3, r2
 800be98:	4619      	mov	r1, r3
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff fe3c 	bl	800bb18 <move_window>
 800bea0:	4603      	mov	r3, r0
 800bea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bea4:	7ffb      	ldrb	r3, [r7, #31]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d178      	bne.n	800bf9c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beb6:	4413      	add	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <put_fat+0xf0>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	091b      	lsrs	r3, r3, #4
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	e00e      	b.n	800beea <put_fat+0x10e>
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	b25b      	sxtb	r3, r3
 800bed2:	f023 030f 	bic.w	r3, r3, #15
 800bed6:	b25a      	sxtb	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	0a1b      	lsrs	r3, r3, #8
 800bedc:	b25b      	sxtb	r3, r3
 800bede:	f003 030f 	and.w	r3, r3, #15
 800bee2:	b25b      	sxtb	r3, r3
 800bee4:	4313      	orrs	r3, r2
 800bee6:	b25b      	sxtb	r3, r3
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	70da      	strb	r2, [r3, #3]
			break;
 800bef4:	e057      	b.n	800bfa6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6a1a      	ldr	r2, [r3, #32]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	0a1b      	lsrs	r3, r3, #8
 800befe:	4413      	add	r3, r2
 800bf00:	4619      	mov	r1, r3
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff fe08 	bl	800bb18 <move_window>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf0c:	7ffb      	ldrb	r3, [r7, #31]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d146      	bne.n	800bfa0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	005b      	lsls	r3, r3, #1
 800bf1c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bf20:	4413      	add	r3, r2
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	b292      	uxth	r2, r2
 800bf26:	4611      	mov	r1, r2
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff fb7f 	bl	800b62c <st_word>
			fs->wflag = 1;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	70da      	strb	r2, [r3, #3]
			break;
 800bf34:	e037      	b.n	800bfa6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a1a      	ldr	r2, [r3, #32]
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	09db      	lsrs	r3, r3, #7
 800bf3e:	4413      	add	r3, r2
 800bf40:	4619      	mov	r1, r3
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f7ff fde8 	bl	800bb18 <move_window>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf4c:	7ffb      	ldrb	r3, [r7, #31]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d128      	bne.n	800bfa4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf66:	4413      	add	r3, r2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff fb3c 	bl	800b5e6 <ld_dword>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bf74:	4323      	orrs	r3, r4
 800bf76:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf86:	4413      	add	r3, r2
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff fb69 	bl	800b662 <st_dword>
			fs->wflag = 1;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	70da      	strb	r2, [r3, #3]
			break;
 800bf96:	e006      	b.n	800bfa6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf98:	bf00      	nop
 800bf9a:	e004      	b.n	800bfa6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf9c:	bf00      	nop
 800bf9e:	e002      	b.n	800bfa6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfa0:	bf00      	nop
 800bfa2:	e000      	b.n	800bfa6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfa4:	bf00      	nop
		}
	}
	return res;
 800bfa6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3724      	adds	r7, #36	@ 0x24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd90      	pop	{r4, r7, pc}

0800bfb0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b088      	sub	sp, #32
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d904      	bls.n	800bfd6 <remove_chain+0x26>
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d301      	bcc.n	800bfda <remove_chain+0x2a>
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	e04b      	b.n	800c072 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00c      	beq.n	800bffa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bfe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	69b8      	ldr	r0, [r7, #24]
 800bfe8:	f7ff fef8 	bl	800bddc <put_fat>
 800bfec:	4603      	mov	r3, r0
 800bfee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bff0:	7ffb      	ldrb	r3, [r7, #31]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <remove_chain+0x4a>
 800bff6:	7ffb      	ldrb	r3, [r7, #31]
 800bff8:	e03b      	b.n	800c072 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff fe46 	bl	800bc8e <get_fat>
 800c002:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d031      	beq.n	800c06e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d101      	bne.n	800c014 <remove_chain+0x64>
 800c010:	2302      	movs	r3, #2
 800c012:	e02e      	b.n	800c072 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c01a:	d101      	bne.n	800c020 <remove_chain+0x70>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e028      	b.n	800c072 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c020:	2200      	movs	r2, #0
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	69b8      	ldr	r0, [r7, #24]
 800c026:	f7ff fed9 	bl	800bddc <put_fat>
 800c02a:	4603      	mov	r3, r0
 800c02c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <remove_chain+0x88>
 800c034:	7ffb      	ldrb	r3, [r7, #31]
 800c036:	e01c      	b.n	800c072 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	691a      	ldr	r2, [r3, #16]
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	695b      	ldr	r3, [r3, #20]
 800c040:	3b02      	subs	r3, #2
 800c042:	429a      	cmp	r2, r3
 800c044:	d20b      	bcs.n	800c05e <remove_chain+0xae>
			fs->free_clst++;
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	1c5a      	adds	r2, r3, #1
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	791b      	ldrb	r3, [r3, #4]
 800c054:	f043 0301 	orr.w	r3, r3, #1
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d3c6      	bcc.n	800bffa <remove_chain+0x4a>
 800c06c:	e000      	b.n	800c070 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c06e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3720      	adds	r7, #32
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b088      	sub	sp, #32
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10d      	bne.n	800c0ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <create_chain+0x2c>
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	69ba      	ldr	r2, [r7, #24]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d31b      	bcc.n	800c0de <create_chain+0x64>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	61bb      	str	r3, [r7, #24]
 800c0aa:	e018      	b.n	800c0de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7ff fded 	bl	800bc8e <get_fat>
 800c0b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d801      	bhi.n	800c0c0 <create_chain+0x46>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e070      	b.n	800c1a2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0c6:	d101      	bne.n	800c0cc <create_chain+0x52>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	e06a      	b.n	800c1a2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d201      	bcs.n	800c0da <create_chain+0x60>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	e063      	b.n	800c1a2 <create_chain+0x128>
		scl = clst;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	69fa      	ldr	r2, [r7, #28]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d307      	bcc.n	800c102 <create_chain+0x88>
				ncl = 2;
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c0f6:	69fa      	ldr	r2, [r7, #28]
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d901      	bls.n	800c102 <create_chain+0x88>
 800c0fe:	2300      	movs	r3, #0
 800c100:	e04f      	b.n	800c1a2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c102:	69f9      	ldr	r1, [r7, #28]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7ff fdc2 	bl	800bc8e <get_fat>
 800c10a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00e      	beq.n	800c130 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d003      	beq.n	800c120 <create_chain+0xa6>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c11e:	d101      	bne.n	800c124 <create_chain+0xaa>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	e03e      	b.n	800c1a2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c124:	69fa      	ldr	r2, [r7, #28]
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d1da      	bne.n	800c0e2 <create_chain+0x68>
 800c12c:	2300      	movs	r3, #0
 800c12e:	e038      	b.n	800c1a2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c130:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c132:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c136:	69f9      	ldr	r1, [r7, #28]
 800c138:	6938      	ldr	r0, [r7, #16]
 800c13a:	f7ff fe4f 	bl	800bddc <put_fat>
 800c13e:	4603      	mov	r3, r0
 800c140:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c142:	7dfb      	ldrb	r3, [r7, #23]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d109      	bne.n	800c15c <create_chain+0xe2>
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d006      	beq.n	800c15c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c14e:	69fa      	ldr	r2, [r7, #28]
 800c150:	6839      	ldr	r1, [r7, #0]
 800c152:	6938      	ldr	r0, [r7, #16]
 800c154:	f7ff fe42 	bl	800bddc <put_fat>
 800c158:	4603      	mov	r3, r0
 800c15a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c15c:	7dfb      	ldrb	r3, [r7, #23]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d116      	bne.n	800c190 <create_chain+0x116>
		fs->last_clst = ncl;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	69fa      	ldr	r2, [r7, #28]
 800c166:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	691a      	ldr	r2, [r3, #16]
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	3b02      	subs	r3, #2
 800c172:	429a      	cmp	r2, r3
 800c174:	d804      	bhi.n	800c180 <create_chain+0x106>
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	1e5a      	subs	r2, r3, #1
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	791b      	ldrb	r3, [r3, #4]
 800c184:	f043 0301 	orr.w	r3, r3, #1
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	711a      	strb	r2, [r3, #4]
 800c18e:	e007      	b.n	800c1a0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d102      	bne.n	800c19c <create_chain+0x122>
 800c196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c19a:	e000      	b.n	800c19e <create_chain+0x124>
 800c19c:	2301      	movs	r3, #1
 800c19e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c1a0:	69fb      	ldr	r3, [r7, #28]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3720      	adds	r7, #32
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b087      	sub	sp, #28
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1be:	3304      	adds	r3, #4
 800c1c0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	0a5b      	lsrs	r3, r3, #9
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	8952      	ldrh	r2, [r2, #10]
 800c1ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	1d1a      	adds	r2, r3, #4
 800c1d4:	613a      	str	r2, [r7, #16]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <clmt_clust+0x3a>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e010      	b.n	800c206 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d307      	bcc.n	800c1fc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	617b      	str	r3, [r7, #20]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1fa:	e7e9      	b.n	800c1d0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c1fc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	4413      	add	r3, r2
}
 800c206:	4618      	mov	r0, r3
 800c208:	371c      	adds	r7, #28
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b086      	sub	sp, #24
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c228:	d204      	bcs.n	800c234 <dir_sdi+0x22>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	f003 031f 	and.w	r3, r3, #31
 800c230:	2b00      	cmp	r3, #0
 800c232:	d001      	beq.n	800c238 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c234:	2302      	movs	r3, #2
 800c236:	e063      	b.n	800c300 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d106      	bne.n	800c258 <dir_sdi+0x46>
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d902      	bls.n	800c258 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c256:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10c      	bne.n	800c278 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	095b      	lsrs	r3, r3, #5
 800c262:	693a      	ldr	r2, [r7, #16]
 800c264:	8912      	ldrh	r2, [r2, #8]
 800c266:	4293      	cmp	r3, r2
 800c268:	d301      	bcc.n	800c26e <dir_sdi+0x5c>
 800c26a:	2302      	movs	r3, #2
 800c26c:	e048      	b.n	800c300 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	61da      	str	r2, [r3, #28]
 800c276:	e029      	b.n	800c2cc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	895b      	ldrh	r3, [r3, #10]
 800c27c:	025b      	lsls	r3, r3, #9
 800c27e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c280:	e019      	b.n	800c2b6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6979      	ldr	r1, [r7, #20]
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff fd01 	bl	800bc8e <get_fat>
 800c28c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c294:	d101      	bne.n	800c29a <dir_sdi+0x88>
 800c296:	2301      	movs	r3, #1
 800c298:	e032      	b.n	800c300 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d904      	bls.n	800c2aa <dir_sdi+0x98>
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d301      	bcc.n	800c2ae <dir_sdi+0x9c>
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	e028      	b.n	800c300 <dir_sdi+0xee>
			ofs -= csz;
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d2e1      	bcs.n	800c282 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c2be:	6979      	ldr	r1, [r7, #20]
 800c2c0:	6938      	ldr	r0, [r7, #16]
 800c2c2:	f7ff fcc5 	bl	800bc50 <clust2sect>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <dir_sdi+0xcc>
 800c2da:	2302      	movs	r3, #2
 800c2dc:	e010      	b.n	800c300 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	69da      	ldr	r2, [r3, #28]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	0a5b      	lsrs	r3, r3, #9
 800c2e6:	441a      	add	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f8:	441a      	add	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	695b      	ldr	r3, [r3, #20]
 800c31c:	3320      	adds	r3, #32
 800c31e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	69db      	ldr	r3, [r3, #28]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d003      	beq.n	800c330 <dir_next+0x28>
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c32e:	d301      	bcc.n	800c334 <dir_next+0x2c>
 800c330:	2304      	movs	r3, #4
 800c332:	e0aa      	b.n	800c48a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f040 8098 	bne.w	800c470 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	1c5a      	adds	r2, r3, #1
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10b      	bne.n	800c36a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	095b      	lsrs	r3, r3, #5
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	8912      	ldrh	r2, [r2, #8]
 800c35a:	4293      	cmp	r3, r2
 800c35c:	f0c0 8088 	bcc.w	800c470 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	61da      	str	r2, [r3, #28]
 800c366:	2304      	movs	r3, #4
 800c368:	e08f      	b.n	800c48a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	0a5b      	lsrs	r3, r3, #9
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	8952      	ldrh	r2, [r2, #10]
 800c372:	3a01      	subs	r2, #1
 800c374:	4013      	ands	r3, r2
 800c376:	2b00      	cmp	r3, #0
 800c378:	d17a      	bne.n	800c470 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	4619      	mov	r1, r3
 800c382:	4610      	mov	r0, r2
 800c384:	f7ff fc83 	bl	800bc8e <get_fat>
 800c388:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d801      	bhi.n	800c394 <dir_next+0x8c>
 800c390:	2302      	movs	r3, #2
 800c392:	e07a      	b.n	800c48a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c39a:	d101      	bne.n	800c3a0 <dir_next+0x98>
 800c39c:	2301      	movs	r3, #1
 800c39e:	e074      	b.n	800c48a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d358      	bcc.n	800c45c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d104      	bne.n	800c3ba <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	61da      	str	r2, [r3, #28]
 800c3b6:	2304      	movs	r3, #4
 800c3b8:	e067      	b.n	800c48a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	f7ff fe59 	bl	800c07a <create_chain>
 800c3c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <dir_next+0xcc>
 800c3d0:	2307      	movs	r3, #7
 800c3d2:	e05a      	b.n	800c48a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d101      	bne.n	800c3de <dir_next+0xd6>
 800c3da:	2302      	movs	r3, #2
 800c3dc:	e055      	b.n	800c48a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3e4:	d101      	bne.n	800c3ea <dir_next+0xe2>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e04f      	b.n	800c48a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f7ff fb50 	bl	800ba90 <sync_window>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <dir_next+0xf2>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e047      	b.n	800c48a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3330      	adds	r3, #48	@ 0x30
 800c3fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c402:	2100      	movs	r1, #0
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff f979 	bl	800b6fc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c40a:	2300      	movs	r3, #0
 800c40c:	613b      	str	r3, [r7, #16]
 800c40e:	6979      	ldr	r1, [r7, #20]
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7ff fc1d 	bl	800bc50 <clust2sect>
 800c416:	4602      	mov	r2, r0
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c41c:	e012      	b.n	800c444 <dir_next+0x13c>
						fs->wflag = 1;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f7ff fb33 	bl	800ba90 <sync_window>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <dir_next+0x12c>
 800c430:	2301      	movs	r3, #1
 800c432:	e02a      	b.n	800c48a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	3301      	adds	r3, #1
 800c438:	613b      	str	r3, [r7, #16]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	895b      	ldrh	r3, [r3, #10]
 800c448:	461a      	mov	r2, r3
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d3e6      	bcc.n	800c41e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	1ad2      	subs	r2, r2, r3
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c462:	6979      	ldr	r1, [r7, #20]
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fbf3 	bl	800bc50 <clust2sect>
 800c46a:	4602      	mov	r2, r0
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c482:	441a      	add	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3718      	adds	r7, #24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b086      	sub	sp, #24
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff feb4 	bl	800c212 <dir_sdi>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d12b      	bne.n	800c50c <dir_alloc+0x7a>
		n = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7ff fb2a 	bl	800bb18 <move_window>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d11d      	bne.n	800c50a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2be5      	cmp	r3, #229	@ 0xe5
 800c4d6:	d004      	beq.n	800c4e2 <dir_alloc+0x50>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a1b      	ldr	r3, [r3, #32]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d107      	bne.n	800c4f2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	613b      	str	r3, [r7, #16]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d102      	bne.n	800c4f6 <dir_alloc+0x64>
 800c4f0:	e00c      	b.n	800c50c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7ff ff05 	bl	800c308 <dir_next>
 800c4fe:	4603      	mov	r3, r0
 800c500:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d0d7      	beq.n	800c4b8 <dir_alloc+0x26>
 800c508:	e000      	b.n	800c50c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c50a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d101      	bne.n	800c516 <dir_alloc+0x84>
 800c512:	2307      	movs	r3, #7
 800c514:	75fb      	strb	r3, [r7, #23]
	return res;
 800c516:	7dfb      	ldrb	r3, [r7, #23]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	331a      	adds	r3, #26
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff f840 	bl	800b5b4 <ld_word>
 800c534:	4603      	mov	r3, r0
 800c536:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d109      	bne.n	800c554 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	3314      	adds	r3, #20
 800c544:	4618      	mov	r0, r3
 800c546:	f7ff f835 	bl	800b5b4 <ld_word>
 800c54a:	4603      	mov	r3, r0
 800c54c:	041b      	lsls	r3, r3, #16
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	4313      	orrs	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c554:	68fb      	ldr	r3, [r7, #12]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	331a      	adds	r3, #26
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	b292      	uxth	r2, r2
 800c572:	4611      	mov	r1, r2
 800c574:	4618      	mov	r0, r3
 800c576:	f7ff f859 	bl	800b62c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d109      	bne.n	800c596 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	f103 0214 	add.w	r2, r3, #20
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	0c1b      	lsrs	r3, r3, #16
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	4619      	mov	r1, r3
 800c590:	4610      	mov	r0, r2
 800c592:	f7ff f84b 	bl	800b62c <st_word>
	}
}
 800c596:	bf00      	nop
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b086      	sub	sp, #24
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fe2f 	bl	800c212 <dir_sdi>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <dir_find+0x24>
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	e03e      	b.n	800c640 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	69db      	ldr	r3, [r3, #28]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6938      	ldr	r0, [r7, #16]
 800c5ca:	f7ff faa5 	bl	800bb18 <move_window>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c5d2:	7dfb      	ldrb	r3, [r7, #23]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d12f      	bne.n	800c638 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a1b      	ldr	r3, [r3, #32]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d102      	bne.n	800c5ec <dir_find+0x4e>
 800c5e6:	2304      	movs	r3, #4
 800c5e8:	75fb      	strb	r3, [r7, #23]
 800c5ea:	e028      	b.n	800c63e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	330b      	adds	r3, #11
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	330b      	adds	r3, #11
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	f003 0308 	and.w	r3, r3, #8
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <dir_find+0x86>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a18      	ldr	r0, [r3, #32]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3324      	adds	r3, #36	@ 0x24
 800c616:	220b      	movs	r2, #11
 800c618:	4619      	mov	r1, r3
 800c61a:	f7ff f88a 	bl	800b732 <mem_cmp>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00b      	beq.n	800c63c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c624:	2100      	movs	r1, #0
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff fe6e 	bl	800c308 <dir_next>
 800c62c:	4603      	mov	r3, r0
 800c62e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c630:	7dfb      	ldrb	r3, [r7, #23]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0c5      	beq.n	800c5c2 <dir_find+0x24>
 800c636:	e002      	b.n	800c63e <dir_find+0xa0>
		if (res != FR_OK) break;
 800c638:	bf00      	nop
 800c63a:	e000      	b.n	800c63e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c63c:	bf00      	nop

	return res;
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3718      	adds	r7, #24
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c656:	2101      	movs	r1, #1
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ff1a 	bl	800c492 <dir_alloc>
 800c65e:	4603      	mov	r3, r0
 800c660:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c662:	7bfb      	ldrb	r3, [r7, #15]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d11c      	bne.n	800c6a2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	69db      	ldr	r3, [r3, #28]
 800c66c:	4619      	mov	r1, r3
 800c66e:	68b8      	ldr	r0, [r7, #8]
 800c670:	f7ff fa52 	bl	800bb18 <move_window>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d111      	bne.n	800c6a2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a1b      	ldr	r3, [r3, #32]
 800c682:	2220      	movs	r2, #32
 800c684:	2100      	movs	r1, #0
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff f838 	bl	800b6fc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a18      	ldr	r0, [r3, #32]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3324      	adds	r3, #36	@ 0x24
 800c694:	220b      	movs	r2, #11
 800c696:	4619      	mov	r1, r3
 800c698:	f7ff f80f 	bl	800b6ba <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3324      	adds	r3, #36	@ 0x24
 800c6c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c6c2:	220b      	movs	r2, #11
 800c6c4:	2120      	movs	r1, #32
 800c6c6:	68b8      	ldr	r0, [r7, #8]
 800c6c8:	f7ff f818 	bl	800b6fc <mem_set>
	si = i = 0; ni = 8;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	613b      	str	r3, [r7, #16]
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	61fb      	str	r3, [r7, #28]
 800c6d4:	2308      	movs	r3, #8
 800c6d6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	61fa      	str	r2, [r7, #28]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6e6:	7efb      	ldrb	r3, [r7, #27]
 800c6e8:	2b20      	cmp	r3, #32
 800c6ea:	d94e      	bls.n	800c78a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c6ec:	7efb      	ldrb	r3, [r7, #27]
 800c6ee:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6f0:	d006      	beq.n	800c700 <create_name+0x54>
 800c6f2:	7efb      	ldrb	r3, [r7, #27]
 800c6f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c6f6:	d110      	bne.n	800c71a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c6f8:	e002      	b.n	800c700 <create_name+0x54>
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	61fb      	str	r3, [r7, #28]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	4413      	add	r3, r2
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2b2f      	cmp	r3, #47	@ 0x2f
 800c70a:	d0f6      	beq.n	800c6fa <create_name+0x4e>
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	4413      	add	r3, r2
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b5c      	cmp	r3, #92	@ 0x5c
 800c716:	d0f0      	beq.n	800c6fa <create_name+0x4e>
			break;
 800c718:	e038      	b.n	800c78c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c71a:	7efb      	ldrb	r3, [r7, #27]
 800c71c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c71e:	d003      	beq.n	800c728 <create_name+0x7c>
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	429a      	cmp	r2, r3
 800c726:	d30c      	bcc.n	800c742 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2b0b      	cmp	r3, #11
 800c72c:	d002      	beq.n	800c734 <create_name+0x88>
 800c72e:	7efb      	ldrb	r3, [r7, #27]
 800c730:	2b2e      	cmp	r3, #46	@ 0x2e
 800c732:	d001      	beq.n	800c738 <create_name+0x8c>
 800c734:	2306      	movs	r3, #6
 800c736:	e044      	b.n	800c7c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c738:	2308      	movs	r3, #8
 800c73a:	613b      	str	r3, [r7, #16]
 800c73c:	230b      	movs	r3, #11
 800c73e:	617b      	str	r3, [r7, #20]
			continue;
 800c740:	e022      	b.n	800c788 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c742:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c746:	2b00      	cmp	r3, #0
 800c748:	da04      	bge.n	800c754 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c74a:	7efb      	ldrb	r3, [r7, #27]
 800c74c:	3b80      	subs	r3, #128	@ 0x80
 800c74e:	4a1f      	ldr	r2, [pc, #124]	@ (800c7cc <create_name+0x120>)
 800c750:	5cd3      	ldrb	r3, [r2, r3]
 800c752:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c754:	7efb      	ldrb	r3, [r7, #27]
 800c756:	4619      	mov	r1, r3
 800c758:	481d      	ldr	r0, [pc, #116]	@ (800c7d0 <create_name+0x124>)
 800c75a:	f7ff f811 	bl	800b780 <chk_chr>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <create_name+0xbc>
 800c764:	2306      	movs	r3, #6
 800c766:	e02c      	b.n	800c7c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c768:	7efb      	ldrb	r3, [r7, #27]
 800c76a:	2b60      	cmp	r3, #96	@ 0x60
 800c76c:	d905      	bls.n	800c77a <create_name+0xce>
 800c76e:	7efb      	ldrb	r3, [r7, #27]
 800c770:	2b7a      	cmp	r3, #122	@ 0x7a
 800c772:	d802      	bhi.n	800c77a <create_name+0xce>
 800c774:	7efb      	ldrb	r3, [r7, #27]
 800c776:	3b20      	subs	r3, #32
 800c778:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	613a      	str	r2, [r7, #16]
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	4413      	add	r3, r2
 800c784:	7efa      	ldrb	r2, [r7, #27]
 800c786:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c788:	e7a6      	b.n	800c6d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c78a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	441a      	add	r2, r3
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <create_name+0xf4>
 800c79c:	2306      	movs	r3, #6
 800c79e:	e010      	b.n	800c7c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2be5      	cmp	r3, #229	@ 0xe5
 800c7a6:	d102      	bne.n	800c7ae <create_name+0x102>
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2205      	movs	r2, #5
 800c7ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c7ae:	7efb      	ldrb	r3, [r7, #27]
 800c7b0:	2b20      	cmp	r3, #32
 800c7b2:	d801      	bhi.n	800c7b8 <create_name+0x10c>
 800c7b4:	2204      	movs	r2, #4
 800c7b6:	e000      	b.n	800c7ba <create_name+0x10e>
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	330b      	adds	r3, #11
 800c7be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c7c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	0800e394 	.word	0x0800e394
 800c7d0:	0800e260 	.word	0x0800e260

0800c7d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c7e8:	e002      	b.n	800c7f0 <follow_path+0x1c>
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7f6:	d0f8      	beq.n	800c7ea <follow_path+0x16>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2b5c      	cmp	r3, #92	@ 0x5c
 800c7fe:	d0f4      	beq.n	800c7ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	2200      	movs	r2, #0
 800c804:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	2b1f      	cmp	r3, #31
 800c80c:	d80a      	bhi.n	800c824 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2280      	movs	r2, #128	@ 0x80
 800c812:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c816:	2100      	movs	r1, #0
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff fcfa 	bl	800c212 <dir_sdi>
 800c81e:	4603      	mov	r3, r0
 800c820:	75fb      	strb	r3, [r7, #23]
 800c822:	e043      	b.n	800c8ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c824:	463b      	mov	r3, r7
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff3f 	bl	800c6ac <create_name>
 800c82e:	4603      	mov	r3, r0
 800c830:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d134      	bne.n	800c8a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7ff feb0 	bl	800c59e <dir_find>
 800c83e:	4603      	mov	r3, r0
 800c840:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c848:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00a      	beq.n	800c866 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	2b04      	cmp	r3, #4
 800c854:	d127      	bne.n	800c8a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c856:	7afb      	ldrb	r3, [r7, #11]
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d122      	bne.n	800c8a6 <follow_path+0xd2>
 800c860:	2305      	movs	r3, #5
 800c862:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c864:	e01f      	b.n	800c8a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c866:	7afb      	ldrb	r3, [r7, #11]
 800c868:	f003 0304 	and.w	r3, r3, #4
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d11c      	bne.n	800c8aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	799b      	ldrb	r3, [r3, #6]
 800c874:	f003 0310 	and.w	r3, r3, #16
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c87c:	2305      	movs	r3, #5
 800c87e:	75fb      	strb	r3, [r7, #23]
 800c880:	e014      	b.n	800c8ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	695b      	ldr	r3, [r3, #20]
 800c88c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c890:	4413      	add	r3, r2
 800c892:	4619      	mov	r1, r3
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f7ff fe43 	bl	800c520 <ld_clust>
 800c89a:	4602      	mov	r2, r0
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8a0:	e7c0      	b.n	800c824 <follow_path+0x50>
			if (res != FR_OK) break;
 800c8a2:	bf00      	nop
 800c8a4:	e002      	b.n	800c8ac <follow_path+0xd8>
				break;
 800c8a6:	bf00      	nop
 800c8a8:	e000      	b.n	800c8ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c8aa:	bf00      	nop
			}
		}
	}

	return res;
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3718      	adds	r7, #24
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b087      	sub	sp, #28
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d031      	beq.n	800c930 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	e002      	b.n	800c8da <get_ldnumber+0x24>
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	617b      	str	r3, [r7, #20]
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b20      	cmp	r3, #32
 800c8e0:	d903      	bls.n	800c8ea <get_ldnumber+0x34>
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8e8:	d1f4      	bne.n	800c8d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8f0:	d11c      	bne.n	800c92c <get_ldnumber+0x76>
			tp = *path;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	60fa      	str	r2, [r7, #12]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	3b30      	subs	r3, #48	@ 0x30
 800c902:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b09      	cmp	r3, #9
 800c908:	d80e      	bhi.n	800c928 <get_ldnumber+0x72>
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d10a      	bne.n	800c928 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d107      	bne.n	800c928 <get_ldnumber+0x72>
					vol = (int)i;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	3301      	adds	r3, #1
 800c920:	617b      	str	r3, [r7, #20]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	e002      	b.n	800c932 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c92c:	2300      	movs	r3, #0
 800c92e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c930:	693b      	ldr	r3, [r7, #16]
}
 800c932:	4618      	mov	r0, r3
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
	...

0800c940 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	70da      	strb	r2, [r3, #3]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c956:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff f8dc 	bl	800bb18 <move_window>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <check_fs+0x2a>
 800c966:	2304      	movs	r3, #4
 800c968:	e038      	b.n	800c9dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3330      	adds	r3, #48	@ 0x30
 800c96e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe fe1e 	bl	800b5b4 <ld_word>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c980:	429a      	cmp	r2, r3
 800c982:	d001      	beq.n	800c988 <check_fs+0x48>
 800c984:	2303      	movs	r3, #3
 800c986:	e029      	b.n	800c9dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c98e:	2be9      	cmp	r3, #233	@ 0xe9
 800c990:	d009      	beq.n	800c9a6 <check_fs+0x66>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c998:	2beb      	cmp	r3, #235	@ 0xeb
 800c99a:	d11e      	bne.n	800c9da <check_fs+0x9a>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c9a2:	2b90      	cmp	r3, #144	@ 0x90
 800c9a4:	d119      	bne.n	800c9da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3330      	adds	r3, #48	@ 0x30
 800c9aa:	3336      	adds	r3, #54	@ 0x36
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fe fe1a 	bl	800b5e6 <ld_dword>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c9b8:	4a0a      	ldr	r2, [pc, #40]	@ (800c9e4 <check_fs+0xa4>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d101      	bne.n	800c9c2 <check_fs+0x82>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e00c      	b.n	800c9dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3330      	adds	r3, #48	@ 0x30
 800c9c6:	3352      	adds	r3, #82	@ 0x52
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fe0c 	bl	800b5e6 <ld_dword>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4a05      	ldr	r2, [pc, #20]	@ (800c9e8 <check_fs+0xa8>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d101      	bne.n	800c9da <check_fs+0x9a>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	e000      	b.n	800c9dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c9da:	2302      	movs	r3, #2
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	00544146 	.word	0x00544146
 800c9e8:	33544146 	.word	0x33544146

0800c9ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b096      	sub	sp, #88	@ 0x58
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	FATFS *fs;
	UINT i;

	/* Get logical drive number */
	*rfs = 0;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f7ff ff58 	bl	800c8b6 <get_ldnumber>
 800ca06:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	da01      	bge.n	800ca12 <find_volume+0x26>
 800ca0e:	230b      	movs	r3, #11
 800ca10:	e237      	b.n	800ce82 <find_volume+0x496>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ca12:	4aa6      	ldr	r2, [pc, #664]	@ (800ccac <find_volume+0x2c0>)
 800ca14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <find_volume+0x3a>
 800ca22:	230c      	movs	r3, #12
 800ca24:	e22d      	b.n	800ce82 <find_volume+0x496>


	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca2a:	601a      	str	r2, [r3, #0]


	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	f023 0301 	bic.w	r3, r3, #1
 800ca32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01a      	beq.n	800ca72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3e:	785b      	ldrb	r3, [r3, #1]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fe fd17 	bl	800b474 <disk_status>
 800ca46:	4603      	mov	r3, r0
 800ca48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca50:	f003 0301 	and.w	r3, r3, #1
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10c      	bne.n	800ca72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca58:	79fb      	ldrb	r3, [r7, #7]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d007      	beq.n	800ca6e <find_volume+0x82>
 800ca5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca62:	f003 0304 	and.w	r3, r3, #4
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ca6a:	230a      	movs	r3, #10
 800ca6c:	e209      	b.n	800ce82 <find_volume+0x496>
			}
			return FR_OK;				/* The file system object is valid */
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e207      	b.n	800ce82 <find_volume+0x496>


	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca74:	2200      	movs	r2, #0
 800ca76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7e:	705a      	strb	r2, [r3, #1]
	/* DISK TEST START */
	FRESULT fResult = disk_read(0, fs->win, 0, 1);
 800ca80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca86:	2301      	movs	r3, #1
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	f7fe fd34 	bl	800b4f8 <disk_read>
 800ca90:	4603      	mov	r3, r0
 800ca92:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	/* DISK TEST END */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca98:	785b      	ldrb	r3, [r3, #1]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fd04 	bl	800b4a8 <disk_initialize>
 800caa0:	4603      	mov	r3, r0
 800caa2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800caa6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <find_volume+0xca>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cab2:	2303      	movs	r3, #3
 800cab4:	e1e5      	b.n	800ce82 <find_volume+0x496>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d007      	beq.n	800cacc <find_volume+0xe0>
 800cabc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cac0:	f003 0304 	and.w	r3, r3, #4
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <find_volume+0xe0>
		return FR_WRITE_PROTECTED;
 800cac8:	230a      	movs	r3, #10
 800caca:	e1da      	b.n	800ce82 <find_volume+0x496>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	653b      	str	r3, [r7, #80]	@ 0x50


	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cad0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cad2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cad4:	f7ff ff34 	bl	800c940 <check_fs>
 800cad8:	4603      	mov	r3, r0
 800cada:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cade:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d149      	bne.n	800cb7a <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cae6:	2300      	movs	r3, #0
 800cae8:	643b      	str	r3, [r7, #64]	@ 0x40
 800caea:	e01e      	b.n	800cb2a <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800caec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800caf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caf4:	011b      	lsls	r3, r3, #4
 800caf6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cafa:	4413      	add	r3, r2
 800cafc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb00:	3304      	adds	r3, #4
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <find_volume+0x12a>
 800cb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0a:	3308      	adds	r3, #8
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fe fd6a 	bl	800b5e6 <ld_dword>
 800cb12:	4602      	mov	r2, r0
 800cb14:	e000      	b.n	800cb18 <find_volume+0x12c>
 800cb16:	2200      	movs	r2, #0
 800cb18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	3358      	adds	r3, #88	@ 0x58
 800cb1e:	443b      	add	r3, r7
 800cb20:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb26:	3301      	adds	r3, #1
 800cb28:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d9dd      	bls.n	800caec <find_volume+0x100>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb30:	2300      	movs	r3, #0
 800cb32:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cb34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <find_volume+0x154>
 800cb3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	3358      	adds	r3, #88	@ 0x58
 800cb46:	443b      	add	r3, r7
 800cb48:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb4c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <find_volume+0x174>
 800cb54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb58:	f7ff fef2 	bl	800c940 <check_fs>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	e000      	b.n	800cb62 <find_volume+0x176>
 800cb60:	2303      	movs	r3, #3
 800cb62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d905      	bls.n	800cb7a <find_volume+0x18e>
 800cb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb70:	3301      	adds	r3, #1
 800cb72:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d9e2      	bls.n	800cb40 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb7e:	2b04      	cmp	r3, #4
 800cb80:	d101      	bne.n	800cb86 <find_volume+0x19a>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e17d      	b.n	800ce82 <find_volume+0x496>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d901      	bls.n	800cb92 <find_volume+0x1a6>
 800cb8e:	230d      	movs	r3, #13
 800cb90:	e177      	b.n	800ce82 <find_volume+0x496>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb94:	3330      	adds	r3, #48	@ 0x30
 800cb96:	330b      	adds	r3, #11
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fe fd0b 	bl	800b5b4 <ld_word>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cba4:	d001      	beq.n	800cbaa <find_volume+0x1be>
 800cba6:	230d      	movs	r3, #13
 800cba8:	e16b      	b.n	800ce82 <find_volume+0x496>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbac:	3330      	adds	r3, #48	@ 0x30
 800cbae:	3316      	adds	r3, #22
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe fcff 	bl	800b5b4 <ld_word>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d106      	bne.n	800cbce <find_volume+0x1e2>
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc2:	3330      	adds	r3, #48	@ 0x30
 800cbc4:	3324      	adds	r3, #36	@ 0x24
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe fd0d 	bl	800b5e6 <ld_dword>
 800cbcc:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbd2:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd6:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbdc:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe0:	789b      	ldrb	r3, [r3, #2]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d005      	beq.n	800cbf2 <find_volume+0x206>
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe8:	789b      	ldrb	r3, [r3, #2]
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d001      	beq.n	800cbf2 <find_volume+0x206>
 800cbee:	230d      	movs	r3, #13
 800cbf0:	e147      	b.n	800ce82 <find_volume+0x496>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf4:	789b      	ldrb	r3, [r3, #2]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfa:	fb02 f303 	mul.w	r3, r2, r3
 800cbfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc06:	461a      	mov	r2, r3
 800cc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0e:	895b      	ldrh	r3, [r3, #10]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d008      	beq.n	800cc26 <find_volume+0x23a>
 800cc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc16:	895b      	ldrh	r3, [r3, #10]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1c:	895b      	ldrh	r3, [r3, #10]
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	4013      	ands	r3, r2
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <find_volume+0x23e>
 800cc26:	230d      	movs	r3, #13
 800cc28:	e12b      	b.n	800ce82 <find_volume+0x496>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2c:	3330      	adds	r3, #48	@ 0x30
 800cc2e:	3311      	adds	r3, #17
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe fcbf 	bl	800b5b4 <ld_word>
 800cc36:	4603      	mov	r3, r0
 800cc38:	461a      	mov	r2, r3
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc40:	891b      	ldrh	r3, [r3, #8]
 800cc42:	f003 030f 	and.w	r3, r3, #15
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <find_volume+0x264>
 800cc4c:	230d      	movs	r3, #13
 800cc4e:	e118      	b.n	800ce82 <find_volume+0x496>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc52:	3330      	adds	r3, #48	@ 0x30
 800cc54:	3313      	adds	r3, #19
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fe fcac 	bl	800b5b4 <ld_word>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d106      	bne.n	800cc74 <find_volume+0x288>
 800cc66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc68:	3330      	adds	r3, #48	@ 0x30
 800cc6a:	3320      	adds	r3, #32
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fe fcba 	bl	800b5e6 <ld_dword>
 800cc72:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc76:	3330      	adds	r3, #48	@ 0x30
 800cc78:	330e      	adds	r3, #14
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fe fc9a 	bl	800b5b4 <ld_word>
 800cc80:	4603      	mov	r3, r0
 800cc82:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <find_volume+0x2a2>
 800cc8a:	230d      	movs	r3, #13
 800cc8c:	e0f9      	b.n	800ce82 <find_volume+0x496>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc8e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc92:	4413      	add	r3, r2
 800cc94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc96:	8912      	ldrh	r2, [r2, #8]
 800cc98:	0912      	lsrs	r2, r2, #4
 800cc9a:	b292      	uxth	r2, r2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d203      	bcs.n	800ccb0 <find_volume+0x2c4>
 800cca8:	230d      	movs	r3, #13
 800ccaa:	e0ea      	b.n	800ce82 <find_volume+0x496>
 800ccac:	20000504 	.word	0x20000504
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccb8:	8952      	ldrh	r2, [r2, #10]
 800ccba:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccbe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <find_volume+0x2de>
 800ccc6:	230d      	movs	r3, #13
 800ccc8:	e0db      	b.n	800ce82 <find_volume+0x496>
		fmt = FS_FAT32;
 800ccca:	2303      	movs	r3, #3
 800cccc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d802      	bhi.n	800cce0 <find_volume+0x2f4>
 800ccda:	2302      	movs	r3, #2
 800ccdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d802      	bhi.n	800ccf0 <find_volume+0x304>
 800ccea:	2301      	movs	r3, #1
 800ccec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf2:	1c9a      	adds	r2, r3, #2
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccfc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ccfe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cd00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd02:	441a      	add	r2, r3
 800cd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd06:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cd08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	441a      	add	r2, r3
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd10:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cd12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	d11e      	bne.n	800cd58 <find_volume+0x36c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1c:	3330      	adds	r3, #48	@ 0x30
 800cd1e:	332a      	adds	r3, #42	@ 0x2a
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe fc47 	bl	800b5b4 <ld_word>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <find_volume+0x344>
 800cd2c:	230d      	movs	r3, #13
 800cd2e:	e0a8      	b.n	800ce82 <find_volume+0x496>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd32:	891b      	ldrh	r3, [r3, #8]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <find_volume+0x350>
 800cd38:	230d      	movs	r3, #13
 800cd3a:	e0a2      	b.n	800ce82 <find_volume+0x496>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3e:	3330      	adds	r3, #48	@ 0x30
 800cd40:	332c      	adds	r3, #44	@ 0x2c
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fe fc4f 	bl	800b5e6 <ld_dword>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd56:	e01f      	b.n	800cd98 <find_volume+0x3ac>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <find_volume+0x378>
 800cd60:	230d      	movs	r3, #13
 800cd62:	e08e      	b.n	800ce82 <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd66:	6a1a      	ldr	r2, [r3, #32]
 800cd68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd6a:	441a      	add	r2, r3
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d103      	bne.n	800cd80 <find_volume+0x394>
 800cd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7a:	695b      	ldr	r3, [r3, #20]
 800cd7c:	005b      	lsls	r3, r3, #1
 800cd7e:	e00a      	b.n	800cd96 <find_volume+0x3aa>
 800cd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd82:	695a      	ldr	r2, [r3, #20]
 800cd84:	4613      	mov	r3, r2
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	4413      	add	r3, r2
 800cd8a:	085a      	lsrs	r2, r3, #1
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8e:	695b      	ldr	r3, [r3, #20]
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd96:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9a:	699a      	ldr	r2, [r3, #24]
 800cd9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd9e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cda2:	0a5b      	lsrs	r3, r3, #9
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d201      	bcs.n	800cdac <find_volume+0x3c0>
 800cda8:	230d      	movs	r3, #13
 800cdaa:	e06a      	b.n	800ce82 <find_volume+0x496>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdb2:	611a      	str	r2, [r3, #16]
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	691a      	ldr	r2, [r3, #16]
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdba:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdbe:	2280      	movs	r2, #128	@ 0x80
 800cdc0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cdc2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d149      	bne.n	800ce5e <find_volume+0x472>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdcc:	3330      	adds	r3, #48	@ 0x30
 800cdce:	3330      	adds	r3, #48	@ 0x30
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fe fbef 	bl	800b5b4 <ld_word>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d140      	bne.n	800ce5e <find_volume+0x472>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdde:	3301      	adds	r3, #1
 800cde0:	4619      	mov	r1, r3
 800cde2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cde4:	f7fe fe98 	bl	800bb18 <move_window>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d137      	bne.n	800ce5e <find_volume+0x472>
		{
			fs->fsi_flag = 0;
 800cdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf6:	3330      	adds	r3, #48	@ 0x30
 800cdf8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fe fbd9 	bl	800b5b4 <ld_word>
 800ce02:	4603      	mov	r3, r0
 800ce04:	461a      	mov	r2, r3
 800ce06:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d127      	bne.n	800ce5e <find_volume+0x472>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce10:	3330      	adds	r3, #48	@ 0x30
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe fbe7 	bl	800b5e6 <ld_dword>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ce8c <find_volume+0x4a0>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d11e      	bne.n	800ce5e <find_volume+0x472>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce22:	3330      	adds	r3, #48	@ 0x30
 800ce24:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fe fbdc 	bl	800b5e6 <ld_dword>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	4a17      	ldr	r2, [pc, #92]	@ (800ce90 <find_volume+0x4a4>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d113      	bne.n	800ce5e <find_volume+0x472>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce38:	3330      	adds	r3, #48	@ 0x30
 800ce3a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fe fbd1 	bl	800b5e6 <ld_dword>
 800ce44:	4602      	mov	r2, r0
 800ce46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce48:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4c:	3330      	adds	r3, #48	@ 0x30
 800ce4e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe fbc7 	bl	800b5e6 <ld_dword>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce5c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce60:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ce64:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce66:	4b0b      	ldr	r3, [pc, #44]	@ (800ce94 <find_volume+0x4a8>)
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	4b09      	ldr	r3, [pc, #36]	@ (800ce94 <find_volume+0x4a8>)
 800ce70:	801a      	strh	r2, [r3, #0]
 800ce72:	4b08      	ldr	r3, [pc, #32]	@ (800ce94 <find_volume+0x4a8>)
 800ce74:	881a      	ldrh	r2, [r3, #0]
 800ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce78:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce7c:	f7fe fde4 	bl	800ba48 <clear_lock>
#endif
	return FR_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3758      	adds	r7, #88	@ 0x58
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	41615252 	.word	0x41615252
 800ce90:	61417272 	.word	0x61417272
 800ce94:	20000508 	.word	0x20000508

0800ce98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cea2:	2309      	movs	r3, #9
 800cea4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d01c      	beq.n	800cee6 <validate+0x4e>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d018      	beq.n	800cee6 <validate+0x4e>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d013      	beq.n	800cee6 <validate+0x4e>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	889a      	ldrh	r2, [r3, #4]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	88db      	ldrh	r3, [r3, #6]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d10c      	bne.n	800cee6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	785b      	ldrb	r3, [r3, #1]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe face 	bl	800b474 <disk_status>
 800ced8:	4603      	mov	r3, r0
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <validate+0x4e>
			res = FR_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cee6:	7bfb      	ldrb	r3, [r7, #15]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <validate+0x5a>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	e000      	b.n	800cef4 <validate+0x5c>
 800cef2:	2300      	movs	r3, #0
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	6013      	str	r3, [r2, #0]
	return res;
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
	...

0800cf04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf16:	f107 0310 	add.w	r3, r7, #16
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff fccb 	bl	800c8b6 <get_ldnumber>
 800cf20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	da01      	bge.n	800cf2c <f_mount+0x28>
 800cf28:	230b      	movs	r3, #11
 800cf2a:	e02b      	b.n	800cf84 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf2c:	4a17      	ldr	r2, [pc, #92]	@ (800cf8c <f_mount+0x88>)
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d005      	beq.n	800cf48 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf3c:	69b8      	ldr	r0, [r7, #24]
 800cf3e:	f7fe fd83 	bl	800ba48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	2200      	movs	r2, #0
 800cf46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d002      	beq.n	800cf54 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	490d      	ldr	r1, [pc, #52]	@ (800cf8c <f_mount+0x88>)
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <f_mount+0x66>
 800cf64:	79fb      	ldrb	r3, [r7, #7]
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d001      	beq.n	800cf6e <f_mount+0x6a>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e00a      	b.n	800cf84 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf6e:	f107 010c 	add.w	r1, r7, #12
 800cf72:	f107 0308 	add.w	r3, r7, #8
 800cf76:	2200      	movs	r2, #0
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7ff fd37 	bl	800c9ec <find_volume>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3720      	adds	r7, #32
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	20000504 	.word	0x20000504

0800cf90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b098      	sub	sp, #96	@ 0x60
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <f_open+0x18>
 800cfa4:	2309      	movs	r3, #9
 800cfa6:	e1a8      	b.n	800d2fa <f_open+0x36a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cfa8:	79fb      	ldrb	r3, [r7, #7]
 800cfaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cfae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cfb0:	79fa      	ldrb	r2, [r7, #7]
 800cfb2:	f107 0110 	add.w	r1, r7, #16
 800cfb6:	f107 0308 	add.w	r3, r7, #8
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff fd16 	bl	800c9ec <find_volume>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cfc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f040 818c 	bne.w	800d2e8 <f_open+0x358>
		dj.obj.fs = fs;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	f107 0314 	add.w	r3, r7, #20
 800cfda:	4611      	mov	r1, r2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fbf9 	bl	800c7d4 <follow_path>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cfe8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d118      	bne.n	800d022 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cff0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cff4:	b25b      	sxtb	r3, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	da03      	bge.n	800d002 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cffa:	2306      	movs	r3, #6
 800cffc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d000:	e00f      	b.n	800d022 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	2b01      	cmp	r3, #1
 800d006:	bf8c      	ite	hi
 800d008:	2301      	movhi	r3, #1
 800d00a:	2300      	movls	r3, #0
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	461a      	mov	r2, r3
 800d010:	f107 0314 	add.w	r3, r7, #20
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe fbce 	bl	800b7b8 <chk_lock>
 800d01c:	4603      	mov	r3, r0
 800d01e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	f003 031c 	and.w	r3, r3, #28
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d07e      	beq.n	800d12a <f_open+0x19a>
			if (res != FR_OK) {					/* No file, create new */
 800d02c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d030:	2b00      	cmp	r3, #0
 800d032:	d017      	beq.n	800d064 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d034:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d038:	2b04      	cmp	r3, #4
 800d03a:	d10e      	bne.n	800d05a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d03c:	f7fe fc18 	bl	800b870 <enq_lock>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d006      	beq.n	800d054 <f_open+0xc4>
 800d046:	f107 0314 	add.w	r3, r7, #20
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7ff fafc 	bl	800c648 <dir_register>
 800d050:	4603      	mov	r3, r0
 800d052:	e000      	b.n	800d056 <f_open+0xc6>
 800d054:	2312      	movs	r3, #18
 800d056:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	f043 0308 	orr.w	r3, r3, #8
 800d060:	71fb      	strb	r3, [r7, #7]
 800d062:	e010      	b.n	800d086 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d064:	7ebb      	ldrb	r3, [r7, #26]
 800d066:	f003 0311 	and.w	r3, r3, #17
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <f_open+0xe6>
					res = FR_DENIED;
 800d06e:	2307      	movs	r3, #7
 800d070:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d074:	e007      	b.n	800d086 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d076:	79fb      	ldrb	r3, [r7, #7]
 800d078:	f003 0304 	and.w	r3, r3, #4
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <f_open+0xf6>
 800d080:	2308      	movs	r3, #8
 800d082:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d086:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d167      	bne.n	800d15e <f_open+0x1ce>
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	f003 0308 	and.w	r3, r3, #8
 800d094:	2b00      	cmp	r3, #0
 800d096:	d062      	beq.n	800d15e <f_open+0x1ce>
				dw = GET_FATTIME();
 800d098:	4b9a      	ldr	r3, [pc, #616]	@ (800d304 <f_open+0x374>)
 800d09a:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d09e:	330e      	adds	r3, #14
 800d0a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fadd 	bl	800b662 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0aa:	3316      	adds	r3, #22
 800d0ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe fad7 	bl	800b662 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0b6:	330b      	adds	r3, #11
 800d0b8:	2220      	movs	r2, #32
 800d0ba:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff fa2c 	bl	800c520 <ld_clust>
 800d0c8:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7ff fa44 	bl	800c55e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d8:	331c      	adds	r3, #28
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe fac0 	bl	800b662 <st_dword>
					fs->wflag = 1;
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d037      	beq.n	800d15e <f_open+0x1ce>
						dw = fs->winsect;
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f2:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d0f4:	f107 0314 	add.w	r3, r7, #20
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fe ff57 	bl	800bfb0 <remove_chain>
 800d102:	4603      	mov	r3, r0
 800d104:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d108:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d126      	bne.n	800d15e <f_open+0x1ce>
							res = move_window(fs, dw);
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe fcff 	bl	800bb18 <move_window>
 800d11a:	4603      	mov	r3, r0
 800d11c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d124:	3a01      	subs	r2, #1
 800d126:	60da      	str	r2, [r3, #12]
 800d128:	e019      	b.n	800d15e <f_open+0x1ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d12a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d115      	bne.n	800d15e <f_open+0x1ce>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d132:	7ebb      	ldrb	r3, [r7, #26]
 800d134:	f003 0310 	and.w	r3, r3, #16
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d003      	beq.n	800d144 <f_open+0x1b4>
					res = FR_NO_FILE;
 800d13c:	2304      	movs	r3, #4
 800d13e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d142:	e00c      	b.n	800d15e <f_open+0x1ce>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d144:	79fb      	ldrb	r3, [r7, #7]
 800d146:	f003 0302 	and.w	r3, r3, #2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d007      	beq.n	800d15e <f_open+0x1ce>
 800d14e:	7ebb      	ldrb	r3, [r7, #26]
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <f_open+0x1ce>
						res = FR_DENIED;
 800d158:	2307      	movs	r3, #7
 800d15a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d15e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d162:	2b00      	cmp	r3, #0
 800d164:	d126      	bne.n	800d1b4 <f_open+0x224>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	f003 0308 	and.w	r3, r3, #8
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d003      	beq.n	800d178 <f_open+0x1e8>
				mode |= FA_MODIFIED;
 800d170:	79fb      	ldrb	r3, [r7, #7]
 800d172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d176:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d186:	79fb      	ldrb	r3, [r7, #7]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	bf8c      	ite	hi
 800d18c:	2301      	movhi	r3, #1
 800d18e:	2300      	movls	r3, #0
 800d190:	b2db      	uxtb	r3, r3
 800d192:	461a      	mov	r2, r3
 800d194:	f107 0314 	add.w	r3, r7, #20
 800d198:	4611      	mov	r1, r2
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe fb8a 	bl	800b8b4 <inc_lock>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d102      	bne.n	800d1b4 <f_open+0x224>
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d1b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f040 8095 	bne.w	800d2e8 <f_open+0x358>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7ff f9ab 	bl	800c520 <ld_clust>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d2:	331c      	adds	r3, #28
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fe fa06 	bl	800b5e6 <ld_dword>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	88da      	ldrh	r2, [r3, #6]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	79fa      	ldrb	r2, [r7, #7]
 800d1f8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3330      	adds	r3, #48	@ 0x30
 800d210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d214:	2100      	movs	r1, #0
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fa70 	bl	800b6fc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	f003 0320 	and.w	r3, r3, #32
 800d222:	2b00      	cmp	r3, #0
 800d224:	d060      	beq.n	800d2e8 <f_open+0x358>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d05c      	beq.n	800d2e8 <f_open+0x358>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	68da      	ldr	r2, [r3, #12]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	895b      	ldrh	r3, [r3, #10]
 800d23a:	025b      	lsls	r3, r3, #9
 800d23c:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	657b      	str	r3, [r7, #84]	@ 0x54
 800d24a:	e016      	b.n	800d27a <f_open+0x2ea>
					clst = get_fat(&fp->obj, clst);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d250:	4618      	mov	r0, r3
 800d252:	f7fe fd1c 	bl	800bc8e <get_fat>
 800d256:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d802      	bhi.n	800d264 <f_open+0x2d4>
 800d25e:	2302      	movs	r3, #2
 800d260:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d264:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d26a:	d102      	bne.n	800d272 <f_open+0x2e2>
 800d26c:	2301      	movs	r3, #1
 800d26e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d272:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	657b      	str	r3, [r7, #84]	@ 0x54
 800d27a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d103      	bne.n	800d28a <f_open+0x2fa>
 800d282:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d286:	429a      	cmp	r2, r3
 800d288:	d8e0      	bhi.n	800d24c <f_open+0x2bc>
				}
				fp->clust = clst;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d28e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d290:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d294:	2b00      	cmp	r3, #0
 800d296:	d127      	bne.n	800d2e8 <f_open+0x358>
 800d298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d022      	beq.n	800d2e8 <f_open+0x358>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fcd2 	bl	800bc50 <clust2sect>
 800d2ac:	6478      	str	r0, [r7, #68]	@ 0x44
 800d2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d103      	bne.n	800d2bc <f_open+0x32c>
						res = FR_INT_ERR;
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d2ba:	e015      	b.n	800d2e8 <f_open+0x358>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d2bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2be:	0a5a      	lsrs	r2, r3, #9
 800d2c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2c2:	441a      	add	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	7858      	ldrb	r0, [r3, #1]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6a1a      	ldr	r2, [r3, #32]
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	f7fe f90e 	bl	800b4f8 <disk_read>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d002      	beq.n	800d2e8 <f_open+0x358>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d2e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <f_open+0x366>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3760      	adds	r7, #96	@ 0x60
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	48210000 	.word	0x48210000

0800d308 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08c      	sub	sp, #48	@ 0x30
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2200      	movs	r2, #0
 800d31e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f107 0210 	add.w	r2, r7, #16
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fdb5 	bl	800ce98 <validate>
 800d32e:	4603      	mov	r3, r0
 800d330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d334:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <f_write+0x44>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	7d5b      	ldrb	r3, [r3, #21]
 800d340:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d344:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <f_write+0x4a>
 800d34c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d350:	e14b      	b.n	800d5ea <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	7d1b      	ldrb	r3, [r3, #20]
 800d356:	f003 0302 	and.w	r3, r3, #2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <f_write+0x5a>
 800d35e:	2307      	movs	r3, #7
 800d360:	e143      	b.n	800d5ea <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	699a      	ldr	r2, [r3, #24]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	441a      	add	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	429a      	cmp	r2, r3
 800d370:	f080 812d 	bcs.w	800d5ce <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	43db      	mvns	r3, r3
 800d37a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d37c:	e127      	b.n	800d5ce <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d386:	2b00      	cmp	r3, #0
 800d388:	f040 80e3 	bne.w	800d552 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	0a5b      	lsrs	r3, r3, #9
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	8952      	ldrh	r2, [r2, #10]
 800d396:	3a01      	subs	r2, #1
 800d398:	4013      	ands	r3, r2
 800d39a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d143      	bne.n	800d42a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10c      	bne.n	800d3c4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d11a      	bne.n	800d3ec <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fe fe5d 	bl	800c07a <create_chain>
 800d3c0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d3c2:	e013      	b.n	800d3ec <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d007      	beq.n	800d3dc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	699b      	ldr	r3, [r3, #24]
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7fe fee9 	bl	800c1aa <clmt_clust>
 800d3d8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d3da:	e007      	b.n	800d3ec <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	69db      	ldr	r3, [r3, #28]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	f7fe fe48 	bl	800c07a <create_chain>
 800d3ea:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 80f2 	beq.w	800d5d8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d104      	bne.n	800d404 <f_write+0xfc>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2202      	movs	r2, #2
 800d3fe:	755a      	strb	r2, [r3, #21]
 800d400:	2302      	movs	r3, #2
 800d402:	e0f2      	b.n	800d5ea <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d40a:	d104      	bne.n	800d416 <f_write+0x10e>
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2201      	movs	r2, #1
 800d410:	755a      	strb	r2, [r3, #21]
 800d412:	2301      	movs	r3, #1
 800d414:	e0e9      	b.n	800d5ea <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d41a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <f_write+0x122>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d428:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	7d1b      	ldrb	r3, [r3, #20]
 800d42e:	b25b      	sxtb	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	da18      	bge.n	800d466 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	7858      	ldrb	r0, [r3, #1]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6a1a      	ldr	r2, [r3, #32]
 800d442:	2301      	movs	r3, #1
 800d444:	f7fe f878 	bl	800b538 <disk_write>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d004      	beq.n	800d458 <f_write+0x150>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2201      	movs	r2, #1
 800d452:	755a      	strb	r2, [r3, #21]
 800d454:	2301      	movs	r3, #1
 800d456:	e0c8      	b.n	800d5ea <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	7d1b      	ldrb	r3, [r3, #20]
 800d45c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d460:	b2da      	uxtb	r2, r3
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	69db      	ldr	r3, [r3, #28]
 800d46c:	4619      	mov	r1, r3
 800d46e:	4610      	mov	r0, r2
 800d470:	f7fe fbee 	bl	800bc50 <clust2sect>
 800d474:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d104      	bne.n	800d486 <f_write+0x17e>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2202      	movs	r2, #2
 800d480:	755a      	strb	r2, [r3, #21]
 800d482:	2302      	movs	r3, #2
 800d484:	e0b1      	b.n	800d5ea <f_write+0x2e2>
			sect += csect;
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	4413      	add	r3, r2
 800d48c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	0a5b      	lsrs	r3, r3, #9
 800d492:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d03c      	beq.n	800d514 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d49a:	69ba      	ldr	r2, [r7, #24]
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	4413      	add	r3, r2
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	8952      	ldrh	r2, [r2, #10]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d905      	bls.n	800d4b4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	895b      	ldrh	r3, [r3, #10]
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	1ad3      	subs	r3, r2, r3
 800d4b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	7858      	ldrb	r0, [r3, #1]
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	69f9      	ldr	r1, [r7, #28]
 800d4be:	f7fe f83b 	bl	800b538 <disk_write>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d004      	beq.n	800d4d2 <f_write+0x1ca>
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	755a      	strb	r2, [r3, #21]
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e08b      	b.n	800d5ea <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6a1a      	ldr	r2, [r3, #32]
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	6a3a      	ldr	r2, [r7, #32]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d915      	bls.n	800d50c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6a1a      	ldr	r2, [r3, #32]
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	1ad3      	subs	r3, r2, r3
 800d4ee:	025b      	lsls	r3, r3, #9
 800d4f0:	69fa      	ldr	r2, [r7, #28]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	f7fe f8de 	bl	800b6ba <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	7d1b      	ldrb	r3, [r3, #20]
 800d502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d506:	b2da      	uxtb	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	025b      	lsls	r3, r3, #9
 800d510:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d512:	e03f      	b.n	800d594 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	697a      	ldr	r2, [r7, #20]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d016      	beq.n	800d54c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	699a      	ldr	r2, [r3, #24]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d526:	429a      	cmp	r2, r3
 800d528:	d210      	bcs.n	800d54c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	7858      	ldrb	r0, [r3, #1]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d534:	2301      	movs	r3, #1
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	f7fd ffde 	bl	800b4f8 <disk_read>
 800d53c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2201      	movs	r2, #1
 800d546:	755a      	strb	r2, [r3, #21]
 800d548:	2301      	movs	r3, #1
 800d54a:	e04e      	b.n	800d5ea <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	699b      	ldr	r3, [r3, #24]
 800d556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d55a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d55e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	429a      	cmp	r2, r3
 800d566:	d901      	bls.n	800d56c <f_write+0x264>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	699b      	ldr	r3, [r3, #24]
 800d576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d57a:	4413      	add	r3, r2
 800d57c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d57e:	69f9      	ldr	r1, [r7, #28]
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe f89a 	bl	800b6ba <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	7d1b      	ldrb	r3, [r3, #20]
 800d58a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d594:	69fa      	ldr	r2, [r7, #28]
 800d596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d598:	4413      	add	r3, r2
 800d59a:	61fb      	str	r3, [r7, #28]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a2:	441a      	add	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	619a      	str	r2, [r3, #24]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	68da      	ldr	r2, [r3, #12]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	bf38      	it	cc
 800d5b4:	461a      	movcc	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	60da      	str	r2, [r3, #12]
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c0:	441a      	add	r2, r3
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	601a      	str	r2, [r3, #0]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f47f aed4 	bne.w	800d37e <f_write+0x76>
 800d5d6:	e000      	b.n	800d5da <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d5d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	7d1b      	ldrb	r3, [r3, #20]
 800d5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3730      	adds	r7, #48	@ 0x30
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b086      	sub	sp, #24
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f107 0208 	add.w	r2, r7, #8
 800d602:	4611      	mov	r1, r2
 800d604:	4618      	mov	r0, r3
 800d606:	f7ff fc47 	bl	800ce98 <validate>
 800d60a:	4603      	mov	r3, r0
 800d60c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d167      	bne.n	800d6e4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	7d1b      	ldrb	r3, [r3, #20]
 800d618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d061      	beq.n	800d6e4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	7d1b      	ldrb	r3, [r3, #20]
 800d624:	b25b      	sxtb	r3, r3
 800d626:	2b00      	cmp	r3, #0
 800d628:	da15      	bge.n	800d656 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	7858      	ldrb	r0, [r3, #1]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a1a      	ldr	r2, [r3, #32]
 800d638:	2301      	movs	r3, #1
 800d63a:	f7fd ff7d 	bl	800b538 <disk_write>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <f_sync+0x54>
 800d644:	2301      	movs	r3, #1
 800d646:	e04e      	b.n	800d6e6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	7d1b      	ldrb	r3, [r3, #20]
 800d64c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d650:	b2da      	uxtb	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d656:	4b26      	ldr	r3, [pc, #152]	@ (800d6f0 <f_sync+0xfc>)
 800d658:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d660:	4619      	mov	r1, r3
 800d662:	4610      	mov	r0, r2
 800d664:	f7fe fa58 	bl	800bb18 <move_window>
 800d668:	4603      	mov	r3, r0
 800d66a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d138      	bne.n	800d6e4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d676:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	330b      	adds	r3, #11
 800d67c:	781a      	ldrb	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	330b      	adds	r3, #11
 800d682:	f042 0220 	orr.w	r2, r2, #32
 800d686:	b2d2      	uxtb	r2, r2
 800d688:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6818      	ldr	r0, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	461a      	mov	r2, r3
 800d694:	68f9      	ldr	r1, [r7, #12]
 800d696:	f7fe ff62 	bl	800c55e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f103 021c 	add.w	r2, r3, #28
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	f7fd ffdb 	bl	800b662 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3316      	adds	r3, #22
 800d6b0:	6939      	ldr	r1, [r7, #16]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fd ffd5 	bl	800b662 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3312      	adds	r3, #18
 800d6bc:	2100      	movs	r1, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fd ffb4 	bl	800b62c <st_word>
					fs->wflag = 1;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fe fa51 	bl	800bb74 <sync_fs>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	7d1b      	ldrb	r3, [r3, #20]
 800d6da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3718      	adds	r7, #24
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	48210000 	.word	0x48210000

0800d6f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7ff ff79 	bl	800d5f4 <f_sync>
 800d702:	4603      	mov	r3, r0
 800d704:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d118      	bne.n	800d73e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f107 0208 	add.w	r2, r7, #8
 800d712:	4611      	mov	r1, r2
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff fbbf 	bl	800ce98 <validate>
 800d71a:	4603      	mov	r3, r0
 800d71c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10c      	bne.n	800d73e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fe f951 	bl	800b9d0 <dec_lock>
 800d72e:	4603      	mov	r3, r0
 800d730:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d732:	7bfb      	ldrb	r3, [r7, #15]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d102      	bne.n	800d73e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b090      	sub	sp, #64	@ 0x40
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f107 0208 	add.w	r2, r7, #8
 800d758:	4611      	mov	r1, r2
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff fb9c 	bl	800ce98 <validate>
 800d760:	4603      	mov	r3, r0
 800d762:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d766:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d103      	bne.n	800d776 <f_lseek+0x2e>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	7d5b      	ldrb	r3, [r3, #21]
 800d772:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d776:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d002      	beq.n	800d784 <f_lseek+0x3c>
 800d77e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d782:	e1e6      	b.n	800db52 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 80d1 	beq.w	800d930 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d794:	d15a      	bne.n	800d84c <f_lseek+0x104>
			tbl = fp->cltbl;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d79a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79e:	1d1a      	adds	r2, r3, #4
 800d7a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	617b      	str	r3, [r7, #20]
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d03a      	beq.n	800d82c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b8:	613b      	str	r3, [r7, #16]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c0:	3302      	adds	r3, #2
 800d7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c6:	60fb      	str	r3, [r7, #12]
 800d7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fe fa5b 	bl	800bc8e <get_fat>
 800d7d8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d804      	bhi.n	800d7ea <f_lseek+0xa2>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	755a      	strb	r2, [r3, #21]
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	e1b3      	b.n	800db52 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7f0:	d104      	bne.n	800d7fc <f_lseek+0xb4>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	755a      	strb	r2, [r3, #21]
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e1aa      	b.n	800db52 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	3301      	adds	r3, #1
 800d800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d802:	429a      	cmp	r2, r3
 800d804:	d0de      	beq.n	800d7c4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d809      	bhi.n	800d822 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d810:	1d1a      	adds	r2, r3, #4
 800d812:	627a      	str	r2, [r7, #36]	@ 0x24
 800d814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d816:	601a      	str	r2, [r3, #0]
 800d818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81a:	1d1a      	adds	r2, r3, #4
 800d81c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d81e:	693a      	ldr	r2, [r7, #16]
 800d820:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d828:	429a      	cmp	r2, r3
 800d82a:	d3c4      	bcc.n	800d7b6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d832:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d803      	bhi.n	800d844 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83e:	2200      	movs	r2, #0
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	e184      	b.n	800db4e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d844:	2311      	movs	r3, #17
 800d846:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d84a:	e180      	b.n	800db4e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	429a      	cmp	r2, r3
 800d854:	d902      	bls.n	800d85c <f_lseek+0x114>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 8172 	beq.w	800db4e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7fe fc9a 	bl	800c1aa <clmt_clust>
 800d876:	4602      	mov	r2, r0
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69db      	ldr	r3, [r3, #28]
 800d882:	4619      	mov	r1, r3
 800d884:	4610      	mov	r0, r2
 800d886:	f7fe f9e3 	bl	800bc50 <clust2sect>
 800d88a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d104      	bne.n	800d89c <f_lseek+0x154>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2202      	movs	r2, #2
 800d896:	755a      	strb	r2, [r3, #21]
 800d898:	2302      	movs	r3, #2
 800d89a:	e15a      	b.n	800db52 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	0a5b      	lsrs	r3, r3, #9
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	8952      	ldrh	r2, [r2, #10]
 800d8a6:	3a01      	subs	r2, #1
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	69ba      	ldr	r2, [r7, #24]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 8148 	beq.w	800db4e <f_lseek+0x406>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	f000 8142 	beq.w	800db4e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	7d1b      	ldrb	r3, [r3, #20]
 800d8ce:	b25b      	sxtb	r3, r3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	da18      	bge.n	800d906 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	7858      	ldrb	r0, [r3, #1]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a1a      	ldr	r2, [r3, #32]
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	f7fd fe28 	bl	800b538 <disk_write>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <f_lseek+0x1b0>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	755a      	strb	r2, [r3, #21]
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e12c      	b.n	800db52 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7d1b      	ldrb	r3, [r3, #20]
 800d8fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d900:	b2da      	uxtb	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	7858      	ldrb	r0, [r3, #1]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d910:	2301      	movs	r3, #1
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	f7fd fdf0 	bl	800b4f8 <disk_read>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d004      	beq.n	800d928 <f_lseek+0x1e0>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2201      	movs	r2, #1
 800d922:	755a      	strb	r2, [r3, #21]
 800d924:	2301      	movs	r3, #1
 800d926:	e114      	b.n	800db52 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	69ba      	ldr	r2, [r7, #24]
 800d92c:	621a      	str	r2, [r3, #32]
 800d92e:	e10e      	b.n	800db4e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	429a      	cmp	r2, r3
 800d938:	d908      	bls.n	800d94c <f_lseek+0x204>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	7d1b      	ldrb	r3, [r3, #20]
 800d93e:	f003 0302 	and.w	r3, r3, #2
 800d942:	2b00      	cmp	r3, #0
 800d944:	d102      	bne.n	800d94c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	637b      	str	r3, [r7, #52]	@ 0x34
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d95a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 80a7 	beq.w	800dab2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	895b      	ldrh	r3, [r3, #10]
 800d968:	025b      	lsls	r3, r3, #9
 800d96a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d01b      	beq.n	800d9aa <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	1e5a      	subs	r2, r3, #1
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	fbb2 f2f3 	udiv	r2, r2, r3
 800d97c:	6a3b      	ldr	r3, [r7, #32]
 800d97e:	1e59      	subs	r1, r3, #1
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d986:	429a      	cmp	r2, r3
 800d988:	d30f      	bcc.n	800d9aa <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d98a:	6a3b      	ldr	r3, [r7, #32]
 800d98c:	1e5a      	subs	r2, r3, #1
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	425b      	negs	r3, r3
 800d992:	401a      	ands	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	683a      	ldr	r2, [r7, #0]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	69db      	ldr	r3, [r3, #28]
 800d9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d9a8:	e022      	b.n	800d9f0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d119      	bne.n	800d9ea <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe fb5d 	bl	800c07a <create_chain>
 800d9c0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d104      	bne.n	800d9d2 <f_lseek+0x28a>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	755a      	strb	r2, [r3, #21]
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	e0bf      	b.n	800db52 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9d8:	d104      	bne.n	800d9e4 <f_lseek+0x29c>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	755a      	strb	r2, [r3, #21]
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e0b6      	b.n	800db52 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9e8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9ee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d05d      	beq.n	800dab2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d9f6:	e03a      	b.n	800da6e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	699a      	ldr	r2, [r3, #24]
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	441a      	add	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7d1b      	ldrb	r3, [r3, #20]
 800da10:	f003 0302 	and.w	r3, r3, #2
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe fb2c 	bl	800c07a <create_chain>
 800da22:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800da24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da26:	2b00      	cmp	r3, #0
 800da28:	d108      	bne.n	800da3c <f_lseek+0x2f4>
							ofs = 0; break;
 800da2a:	2300      	movs	r3, #0
 800da2c:	603b      	str	r3, [r7, #0]
 800da2e:	e022      	b.n	800da76 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800da34:	4618      	mov	r0, r3
 800da36:	f7fe f92a 	bl	800bc8e <get_fat>
 800da3a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da42:	d104      	bne.n	800da4e <f_lseek+0x306>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2201      	movs	r2, #1
 800da48:	755a      	strb	r2, [r3, #21]
 800da4a:	2301      	movs	r3, #1
 800da4c:	e081      	b.n	800db52 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800da4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da50:	2b01      	cmp	r3, #1
 800da52:	d904      	bls.n	800da5e <f_lseek+0x316>
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d304      	bcc.n	800da68 <f_lseek+0x320>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2202      	movs	r2, #2
 800da62:	755a      	strb	r2, [r3, #21]
 800da64:	2302      	movs	r3, #2
 800da66:	e074      	b.n	800db52 <f_lseek+0x40a>
					fp->clust = clst;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da6c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	429a      	cmp	r2, r3
 800da74:	d8c0      	bhi.n	800d9f8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	699a      	ldr	r2, [r3, #24]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	441a      	add	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d012      	beq.n	800dab2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe f8dd 	bl	800bc50 <clust2sect>
 800da96:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800da98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d104      	bne.n	800daa8 <f_lseek+0x360>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2202      	movs	r2, #2
 800daa2:	755a      	strb	r2, [r3, #21]
 800daa4:	2302      	movs	r3, #2
 800daa6:	e054      	b.n	800db52 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	0a5b      	lsrs	r3, r3, #9
 800daac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800daae:	4413      	add	r3, r2
 800dab0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	699a      	ldr	r2, [r3, #24]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d90a      	bls.n	800dad4 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	699a      	ldr	r2, [r3, #24]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7d1b      	ldrb	r3, [r3, #20]
 800daca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d036      	beq.n	800db4e <f_lseek+0x406>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6a1b      	ldr	r3, [r3, #32]
 800dae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d031      	beq.n	800db4e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	7d1b      	ldrb	r3, [r3, #20]
 800daee:	b25b      	sxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	da18      	bge.n	800db26 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	7858      	ldrb	r0, [r3, #1]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6a1a      	ldr	r2, [r3, #32]
 800db02:	2301      	movs	r3, #1
 800db04:	f7fd fd18 	bl	800b538 <disk_write>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d004      	beq.n	800db18 <f_lseek+0x3d0>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	755a      	strb	r2, [r3, #21]
 800db14:	2301      	movs	r3, #1
 800db16:	e01c      	b.n	800db52 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db20:	b2da      	uxtb	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	7858      	ldrb	r0, [r3, #1]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db30:	2301      	movs	r3, #1
 800db32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db34:	f7fd fce0 	bl	800b4f8 <disk_read>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d004      	beq.n	800db48 <f_lseek+0x400>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2201      	movs	r2, #1
 800db42:	755a      	strb	r2, [r3, #21]
 800db44:	2301      	movs	r3, #1
 800db46:	e004      	b.n	800db52 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db4c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800db4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800db52:	4618      	mov	r0, r3
 800db54:	3740      	adds	r7, #64	@ 0x40
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	460b      	mov	r3, r1
 800db64:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	db25      	blt.n	800dbbe <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	1c5a      	adds	r2, r3, #1
 800db76:	60fa      	str	r2, [r7, #12]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	4413      	add	r3, r2
 800db7c:	78fa      	ldrb	r2, [r7, #3]
 800db7e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2b3c      	cmp	r3, #60	@ 0x3c
 800db84:	dd12      	ble.n	800dbac <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6818      	ldr	r0, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f103 010c 	add.w	r1, r3, #12
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	f107 0308 	add.w	r3, r7, #8
 800db96:	f7ff fbb7 	bl	800d308 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d101      	bne.n	800dba6 <putc_bfd+0x4c>
 800dba2:	2300      	movs	r3, #0
 800dba4:	e001      	b.n	800dbaa <putc_bfd+0x50>
 800dba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbaa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	609a      	str	r2, [r3, #8]
 800dbbc:	e000      	b.n	800dbc0 <putc_bfd+0x66>
	if (i < 0) return;
 800dbbe:	bf00      	nop
}
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b084      	sub	sp, #16
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	db16      	blt.n	800dc04 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6818      	ldr	r0, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f103 010c 	add.w	r1, r3, #12
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	f107 030c 	add.w	r3, r7, #12
 800dbea:	f7ff fb8d 	bl	800d308 <f_write>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d107      	bne.n	800dc04 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d102      	bne.n	800dc04 <putc_flush+0x3e>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	e001      	b.n	800dc08 <putc_flush+0x42>
	return EOF;
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	605a      	str	r2, [r3, #4]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	609a      	str	r2, [r3, #8]
}
 800dc2e:	bf00      	nop
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
	...

0800dc3c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800dc3c:	b40e      	push	{r1, r2, r3}
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b0a7      	sub	sp, #156	@ 0x9c
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800dc46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff ffdf 	bl	800dc10 <putc_init>

	va_start(arp, fmt);
 800dc52:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800dc56:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800dc58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc5c:	1c5a      	adds	r2, r3, #1
 800dc5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800dc68:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f000 81f2 	beq.w	800e056 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800dc72:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dc76:	2b25      	cmp	r3, #37	@ 0x25
 800dc78:	d008      	beq.n	800dc8c <f_printf+0x50>
			putc_bfd(&pb, c);
 800dc7a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800dc7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dc82:	4611      	mov	r1, r2
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7ff ff68 	bl	800db5a <putc_bfd>
			continue;
 800dc8a:	e1e3      	b.n	800e054 <f_printf+0x418>
		}
		w = f = 0;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800dc92:	2300      	movs	r3, #0
 800dc94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800dc98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800dca8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dcac:	2b30      	cmp	r3, #48	@ 0x30
 800dcae:	d10b      	bne.n	800dcc8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800dcb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800dcc6:	e024      	b.n	800dd12 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800dcc8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dccc:	2b2d      	cmp	r3, #45	@ 0x2d
 800dcce:	d120      	bne.n	800dd12 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800dcd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800dce6:	e014      	b.n	800dd12 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800dce8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dcec:	4613      	mov	r3, r2
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dcfa:	4413      	add	r3, r2
 800dcfc:	3b30      	subs	r3, #48	@ 0x30
 800dcfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800dd02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd06:	1c5a      	adds	r2, r3, #1
 800dd08:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800dd12:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd16:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd18:	d903      	bls.n	800dd22 <f_printf+0xe6>
 800dd1a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd1e:	2b39      	cmp	r3, #57	@ 0x39
 800dd20:	d9e2      	bls.n	800dce8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800dd22:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd26:	2b6c      	cmp	r3, #108	@ 0x6c
 800dd28:	d003      	beq.n	800dd32 <f_printf+0xf6>
 800dd2a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd2e:	2b4c      	cmp	r3, #76	@ 0x4c
 800dd30:	d10d      	bne.n	800dd4e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800dd32:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800dd36:	f043 0304 	orr.w	r3, r3, #4
 800dd3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800dd3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800dd4e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 8181 	beq.w	800e05a <f_printf+0x41e>
		d = c;
 800dd58:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd5c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800dd60:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dd64:	2b60      	cmp	r3, #96	@ 0x60
 800dd66:	d908      	bls.n	800dd7a <f_printf+0x13e>
 800dd68:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dd6c:	2b7a      	cmp	r3, #122	@ 0x7a
 800dd6e:	d804      	bhi.n	800dd7a <f_printf+0x13e>
 800dd70:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dd74:	3b20      	subs	r3, #32
 800dd76:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800dd7a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dd7e:	3b42      	subs	r3, #66	@ 0x42
 800dd80:	2b16      	cmp	r3, #22
 800dd82:	f200 8098 	bhi.w	800deb6 <f_printf+0x27a>
 800dd86:	a201      	add	r2, pc, #4	@ (adr r2, 800dd8c <f_printf+0x150>)
 800dd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8c:	0800de97 	.word	0x0800de97
 800dd90:	0800de7f 	.word	0x0800de7f
 800dd94:	0800dea7 	.word	0x0800dea7
 800dd98:	0800deb7 	.word	0x0800deb7
 800dd9c:	0800deb7 	.word	0x0800deb7
 800dda0:	0800deb7 	.word	0x0800deb7
 800dda4:	0800deb7 	.word	0x0800deb7
 800dda8:	0800deb7 	.word	0x0800deb7
 800ddac:	0800deb7 	.word	0x0800deb7
 800ddb0:	0800deb7 	.word	0x0800deb7
 800ddb4:	0800deb7 	.word	0x0800deb7
 800ddb8:	0800deb7 	.word	0x0800deb7
 800ddbc:	0800deb7 	.word	0x0800deb7
 800ddc0:	0800de9f 	.word	0x0800de9f
 800ddc4:	0800deb7 	.word	0x0800deb7
 800ddc8:	0800deb7 	.word	0x0800deb7
 800ddcc:	0800deb7 	.word	0x0800deb7
 800ddd0:	0800dde9 	.word	0x0800dde9
 800ddd4:	0800deb7 	.word	0x0800deb7
 800ddd8:	0800dea7 	.word	0x0800dea7
 800dddc:	0800deb7 	.word	0x0800deb7
 800dde0:	0800deb7 	.word	0x0800deb7
 800dde4:	0800deaf 	.word	0x0800deaf
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800dde8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddea:	1d1a      	adds	r2, r3, #4
 800ddec:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ddf8:	e004      	b.n	800de04 <f_printf+0x1c8>
 800ddfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddfe:	3301      	adds	r3, #1
 800de00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800de04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800de06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de0a:	4413      	add	r3, r2
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1f3      	bne.n	800ddfa <f_printf+0x1be>
			if (!(f & 2)) {
 800de12:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800de16:	f003 0302 	and.w	r3, r3, #2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d11a      	bne.n	800de54 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800de1e:	e005      	b.n	800de2c <f_printf+0x1f0>
 800de20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800de24:	2120      	movs	r1, #32
 800de26:	4618      	mov	r0, r3
 800de28:	f7ff fe97 	bl	800db5a <putc_bfd>
 800de2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de30:	1c5a      	adds	r2, r3, #1
 800de32:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800de36:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d8f0      	bhi.n	800de20 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800de3e:	e009      	b.n	800de54 <f_printf+0x218>
 800de40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de42:	1c5a      	adds	r2, r3, #1
 800de44:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800de46:	781a      	ldrb	r2, [r3, #0]
 800de48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800de4c:	4611      	mov	r1, r2
 800de4e:	4618      	mov	r0, r3
 800de50:	f7ff fe83 	bl	800db5a <putc_bfd>
 800de54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1f1      	bne.n	800de40 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800de5c:	e005      	b.n	800de6a <f_printf+0x22e>
 800de5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800de62:	2120      	movs	r1, #32
 800de64:	4618      	mov	r0, r3
 800de66:	f7ff fe78 	bl	800db5a <putc_bfd>
 800de6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800de74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800de78:	429a      	cmp	r2, r3
 800de7a:	d8f0      	bhi.n	800de5e <f_printf+0x222>
			continue;
 800de7c:	e0ea      	b.n	800e054 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800de7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de80:	1d1a      	adds	r2, r3, #4
 800de82:	67ba      	str	r2, [r7, #120]	@ 0x78
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	b2da      	uxtb	r2, r3
 800de88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800de8c:	4611      	mov	r1, r2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7ff fe63 	bl	800db5a <putc_bfd>
 800de94:	e0de      	b.n	800e054 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800de96:	2302      	movs	r3, #2
 800de98:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800de9c:	e014      	b.n	800dec8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800de9e:	2308      	movs	r3, #8
 800dea0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800dea4:	e010      	b.n	800dec8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800dea6:	230a      	movs	r3, #10
 800dea8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800deac:	e00c      	b.n	800dec8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800deae:	2310      	movs	r3, #16
 800deb0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800deb4:	e008      	b.n	800dec8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800deb6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800deba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800debe:	4611      	mov	r1, r2
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7ff fe4a 	bl	800db5a <putc_bfd>
 800dec6:	e0c5      	b.n	800e054 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800dec8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800decc:	f003 0304 	and.w	r3, r3, #4
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d004      	beq.n	800dede <f_printf+0x2a2>
 800ded4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ded6:	1d1a      	adds	r2, r3, #4
 800ded8:	67ba      	str	r2, [r7, #120]	@ 0x78
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	e00c      	b.n	800def8 <f_printf+0x2bc>
 800dede:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dee2:	2b44      	cmp	r3, #68	@ 0x44
 800dee4:	d104      	bne.n	800def0 <f_printf+0x2b4>
 800dee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dee8:	1d1a      	adds	r2, r3, #4
 800deea:	67ba      	str	r2, [r7, #120]	@ 0x78
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	e003      	b.n	800def8 <f_printf+0x2bc>
 800def0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800def2:	1d1a      	adds	r2, r3, #4
 800def4:	67ba      	str	r2, [r7, #120]	@ 0x78
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800defc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800df00:	2b44      	cmp	r3, #68	@ 0x44
 800df02:	d10e      	bne.n	800df22 <f_printf+0x2e6>
 800df04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df08:	2b00      	cmp	r3, #0
 800df0a:	da0a      	bge.n	800df22 <f_printf+0x2e6>
			v = 0 - v;
 800df0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df10:	425b      	negs	r3, r3
 800df12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800df16:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800df1a:	f043 0308 	orr.w	r3, r3, #8
 800df1e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800df22:	2300      	movs	r3, #0
 800df24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800df28:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800df2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df30:	fbb3 f1f2 	udiv	r1, r3, r2
 800df34:	fb01 f202 	mul.w	r2, r1, r2
 800df38:	1a9b      	subs	r3, r3, r2
 800df3a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800df3e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800df42:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800df46:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800df4e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800df52:	2b09      	cmp	r3, #9
 800df54:	d90b      	bls.n	800df6e <f_printf+0x332>
 800df56:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800df5a:	2b78      	cmp	r3, #120	@ 0x78
 800df5c:	d101      	bne.n	800df62 <f_printf+0x326>
 800df5e:	2227      	movs	r2, #39	@ 0x27
 800df60:	e000      	b.n	800df64 <f_printf+0x328>
 800df62:	2207      	movs	r2, #7
 800df64:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800df68:	4413      	add	r3, r2
 800df6a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800df6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800df78:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800df7c:	3230      	adds	r2, #48	@ 0x30
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	3398      	adds	r3, #152	@ 0x98
 800df82:	443b      	add	r3, r7
 800df84:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800df88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <f_printf+0x35c>
 800df90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800df94:	2b1f      	cmp	r3, #31
 800df96:	d9c7      	bls.n	800df28 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800df98:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800df9c:	f003 0308 	and.w	r3, r3, #8
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d009      	beq.n	800dfb8 <f_printf+0x37c>
 800dfa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dfa8:	1c5a      	adds	r2, r3, #1
 800dfaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800dfae:	3398      	adds	r3, #152	@ 0x98
 800dfb0:	443b      	add	r3, r7
 800dfb2:	222d      	movs	r2, #45	@ 0x2d
 800dfb4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800dfb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dfbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dfc0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800dfc4:	f003 0301 	and.w	r3, r3, #1
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <f_printf+0x394>
 800dfcc:	2330      	movs	r3, #48	@ 0x30
 800dfce:	e000      	b.n	800dfd2 <f_printf+0x396>
 800dfd0:	2320      	movs	r3, #32
 800dfd2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800dfd6:	e007      	b.n	800dfe8 <f_printf+0x3ac>
 800dfd8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800dfdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7ff fdb9 	bl	800db5a <putc_bfd>
 800dfe8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800dfec:	f003 0302 	and.w	r3, r3, #2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d108      	bne.n	800e006 <f_printf+0x3ca>
 800dff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dff8:	1c5a      	adds	r2, r3, #1
 800dffa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800dffe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e002:	429a      	cmp	r2, r3
 800e004:	d8e8      	bhi.n	800dfd8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800e006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e00a:	3b01      	subs	r3, #1
 800e00c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e010:	f107 020c 	add.w	r2, r7, #12
 800e014:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e018:	4413      	add	r3, r2
 800e01a:	781a      	ldrb	r2, [r3, #0]
 800e01c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e020:	4611      	mov	r1, r2
 800e022:	4618      	mov	r0, r3
 800e024:	f7ff fd99 	bl	800db5a <putc_bfd>
		} while (i);
 800e028:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1ea      	bne.n	800e006 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800e030:	e007      	b.n	800e042 <f_printf+0x406>
 800e032:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800e036:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e03a:	4611      	mov	r1, r2
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7ff fd8c 	bl	800db5a <putc_bfd>
 800e042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e04c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e050:	429a      	cmp	r2, r3
 800e052:	d8ee      	bhi.n	800e032 <f_printf+0x3f6>
		c = *fmt++;
 800e054:	e600      	b.n	800dc58 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800e056:	bf00      	nop
 800e058:	e000      	b.n	800e05c <f_printf+0x420>
		if (!c) break;
 800e05a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800e05c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff fdb0 	bl	800dbc6 <putc_flush>
 800e066:	4603      	mov	r3, r0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	379c      	adds	r7, #156	@ 0x9c
 800e06c:	46bd      	mov	sp, r7
 800e06e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e072:	b003      	add	sp, #12
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop

0800e078 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e078:	b480      	push	{r7}
 800e07a:	b087      	sub	sp, #28
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	4613      	mov	r3, r2
 800e084:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e086:	2301      	movs	r3, #1
 800e088:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e08e:	4b1f      	ldr	r3, [pc, #124]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e090:	7a5b      	ldrb	r3, [r3, #9]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	2b00      	cmp	r3, #0
 800e096:	d131      	bne.n	800e0fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e098:	4b1c      	ldr	r3, [pc, #112]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e09a:	7a5b      	ldrb	r3, [r3, #9]
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	461a      	mov	r2, r3
 800e0a0:	4b1a      	ldr	r3, [pc, #104]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e0a6:	4b19      	ldr	r3, [pc, #100]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e0a8:	7a5b      	ldrb	r3, [r3, #9]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	4a17      	ldr	r2, [pc, #92]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e0b6:	4b15      	ldr	r3, [pc, #84]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e0b8:	7a5b      	ldrb	r3, [r3, #9]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	461a      	mov	r2, r3
 800e0be:	4b13      	ldr	r3, [pc, #76]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e0c0:	4413      	add	r3, r2
 800e0c2:	79fa      	ldrb	r2, [r7, #7]
 800e0c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e0c6:	4b11      	ldr	r3, [pc, #68]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e0c8:	7a5b      	ldrb	r3, [r3, #9]
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	b2d1      	uxtb	r1, r2
 800e0d0:	4a0e      	ldr	r2, [pc, #56]	@ (800e10c <FATFS_LinkDriverEx+0x94>)
 800e0d2:	7251      	strb	r1, [r2, #9]
 800e0d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e0d6:	7dbb      	ldrb	r3, [r7, #22]
 800e0d8:	3330      	adds	r3, #48	@ 0x30
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	223a      	movs	r2, #58	@ 0x3a
 800e0e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	3302      	adds	r3, #2
 800e0ec:	222f      	movs	r2, #47	@ 0x2f
 800e0ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	3303      	adds	r3, #3
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	371c      	adds	r7, #28
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	2000052c 	.word	0x2000052c

0800e110 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e11a:	2200      	movs	r2, #0
 800e11c:	6839      	ldr	r1, [r7, #0]
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7ff ffaa 	bl	800e078 <FATFS_LinkDriverEx>
 800e124:	4603      	mov	r3, r0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <memset>:
 800e12e:	4402      	add	r2, r0
 800e130:	4603      	mov	r3, r0
 800e132:	4293      	cmp	r3, r2
 800e134:	d100      	bne.n	800e138 <memset+0xa>
 800e136:	4770      	bx	lr
 800e138:	f803 1b01 	strb.w	r1, [r3], #1
 800e13c:	e7f9      	b.n	800e132 <memset+0x4>
	...

0800e140 <__libc_init_array>:
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	4d0d      	ldr	r5, [pc, #52]	@ (800e178 <__libc_init_array+0x38>)
 800e144:	2600      	movs	r6, #0
 800e146:	4c0d      	ldr	r4, [pc, #52]	@ (800e17c <__libc_init_array+0x3c>)
 800e148:	1b64      	subs	r4, r4, r5
 800e14a:	10a4      	asrs	r4, r4, #2
 800e14c:	42a6      	cmp	r6, r4
 800e14e:	d109      	bne.n	800e164 <__libc_init_array+0x24>
 800e150:	4d0b      	ldr	r5, [pc, #44]	@ (800e180 <__libc_init_array+0x40>)
 800e152:	2600      	movs	r6, #0
 800e154:	4c0b      	ldr	r4, [pc, #44]	@ (800e184 <__libc_init_array+0x44>)
 800e156:	f000 f817 	bl	800e188 <_init>
 800e15a:	1b64      	subs	r4, r4, r5
 800e15c:	10a4      	asrs	r4, r4, #2
 800e15e:	42a6      	cmp	r6, r4
 800e160:	d105      	bne.n	800e16e <__libc_init_array+0x2e>
 800e162:	bd70      	pop	{r4, r5, r6, pc}
 800e164:	f855 3b04 	ldr.w	r3, [r5], #4
 800e168:	3601      	adds	r6, #1
 800e16a:	4798      	blx	r3
 800e16c:	e7ee      	b.n	800e14c <__libc_init_array+0xc>
 800e16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e172:	3601      	adds	r6, #1
 800e174:	4798      	blx	r3
 800e176:	e7f2      	b.n	800e15e <__libc_init_array+0x1e>
 800e178:	0800e414 	.word	0x0800e414
 800e17c:	0800e414 	.word	0x0800e414
 800e180:	0800e414 	.word	0x0800e414
 800e184:	0800e418 	.word	0x0800e418

0800e188 <_init>:
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18a:	bf00      	nop
 800e18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e18e:	bc08      	pop	{r3}
 800e190:	469e      	mov	lr, r3
 800e192:	4770      	bx	lr

0800e194 <_fini>:
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	bf00      	nop
 800e198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e19a:	bc08      	pop	{r3}
 800e19c:	469e      	mov	lr, r3
 800e19e:	4770      	bx	lr
