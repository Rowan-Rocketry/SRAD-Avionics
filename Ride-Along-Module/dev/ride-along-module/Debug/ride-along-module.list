
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008288  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000187  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008650  08008650  00018650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008654  08008654  00018654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08008658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000571  20000070  080086c8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  200005e1  080086c8  000205e1  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c603  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f8b  00000000  00000000  0003c6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014f8  00000000  00000000  0003f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013d0  00000000  00000000  00040b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030f38  00000000  00000000  00041f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001adc5  00000000  00000000  00072e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001358cc  00000000  00000000  0008dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c34c9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ddc  00000000  00000000  001c351c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	080084a8 	.word	0x080084a8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	080084a8 	.word	0x080084a8

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <LSM6DSL_init>:

static int16_t currentAccel[3];
static int16_t currentGyro[3];

void LSM6DSL_init(LSM6DSL_HandleTypeDef* LSM6DSL_initStruct)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	config = LSM6DSL_initStruct;
 80005a0:	4a49      	ldr	r2, [pc, #292]	; (80006c8 <LSM6DSL_init+0x130>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]

	// Accelerometer sensitivity based on full scale (from datasheet)
	switch (config->accelFullScale)
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <LSM6DSL_init+0x130>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	7a9b      	ldrb	r3, [r3, #10]
 80005ac:	2b0a      	cmp	r3, #10
 80005ae:	d82c      	bhi.n	800060a <LSM6DSL_init+0x72>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <LSM6DSL_init+0x20>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	080005e5 	.word	0x080005e5
 80005bc:	0800060b 	.word	0x0800060b
 80005c0:	0800060b 	.word	0x0800060b
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000603 	.word	0x08000603
 80005cc:	0800060b 	.word	0x0800060b
 80005d0:	0800060b 	.word	0x0800060b
 80005d4:	0800060b 	.word	0x0800060b
 80005d8:	080005ef 	.word	0x080005ef
 80005dc:	0800060b 	.word	0x0800060b
 80005e0:	080005f9 	.word	0x080005f9
	{
		case LSM6DSL_ACCEL_FS_PM_2:
			config->accelSensitivity = 0.061f;
 80005e4:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <LSM6DSL_init+0x130>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a38      	ldr	r2, [pc, #224]	; (80006cc <LSM6DSL_init+0x134>)
 80005ea:	611a      	str	r2, [r3, #16]
			break;
 80005ec:	e00d      	b.n	800060a <LSM6DSL_init+0x72>
		case LSM6DSL_ACCEL_FS_PM_4:
			config->accelSensitivity = 0.122f;
 80005ee:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <LSM6DSL_init+0x130>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a37      	ldr	r2, [pc, #220]	; (80006d0 <LSM6DSL_init+0x138>)
 80005f4:	611a      	str	r2, [r3, #16]
			break;
 80005f6:	e008      	b.n	800060a <LSM6DSL_init+0x72>
		case LSM6DSL_ACCEL_FS_PM_8:
			config->accelSensitivity = 0.244f;
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <LSM6DSL_init+0x130>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a35      	ldr	r2, [pc, #212]	; (80006d4 <LSM6DSL_init+0x13c>)
 80005fe:	611a      	str	r2, [r3, #16]
			break;
 8000600:	e003      	b.n	800060a <LSM6DSL_init+0x72>
		case LSM6DSL_ACCEL_FS_PM_16:
			config->accelSensitivity = 0.488f;
 8000602:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <LSM6DSL_init+0x130>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <LSM6DSL_init+0x140>)
 8000608:	611a      	str	r2, [r3, #16]
	}

	// Gyro sensitivity based on full scale (from datasheet)
	switch (config->gyroFullScale)
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <LSM6DSL_init+0x130>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	7adb      	ldrb	r3, [r3, #11]
 8000610:	2b0c      	cmp	r3, #12
 8000612:	d835      	bhi.n	8000680 <LSM6DSL_init+0xe8>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <LSM6DSL_init+0x84>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800065b 	.word	0x0800065b
 8000620:	08000681 	.word	0x08000681
 8000624:	08000651 	.word	0x08000651
 8000628:	08000681 	.word	0x08000681
 800062c:	08000665 	.word	0x08000665
 8000630:	08000681 	.word	0x08000681
 8000634:	08000681 	.word	0x08000681
 8000638:	08000681 	.word	0x08000681
 800063c:	0800066f 	.word	0x0800066f
 8000640:	08000681 	.word	0x08000681
 8000644:	08000681 	.word	0x08000681
 8000648:	08000681 	.word	0x08000681
 800064c:	08000679 	.word	0x08000679
	{
		case LSM6DSL_GYRO_FS_PM_125:
			config->gyroSensitivity = 4.375f;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <LSM6DSL_init+0x130>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <LSM6DSL_init+0x144>)
 8000656:	615a      	str	r2, [r3, #20]
			break;
 8000658:	e012      	b.n	8000680 <LSM6DSL_init+0xe8>
		case LSM6DSL_GYRO_FS_PM_250:	
			config->gyroSensitivity = 8.75f;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <LSM6DSL_init+0x130>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <LSM6DSL_init+0x148>)
 8000660:	615a      	str	r2, [r3, #20]
			break;
 8000662:	e00d      	b.n	8000680 <LSM6DSL_init+0xe8>
		case LSM6DSL_GYRO_FS_PM_500:	
			config->gyroSensitivity = 17.50f;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <LSM6DSL_init+0x130>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <LSM6DSL_init+0x14c>)
 800066a:	615a      	str	r2, [r3, #20]
			break;
 800066c:	e008      	b.n	8000680 <LSM6DSL_init+0xe8>
		case LSM6DSL_GYRO_FS_PM_1000:	
			config->gyroSensitivity = 35.0f;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <LSM6DSL_init+0x130>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <LSM6DSL_init+0x150>)
 8000674:	615a      	str	r2, [r3, #20]
			break;
 8000676:	e003      	b.n	8000680 <LSM6DSL_init+0xe8>
		case LSM6DSL_GYRO_FS_PM_2000:	
			config->gyroSensitivity = 70.0f;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <LSM6DSL_init+0x130>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <LSM6DSL_init+0x154>)
 800067e:	615a      	str	r2, [r3, #20]
	}

	LSM6DSL_writeRegister(LSM6DSL_CTRL1_XL, 
			config->outputDataRate | config->accelFullScale);
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <LSM6DSL_init+0x130>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	7b1a      	ldrb	r2, [r3, #12]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <LSM6DSL_init+0x130>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	7a9b      	ldrb	r3, [r3, #10]
	LSM6DSL_writeRegister(LSM6DSL_CTRL1_XL, 
 800068c:	4313      	orrs	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	2010      	movs	r0, #16
 8000694:	f000 f82c 	bl	80006f0 <LSM6DSL_writeRegister>

	LSM6DSL_writeRegister(LSM6DSL_CTRL2_G, 
			config->outputDataRate | config->gyroFullScale);
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LSM6DSL_init+0x130>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	7b1a      	ldrb	r2, [r3, #12]
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <LSM6DSL_init+0x130>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7adb      	ldrb	r3, [r3, #11]
	LSM6DSL_writeRegister(LSM6DSL_CTRL2_G, 
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	2011      	movs	r0, #17
 80006ac:	f000 f820 	bl	80006f0 <LSM6DSL_writeRegister>


	// Configure INT1 for accelerometer data ready.
	LSM6DSL_writeRegister(LSM6DSL_INT1_CTRL, LSM6DSL_INT_ACCEL_READY);
 80006b0:	2101      	movs	r1, #1
 80006b2:	200d      	movs	r0, #13
 80006b4:	f000 f81c 	bl	80006f0 <LSM6DSL_writeRegister>
	
	// Configure INT2 for gyroscope data ready.
	LSM6DSL_writeRegister(LSM6DSL_INT2_CTRL, LSM6DSL_INT_GYRO_READY);
 80006b8:	2102      	movs	r1, #2
 80006ba:	200e      	movs	r0, #14
 80006bc:	f000 f818 	bl	80006f0 <LSM6DSL_writeRegister>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	3d79db23 	.word	0x3d79db23
 80006d0:	3df9db23 	.word	0x3df9db23
 80006d4:	3e79db23 	.word	0x3e79db23
 80006d8:	3ef9db23 	.word	0x3ef9db23
 80006dc:	408c0000 	.word	0x408c0000
 80006e0:	410c0000 	.word	0x410c0000
 80006e4:	418c0000 	.word	0x418c0000
 80006e8:	420c0000 	.word	0x420c0000
 80006ec:	428c0000 	.word	0x428c0000

080006f0 <LSM6DSL_writeRegister>:
	currentGyro[1] = (uint16_t)(gyRaw * config->gyroSensitivity);
	currentGyro[2] = (uint16_t)(gzRaw * config->gyroSensitivity);
}

void LSM6DSL_writeRegister(uint8_t reg, uint8_t value)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[] = {LSM6DSL_WRITE & reg, value};
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000706:	b2db      	uxtb	r3, r3
 8000708:	733b      	strb	r3, [r7, #12]
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	737b      	strb	r3, [r7, #13]

	LSM6DSL_enable();
 800070e:	f000 f84f 	bl	80007b0 <LSM6DSL_enable>
	HAL_SPI_Transmit(config->spi, buffer, 2, HAL_MAX_DELAY);
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <LSM6DSL_writeRegister+0x44>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000720:	2202      	movs	r2, #2
 8000722:	f005 fea3 	bl	800646c <HAL_SPI_Transmit>
	LSM6DSL_disable();
 8000726:	f000 f853 	bl	80007d0 <LSM6DSL_disable>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000008c 	.word	0x2000008c

08000738 <LSM6DSL_getAccel>:

	return buffer.result;
}

void LSM6DSL_getAccel(int16_t* accel)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	accel[0] = currentAccel[0];
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <LSM6DSL_getAccel+0x38>)
 8000742:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	801a      	strh	r2, [r3, #0]
	accel[1] = currentAccel[1];
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3302      	adds	r3, #2
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <LSM6DSL_getAccel+0x38>)
 8000750:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000754:	801a      	strh	r2, [r3, #0]
	accel[2] = currentAccel[2];
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3304      	adds	r3, #4
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <LSM6DSL_getAccel+0x38>)
 800075c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000760:	801a      	strh	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000090 	.word	0x20000090

08000774 <LSM6DSL_getGyro>:

void LSM6DSL_getGyro(int16_t* gyro)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	gyro[0] = currentGyro[0];
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <LSM6DSL_getGyro+0x38>)
 800077e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	801a      	strh	r2, [r3, #0]
	gyro[1] = currentGyro[1];
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3302      	adds	r3, #2
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <LSM6DSL_getGyro+0x38>)
 800078c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000790:	801a      	strh	r2, [r3, #0]
	gyro[2] = currentGyro[2];
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3304      	adds	r3, #4
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <LSM6DSL_getGyro+0x38>)
 8000798:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800079c:	801a      	strh	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000098 	.word	0x20000098

080007b0 <LSM6DSL_enable>:

void LSM6DSL_enable()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	// Set cs low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <LSM6DSL_enable+0x1c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6858      	ldr	r0, [r3, #4]
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <LSM6DSL_enable+0x1c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	891b      	ldrh	r3, [r3, #8]
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	f001 fcc0 	bl	8002148 <HAL_GPIO_WritePin>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000008c 	.word	0x2000008c

080007d0 <LSM6DSL_disable>:

void LSM6DSL_disable()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	// Set cs high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <LSM6DSL_disable+0x1c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6858      	ldr	r0, [r3, #4]
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LSM6DSL_disable+0x1c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	891b      	ldrh	r3, [r3, #8]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	f001 fcb0 	bl	8002148 <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000008c 	.word	0x2000008c

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0a2      	sub	sp, #136	; 0x88
 80007f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f001 f967 	bl	8001ac8 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Configure MS5607
	MS5607_HandleTypeDef ms5607Config = {0};
 80007fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
	ms5607Config.spi = &hspi1;
 8000808:	4b5e      	ldr	r3, [pc, #376]	; (8000984 <main+0x194>)
 800080a:	66fb      	str	r3, [r7, #108]	; 0x6c
	ms5607Config.timer = &htim16;
 800080c:	4b5e      	ldr	r3, [pc, #376]	; (8000988 <main+0x198>)
 800080e:	673b      	str	r3, [r7, #112]	; 0x70
	ms5607Config.csPort = GPIOA;
 8000810:	4b5e      	ldr	r3, [pc, #376]	; (800098c <main+0x19c>)
 8000812:	677b      	str	r3, [r7, #116]	; 0x74
	ms5607Config.csPin = GPIO_PIN_3;
 8000814:	2308      	movs	r3, #8
 8000816:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	ms5607Config.osr = MS5607_OSR_1024;
 800081a:	2304      	movs	r3, #4
 800081c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

	// Configure LSM6DSL
	LSM6DSL_HandleTypeDef lsm6dslConfig = {0};
 8000820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
	lsm6dslConfig.spi = &hspi2;
 8000832:	4b57      	ldr	r3, [pc, #348]	; (8000990 <main+0x1a0>)
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
	lsm6dslConfig.csPort = GPIOH;
 8000836:	4b57      	ldr	r3, [pc, #348]	; (8000994 <main+0x1a4>)
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
	lsm6dslConfig.csPin = GPIO_PIN_1;
 800083a:	2302      	movs	r3, #2
 800083c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	lsm6dslConfig.accelFullScale = LSM6DSL_ACCEL_FS_PM_16;
 8000840:	2304      	movs	r3, #4
 8000842:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	lsm6dslConfig.gyroFullScale = LSM6DSL_GYRO_FS_PM_500;
 8000846:	2304      	movs	r3, #4
 8000848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f8ae 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f000 fa78 	bl	8000d44 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000854:	f000 f9d2 	bl	8000bfc <MX_TIM16_Init>
  MX_SPI1_Init();
 8000858:	f000 f8f4 	bl	8000a44 <MX_SPI1_Init>
  MX_SPI2_Init();
 800085c:	f000 f960 	bl	8000b20 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000860:	f000 f9f8 	bl	8000c54 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000864:	f000 fa42 	bl	8000cec <MX_USB_PCD_Init>
  //MX_SDMMC1_SD_Init();
  /* USER CODE BEGIN 2 */
  
	MS5607_init(&ms5607Config);
 8000868:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fb05 	bl	8000e7c <MS5607_init>
	LSM6DSL_init(&lsm6dslConfig);
 8000872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe8e 	bl	8000598 <LSM6DSL_init>
	MX_TIM16_Init();
 800087c:	f000 f9be 	bl	8000bfc <MX_TIM16_Init>

	// Internal values from sensors
	uint32_t pressure;
	int16_t accel[] = {0,0,0};
 8000880:	2300      	movs	r3, #0
 8000882:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000886:	2300      	movs	r3, #0
 8000888:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800088c:	2300      	movs	r3, #0
 800088e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gyro[] = {0,0,0};
 8000892:	2300      	movs	r3, #0
 8000894:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000898:	2300      	movs	r3, #0
 800089a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800089e:	2300      	movs	r3, #0
 80008a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	if (MS5607_getState() == MS5607_IDLE)
 80008a4:	f000 fe2c 	bl	8001500 <MS5607_getState>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d1fa      	bne.n	80008a4 <main+0xb4>
	{
		// Get result of digital read
		MS5607_RawVal rawVals = MS5607_getRawValues();
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fe06 	bl	80014c4 <MS5607_getRawValues>

		// Compensate digital reading
		MS5607_CompVal compVals = MS5607_getCompValues(&rawVals);
 80008b8:	463b      	mov	r3, r7
 80008ba:	f107 0208 	add.w	r2, r7, #8
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fb43 	bl	8000f4c <MS5607_getCompValues>

		// Update local values
		LSM6DSL_getAccel(accel);
 80008c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff34 	bl	8000738 <LSM6DSL_getAccel>
		LSM6DSL_getGyro(gyro);
 80008d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff4d 	bl	8000774 <LSM6DSL_getGyro>
		
		// Write timestamp
		uartBufferLen = sprintf(uartBuffer, "Time: %d[ms]\n", HAL_GetTick());
 80008da:	f001 f96d 	bl	8001bb8 <HAL_GetTick>
 80008de:	4602      	mov	r2, r0
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	492c      	ldr	r1, [pc, #176]	; (8000998 <main+0x1a8>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f007 f960 	bl	8007bac <siprintf>
 80008ec:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 80008ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	f107 0110 	add.w	r1, r7, #16
 80008f6:	2364      	movs	r3, #100	; 0x64
 80008f8:	4828      	ldr	r0, [pc, #160]	; (800099c <main+0x1ac>)
 80008fa:	f006 fb41 	bl	8006f80 <HAL_UART_Transmit>

		// Write pressure
		uartBufferLen = sprintf(uartBuffer, "Pressure: %d[Pa]\n", compVals.pres);
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4926      	ldr	r1, [pc, #152]	; (80009a0 <main+0x1b0>)
 8000906:	4618      	mov	r0, r3
 8000908:	f007 f950 	bl	8007bac <siprintf>
 800090c:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 800090e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000910:	b29a      	uxth	r2, r3
 8000912:	f107 0110 	add.w	r1, r7, #16
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <main+0x1ac>)
 800091a:	f006 fb31 	bl	8006f80 <HAL_UART_Transmit>
		
		// Write acceleration
		uartBufferLen = sprintf(uartBuffer, "Accel: [%d, %d, %d]\n", accel[0], accel[1], accel[2]);
 800091e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000922:	461a      	mov	r2, r3
 8000924:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000928:	4619      	mov	r1, r3
 800092a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800092e:	f107 0010 	add.w	r0, r7, #16
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	460b      	mov	r3, r1
 8000936:	491b      	ldr	r1, [pc, #108]	; (80009a4 <main+0x1b4>)
 8000938:	f007 f938 	bl	8007bac <siprintf>
 800093c:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 800093e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000940:	b29a      	uxth	r2, r3
 8000942:	f107 0110 	add.w	r1, r7, #16
 8000946:	2364      	movs	r3, #100	; 0x64
 8000948:	4814      	ldr	r0, [pc, #80]	; (800099c <main+0x1ac>)
 800094a:	f006 fb19 	bl	8006f80 <HAL_UART_Transmit>

		// Write gyro
		uartBufferLen = sprintf(uartBuffer, "Gyro: [%d, %d, %d]\n", gyro[0], gyro[1], gyro[2]);
 800094e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000952:	461a      	mov	r2, r3
 8000954:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000958:	4619      	mov	r1, r3
 800095a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800095e:	f107 0010 	add.w	r0, r7, #16
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	460b      	mov	r3, r1
 8000966:	4910      	ldr	r1, [pc, #64]	; (80009a8 <main+0x1b8>)
 8000968:	f007 f920 	bl	8007bac <siprintf>
 800096c:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 800096e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000970:	b29a      	uxth	r2, r3
 8000972:	f107 0110 	add.w	r1, r7, #16
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <main+0x1ac>)
 800097a:	f006 fb01 	bl	8006f80 <HAL_UART_Transmit>

		// Measure again
		MS5607_readUncompPres();
 800097e:	f000 fd61 	bl	8001444 <MS5607_readUncompPres>
	if (MS5607_getState() == MS5607_IDLE)
 8000982:	e78f      	b.n	80008a4 <main+0xb4>
 8000984:	200000a0 	.word	0x200000a0
 8000988:	200001c0 	.word	0x200001c0
 800098c:	42020000 	.word	0x42020000
 8000990:	20000130 	.word	0x20000130
 8000994:	42021c00 	.word	0x42021c00
 8000998:	080084c0 	.word	0x080084c0
 800099c:	2000020c 	.word	0x2000020c
 80009a0:	080084d0 	.word	0x080084d0
 80009a4:	080084e4 	.word	0x080084e4
 80009a8:	080084fc 	.word	0x080084fc

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09e      	sub	sp, #120	; 0x78
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2260      	movs	r2, #96	; 0x60
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 f8ee 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f001 fcff 	bl	80023d4 <HAL_PWREx_ControlVoltageScaling>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009dc:	f000 fa48 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80009e0:	2330      	movs	r3, #48	; 0x30
 80009e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ea:	2301      	movs	r3, #1
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009ee:	2310      	movs	r3, #16
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80009f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fd83 	bl	800250c <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000a0c:	f000 fa30 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	231f      	movs	r3, #31
 8000a12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fc49 	bl	80032c4 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a38:	f000 fa1a 	bl	8000e70 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3778      	adds	r7, #120	; 0x78
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a56:	4a31      	ldr	r2, [pc, #196]	; (8000b1c <MX_SPI1_Init+0xd8>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000ade:	f005 fbaf 	bl	8006240 <HAL_SPI_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 8000ae8:	f000 f9c2 	bl	8000e70 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000af0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_SPI1_Init+0xd4>)
 8000b00:	f005 ffbb 	bl	8006a7a <HAL_SPIEx_SetConfigAutonomousMode>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 8000b0a:	f000 f9b1 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000a0 	.word	0x200000a0
 8000b1c:	40013000 	.word	0x40013000

08000b20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b32:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <MX_SPI2_Init+0xd8>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000bbc:	f005 fb40 	bl	8006240 <HAL_SPI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000bc6:	f000 f953 	bl	8000e70 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bd2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_SPI2_Init+0xd4>)
 8000bde:	f005 ff4c 	bl	8006a7a <HAL_SPIEx_SetConfigAutonomousMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000be8:	f000 f942 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000130 	.word	0x20000130
 8000bf8:	40003800 	.word	0x40003800

08000bfc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	uint16_t ms5607MeasurementDelay = MS5607_getMeasurementDelay();
 8000c02:	f000 fc71 	bl	80014e8 <MS5607_getMeasurementDelay>
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c0c:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <MX_TIM16_Init+0x54>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40-1;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c12:	2227      	movs	r2, #39	; 0x27
 8000c14:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = ms5607MeasurementDelay;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c20:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_TIM16_Init+0x50>)
 8000c36:	f005 ff61 	bl	8006afc <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM16_Init+0x48>
  {
    Error_Handler();
 8000c40:	f000 f916 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200001c0 	.word	0x200001c0
 8000c50:	40014400 	.word	0x40014400

08000c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_USART1_UART_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000c9e:	f006 f91f 	bl	8006ee0 <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 f8e2 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000cb0:	f006 fdde 	bl	8007870 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f000 f8d9 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000cc2:	f006 fe13 	bl	80078ec <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ccc:	f000 f8d0 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_USART1_UART_Init+0x90>)
 8000cd2:	f006 fd94 	bl	80077fe <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 f8c8 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000020c 	.word	0x2000020c
 8000ce8:	40013800 	.word	0x40013800

08000cec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <MX_USB_PCD_Init+0x54>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USB_PCD_Init+0x50>)
 8000d28:	f001 fa26 	bl	8002178 <HAL_PCD_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USB_PCD_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 f89d 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200002a0 	.word	0x200002a0
 8000d40:	40016000 	.word	0x40016000

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d60:	4a3e      	ldr	r2, [pc, #248]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d6a:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d78:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d7e:	4a37      	ldr	r2, [pc, #220]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d88:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d9c:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dba:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dd8:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_GPIO_Init+0x118>)
 8000de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2102      	movs	r1, #2
 8000df4:	481a      	ldr	r0, [pc, #104]	; (8000e60 <MX_GPIO_Init+0x11c>)
 8000df6:	f001 f9a7 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4819      	ldr	r0, [pc, #100]	; (8000e64 <MX_GPIO_Init+0x120>)
 8000e00:	f001 f9a2 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e04:	2302      	movs	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_GPIO_Init+0x11c>)
 8000e1c:	f000 ffbc 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8000e20:	2309      	movs	r3, #9
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_GPIO_Init+0x124>)
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <MX_GPIO_Init+0x128>)
 8000e34:	f000 ffb0 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_GPIO_Init+0x120>)
 8000e50:	f000 ffa2 	bl	8001d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	46020c00 	.word	0x46020c00
 8000e60:	42021c00 	.word	0x42021c00
 8000e64:	42020000 	.word	0x42020000
 8000e68:	10110000 	.word	0x10110000
 8000e6c:	42020800 	.word	0x42020800

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <MS5607_init>:
static uint16_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_init(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	MS5607_disable();
 8000e84:	f000 fb0e 	bl	80014a4 <MS5607_disable>

	config = MS5607_initStruct;
 8000e88:	4a2a      	ldr	r2, [pc, #168]	; (8000f34 <MS5607_init+0xb8>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <MS5607_init+0xb8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	7b9b      	ldrb	r3, [r3, #14]
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MS5607_init+0xbc>)
 8000e9c:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MS5607_init+0xb8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	7b9b      	ldrb	r3, [r3, #14]
 8000ea4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MS5607_init+0xc0>)
 8000eac:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <MS5607_init+0xb8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	7b9b      	ldrb	r3, [r3, #14]
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d82a      	bhi.n	8000f0e <MS5607_init+0x92>
 8000eb8:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <MS5607_init+0x44>)
 8000eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebe:	bf00      	nop
 8000ec0:	08000ee5 	.word	0x08000ee5
 8000ec4:	08000f0f 	.word	0x08000f0f
 8000ec8:	08000eed 	.word	0x08000eed
 8000ecc:	08000f0f 	.word	0x08000f0f
 8000ed0:	08000ef5 	.word	0x08000ef5
 8000ed4:	08000f0f 	.word	0x08000f0f
 8000ed8:	08000efd 	.word	0x08000efd
 8000edc:	08000f0f 	.word	0x08000f0f
 8000ee0:	08000f07 	.word	0x08000f07
	{
		case MS5607_OSR_256:
			measurementDelay = 50;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MS5607_init+0xc4>)
 8000ee6:	2232      	movs	r2, #50	; 0x32
 8000ee8:	801a      	strh	r2, [r3, #0]
			break;
 8000eea:	e010      	b.n	8000f0e <MS5607_init+0x92>
		case MS5607_OSR_512:
			measurementDelay = 110;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MS5607_init+0xc4>)
 8000eee:	226e      	movs	r2, #110	; 0x6e
 8000ef0:	801a      	strh	r2, [r3, #0]
			break;
 8000ef2:	e00c      	b.n	8000f0e <MS5607_init+0x92>
		case MS5607_OSR_1024:
			measurementDelay = 210;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MS5607_init+0xc4>)
 8000ef6:	22d2      	movs	r2, #210	; 0xd2
 8000ef8:	801a      	strh	r2, [r3, #0]
			break;
 8000efa:	e008      	b.n	8000f0e <MS5607_init+0x92>
		case MS5607_OSR_2048:
			measurementDelay = 410;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MS5607_init+0xc4>)
 8000efe:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8000f02:	801a      	strh	r2, [r3, #0]
			break;
 8000f04:	e003      	b.n	8000f0e <MS5607_init+0x92>
		case MS5607_OSR_4096:
			measurementDelay = 822;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MS5607_init+0xc4>)
 8000f08:	f240 3236 	movw	r2, #822	; 0x336
 8000f0c:	801a      	strh	r2, [r3, #0]
	}

	MS5607_enable();
 8000f0e:	f000 fab9 	bl	8001484 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_RESET, 1, 100);
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MS5607_init+0xb8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <MS5607_init+0xc8>)
 8000f1e:	f005 faa5 	bl	800646c <HAL_SPI_Transmit>
	MS5607_disable();
 8000f22:	f000 fabf 	bl	80014a4 <MS5607_disable>

	state = MS5607_STARTUP;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MS5607_init+0xcc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200005ac 	.word	0x200005ac
 8000f38:	200005c8 	.word	0x200005c8
 8000f3c:	200005c9 	.word	0x200005c9
 8000f40:	200005c6 	.word	0x200005c6
 8000f44:	08008510 	.word	0x08008510
 8000f48:	200005c4 	.word	0x200005c4

08000f4c <MS5607_getCompValues>:
		promDataPtr[promAddr-1] = ((uint8_t)responseBuffer[0]<<8) | (uint8_t)responseBuffer[1];
	}
}

MS5607_CompVal MS5607_getCompValues(MS5607_RawVal* rawVals)
{
 8000f4c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f50:	b0d5      	sub	sp, #340	; 0x154
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000f58:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
	MS5607_CompVal compVals;

	uint32_t digTemp = rawVals->temp;
 8000f5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint32_t digPres = rawVals->pres;
 8000f66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	// dT = D2 - TREF
	int32_t deltaTemp = digTemp - ((int32_t)promData.tRef << 8);
 8000f70:	4baf      	ldr	r3, [pc, #700]	; (8001230 <MS5607_getCompValues+0x2e4>)
 8000f72:	891b      	ldrh	r3, [r3, #8]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	461a      	mov	r2, r3
 8000f78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	
	// TEMP = 20°C + dT*TEMPSENS
	int32_t temp1 = 2000 + deltaTemp*((int32_t)promData.tempSens << 23);
 8000f82:	4bab      	ldr	r3, [pc, #684]	; (8001230 <MS5607_getCompValues+0x2e4>)
 8000f84:	895b      	ldrh	r3, [r3, #10]
 8000f86:	05da      	lsls	r2, r3, #23
 8000f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	// OFF = OFFT1 + TCO*dT
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8000f98:	4ba5      	ldr	r3, [pc, #660]	; (8001230 <MS5607_getCompValues+0x2e4>)
 8000f9a:	885b      	ldrh	r3, [r3, #2]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000fa8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8000fac:	460b      	mov	r3, r1
 8000fae:	0bdb      	lsrs	r3, r3, #15
 8000fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	045b      	lsls	r3, r3, #17
 8000fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				   + (((int64_t)promData.tco*deltaTemp) >> 6);
 8000fbc:	4b9c      	ldr	r3, [pc, #624]	; (8001230 <MS5607_getCompValues+0x2e4>)
 8000fbe:	88db      	ldrh	r3, [r3, #6]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000fc8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8000fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000fd0:	17da      	asrs	r2, r3, #31
 8000fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000fd6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000fda:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8000fde:	460b      	mov	r3, r1
 8000fe0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000fe4:	fb02 f203 	mul.w	r2, r2, r3
 8000fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000fec:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	fb01 f303 	mul.w	r3, r1, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000ffc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001000:	fba2 4501 	umull	r4, r5, r2, r1
 8001004:	442b      	add	r3, r5
 8001006:	461d      	mov	r5, r3
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	09a2      	lsrs	r2, r4, #6
 8001012:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001016:	11ab      	asrs	r3, r5, #6
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8001018:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800101c:	4621      	mov	r1, r4
 800101e:	1889      	adds	r1, r1, r2
 8001020:	6339      	str	r1, [r7, #48]	; 0x30
 8001022:	4629      	mov	r1, r5
 8001024:	eb43 0101 	adc.w	r1, r3, r1
 8001028:	6379      	str	r1, [r7, #52]	; 0x34
 800102a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800102e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	
	// SENS = SENST1 + TCS* dT
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 8001032:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <MS5607_getCompValues+0x2e4>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	2200      	movs	r2, #0
 800103a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800103e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001042:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001046:	460b      	mov	r3, r1
 8001048:	0c1b      	lsrs	r3, r3, #16
 800104a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800104e:	460b      	mov	r3, r1
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						+ (((int64_t)promData.tcs*deltaTemp) >> 7);
 8001056:	4b76      	ldr	r3, [pc, #472]	; (8001230 <MS5607_getCompValues+0x2e4>)
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	b29b      	uxth	r3, r3
 800105c:	2200      	movs	r2, #0
 800105e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001062:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001066:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800106a:	17da      	asrs	r2, r3, #31
 800106c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001070:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001078:	460b      	mov	r3, r1
 800107a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800107e:	4622      	mov	r2, r4
 8001080:	fb02 f203 	mul.w	r2, r2, r3
 8001084:	e9c7 453a 	strd	r4, r5, [r7, #232]	; 0xe8
 8001088:	462b      	mov	r3, r5
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	4621      	mov	r1, r4
 8001090:	fb01 f303 	mul.w	r3, r1, r3
 8001094:	4413      	add	r3, r2
 8001096:	4622      	mov	r2, r4
 8001098:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800109c:	fba2 ab01 	umull	sl, fp, r2, r1
 80010a0:	445b      	add	r3, fp
 80010a2:	469b      	mov	fp, r3
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	ea4f 12da 	mov.w	r2, sl, lsr #7
 80010b0:	ea42 624b 	orr.w	r2, r2, fp, lsl #25
 80010b4:	ea4f 13eb 	mov.w	r3, fp, asr #7
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 80010b8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80010bc:	4621      	mov	r1, r4
 80010be:	1889      	adds	r1, r1, r2
 80010c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80010c2:	4629      	mov	r1, r5
 80010c4:	eb43 0101 	adc.w	r1, r3, r1
 80010c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80010ca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80010ce:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

	// Second order compensation
	if (temp1 < 2000)
 80010d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010da:	f280 8159 	bge.w	8001390 <MS5607_getCompValues+0x444>
	{
		int32_t temp2 = (deltaTemp*deltaTemp) >> 31;
 80010de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80010e2:	fb03 f303 	mul.w	r3, r3, r3
 80010e6:	17db      	asrs	r3, r3, #31
 80010e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		int32_t temp2000 = temp1 - 2000;
 80010ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010f0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80010f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		int64_t offset2 = 61*((int64_t)temp2000 * (int64_t)temp2000) >> 4;
 80010f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010fc:	17da      	asrs	r2, r3, #31
 80010fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800110a:	17da      	asrs	r2, r3, #31
 800110c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001114:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001118:	462b      	mov	r3, r5
 800111a:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
 800111e:	4652      	mov	r2, sl
 8001120:	fb02 f203 	mul.w	r2, r2, r3
 8001124:	465b      	mov	r3, fp
 8001126:	4621      	mov	r1, r4
 8001128:	fb01 f303 	mul.w	r3, r1, r3
 800112c:	4413      	add	r3, r2
 800112e:	4622      	mov	r2, r4
 8001130:	4651      	mov	r1, sl
 8001132:	fba2 1201 	umull	r1, r2, r2, r1
 8001136:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800113a:	460a      	mov	r2, r1
 800113c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001140:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001144:	4413      	add	r3, r2
 8001146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800114a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800114e:	4622      	mov	r2, r4
 8001150:	462b      	mov	r3, r5
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	f04f 0100 	mov.w	r1, #0
 800115a:	0119      	lsls	r1, r3, #4
 800115c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001160:	0110      	lsls	r0, r2, #4
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4621      	mov	r1, r4
 8001168:	ebb2 0801 	subs.w	r8, r2, r1
 800116c:	4629      	mov	r1, r5
 800116e:	eb63 0901 	sbc.w	r9, r3, r1
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800117e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8001182:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8001186:	4690      	mov	r8, r2
 8001188:	4699      	mov	r9, r3
 800118a:	4623      	mov	r3, r4
 800118c:	eb18 0303 	adds.w	r3, r8, r3
 8001190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001194:	462b      	mov	r3, r5
 8001196:	eb49 0303 	adc.w	r3, r9, r3
 800119a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80011aa:	4621      	mov	r1, r4
 80011ac:	090a      	lsrs	r2, r1, #4
 80011ae:	4629      	mov	r1, r5
 80011b0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80011b4:	4629      	mov	r1, r5
 80011b6:	110b      	asrs	r3, r1, #4
 80011b8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		int64_t sense2 = ((int64_t)temp2000 * (int64_t)temp2000) << 1;
 80011bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011c0:	17da      	asrs	r2, r3, #31
 80011c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80011c4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80011c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011ca:	17da      	asrs	r2, r3, #31
 80011cc:	673b      	str	r3, [r7, #112]	; 0x70
 80011ce:	677a      	str	r2, [r7, #116]	; 0x74
 80011d0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80011d4:	462b      	mov	r3, r5
 80011d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80011da:	4642      	mov	r2, r8
 80011dc:	fb02 f203 	mul.w	r2, r2, r3
 80011e0:	464b      	mov	r3, r9
 80011e2:	4621      	mov	r1, r4
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	4622      	mov	r2, r4
 80011ec:	4641      	mov	r1, r8
 80011ee:	fba2 1201 	umull	r1, r2, r2, r1
 80011f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80011f6:	460a      	mov	r2, r1
 80011f8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80011fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001200:	4413      	add	r3, r2
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800120a:	460b      	mov	r3, r1
 800120c:	18db      	adds	r3, r3, r3
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	4613      	mov	r3, r2
 8001212:	eb42 0303 	adc.w	r3, r2, r3
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
 8001218:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800121c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		if (temp1 < -1500)
 8001220:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <MS5607_getCompValues+0x2e8>)
 8001226:	429a      	cmp	r2, r3
 8001228:	f280 8091 	bge.w	800134e <MS5607_getCompValues+0x402>
 800122c:	e004      	b.n	8001238 <MS5607_getCompValues+0x2ec>
 800122e:	bf00      	nop
 8001230:	200005b0 	.word	0x200005b0
 8001234:	fffffa24 	.word	0xfffffa24
		{
			int32_t temp1500 = temp1 + 1500;
 8001238:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800123c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001240:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			offset2 += 15 * ((int64_t)temp1500 * (int64_t)temp1500);
 8001244:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001248:	17da      	asrs	r2, r3, #31
 800124a:	66bb      	str	r3, [r7, #104]	; 0x68
 800124c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800124e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001252:	17da      	asrs	r2, r3, #31
 8001254:	663b      	str	r3, [r7, #96]	; 0x60
 8001256:	667a      	str	r2, [r7, #100]	; 0x64
 8001258:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800125c:	462b      	mov	r3, r5
 800125e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001262:	4642      	mov	r2, r8
 8001264:	fb02 f203 	mul.w	r2, r2, r3
 8001268:	464b      	mov	r3, r9
 800126a:	4621      	mov	r1, r4
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	4413      	add	r3, r2
 8001272:	4622      	mov	r2, r4
 8001274:	4641      	mov	r1, r8
 8001276:	fba2 1201 	umull	r1, r2, r2, r1
 800127a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800127e:	460a      	mov	r2, r1
 8001280:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001284:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001288:	4413      	add	r3, r2
 800128a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800128e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001292:	4622      	mov	r2, r4
 8001294:	462b      	mov	r3, r5
 8001296:	f04f 0000 	mov.w	r0, #0
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	0119      	lsls	r1, r3, #4
 80012a0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80012a4:	0110      	lsls	r0, r2, #4
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4621      	mov	r1, r4
 80012ac:	1a51      	subs	r1, r2, r1
 80012ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80012b0:	4629      	mov	r1, r5
 80012b2:	eb63 0301 	sbc.w	r3, r3, r1
 80012b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012b8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80012bc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80012c0:	4621      	mov	r1, r4
 80012c2:	1851      	adds	r1, r2, r1
 80012c4:	61b9      	str	r1, [r7, #24]
 80012c6:	4629      	mov	r1, r5
 80012c8:	eb43 0101 	adc.w	r1, r3, r1
 80012cc:	61f9      	str	r1, [r7, #28]
 80012ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012d2:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			sense2 += ((int64_t)temp1500 * (int64_t)temp1500) << 3;
 80012d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012da:	17da      	asrs	r2, r3, #31
 80012dc:	653b      	str	r3, [r7, #80]	; 0x50
 80012de:	657a      	str	r2, [r7, #84]	; 0x54
 80012e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012e4:	17da      	asrs	r2, r3, #31
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80012e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80012ea:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80012ee:	462b      	mov	r3, r5
 80012f0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80012f4:	4642      	mov	r2, r8
 80012f6:	fb02 f203 	mul.w	r2, r2, r3
 80012fa:	464b      	mov	r3, r9
 80012fc:	4621      	mov	r1, r4
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	4413      	add	r3, r2
 8001304:	4622      	mov	r2, r4
 8001306:	4641      	mov	r1, r8
 8001308:	fba2 1201 	umull	r1, r2, r2, r1
 800130c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001310:	460a      	mov	r2, r1
 8001312:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001316:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800131a:	4413      	add	r3, r2
 800131c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001320:	f04f 0000 	mov.w	r0, #0
 8001324:	f04f 0100 	mov.w	r1, #0
 8001328:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800132c:	462b      	mov	r3, r5
 800132e:	00d9      	lsls	r1, r3, #3
 8001330:	4623      	mov	r3, r4
 8001332:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001336:	4623      	mov	r3, r4
 8001338:	00d8      	lsls	r0, r3, #3
 800133a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800133e:	1814      	adds	r4, r2, r0
 8001340:	613c      	str	r4, [r7, #16]
 8001342:	414b      	adcs	r3, r1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800134a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
		}

		temp1 -= temp2;
 800134e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001352:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		offset -= offset2;
 800135c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001360:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001364:	1a84      	subs	r4, r0, r2
 8001366:	60bc      	str	r4, [r7, #8]
 8001368:	eb61 0303 	sbc.w	r3, r1, r3
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001372:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		sensitivity -= sense2;
 8001376:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800137a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800137e:	1a84      	subs	r4, r0, r2
 8001380:	603c      	str	r4, [r7, #0]
 8001382:	eb61 0303 	sbc.w	r3, r1, r3
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	e9d7 3400 	ldrd	r3, r4, [r7]
 800138c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	}

	// Populate and return the compensated values
	compVals.pres = (((int64_t)(digPres*sensitivity) >> 21) - offset) >> 15;
 8001390:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001394:	2200      	movs	r2, #0
 8001396:	643b      	str	r3, [r7, #64]	; 0x40
 8001398:	647a      	str	r2, [r7, #68]	; 0x44
 800139a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800139e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80013a2:	462a      	mov	r2, r5
 80013a4:	fb02 f203 	mul.w	r2, r2, r3
 80013a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013ac:	4621      	mov	r1, r4
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80013b8:	4621      	mov	r1, r4
 80013ba:	fba2 1201 	umull	r1, r2, r2, r1
 80013be:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013c2:	460a      	mov	r2, r1
 80013c4:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80013c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80013cc:	4413      	add	r3, r2
 80013ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80013de:	4621      	mov	r1, r4
 80013e0:	0d4a      	lsrs	r2, r1, #21
 80013e2:	4629      	mov	r1, r5
 80013e4:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80013e8:	4629      	mov	r1, r5
 80013ea:	154b      	asrs	r3, r1, #21
 80013ec:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80013f0:	1a14      	subs	r4, r2, r0
 80013f2:	63bc      	str	r4, [r7, #56]	; 0x38
 80013f4:	eb63 0301 	sbc.w	r3, r3, r1
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001406:	4621      	mov	r1, r4
 8001408:	0bca      	lsrs	r2, r1, #15
 800140a:	4629      	mov	r1, r5
 800140c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001410:	4629      	mov	r1, r5
 8001412:	13cb      	asrs	r3, r1, #15
 8001414:	4613      	mov	r3, r2
 8001416:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	compVals.temp = temp1;
 800141a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800141e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	return compVals;
 8001422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001426:	461a      	mov	r2, r3
 8001428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800142c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001430:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001434:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001438:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 800143c:	46bd      	mov	sp, r7
 800143e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001442:	4770      	bx	lr

08001444 <MS5607_readUncompPres>:

void MS5607_readUncompPres()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	state = MS5607_PRES_READ;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MS5607_readUncompPres+0x34>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 800144e:	f000 f819 	bl	8001484 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <MS5607_readUncompPres+0x38>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	2364      	movs	r3, #100	; 0x64
 800145a:	2201      	movs	r2, #1
 800145c:	4908      	ldr	r1, [pc, #32]	; (8001480 <MS5607_readUncompPres+0x3c>)
 800145e:	f005 f805 	bl	800646c <HAL_SPI_Transmit>
	MS5607_disable();
 8001462:	f000 f81f 	bl	80014a4 <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <MS5607_readUncompPres+0x38>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f005 fb9d 	bl	8006bac <HAL_TIM_Base_Start_IT>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200005c4 	.word	0x200005c4
 800147c:	200005ac 	.word	0x200005ac
 8001480:	200005c8 	.word	0x200005c8

08001484 <MS5607_enable>:
	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
}

void MS5607_enable()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <MS5607_enable+0x1c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6898      	ldr	r0, [r3, #8]
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <MS5607_enable+0x1c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	899b      	ldrh	r3, [r3, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f000 fe56 	bl	8002148 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200005ac 	.word	0x200005ac

080014a4 <MS5607_disable>:

void MS5607_disable()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <MS5607_disable+0x1c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6898      	ldr	r0, [r3, #8]
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <MS5607_disable+0x1c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	899b      	ldrh	r3, [r3, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	f000 fe46 	bl	8002148 <HAL_GPIO_WritePin>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200005ac 	.word	0x200005ac

080014c4 <MS5607_getRawValues>:
		state = MS5607_IDLE;
	}
}

MS5607_RawVal MS5607_getRawValues()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return rawValues;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <MS5607_getRawValues+0x20>)
 80014d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200005bc 	.word	0x200005bc

080014e8 <MS5607_getMeasurementDelay>:

uint16_t MS5607_getMeasurementDelay()
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	return measurementDelay;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <MS5607_getMeasurementDelay+0x14>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200005c6 	.word	0x200005c6

08001500 <MS5607_getState>:

MS5607_MeasureState MS5607_getState()
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	return state;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <MS5607_getState+0x14>)
 8001506:	781b      	ldrb	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200005c4 	.word	0x200005c4

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0be      	sub	sp, #248	; 0xf8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	22c0      	movs	r2, #192	; 0xc0
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fb27 	bl	8007b9c <memset>
  if(hspi->Instance==SPI1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6b      	ldr	r2, [pc, #428]	; (8001700 <HAL_SPI_MspInit+0x1d8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d147      	bne.n	80015e8 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001558:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001564:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4618      	mov	r0, r3
 8001572:	f002 fa7d 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800157c:	f7ff fc78 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 8001582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001586:	4a5f      	ldr	r2, [pc, #380]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 8001588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001590:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 8001592:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b59      	ldr	r3, [pc, #356]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 80015a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a4:	4a57      	ldr	r2, [pc, #348]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015ae:	4b55      	ldr	r3, [pc, #340]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 80015b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80015bc:	23c2      	movs	r3, #194	; 0xc2
 80015be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d4:	2305      	movs	r3, #5
 80015d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015de:	4619      	mov	r1, r3
 80015e0:	4849      	ldr	r0, [pc, #292]	; (8001708 <HAL_SPI_MspInit+0x1e0>)
 80015e2:	f000 fbd9 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015e6:	e086      	b.n	80016f6 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a47      	ldr	r2, [pc, #284]	; (800170c <HAL_SPI_MspInit+0x1e4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 8081 	bne.w	80016f6 <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80015f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fa2f 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 8001618:	f7ff fc2a 	bl	8000e70 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 800161e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001622:	4a38      	ldr	r2, [pc, #224]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 800162e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 800163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001640:	4a30      	ldr	r2, [pc, #192]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 800164c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_SPI_MspInit+0x1dc>)
 800166a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800168e:	2303      	movs	r3, #3
 8001690:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001698:	4619      	mov	r1, r3
 800169a:	481d      	ldr	r0, [pc, #116]	; (8001710 <HAL_SPI_MspInit+0x1e8>)
 800169c:	f000 fb7c 	bl	8001d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a0:	2304      	movs	r3, #4
 80016a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016b8:	2305      	movs	r3, #5
 80016ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4812      	ldr	r0, [pc, #72]	; (8001710 <HAL_SPI_MspInit+0x1e8>)
 80016c6:	f000 fb67 	bl	8001d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e4:	2305      	movs	r3, #5
 80016e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <HAL_SPI_MspInit+0x1ec>)
 80016f2:	f000 fb51 	bl	8001d98 <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	37f8      	adds	r7, #248	; 0xf8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40013000 	.word	0x40013000
 8001704:	46020c00 	.word	0x46020c00
 8001708:	42020000 	.word	0x42020000
 800170c:	40003800 	.word	0x40003800
 8001710:	42020800 	.word	0x42020800
 8001714:	42020400 	.word	0x42020400

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_TIM_Base_MspInit+0x3c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10e      	bne.n	8001748 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_TIM_Base_MspInit+0x40>)
 800172c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001730:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_TIM_Base_MspInit+0x40>)
 8001732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001736:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_TIM_Base_MspInit+0x40>)
 800173c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40014400 	.word	0x40014400
 8001758:	46020c00 	.word	0x46020c00

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0ba      	sub	sp, #232	; 0xe8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	22c0      	movs	r2, #192	; 0xc0
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f006 fa0d 	bl	8007b9c <memset>
  if(huart->Instance==USART1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_UART_MspInit+0xc4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d145      	bne.n	8001818 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800178c:	f04f 0201 	mov.w	r2, #1
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001798:	2300      	movs	r3, #0
 800179a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 f965 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80017ac:	f7ff fb60 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001806:	2307      	movs	r3, #7
 8001808:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_UART_MspInit+0xcc>)
 8001814:	f000 fac0 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	37e8      	adds	r7, #232	; 0xe8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40013800 	.word	0x40013800
 8001824:	46020c00 	.word	0x46020c00
 8001828:	42020000 	.word	0x42020000

0800182c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0bc      	sub	sp, #240	; 0xf0
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	22c0      	movs	r2, #192	; 0xc0
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f006 f9a5 	bl	8007b9c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a38      	ldr	r2, [pc, #224]	; (8001938 <HAL_PCD_MspInit+0x10c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d169      	bne.n	8001930 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800185c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	4618      	mov	r0, r3
 8001874:	f002 f8fc 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 800187e:	f7ff faf7 	bl	8000e70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <HAL_PCD_MspInit+0x110>)
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <HAL_PCD_MspInit+0x110>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_PCD_MspInit+0x110>)
 8001894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80018ba:	230a      	movs	r3, #10
 80018bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018c4:	4619      	mov	r1, r3
 80018c6:	481e      	ldr	r0, [pc, #120]	; (8001940 <HAL_PCD_MspInit+0x114>)
 80018c8:	f000 fa66 	bl	8001d98 <HAL_GPIO_Init>

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_PCD_MspInit+0x110>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d119      	bne.n	800190e <HAL_PCD_MspInit+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_PCD_MspInit+0x110>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_PCD_MspInit+0x110>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_PCD_MspInit+0x110>)
 80018ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
      HAL_PWREx_EnableVddUSB();
 80018f8:	f000 fdf8 	bl	80024ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_PCD_MspInit+0x110>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_PCD_MspInit+0x110>)
 8001904:	f023 0304 	bic.w	r3, r3, #4
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800190c:	e001      	b.n	8001912 <HAL_PCD_MspInit+0xe6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800190e:	f000 fded 	bl	80024ec <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_PCD_MspInit+0x110>)
 8001914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_PCD_MspInit+0x110>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_PCD_MspInit+0x110>)
 8001924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	37f0      	adds	r7, #240	; 0xf0
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40016000 	.word	0x40016000
 800193c:	46020c00 	.word	0x46020c00
 8001940:	42020000 	.word	0x42020000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f8fe 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f006 f8be 	bl	8007b48 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20040000 	.word	0x20040000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	200005cc 	.word	0x200005cc
 8001a00:	200005e8 	.word	0x200005e8

08001a04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <SystemInit+0x68>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <SystemInit+0x68>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <SystemInit+0x6c>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <SystemInit+0x6c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <SystemInit+0x6c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <SystemInit+0x6c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <SystemInit+0x6c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <SystemInit+0x6c>)
 8001a36:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a3a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <SystemInit+0x6c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <SystemInit+0x6c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <SystemInit+0x6c>)
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <SystemInit+0x6c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SystemInit+0x68>)
 8001a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	46020c00 	.word	0x46020c00

08001a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a74:	480d      	ldr	r0, [pc, #52]	; (8001aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a78:	f7ff ffc4 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <LoopForever+0xe>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	; (8001ac0 <LoopForever+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001aa2:	f006 f857 	bl	8007b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa6:	f7fe fea3 	bl	80007f0 <main>

08001aaa <LoopForever>:

LoopForever:
    b LoopForever
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
  ldr   r0, =_estack
 8001aac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ab8:	08008658 	.word	0x08008658
  ldr r2, =_sbss
 8001abc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ac0:	200005e1 	.word	0x200005e1

08001ac4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_IRQHandler>
	...

08001ac8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_Init+0x4c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_Init+0x4c>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f92b 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ade:	f001 fde3 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_Init+0x50>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	490b      	ldr	r1, [pc, #44]	; (8001b1c <HAL_Init+0x54>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_Init+0x58>)
 8001af6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af8:	200f      	movs	r0, #15
 8001afa:	f000 f813 	bl	8001b24 <HAL_InitTick>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e002      	b.n	8001b0e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f7ff fd06 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000
 8001b18:	46020c00 	.word	0x46020c00
 8001b1c:	08008514 	.word	0x08008514
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_InitTick+0x60>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e021      	b.n	8001b7c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_InitTick+0x64>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_InitTick+0x60>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f915 	bl	8001d7e <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00e      	b.n	8001b7c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d80a      	bhi.n	8001b7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b6c:	f000 f8ed 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_InitTick+0x68>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x24>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_IncTick+0x24>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	200005d0 	.word	0x200005d0

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200005d0 	.word	0x200005d0

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff47 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff5e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffb2 	bl	8001cf0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001daa:	e1ba      	b.n	8002122 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 81aa 	beq.w	800211c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <HAL_GPIO_Init+0x188>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d15d      	bne.n	8001e8c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001e00:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <HAL_GPIO_Init+0x18c>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e08:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001e0a:	4a46      	ldr	r2, [pc, #280]	; (8001f24 <HAL_GPIO_Init+0x18c>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e22:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220b      	movs	r2, #11
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69f9      	ldr	r1, [r7, #28]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2202      	movs	r2, #2
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	e067      	b.n	8001f5c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x104>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b12      	cmp	r3, #18
 8001e9a:	d145      	bne.n	8001f28 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69f9      	ldr	r1, [r7, #28]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e01e      	b.n	8001f5c <HAL_GPIO_Init+0x1c4>
 8001f1e:	bf00      	nop
 8001f20:	46020000 	.word	0x46020000
 8001f24:	0800856c 	.word	0x0800856c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0203 	and.w	r2, r3, #3
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d00b      	beq.n	8001f7c <HAL_GPIO_Init+0x1e4>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d007      	beq.n	8001f7c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f70:	2b11      	cmp	r3, #17
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d130      	bne.n	8001fde <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	f003 0201 	and.w	r2, r3, #1
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d017      	beq.n	8002016 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	4313      	orrs	r3, r2
 800200e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d07c      	beq.n	800211c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002022:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3318      	adds	r3, #24
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	4013      	ands	r3, r2
 8002044:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0a9a      	lsrs	r2, r3, #10
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_GPIO_Init+0x3ac>)
 800204c:	4013      	ands	r3, r2
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	00d2      	lsls	r2, r2, #3
 8002056:	4093      	lsls	r3, r2
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	4313      	orrs	r3, r2
 800205c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800205e:	4938      	ldr	r1, [pc, #224]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3318      	adds	r3, #24
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800206c:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	4013      	ands	r3, r2
 800207a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80020ba:	4a21      	ldr	r2, [pc, #132]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 80020c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 80020f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_GPIO_Init+0x3a8>)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f ae3d 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	3724      	adds	r7, #36	; 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	46022000 	.word	0x46022000
 8002144:	002f7f7f 	.word	0x002f7f7f

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002164:	e002      	b.n	800216c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217a:	b08f      	sub	sp, #60	; 0x3c
 800217c:	af0a      	add	r7, sp, #40	; 0x28
 800217e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0fe      	b.n	8002388 <HAL_PCD_Init+0x210>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fb44 	bl	800182c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f005 fc5c 	bl	8007a6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	687e      	ldr	r6, [r7, #4]
 80021be:	466d      	mov	r5, sp
 80021c0:	f106 0410 	add.w	r4, r6, #16
 80021c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021d4:	1d33      	adds	r3, r6, #4
 80021d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d8:	6838      	ldr	r0, [r7, #0]
 80021da:	f005 fc2a 	bl	8007a32 <USB_CoreInit>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0cb      	b.n	8002388 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 fc4e 	bl	8007a98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e03e      	b.n	8002280 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	333d      	adds	r3, #61	; 0x3d
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	333c      	adds	r3, #60	; 0x3c
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	333f      	adds	r3, #63	; 0x3f
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	334c      	adds	r3, #76	; 0x4c
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	3350      	adds	r3, #80	; 0x50
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3354      	adds	r3, #84	; 0x54
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	3301      	adds	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3bb      	bcc.n	8002202 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e044      	b.n	800231a <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	f203 137d 	addw	r3, r3, #381	; 0x17d
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	f203 137f 	addw	r3, r3, #383	; 0x17f
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	3301      	adds	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d3b5      	bcc.n	8002290 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	687e      	ldr	r6, [r7, #4]
 800232c:	466d      	mov	r5, sp
 800232e:	f106 0410 	add.w	r4, r6, #16
 8002332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800233e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002342:	1d33      	adds	r3, r6, #4
 8002344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	f005 fbc9 	bl	8007ade <USB_DevInit>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_PCD_Init+0x1e6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e014      	b.n	8002388 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f80a 	bl	8002390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f005 fbcf 	bl	8007b24 <USB_DevDisconnect>

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  hpcd->LPM_State = LPM_L0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f043 0202 	orr.w	r2, r3, #2
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80023dc:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d10b      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d905      	bls.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e057      	b.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d90a      	bls.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4313      	orrs	r3, r2
 800241a:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	60d3      	str	r3, [r2, #12]
 8002422:	e007      	b.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800242c:	4925      	ldr	r1, [pc, #148]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	2232      	movs	r2, #50	; 0x32
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a21      	ldr	r2, [pc, #132]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002452:	e002      	b.n	800245a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3b01      	subs	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f3      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01b      	beq.n	80024aa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	2232      	movs	r2, #50	; 0x32
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	3301      	adds	r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002490:	e002      	b.n	8002498 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3b01      	subs	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f3      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e000      	b.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	46020800 	.word	0x46020800
 80024c8:	20000000 	.word	0x20000000
 80024cc:	10624dd3 	.word	0x10624dd3

080024d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	46020800 	.word	0x46020800

080024ec <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fa:	6113      	str	r3, [r2, #16]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	46020800 	.word	0x46020800

0800250c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	f000 bec8 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002526:	4b99      	ldr	r3, [pc, #612]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002530:	4b96      	ldr	r3, [pc, #600]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 816c 	beq.w	8002820 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_RCC_OscConfig+0x52>
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	2b0c      	cmp	r3, #12
 8002552:	f040 80de 	bne.w	8002712 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	2b01      	cmp	r3, #1
 800255a:	f040 80da 	bne.w	8002712 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	f000 bea5 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002570:	4b86      	ldr	r3, [pc, #536]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_RCC_OscConfig+0x7a>
 800257c:	4b83      	ldr	r3, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x280>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002584:	e005      	b.n	8002592 <HAL_RCC_OscConfig+0x86>
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002592:	4293      	cmp	r3, r2
 8002594:	d255      	bcs.n	8002642 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 f9df 	bl	8003964 <RCC_SetFlashLatencyFromMSIRange>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f000 be82 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80025b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025bc:	6093      	str	r3, [r2, #8]
 80025be:	4b73      	ldr	r3, [pc, #460]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	4970      	ldr	r1, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025d8:	d309      	bcc.n	80025ee <HAL_RCC_OscConfig+0xe2>
 80025da:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f023 021f 	bic.w	r2, r3, #31
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4969      	ldr	r1, [pc, #420]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e07e      	b.n	80026ec <HAL_RCC_OscConfig+0x1e0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	da0a      	bge.n	800260c <HAL_RCC_OscConfig+0x100>
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	015b      	lsls	r3, r3, #5
 8002604:	4961      	ldr	r1, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002606:	4313      	orrs	r3, r2
 8002608:	60cb      	str	r3, [r1, #12]
 800260a:	e06f      	b.n	80026ec <HAL_RCC_OscConfig+0x1e0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d30a      	bcc.n	800262c <HAL_RCC_OscConfig+0x120>
 8002616:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	4959      	ldr	r1, [pc, #356]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
 800262a:	e05f      	b.n	80026ec <HAL_RCC_OscConfig+0x1e0>
 800262c:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_RCC_OscConfig+0x280>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	03db      	lsls	r3, r3, #15
 800263a:	4954      	ldr	r1, [pc, #336]	; (800278c <HAL_RCC_OscConfig+0x280>)
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e054      	b.n	80026ec <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002642:	4b52      	ldr	r3, [pc, #328]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a51      	ldr	r2, [pc, #324]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800264c:	6093      	str	r3, [r2, #8]
 800264e:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	494c      	ldr	r1, [pc, #304]	; (800278c <HAL_RCC_OscConfig+0x280>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002668:	d309      	bcc.n	800267e <HAL_RCC_OscConfig+0x172>
 800266a:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0x280>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 021f 	bic.w	r2, r3, #31
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4945      	ldr	r1, [pc, #276]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002678:	4313      	orrs	r3, r2
 800267a:	60cb      	str	r3, [r1, #12]
 800267c:	e028      	b.n	80026d0 <HAL_RCC_OscConfig+0x1c4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	da0a      	bge.n	800269c <HAL_RCC_OscConfig+0x190>
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	015b      	lsls	r3, r3, #5
 8002694:	493d      	ldr	r1, [pc, #244]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002696:	4313      	orrs	r3, r2
 8002698:	60cb      	str	r3, [r1, #12]
 800269a:	e019      	b.n	80026d0 <HAL_RCC_OscConfig+0x1c4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d30a      	bcc.n	80026bc <HAL_RCC_OscConfig+0x1b0>
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
 80026ba:	e009      	b.n	80026d0 <HAL_RCC_OscConfig+0x1c4>
 80026bc:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	03db      	lsls	r3, r3, #15
 80026ca:	4930      	ldr	r1, [pc, #192]	; (800278c <HAL_RCC_OscConfig+0x280>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f942 	bl	8003964 <RCC_SetFlashLatencyFromMSIRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f000 bde5 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80026ec:	f001 f8e4 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_OscConfig+0x284>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fa15 	bl	8001b24 <HAL_InitTick>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 808a 	beq.w	800281e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800270a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270e:	f000 bdd2 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d066      	beq.n	80027e8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002726:	f7ff fa47 	bl	8001bb8 <HAL_GetTick>
 800272a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800272c:	e009      	b.n	8002742 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800272e:	f7ff fa43 	bl	8001bb8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d902      	bls.n	8002742 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	f000 bdba 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ef      	beq.n	800272e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002758:	6093      	str	r3, [r2, #8]
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_RCC_OscConfig+0x280>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	4909      	ldr	r1, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002774:	d30e      	bcc.n	8002794 <HAL_RCC_OscConfig+0x288>
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 021f 	bic.w	r2, r3, #31
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4902      	ldr	r1, [pc, #8]	; (800278c <HAL_RCC_OscConfig+0x280>)
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
 8002788:	e04a      	b.n	8002820 <HAL_RCC_OscConfig+0x314>
 800278a:	bf00      	nop
 800278c:	46020c00 	.word	0x46020c00
 8002790:	20000004 	.word	0x20000004
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	da0a      	bge.n	80027b2 <HAL_RCC_OscConfig+0x2a6>
 800279c:	4b98      	ldr	r3, [pc, #608]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	015b      	lsls	r3, r3, #5
 80027aa:	4995      	ldr	r1, [pc, #596]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60cb      	str	r3, [r1, #12]
 80027b0:	e036      	b.n	8002820 <HAL_RCC_OscConfig+0x314>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d30a      	bcc.n	80027d2 <HAL_RCC_OscConfig+0x2c6>
 80027bc:	4b90      	ldr	r3, [pc, #576]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	029b      	lsls	r3, r3, #10
 80027ca:	498d      	ldr	r1, [pc, #564]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60cb      	str	r3, [r1, #12]
 80027d0:	e026      	b.n	8002820 <HAL_RCC_OscConfig+0x314>
 80027d2:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	03db      	lsls	r3, r3, #15
 80027e0:	4987      	ldr	r1, [pc, #540]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60cb      	str	r3, [r1, #12]
 80027e6:	e01b      	b.n	8002820 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80027e8:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a84      	ldr	r2, [pc, #528]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027f4:	f7ff f9e0 	bl	8001bb8 <HAL_GetTick>
 80027f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80027fa:	e009      	b.n	8002810 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027fc:	f7ff f9dc 	bl	8001bb8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d902      	bls.n	8002810 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	f000 bd53 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002810:	4b7b      	ldr	r3, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ef      	bne.n	80027fc <HAL_RCC_OscConfig+0x2f0>
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800281e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 808b 	beq.w	8002944 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	2b08      	cmp	r3, #8
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x334>
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d109      	bne.n	800284e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	2b03      	cmp	r3, #3
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d17d      	bne.n	8002944 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f000 bd34 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x35a>
 8002858:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a68      	ldr	r2, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e041      	b.n	80028ea <HAL_RCC_OscConfig+0x3de>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286e:	d112      	bne.n	8002896 <HAL_RCC_OscConfig+0x38a>
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a62      	ldr	r2, [pc, #392]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5f      	ldr	r2, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e029      	b.n	80028ea <HAL_RCC_OscConfig+0x3de>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800289e:	d112      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3ba>
 80028a0:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a53      	ldr	r2, [pc, #332]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e011      	b.n	80028ea <HAL_RCC_OscConfig+0x3de>
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4d      	ldr	r2, [pc, #308]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a4a      	ldr	r2, [pc, #296]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80028e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d014      	beq.n	800291c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80028f2:	f7ff f961 	bl	8001bb8 <HAL_GetTick>
 80028f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f8:	e009      	b.n	800290e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fa:	f7ff f95d 	bl	8001bb8 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d902      	bls.n	800290e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	f000 bcd4 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290e:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ef      	beq.n	80028fa <HAL_RCC_OscConfig+0x3ee>
 800291a:	e013      	b.n	8002944 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800291c:	f7ff f94c 	bl	8001bb8 <HAL_GetTick>
 8002920:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002922:	e009      	b.n	8002938 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff f948 	bl	8001bb8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d902      	bls.n	8002938 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	f000 bcbf 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002938:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1ef      	bne.n	8002924 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05f      	beq.n	8002a10 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	2b04      	cmp	r3, #4
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x456>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d114      	bne.n	8002986 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	2b02      	cmp	r3, #2
 8002960:	d111      	bne.n	8002986 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	f000 bca3 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	4920      	ldr	r1, [pc, #128]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002984:	e044      	b.n	8002a10 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d024      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800299a:	f7ff f90d 	bl	8001bb8 <HAL_GetTick>
 800299e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a0:	e009      	b.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7ff f909 	bl	8001bb8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d902      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f000 bc80 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ef      	beq.n	80029a2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	490b      	ldr	r1, [pc, #44]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	610b      	str	r3, [r1, #16]
 80029d6:	e01b      	b.n	8002a10 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80029e4:	f7ff f8e8 	bl	8001bb8 <HAL_GetTick>
 80029e8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff f8e4 	bl	8001bb8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d904      	bls.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f000 bc5b 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
 8002a00:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a04:	4baf      	ldr	r3, [pc, #700]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ed      	bne.n	80029ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80c8 	beq.w	8002bae <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a24:	4ba7      	ldr	r3, [pc, #668]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d111      	bne.n	8002a56 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4ba4      	ldr	r3, [pc, #656]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a38:	4aa2      	ldr	r2, [pc, #648]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a42:	4ba0      	ldr	r3, [pc, #640]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a56:	4b9c      	ldr	r3, [pc, #624]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a62:	4b99      	ldr	r3, [pc, #612]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	4a98      	ldr	r2, [pc, #608]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff f8a3 	bl	8001bb8 <HAL_GetTick>
 8002a72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a74:	e009      	b.n	8002a8a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7ff f89f 	bl	8001bb8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d902      	bls.n	8002a8a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	f000 bc16 	b.w	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a8a:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ef      	beq.n	8002a76 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d05f      	beq.n	8002b5e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002a9e:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aa4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d037      	beq.n	8002b24 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e3f4      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002adc:	4a79      	ldr	r2, [pc, #484]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ade:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002ae6:	f7ff f867 	bl	8001bb8 <HAL_GetTick>
 8002aea:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aee:	f7ff f863 	bl	8001bb8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e3da      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b00:	4b70      	ldr	r3, [pc, #448]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ef      	bne.n	8002aee <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002b0e:	4b6d      	ldr	r3, [pc, #436]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b14:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4969      	ldr	r1, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002b24:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b2a:	4a66      	ldr	r2, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002b34:	f7ff f840 	bl	8001bb8 <HAL_GetTick>
 8002b38:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7ff f83c 	bl	8001bb8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e3b3      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ef      	beq.n	8002b3c <HAL_RCC_OscConfig+0x630>
 8002b5c:	e01b      	b.n	8002b96 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b66:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002b6e:	f7ff f823 	bl	8001bb8 <HAL_GetTick>
 8002b72:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b76:	f7ff f81f 	bl	8001bb8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e396      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b88:	4b4e      	ldr	r3, [pc, #312]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ef      	bne.n	8002b76 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9e:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba4:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8111 	beq.w	8002dde <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d111      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b3c      	ldr	r3, [pc, #240]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002be0:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d118      	bne.n	8002c32 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	4a30      	ldr	r2, [pc, #192]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe ffd4 	bl	8001bb8 <HAL_GetTick>
 8002c10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe ffd0 	bl	8001bb8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e347      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_RCC_OscConfig+0x7bc>)
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01f      	beq.n	8002c7e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d010      	beq.n	8002c6c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c60:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c6a:	e018      	b.n	8002c9e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c72:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c7c:	e00f      	b.n	8002c9e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c84:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <HAL_RCC_OscConfig+0x7b8>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d057      	beq.n	8002d56 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002ca6:	f7fe ff87 	bl	8001bb8 <HAL_GetTick>
 8002caa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cac:	e00e      	b.n	8002ccc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe ff83 	bl	8001bb8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d905      	bls.n	8002ccc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e2f8      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
 8002cc4:	46020c00 	.word	0x46020c00
 8002cc8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ccc:	4b9c      	ldr	r3, [pc, #624]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0e9      	beq.n	8002cae <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01b      	beq.n	8002d1e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ce6:	4b96      	ldr	r3, [pc, #600]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cec:	4a94      	ldr	r2, [pc, #592]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe ff5e 	bl	8001bb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e2d3      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d0e:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ed      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x7ec>
 8002d1c:	e053      	b.n	8002dc6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d1e:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d24:	4a86      	ldr	r2, [pc, #536]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe ff42 	bl	8001bb8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e2b7      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d46:	4b7e      	ldr	r3, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ed      	bne.n	8002d30 <HAL_RCC_OscConfig+0x824>
 8002d54:	e037      	b.n	8002dc6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002d56:	f7fe ff2f 	bl	8001bb8 <HAL_GetTick>
 8002d5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe ff2b 	bl	8001bb8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e2a0      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d74:	4b72      	ldr	r3, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ed      	bne.n	8002d5e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01a      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d96:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe ff09 	bl	8001bb8 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e27e      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002db8:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ed      	bne.n	8002da2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dce:	4b5c      	ldr	r3, [pc, #368]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd4:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002dd6:	f023 0304 	bic.w	r3, r3, #4
 8002dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d036      	beq.n	8002e58 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d019      	beq.n	8002e26 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002df2:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dfc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dfe:	f7fe fedb 	bl	8001bb8 <HAL_GetTick>
 8002e02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e06:	f7fe fed7 	bl	8001bb8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e24e      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e18:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x8fa>
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e30:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e32:	f7fe fec1 	bl	8001bb8 <HAL_GetTick>
 8002e36:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e3a:	f7fe febd 	bl	8001bb8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e234      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d036      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d019      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a33      	ldr	r2, [pc, #204]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e76:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e78:	f7fe fe9e 	bl	8001bb8 <HAL_GetTick>
 8002e7c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e80:	f7fe fe9a 	bl	8001bb8 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e211      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x974>
 8002e9e:	e018      	b.n	8002ed2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eaa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002eac:	f7fe fe84 	bl	8001bb8 <HAL_GetTick>
 8002eb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fe80 	bl	8001bb8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1f7      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07f      	beq.n	8002fde <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d062      	beq.n	8002fac <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ef0:	6093      	str	r3, [r2, #8]
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	4910      	ldr	r1, [pc, #64]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f0c:	d309      	bcc.n	8002f22 <HAL_RCC_OscConfig+0xa16>
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f023 021f 	bic.w	r2, r3, #31
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4909      	ldr	r1, [pc, #36]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
 8002f20:	e02a      	b.n	8002f78 <HAL_RCC_OscConfig+0xa6c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da0c      	bge.n	8002f44 <HAL_RCC_OscConfig+0xa38>
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	4901      	ldr	r1, [pc, #4]	; (8002f40 <HAL_RCC_OscConfig+0xa34>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]
 8002f3e:	e01b      	b.n	8002f78 <HAL_RCC_OscConfig+0xa6c>
 8002f40:	46020c00 	.word	0x46020c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d30a      	bcc.n	8002f64 <HAL_RCC_OscConfig+0xa58>
 8002f4e:	4ba1      	ldr	r3, [pc, #644]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	499d      	ldr	r1, [pc, #628]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60cb      	str	r3, [r1, #12]
 8002f62:	e009      	b.n	8002f78 <HAL_RCC_OscConfig+0xa6c>
 8002f64:	4b9b      	ldr	r3, [pc, #620]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	03db      	lsls	r3, r3, #15
 8002f72:	4998      	ldr	r1, [pc, #608]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002f78:	4b96      	ldr	r3, [pc, #600]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a95      	ldr	r2, [pc, #596]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002f7e:	f043 0310 	orr.w	r3, r3, #16
 8002f82:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f84:	f7fe fe18 	bl	8001bb8 <HAL_GetTick>
 8002f88:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f8c:	f7fe fe14 	bl	8001bb8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e18b      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f9e:	4b8d      	ldr	r3, [pc, #564]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xa80>
 8002faa:	e018      	b.n	8002fde <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002fac:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a88      	ldr	r2, [pc, #544]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002fb2:	f023 0310 	bic.w	r3, r3, #16
 8002fb6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002fb8:	f7fe fdfe 	bl	8001bb8 <HAL_GetTick>
 8002fbc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002fc0:	f7fe fdfa 	bl	8001bb8 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e171      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002fd2:	4b80      	ldr	r3, [pc, #512]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8166 	beq.w	80032b4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fee:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	f000 80f2 	beq.w	80031e0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	2b02      	cmp	r3, #2
 8003002:	f040 80c5 	bne.w	8003190 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a72      	ldr	r2, [pc, #456]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 800300c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003010:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003012:	f7fe fdd1 	bl	8001bb8 <HAL_GetTick>
 8003016:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe fdcd 	bl	8001bb8 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e144      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800302c:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 800303a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d111      	bne.n	800306a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304c:	4a61      	ldr	r2, [pc, #388]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003056:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0xccc>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003076:	d102      	bne.n	800307e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800307e:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCC_OscConfig+0xccc>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4a55      	ldr	r2, [pc, #340]	; (80031d8 <HAL_RCC_OscConfig+0xccc>)
 8003084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003088:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800308a:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309e:	3a01      	subs	r2, #1
 80030a0:	0212      	lsls	r2, r2, #8
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030a8:	430a      	orrs	r2, r1
 80030aa:	494a      	ldr	r1, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	628b      	str	r3, [r1, #40]	; 0x28
 80030b0:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80030b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b4:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0xcd0>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030bc:	3a01      	subs	r2, #1
 80030be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030c6:	3a01      	subs	r2, #1
 80030c8:	0252      	lsls	r2, r2, #9
 80030ca:	b292      	uxth	r2, r2
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030d2:	3a01      	subs	r2, #1
 80030d4:	0412      	lsls	r2, r2, #16
 80030d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80030da:	4311      	orrs	r1, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0612      	lsls	r2, r2, #24
 80030e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80030e8:	430a      	orrs	r2, r1
 80030ea:	493a      	ldr	r1, [pc, #232]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	4a37      	ldr	r2, [pc, #220]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80030f6:	f023 0310 	bic.w	r3, r3, #16
 80030fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003106:	4b33      	ldr	r3, [pc, #204]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	4a32      	ldr	r2, [pc, #200]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 800310c:	f043 0310 	orr.w	r3, r3, #16
 8003110:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	f023 020c 	bic.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	492d      	ldr	r1, [pc, #180]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003120:	4313      	orrs	r3, r2
 8003122:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_RCC_OscConfig+0xccc>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <HAL_RCC_OscConfig+0xccc>)
 8003132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003136:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003138:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003146:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003168:	f7fe fd26 	bl	8001bb8 <HAL_GetTick>
 800316c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fd22 	bl	8001bb8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e099      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0xc64>
 800318e:	e091      	b.n	80032b4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 8003196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800319c:	f7fe fd0c 	bl	8001bb8 <HAL_GetTick>
 80031a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fd08 	bl	8001bb8 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e07f      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	4a03      	ldr	r2, [pc, #12]	; (80031d4 <HAL_RCC_OscConfig+0xcc8>)
 80031c8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80031cc:	f023 0303 	bic.w	r3, r3, #3
 80031d0:	6293      	str	r3, [r2, #40]	; 0x28
 80031d2:	e06f      	b.n	80032b4 <HAL_RCC_OscConfig+0xda8>
 80031d4:	46020c00 	.word	0x46020c00
 80031d8:	46020800 	.word	0x46020800
 80031dc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80031e0:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d039      	beq.n	8003268 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0203 	and.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d132      	bne.n	8003268 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d129      	bne.n	8003268 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d122      	bne.n	8003268 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d11a      	bne.n	8003268 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d111      	bne.n	8003268 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e024      	b.n	80032b6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800327a:	429a      	cmp	r2, r3
 800327c:	d01a      	beq.n	80032b4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 8003284:	f023 0310 	bic.w	r3, r3, #16
 8003288:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fc95 	bl	8001bb8 <HAL_GetTick>
 800328e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003290:	bf00      	nop
 8003292:	f7fe fc91 	bl	8001bb8 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	4293      	cmp	r3, r2
 800329c:	d0f9      	beq.n	8003292 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_RCC_OscConfig+0xdb4>)
 80032ae:	f043 0310 	orr.w	r3, r3, #16
 80032b2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3738      	adds	r7, #56	; 0x38
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	46020c00 	.word	0x46020c00

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e1d9      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b9b      	ldr	r3, [pc, #620]	; (8003548 <HAL_RCC_ClockConfig+0x284>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b98      	ldr	r3, [pc, #608]	; (8003548 <HAL_RCC_ClockConfig+0x284>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	4996      	ldr	r1, [pc, #600]	; (8003548 <HAL_RCC_ClockConfig+0x284>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b94      	ldr	r3, [pc, #592]	; (8003548 <HAL_RCC_ClockConfig+0x284>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e1c1      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d010      	beq.n	8003336 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	4b8c      	ldr	r3, [pc, #560]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003320:	429a      	cmp	r2, r3
 8003322:	d908      	bls.n	8003336 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003324:	4b89      	ldr	r3, [pc, #548]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	4986      	ldr	r1, [pc, #536]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003332:	4313      	orrs	r3, r2
 8003334:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d012      	beq.n	8003368 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003350:	429a      	cmp	r2, r3
 8003352:	d909      	bls.n	8003368 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003354:	4b7d      	ldr	r3, [pc, #500]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	497a      	ldr	r1, [pc, #488]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003364:	4313      	orrs	r3, r2
 8003366:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	4b74      	ldr	r3, [pc, #464]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003380:	429a      	cmp	r2, r3
 8003382:	d908      	bls.n	8003396 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b71      	ldr	r3, [pc, #452]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	496e      	ldr	r1, [pc, #440]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003392:	4313      	orrs	r3, r2
 8003394:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	4b69      	ldr	r3, [pc, #420]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d908      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80033b2:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4963      	ldr	r1, [pc, #396]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80d2 	beq.w	8003576 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d143      	bne.n	8003466 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d110      	bne.n	800340e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80033ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f2:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800340e:	f7fe fbd3 	bl	8001bb8 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003414:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <HAL_RCC_ClockConfig+0x28c>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00f      	beq.n	8003440 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003422:	f7fe fbc9 	bl	8001bb8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e12b      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003434:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_ClockConfig+0x28c>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344c:	4a3f      	ldr	r2, [pc, #252]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 800344e:	f023 0304 	bic.w	r3, r3, #4
 8003452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d121      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e112      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e106      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0fa      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0f2      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4926      	ldr	r1, [pc, #152]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80034b8:	f7fe fb7e 	bl	8001bb8 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d112      	bne.n	80034ec <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fe fb76 	bl	8001bb8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0d6      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d1ee      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x204>
 80034ea:	e044      	b.n	8003576 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d112      	bne.n	800351a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f6:	f7fe fb5f 	bl	8001bb8 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0bf      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d1ee      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x232>
 8003518:	e02d      	b.n	8003576 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d123      	bne.n	800356a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003522:	e00a      	b.n	800353a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003524:	f7fe fb48 	bl	8001bb8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0a8      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <HAL_RCC_ClockConfig+0x288>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ee      	bne.n	8003524 <HAL_RCC_ClockConfig+0x260>
 8003546:	e016      	b.n	8003576 <HAL_RCC_ClockConfig+0x2b2>
 8003548:	40022000 	.word	0x40022000
 800354c:	46020c00 	.word	0x46020c00
 8003550:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe fb30 	bl	8001bb8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e090      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d1ee      	bne.n	8003554 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d010      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	4b43      	ldr	r3, [pc, #268]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	429a      	cmp	r2, r3
 8003590:	d208      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003592:	4b40      	ldr	r3, [pc, #256]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	493d      	ldr	r1, [pc, #244]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b3c      	ldr	r3, [pc, #240]	; (8003698 <HAL_RCC_ClockConfig+0x3d4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d210      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b39      	ldr	r3, [pc, #228]	; (8003698 <HAL_RCC_ClockConfig+0x3d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 020f 	bic.w	r2, r3, #15
 80035ba:	4937      	ldr	r1, [pc, #220]	; (8003698 <HAL_RCC_ClockConfig+0x3d4>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b35      	ldr	r3, [pc, #212]	; (8003698 <HAL_RCC_ClockConfig+0x3d4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e05b      	b.n	800368c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d208      	bcs.n	8003602 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4925      	ldr	r1, [pc, #148]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800361c:	429a      	cmp	r2, r3
 800361e:	d209      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003620:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	4919      	ldr	r1, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800364c:	429a      	cmp	r2, r3
 800364e:	d208      	bcs.n	8003662 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	490d      	ldr	r1, [pc, #52]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 800365e:	4313      	orrs	r3, r2
 8003660:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003662:	f000 f821 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003666:	4602      	mov	r2, r0
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_RCC_ClockConfig+0x3d0>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	490a      	ldr	r1, [pc, #40]	; (800369c <HAL_RCC_ClockConfig+0x3d8>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x3dc>)
 800367a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x3e0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe fa4f 	bl	8001b24 <HAL_InitTick>
 8003686:	4603      	mov	r3, r0
 8003688:	73fb      	strb	r3, [r7, #15]

  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	46020c00 	.word	0x46020c00
 8003698:	40022000 	.word	0x40022000
 800369c:	08008514 	.word	0x08008514
 80036a0:	20000000 	.word	0x20000000
 80036a4:	20000004 	.word	0x20000004

080036a8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b08b      	sub	sp, #44	; 0x2c
 80036ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b6:	4b7b      	ldr	r3, [pc, #492]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c0:	4b78      	ldr	r3, [pc, #480]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x34>
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d121      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d11e      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80036dc:	4b71      	ldr	r3, [pc, #452]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80036e8:	4b6e      	ldr	r3, [pc, #440]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036ee:	0b1b      	lsrs	r3, r3, #12
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e005      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80036f8:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	0f1b      	lsrs	r3, r3, #28
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003704:	4a68      	ldr	r2, [pc, #416]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d110      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003718:	e00d      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371a:	4b62      	ldr	r3, [pc, #392]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d102      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003726:	4b61      	ldr	r3, [pc, #388]	; (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	e004      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d101      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003732:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003734:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	f040 80ac 	bne.w	8003896 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800373e:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003748:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3301      	adds	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003756:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003762:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8086 	beq.w	8003892 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d003      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0xec>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d022      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x130>
 8003792:	e043      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	eddf 6a44 	vldr	s13, [pc, #272]	; 80038b0 <HAL_RCC_GetSysClockFreq+0x208>
 80037a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a6:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80037ba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x20c>
 80037be:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80037d6:	e046      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	eddf 6a33 	vldr	s13, [pc, #204]	; 80038b0 <HAL_RCC_GetSysClockFreq+0x208>
 80037e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ea:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80037fe:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x20c>
 8003802:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003806:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800380a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003816:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800381a:	e024      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003844:	ed97 6a01 	vldr	s12, [r7, #4]
 8003848:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x20c>
 800384c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003850:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003858:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800385c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003860:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003864:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	0e1b      	lsrs	r3, r3, #24
 800386c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003870:	3301      	adds	r3, #1
 8003872:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800387e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800388a:	ee17 3a90 	vmov	r3, s15
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	e001      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003896:	6a3b      	ldr	r3, [r7, #32]
}
 8003898:	4618      	mov	r0, r3
 800389a:	372c      	adds	r7, #44	; 0x2c
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	46020c00 	.word	0x46020c00
 80038a8:	0800852c 	.word	0x0800852c
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	4b742400 	.word	0x4b742400
 80038b4:	46000000 	.word	0x46000000

080038b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80038bc:	f7ff fef4 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x28>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	4906      	ldr	r1, [pc, #24]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80038d4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80038d8:	681b      	ldr	r3, [r3, #0]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	46020c00 	.word	0x46020c00
 80038e4:	08008514 	.word	0x08008514
 80038e8:	20000000 	.word	0x20000000

080038ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80038f0:	f7ff ffe2 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4903      	ldr	r1, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	46020c00 	.word	0x46020c00
 8003910:	08008524 	.word	0x08008524

08003914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003918:	f7ff ffce 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 800391c:	4602      	mov	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4903      	ldr	r1, [pc, #12]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	46020c00 	.word	0x46020c00
 8003938:	08008524 	.word	0x08008524

0800393c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003940:	f7ff ffba 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetPCLK3Freq+0x20>)
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	46020c00 	.word	0x46020c00
 8003960:	08008524 	.word	0x08008524

08003964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800396c:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800397a:	f7fe fda9 	bl	80024d0 <HAL_PWREx_GetVoltageRange>
 800397e:	6178      	str	r0, [r7, #20]
 8003980:	e019      	b.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003988:	4a37      	ldr	r2, [pc, #220]	; (8003a68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800398a:	f043 0304 	orr.w	r3, r3, #4
 800398e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003992:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039a0:	f7fe fd96 	bl	80024d0 <HAL_PWREx_GetVoltageRange>
 80039a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b30      	ldr	r3, [pc, #192]	; (8003a68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ac:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039bc:	d003      	beq.n	80039c6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c4:	d109      	bne.n	80039da <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039cc:	d202      	bcs.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80039ce:	2301      	movs	r3, #1
 80039d0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80039d2:	e033      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80039d8:	e030      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e0:	d208      	bcs.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d102      	bne.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80039ea:	2303      	movs	r3, #3
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e025      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e035      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fa:	d90f      	bls.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a08:	d902      	bls.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e015      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003a10:	2301      	movs	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	e012      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e00f      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a22:	d109      	bne.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2a:	d102      	bne.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	e004      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003a32:	2302      	movs	r3, #2
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e001      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003a38:	2301      	movs	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 020f 	bic.w	r2, r3, #15
 8003a44:	4909      	ldr	r1, [pc, #36]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d001      	beq.n	8003a5e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	46020c00 	.word	0x46020c00
 8003a6c:	40022000 	.word	0x40022000

08003a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a74:	b0b6      	sub	sp, #216	; 0xd8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 0401 	and.w	r4, r2, #1
 8003a94:	2500      	movs	r5, #0
 8003a96:	ea54 0305 	orrs.w	r3, r4, r5
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003a9c:	4bc5      	ldr	r3, [pc, #788]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa2:	f023 0103 	bic.w	r1, r3, #3
 8003aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	4ac1      	ldr	r2, [pc, #772]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f002 0804 	and.w	r8, r2, #4
 8003ac0:	f04f 0900 	mov.w	r9, #0
 8003ac4:	ea58 0309 	orrs.w	r3, r8, r9
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003aca:	4bba      	ldr	r3, [pc, #744]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	4ab6      	ldr	r2, [pc, #728]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f002 0a08 	and.w	sl, r2, #8
 8003aee:	f04f 0b00 	mov.w	fp, #0
 8003af2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003af8:	4bae      	ldr	r3, [pc, #696]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4aaa      	ldr	r2, [pc, #680]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f002 0310 	and.w	r3, r2, #16
 8003b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003b30:	4ba0      	ldr	r3, [pc, #640]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	4a9c      	ldr	r2, [pc, #624]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b42:	430b      	orrs	r3, r1
 8003b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f002 0320 	and.w	r3, r2, #32
 8003b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4313      	orrs	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b68:	4b92      	ldr	r3, [pc, #584]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b6e:	f023 0107 	bic.w	r1, r3, #7
 8003b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b78:	4a8e      	ldr	r2, [pc, #568]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b96:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003ba0:	4b84      	ldr	r3, [pc, #528]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ba6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb0:	4a80      	ldr	r2, [pc, #512]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bce:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be8:	4a72      	ldr	r2, [pc, #456]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003c10:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c20:	4a64      	ldr	r2, [pc, #400]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c22:	430b      	orrs	r3, r1
 8003c24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c48:	4b5a      	ldr	r3, [pc, #360]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c4e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a56      	ldr	r2, [pc, #344]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003c80:	4b4c      	ldr	r3, [pc, #304]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c86:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c90:	4a48      	ldr	r2, [pc, #288]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cbe:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc8:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cde:	2300      	movs	r3, #0
 8003ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ce2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003cec:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003d10:	673b      	str	r3, [r7, #112]	; 0x70
 8003d12:	2300      	movs	r3, #0
 8003d14:	677b      	str	r3, [r7, #116]	; 0x74
 8003d16:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d04f      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d02d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003d2c:	2b80      	cmp	r3, #128	; 0x80
 8003d2e:	d827      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d02b      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003d34:	2b60      	cmp	r3, #96	; 0x60
 8003d36:	d823      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d006      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d81f      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d011      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003d48:	e01a      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d56:	e01a      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 f93e 	bl	8005fe0 <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d6a:	e010      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d70:	332c      	adds	r3, #44	; 0x2c
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 f9cc 	bl	8006110 <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d7e:	e006      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003d86:	e002      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d110      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d9c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da8:	4a02      	ldr	r2, [pc, #8]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003daa:	430b      	orrs	r3, r1
 8003dac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003db2:	bf00      	nop
 8003db4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003dbc:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dce:	2300      	movs	r3, #0
 8003dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dd2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	d046      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003ddc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003de4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003de8:	d028      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dea:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003dee:	d821      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df4:	d022      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d81b      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003dfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e00:	d01c      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e06:	d815      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d80f      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d011      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d00e      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003e1e:	e009      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e24:	3308      	adds	r3, #8
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 f8da 	bl	8005fe0 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003e46:	4bb6      	ldr	r3, [pc, #728]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e58:	4ab1      	ldr	r2, [pc, #708]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e66:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e76:	663b      	str	r3, [r7, #96]	; 0x60
 8003e78:	2300      	movs	r3, #0
 8003e7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003e7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e80:	460b      	mov	r3, r1
 8003e82:	4313      	orrs	r3, r2
 8003e84:	d03e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d81d      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ed7 	.word	0x08003ed7
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003ebb 	.word	0x08003ebb
 8003ea4:	08003ed7 	.word	0x08003ed7
 8003ea8:	08003ed7 	.word	0x08003ed7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003eac:	4b9c      	ldr	r3, [pc, #624]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	4a9b      	ldr	r2, [pc, #620]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003eb8:	e00e      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ebe:	332c      	adds	r3, #44	; 0x2c
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 f925 	bl	8006110 <RCCEx_PLL3_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003ed6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003ed8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003ee0:	4b8f      	ldr	r3, [pc, #572]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ee2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ee6:	f023 0107 	bic.w	r1, r3, #7
 8003eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef2:	4a8b      	ldr	r2, [pc, #556]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003efa:	e003      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f00:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f12:	2300      	movs	r3, #0
 8003f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f2c:	d028      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f32:	d821      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f38:	d024      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f3e:	d81b      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f44:	d00e      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f4a:	d815      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d110      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f56:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	4a71      	ldr	r2, [pc, #452]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f62:	e012      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f68:	332c      	adds	r3, #44	; 0x2c
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f002 f8d0 	bl	8006110 <RCCEx_PLL3_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003f76:	e008      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003f7e:	e004      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f80:	bf00      	nop
 8003f82:	e002      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f8a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10d      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	4a5e      	ldr	r2, [pc, #376]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003fb2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fc8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f000 80ba 	beq.w	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fda:	4b51      	ldr	r3, [pc, #324]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d113      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b4d      	ldr	r3, [pc, #308]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fee:	4a4c      	ldr	r2, [pc, #304]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003ff8:	4b49      	ldr	r3, [pc, #292]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004010:	4b44      	ldr	r3, [pc, #272]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	4a43      	ldr	r2, [pc, #268]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800401c:	f7fd fdcc 	bl	8001bb8 <HAL_GetTick>
 8004020:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004024:	e00b      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fd fdc7 	bl	8001bb8 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d903      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800403c:	e005      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800403e:	4b39      	ldr	r3, [pc, #228]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ed      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800404a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d16a      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004052:	4b33      	ldr	r3, [pc, #204]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d023      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800406c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004074:	4293      	cmp	r3, r2
 8004076:	d01b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800407a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800408c:	4a24      	ldr	r2, [pc, #144]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800408e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004092:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800409c:	4a20      	ldr	r2, [pc, #128]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d019      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd fd7c 	bl	8001bb8 <HAL_GetTick>
 80040c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	e00d      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd fd77 	bl	8001bb8 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d903      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ea      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80040f0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004106:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800410a:	4a05      	ldr	r2, [pc, #20]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800410c:	430b      	orrs	r3, r1
 800410e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004112:	e00d      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004114:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004118:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800411e:	bf00      	nop
 8004120:	46020c00 	.word	0x46020c00
 8004124:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004128:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800412c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004130:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4bb2      	ldr	r3, [pc, #712]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413e:	4ab1      	ldr	r2, [pc, #708]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004140:	f023 0304 	bic.w	r3, r3, #4
 8004144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
 8004156:	2300      	movs	r3, #0
 8004158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800415a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d042      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800416c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004170:	d022      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004172:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004176:	d81b      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417c:	d011      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x732>
 800417e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004182:	d815      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d019      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418c:	d110      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800418e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004192:	3308      	adds	r3, #8
 8004194:	4618      	mov	r0, r3
 8004196:	f001 ff23 	bl	8005fe0 <RCCEx_PLL2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041a0:	e00d      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a2:	4b98      	ldr	r3, [pc, #608]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	4a97      	ldr	r2, [pc, #604]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80041ae:	e006      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041b6:	e002      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80041bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041be:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10d      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80041c6:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041cc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d8:	4a8a      	ldr	r2, [pc, #552]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041da:	430b      	orrs	r3, r1
 80041dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041e6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041f6:	643b      	str	r3, [r7, #64]	; 0x40
 80041f8:	2300      	movs	r3, #0
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
 80041fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d02d      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004212:	d00b      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004218:	d804      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004222:	d007      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004234:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004236:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10d      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800423e:	4b71      	ldr	r3, [pc, #452]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004240:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004244:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	4a6c      	ldr	r2, [pc, #432]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004252:	430b      	orrs	r3, r1
 8004254:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800425e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004270:	2300      	movs	r3, #0
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004274:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004278:	460b      	mov	r3, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	d00c      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800427e:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004284:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004290:	4a5c      	ldr	r2, [pc, #368]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004292:	430b      	orrs	r3, r1
 8004294:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
 80042aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d019      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80042b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042c2:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	4a4f      	ldr	r2, [pc, #316]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042d4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80042d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042e0:	4a48      	ldr	r2, [pc, #288]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80042e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f6:	2300      	movs	r3, #0
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042fe:	460b      	mov	r3, r1
 8004300:	4313      	orrs	r3, r2
 8004302:	d00c      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004304:	4b3f      	ldr	r3, [pc, #252]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800430a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004316:	493b      	ldr	r1, [pc, #236]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800431e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
 8004330:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004334:	460b      	mov	r3, r1
 8004336:	4313      	orrs	r3, r2
 8004338:	d00c      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800433a:	4b32      	ldr	r3, [pc, #200]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800433c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004348:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800434c:	492d      	ldr	r1, [pc, #180]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d00c      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004376:	f023 0218 	bic.w	r2, r3, #24
 800437a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800437e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004382:	4920      	ldr	r1, [pc, #128]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800438a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d034      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80043a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043be:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80043c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043cc:	d108      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d2:	3308      	adds	r3, #8
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 fe03 	bl	8005fe0 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 80043e0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10f      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043fa:	4902      	ldr	r1, [pc, #8]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004402:	e005      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004404:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800440c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d03a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800442c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004434:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004438:	d00e      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800443a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800443e:	d815      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004448:	d110      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444a:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	4a26      	ldr	r2, [pc, #152]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004454:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004456:	e00e      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800445c:	3308      	adds	r3, #8
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fdbe 	bl	8005fe0 <RCCEx_PLL2_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800446a:	e004      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004472:	e000      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004474:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004476:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004484:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800448c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004490:	4915      	ldr	r1, [pc, #84]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800449e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80044a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044b8:	460b      	mov	r3, r1
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d00c      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80044c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044d0:	4905      	ldr	r1, [pc, #20]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80044d8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 80044dc:	4618      	mov	r0, r3
 80044de:	37d8      	adds	r7, #216	; 0xd8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e6:	bf00      	nop
 80044e8:	46020c00 	.word	0x46020c00

080044ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80044f4:	4bad      	ldr	r3, [pc, #692]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80044fe:	4bab      	ldr	r3, [pc, #684]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004508:	4ba8      	ldr	r3, [pc, #672]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3301      	adds	r3, #1
 8004514:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004516:	4ba5      	ldr	r3, [pc, #660]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004522:	4ba2      	ldr	r3, [pc, #648]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	08db      	lsrs	r3, r3, #3
 8004528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8123 	beq.w	800478c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d062      	beq.n	8004612 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b03      	cmp	r3, #3
 8004550:	f200 8081 	bhi.w	8004656 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d024      	beq.n	80045a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d17a      	bne.n	8004656 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	eddf 6a91 	vldr	s13, [pc, #580]	; 80047b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004582:	ed97 6a02 	vldr	s12, [r7, #8]
 8004586:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80047b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a2:	e08f      	b.n	80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045a4:	4b81      	ldr	r3, [pc, #516]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80045b0:	4b7e      	ldr	r3, [pc, #504]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	0f1b      	lsrs	r3, r3, #28
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	e006      	b.n	80045ca <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80045bc:	4b7b      	ldr	r3, [pc, #492]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	0f1b      	lsrs	r3, r3, #28
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	4a7b      	ldr	r2, [pc, #492]	; (80047b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80045cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80047b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80045f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004604:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004610:	e058      	b.n	80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80047b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004624:	4b61      	ldr	r3, [pc, #388]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004634:	ed97 6a02 	vldr	s12, [r7, #8]
 8004638:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80047b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800463c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004640:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004648:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800464c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004654:	e036      	b.n	80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004656:	4b55      	ldr	r3, [pc, #340]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8004662:	4b52      	ldr	r3, [pc, #328]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	0f1b      	lsrs	r3, r3, #28
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	e006      	b.n	800467c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800466e:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	0f1b      	lsrs	r3, r3, #28
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	4a4e      	ldr	r2, [pc, #312]	; (80047b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800467e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a6:	eddf 5a43 	vldr	s11, [pc, #268]	; 80047b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c2:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80046c4:	4b39      	ldr	r3, [pc, #228]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d017      	beq.n	8004700 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046d0:	4b36      	ldr	r3, [pc, #216]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	0a5b      	lsrs	r3, r3, #9
 80046d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80046e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046e6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f6:	ee17 2a90 	vmov	r2, s15
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e002      	b.n	8004706 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004706:	4b29      	ldr	r3, [pc, #164]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d017      	beq.n	8004742 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004728:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800472c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004738:	ee17 2a90 	vmov	r2, s15
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	e002      	b.n	8004748 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d017      	beq.n	8004784 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004754:	4b15      	ldr	r3, [pc, #84]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	0e1b      	lsrs	r3, r3, #24
 800475a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800476e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477a:	ee17 2a90 	vmov	r2, s15
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004782:	e00c      	b.n	800479e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	e008      	b.n	800479e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
}
 800479e:	bf00      	nop
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	46020c00 	.word	0x46020c00
 80047b0:	4b742400 	.word	0x4b742400
 80047b4:	46000000 	.word	0x46000000
 80047b8:	0800852c 	.word	0x0800852c

080047bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	; 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80047c4:	4bad      	ldr	r3, [pc, #692]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80047ce:	4bab      	ldr	r3, [pc, #684]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80047d8:	4ba8      	ldr	r3, [pc, #672]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	3301      	adds	r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80047e6:	4ba5      	ldr	r3, [pc, #660]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80047f2:	4ba2      	ldr	r3, [pc, #648]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8123 	beq.w	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d062      	beq.n	80048e2 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b03      	cmp	r3, #3
 8004820:	f200 8081 	bhi.w	8004926 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d024      	beq.n	8004874 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d17a      	bne.n	8004926 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800483e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004842:	4b8e      	ldr	r3, [pc, #568]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004852:	ed97 6a02 	vldr	s12, [r7, #8]
 8004856:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800485a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800485e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004866:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800486a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004872:	e08f      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004874:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8004880:	4b7e      	ldr	r3, [pc, #504]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	0f1b      	lsrs	r3, r3, #28
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	e006      	b.n	800489a <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800488c:	4b7b      	ldr	r3, [pc, #492]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800488e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	0f1b      	lsrs	r3, r3, #28
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	4a7b      	ldr	r2, [pc, #492]	; (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800489c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80048c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80048d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e0:	e058      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	ee07 3a90 	vmov	s15, r3
 80048e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ec:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80048f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f4:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004904:	ed97 6a02 	vldr	s12, [r7, #8]
 8004908:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800490c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004910:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004918:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800491c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004920:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004924:	e036      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004926:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8004932:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	0f1b      	lsrs	r3, r3, #28
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	e006      	b.n	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800493e:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	0f1b      	lsrs	r3, r3, #28
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	4a4e      	ldr	r2, [pc, #312]	; (8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	ee07 3a90 	vmov	s15, r3
 8004960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a02 	vldr	s12, [r7, #8]
 8004976:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004992:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004994:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d017      	beq.n	80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049a0:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	0a5b      	lsrs	r3, r3, #9
 80049a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80049b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80049be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c6:	ee17 2a90 	vmov	r2, s15
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e002      	b.n	80049d6 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d017      	beq.n	8004a12 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049e2:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80049f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049f8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a08:	ee17 2a90 	vmov	r2, s15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d017      	beq.n	8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4a:	ee17 2a90 	vmov	r2, s15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a52:	e00c      	b.n	8004a6e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	609a      	str	r2, [r3, #8]
}
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	46020c00 	.word	0x46020c00
 8004a80:	4b742400 	.word	0x4b742400
 8004a84:	46000000 	.word	0x46000000
 8004a88:	0800852c 	.word	0x0800852c

08004a8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004a94:	4bad      	ldr	r3, [pc, #692]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004a9e:	4bab      	ldr	r3, [pc, #684]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004aa8:	4ba8      	ldr	r3, [pc, #672]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004ab6:	4ba5      	ldr	r3, [pc, #660]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004ac2:	4ba2      	ldr	r3, [pc, #648]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac6:	08db      	lsrs	r3, r3, #3
 8004ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8123 	beq.w	8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d062      	beq.n	8004bb2 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	f200 8081 	bhi.w	8004bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d024      	beq.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d17a      	bne.n	8004bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b8e      	ldr	r3, [pc, #568]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b26:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004b42:	e08f      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b44:	4b81      	ldr	r3, [pc, #516]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004b50:	4b7e      	ldr	r3, [pc, #504]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	0f1b      	lsrs	r3, r3, #28
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	e006      	b.n	8004b6a <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004b5c:	4b7b      	ldr	r3, [pc, #492]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	0f1b      	lsrs	r3, r3, #28
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	4a7b      	ldr	r2, [pc, #492]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b90:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b94:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb0:	e058      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc4:	4b61      	ldr	r3, [pc, #388]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bcc:	ee07 3a90 	vmov	s15, r3
 8004bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bd8:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf4:	e036      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004bf6:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004c02:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0f1b      	lsrs	r3, r3, #28
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	e006      	b.n	8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004c0e:	4b4f      	ldr	r3, [pc, #316]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	0f1b      	lsrs	r3, r3, #28
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	4a4e      	ldr	r2, [pc, #312]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	ee07 3a90 	vmov	s15, r3
 8004c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c46:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c62:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004c64:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d017      	beq.n	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c70:	4b36      	ldr	r3, [pc, #216]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	0a5b      	lsrs	r3, r3, #9
 8004c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c86:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c96:	ee17 2a90 	vmov	r2, s15
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d017      	beq.n	8004ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cb2:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd8:	ee17 2a90 	vmov	r2, s15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	e002      	b.n	8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004ce8:	4b18      	ldr	r3, [pc, #96]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d017      	beq.n	8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cf4:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf8:	0e1b      	lsrs	r3, r3, #24
 8004cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1a:	ee17 2a90 	vmov	r2, s15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004d22:	e00c      	b.n	8004d3e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
}
 8004d2a:	e008      	b.n	8004d3e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
}
 8004d3e:	bf00      	nop
 8004d40:	3724      	adds	r7, #36	; 0x24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	46020c00 	.word	0x46020c00
 8004d50:	4b742400 	.word	0x4b742400
 8004d54:	46000000 	.word	0x46000000
 8004d58:	0800852c 	.word	0x0800852c

08004d5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08e      	sub	sp, #56	; 0x38
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d6a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	d145      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d72:	4b9b      	ldr	r3, [pc, #620]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004d7e:	4b98      	ldr	r3, [pc, #608]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d108      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	d104      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9a:	f001 b912 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004d9e:	4b90      	ldr	r3, [pc, #576]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dac:	d114      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d110      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004db6:	4b8a      	ldr	r3, [pc, #552]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc4:	d103      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004dc6:	23fa      	movs	r3, #250	; 0xfa
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dca:	f001 b8fa 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004dce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dd4:	f001 b8f5 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004dd8:	4b81      	ldr	r3, [pc, #516]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de4:	d107      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dec:	d103      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004dee:	4b7d      	ldr	r3, [pc, #500]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
 8004df2:	f001 b8e6 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfa:	f001 b8e2 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e02:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004e06:	430b      	orrs	r3, r1
 8004e08:	d151      	bne.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004e0a:	4b75      	ldr	r3, [pc, #468]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e10:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	2b80      	cmp	r3, #128	; 0x80
 8004e1a:	d035      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d841      	bhi.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	2b60      	cmp	r3, #96	; 0x60
 8004e26:	d02a      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2b60      	cmp	r3, #96	; 0x60
 8004e2c:	d83b      	bhi.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d009      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d835      	bhi.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00c      	beq.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d012      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e46:	e02e      	b.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fb4d 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e56:	f001 b8b4 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e5a:	f107 0318 	add.w	r3, r7, #24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fcac 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e68:	f001 b8ab 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e6c:	f107 030c 	add.w	r3, r7, #12
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fe0b 	bl	8004a8c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e7a:	f001 b8a2 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e84:	f001 b89d 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e88:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e94:	d103      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004e96:	4b54      	ldr	r3, [pc, #336]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e9a:	f001 b892 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ea2:	f001 b88e 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004eaa:	f001 b88a 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	d126      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004eba:	4b49      	ldr	r3, [pc, #292]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ebc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004ec6:	4b46      	ldr	r3, [pc, #280]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004eda:	4b43      	ldr	r3, [pc, #268]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	f001 b870 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004ee2:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d107      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef6:	d103      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004ef8:	4b3c      	ldr	r3, [pc, #240]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
 8004efc:	f001 b861 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	f001 b85d 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f0c:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004f10:	430b      	orrs	r3, r1
 8004f12:	d171      	bne.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004f14:	4b32      	ldr	r3, [pc, #200]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f1a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f26:	d034      	beq.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f2e:	d853      	bhi.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f36:	d00b      	beq.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3e:	d84b      	bhi.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004f4e:	e043      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fac9 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f5e:	f001 b830 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f62:	f107 0318 	add.w	r3, r7, #24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fc28 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f70:	f001 b827 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004f74:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d103      	bne.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004f82:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f86:	f001 b81c 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f8e:	f001 b818 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d118      	bne.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0e1b      	lsrs	r3, r3, #24
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	e006      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	0e1b      	lsrs	r3, r3, #24
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	4a0b      	ldr	r2, [pc, #44]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fcc:	f000 bff9 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fd4:	f000 bff5 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fdc:	f000 bff1 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004fe0:	46020c00 	.word	0x46020c00
 8004fe4:	0007a120 	.word	0x0007a120
 8004fe8:	00f42400 	.word	0x00f42400
 8004fec:	007a1200 	.word	0x007a1200
 8004ff0:	02dc6c00 	.word	0x02dc6c00
 8004ff4:	0800852c 	.word	0x0800852c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005000:	430b      	orrs	r3, r1
 8005002:	d17f      	bne.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005004:	4ba8      	ldr	r3, [pc, #672]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005006:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	2b00      	cmp	r3, #0
 8005014:	d165      	bne.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005016:	4ba4      	ldr	r3, [pc, #656]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800501c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005020:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005028:	d034      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005030:	d853      	bhi.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005038:	d00b      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005040:	d84b      	bhi.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	2b00      	cmp	r3, #0
 8005046:	d016      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800504e:	d009      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005050:	e043      	b.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fa48 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005060:	f000 bfaf 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005064:	f107 0318 	add.w	r3, r7, #24
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fba7 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005072:	f000 bfa6 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005076:	4b8c      	ldr	r3, [pc, #560]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800507e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005082:	d103      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8005084:	4b89      	ldr	r3, [pc, #548]	; (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005088:	f000 bf9b 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005090:	f000 bf97 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005094:	4b84      	ldr	r3, [pc, #528]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b20      	cmp	r3, #32
 800509e:	d118      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050a0:	4b81      	ldr	r3, [pc, #516]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80050ac:	4b7e      	ldr	r3, [pc, #504]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	e006      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80050b8:	4b7b      	ldr	r3, [pc, #492]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	0e1b      	lsrs	r3, r3, #24
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a7a      	ldr	r2, [pc, #488]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80050c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80050ce:	f000 bf78 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050d6:	f000 bf74 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050de:	f000 bf70 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e8:	d108      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff f9fc 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
 80050f8:	f000 bf63 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005100:	f000 bf5f 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005108:	1e51      	subs	r1, r2, #1
 800510a:	430b      	orrs	r3, r1
 800510c:	d136      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800510e:	4b66      	ldr	r3, [pc, #408]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005120:	f7fe fbf8 	bl	8003914 <HAL_RCC_GetPCLK2Freq>
 8005124:	6378      	str	r0, [r7, #52]	; 0x34
 8005126:	f000 bf4c 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	2b01      	cmp	r3, #1
 800512e:	d104      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005130:	f7fe faba 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005134:	6378      	str	r0, [r7, #52]	; 0x34
 8005136:	f000 bf44 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800513a:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d106      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	2b02      	cmp	r3, #2
 800514c:	d103      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 800514e:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
 8005152:	f000 bf36 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005156:	4b54      	ldr	r3, [pc, #336]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d107      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2b03      	cmp	r3, #3
 8005168:	d104      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
 8005170:	f000 bf27 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
 8005178:	f000 bf23 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800517c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005180:	1f11      	subs	r1, r2, #4
 8005182:	430b      	orrs	r3, r1
 8005184:	d136      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005186:	4b48      	ldr	r3, [pc, #288]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800518c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005190:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005198:	f7fe fba8 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 800519c:	6378      	str	r0, [r7, #52]	; 0x34
 800519e:	f000 bf10 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d104      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051a8:	f7fe fa7e 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80051ac:	6378      	str	r0, [r7, #52]	; 0x34
 80051ae:	f000 bf08 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80051b2:	4b3d      	ldr	r3, [pc, #244]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051be:	d106      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d103      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80051c6:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ca:	f000 befa 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80051ce:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d107      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	2b30      	cmp	r3, #48	; 0x30
 80051e0:	d104      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	637b      	str	r3, [r7, #52]	; 0x34
 80051e8:	f000 beeb 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
 80051f0:	f000 bee7 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80051f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f8:	f1a2 0108 	sub.w	r1, r2, #8
 80051fc:	430b      	orrs	r3, r1
 80051fe:	d136      	bne.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800520a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	2b00      	cmp	r3, #0
 8005210:	d104      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005212:	f7fe fb6b 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005216:	6378      	str	r0, [r7, #52]	; 0x34
 8005218:	f000 bed3 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d104      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005222:	f7fe fa41 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005226:	6378      	str	r0, [r7, #52]	; 0x34
 8005228:	f000 becb 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005238:	d106      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d103      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8005240:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
 8005244:	f000 bebd 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005248:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800524a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d107      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	2bc0      	cmp	r3, #192	; 0xc0
 800525a:	d104      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 800525c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
 8005262:	f000 beae 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
 800526a:	f000 beaa 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800526e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005272:	f1a2 0110 	sub.w	r1, r2, #16
 8005276:	430b      	orrs	r3, r1
 8005278:	d141      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800527c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005284:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800528c:	f7fe fb2e 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005290:	6378      	str	r0, [r7, #52]	; 0x34
 8005292:	f000 be96 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800529e:	f7fe fa03 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80052a2:	6378      	str	r0, [r7, #52]	; 0x34
 80052a4:	f000 be8d 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80052a8:	46020c00 	.word	0x46020c00
 80052ac:	02dc6c00 	.word	0x02dc6c00
 80052b0:	0800852c 	.word	0x0800852c
 80052b4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80052b8:	4baa      	ldr	r3, [pc, #680]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d107      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d103      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80052ce:	4ba6      	ldr	r3, [pc, #664]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
 80052d2:	f000 be76 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80052d6:	4ba3      	ldr	r3, [pc, #652]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d108      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ea:	d104      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 80052ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
 80052f2:	f000 be66 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
 80052fa:	f000 be62 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80052fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005302:	f1a2 0120 	sub.w	r1, r2, #32
 8005306:	430b      	orrs	r3, r1
 8005308:	d158      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800530a:	4b96      	ldr	r3, [pc, #600]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800530c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800531c:	f7fe fb0e 	bl	800393c <HAL_RCC_GetPCLK3Freq>
 8005320:	6378      	str	r0, [r7, #52]	; 0x34
 8005322:	f000 be4e 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	2b01      	cmp	r3, #1
 800532a:	d104      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800532c:	f7fe f9bc 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005330:	6378      	str	r0, [r7, #52]	; 0x34
 8005332:	f000 be46 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005336:	4b8b      	ldr	r3, [pc, #556]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005342:	d106      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2b02      	cmp	r3, #2
 8005348:	d103      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800534a:	4b87      	ldr	r3, [pc, #540]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
 800534e:	f000 be38 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005352:	4b84      	ldr	r3, [pc, #528]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d107      	bne.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	2b03      	cmp	r3, #3
 8005364:	d104      	bne.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
 800536c:	f000 be29 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005370:	4b7c      	ldr	r3, [pc, #496]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b20      	cmp	r3, #32
 800537a:	d11b      	bne.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	2b04      	cmp	r3, #4
 8005380:	d118      	bne.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005382:	4b78      	ldr	r3, [pc, #480]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 800538e:	4b75      	ldr	r3, [pc, #468]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0e1b      	lsrs	r3, r3, #24
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	e006      	b.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800539a:	4b72      	ldr	r3, [pc, #456]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800539c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053a0:	041b      	lsls	r3, r3, #16
 80053a2:	0e1b      	lsrs	r3, r3, #24
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	4a70      	ldr	r2, [pc, #448]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80053aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
 80053b0:	f000 be07 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
 80053b8:	f000 be03 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80053bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80053c4:	430b      	orrs	r3, r1
 80053c6:	d16c      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80053c8:	4b66      	ldr	r3, [pc, #408]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d104      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053dc:	f7fe f964 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80053e0:	6378      	str	r0, [r7, #52]	; 0x34
 80053e2:	f000 bdee 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ec:	d108      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ee:	f107 0318 	add.w	r3, r7, #24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff f9e2 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
 80053fc:	f000 bde1 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005406:	f7fe fa57 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 800540a:	6378      	str	r0, [r7, #52]	; 0x34
 800540c:	f000 bdd9 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005416:	d122      	bne.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005418:	4b52      	ldr	r3, [pc, #328]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b20      	cmp	r3, #32
 8005422:	d118      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005424:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005430:	4b4c      	ldr	r3, [pc, #304]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	0e1b      	lsrs	r3, r3, #24
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	e006      	b.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800543c:	4b49      	ldr	r3, [pc, #292]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800543e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	0e1b      	lsrs	r3, r3, #24
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	4a48      	ldr	r2, [pc, #288]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800544c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
 8005452:	f000 bdb6 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
 800545a:	f000 bdb2 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800545e:	4b41      	ldr	r3, [pc, #260]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546a:	d107      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005472:	d103      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8005474:	4b3c      	ldr	r3, [pc, #240]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
 8005478:	f000 bda3 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800547c:	4b39      	ldr	r3, [pc, #228]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d107      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005490:	d103      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8005492:	4b35      	ldr	r3, [pc, #212]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	f000 bd94 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
 800549e:	f000 bd90 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80054a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80054aa:	430b      	orrs	r3, r1
 80054ac:	d160      	bne.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80054ae:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d84c      	bhi.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	08005501 	.word	0x08005501
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	0800550b 	.word	0x0800550b
 80054d8:	08005515 	.word	0x08005515
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f803 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ea:	f000 bd6a 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ee:	f107 030c 	add.w	r3, r7, #12
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff faca 	bl	8004a8c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054fc:	f000 bd61 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005500:	f7fe f9da 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8005504:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005506:	f000 bd5c 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800550a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005510:	f000 bd57 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b20      	cmp	r3, #32
 800551e:	d118      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005520:	4b10      	ldr	r3, [pc, #64]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	e006      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800553a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	0e1b      	lsrs	r3, r3, #24
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	4a09      	ldr	r2, [pc, #36]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800554e:	f000 bd38 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005556:	f000 bd34 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800555e:	f000 bd30 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005562:	bf00      	nop
 8005564:	46020c00 	.word	0x46020c00
 8005568:	00f42400 	.word	0x00f42400
 800556c:	0800852c 	.word	0x0800852c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005574:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005578:	430b      	orrs	r3, r1
 800557a:	d167      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800557c:	4ba0      	ldr	r3, [pc, #640]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800557e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005582:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005586:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800558e:	d036      	beq.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005596:	d855      	bhi.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800559e:	d029      	beq.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055a6:	d84d      	bhi.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ae:	d013      	beq.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b6:	d845      	bhi.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c4:	d13e      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe ff8e 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055d4:	f000 bcf5 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055d8:	f107 030c 	add.w	r3, r7, #12
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fa55 	bl	8004a8c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055e6:	f000 bcec 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80055ea:	f7fe f965 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80055ee:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80055f0:	f000 bce7 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80055f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055fa:	f000 bce2 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055fe:	4b80      	ldr	r3, [pc, #512]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b20      	cmp	r3, #32
 8005608:	d118      	bne.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800560a:	4b7d      	ldr	r3, [pc, #500]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005616:	4b7a      	ldr	r3, [pc, #488]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0e1b      	lsrs	r3, r3, #24
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	e006      	b.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8005622:	4b77      	ldr	r3, [pc, #476]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005624:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	0e1b      	lsrs	r3, r3, #24
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	4a74      	ldr	r2, [pc, #464]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005638:	f000 bcc3 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005640:	f000 bcbf 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005648:	f000 bcbb 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800564c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005650:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005654:	430b      	orrs	r3, r1
 8005656:	d14c      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005658:	4b69      	ldr	r3, [pc, #420]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800565a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800565e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005662:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800566a:	f7fe f93f 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 800566e:	6378      	str	r0, [r7, #52]	; 0x34
 8005670:	f000 bca7 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d104      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800567c:	f7fe f814 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005680:	6378      	str	r0, [r7, #52]	; 0x34
 8005682:	f000 bc9e 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005686:	4b5e      	ldr	r3, [pc, #376]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d107      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569a:	d103      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 800569c:	4b5a      	ldr	r3, [pc, #360]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
 80056a0:	f000 bc8f 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80056a4:	4b56      	ldr	r3, [pc, #344]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d11c      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056b6:	d118      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056b8:	4b51      	ldr	r3, [pc, #324]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80056c4:	4b4e      	ldr	r3, [pc, #312]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	0e1b      	lsrs	r3, r3, #24
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	e006      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80056d0:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	0e1b      	lsrs	r3, r3, #24
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	4a49      	ldr	r2, [pc, #292]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80056e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
 80056e6:	f000 bc6c 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	f000 bc68 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80056f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f6:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80056fa:	430b      	orrs	r3, r1
 80056fc:	d14c      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80056fe:	4b40      	ldr	r3, [pc, #256]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005704:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005708:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fe f8ec 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005714:	6378      	str	r0, [r7, #52]	; 0x34
 8005716:	f000 bc54 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005720:	d104      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005722:	f7fd ffc1 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005726:	6378      	str	r0, [r7, #52]	; 0x34
 8005728:	f000 bc4b 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800572c:	4b34      	ldr	r3, [pc, #208]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005738:	d107      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005740:	d103      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
 8005746:	f000 bc3c 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800574a:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b20      	cmp	r3, #32
 8005754:	d11c      	bne.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800575c:	d118      	bne.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	0e1b      	lsrs	r3, r3, #24
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	e006      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8005776:	4b22      	ldr	r3, [pc, #136]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	0e1b      	lsrs	r3, r3, #24
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
 800578c:	f000 bc19 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
 8005794:	f000 bc15 	b.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80057a0:	430b      	orrs	r3, r1
 80057a2:	d157      	bne.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80057a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	2bc0      	cmp	r3, #192	; 0xc0
 80057b4:	d02a      	beq.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	2bc0      	cmp	r3, #192	; 0xc0
 80057ba:	d848      	bhi.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d00d      	beq.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d842      	bhi.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d011      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80057d4:	e03b      	b.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80057d6:	f7fe f8b1 	bl	800393c <HAL_RCC_GetPCLK3Freq>
 80057da:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80057dc:	e3f1      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ea:	d102      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057f0:	e3e7      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057f6:	e3e4      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80057f8:	f7fd ff56 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80057fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80057fe:	e3e0      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005800:	46020c00 	.word	0x46020c00
 8005804:	0800852c 	.word	0x0800852c
 8005808:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800580c:	4ba3      	ldr	r3, [pc, #652]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b20      	cmp	r3, #32
 8005816:	d117      	bne.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005818:	4ba0      	ldr	r3, [pc, #640]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8005824:	4b9d      	ldr	r3, [pc, #628]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	0e1b      	lsrs	r3, r3, #24
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	e006      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8005830:	4b9a      	ldr	r3, [pc, #616]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	0e1b      	lsrs	r3, r3, #24
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	4a98      	ldr	r2, [pc, #608]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005846:	e3bc      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800584c:	e3b9      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005852:	e3b6      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005858:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800585c:	430b      	orrs	r3, r1
 800585e:	d147      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005860:	4b8e      	ldr	r3, [pc, #568]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800586a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005872:	f7fe f83b 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005876:	6378      	str	r0, [r7, #52]	; 0x34
 8005878:	e3a3      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005880:	d103      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005882:	f7fd ff11 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005886:	6378      	str	r0, [r7, #52]	; 0x34
 8005888:	e39b      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800588a:	4b84      	ldr	r3, [pc, #528]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005896:	d106      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589e:	d102      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 80058a0:	4b80      	ldr	r3, [pc, #512]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
 80058a4:	e38d      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80058a6:	4b7d      	ldr	r3, [pc, #500]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d11b      	bne.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058b8:	d117      	bne.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058ba:	4b78      	ldr	r3, [pc, #480]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 80058c6:	4b75      	ldr	r3, [pc, #468]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	0e1b      	lsrs	r3, r3, #24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	e006      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80058d2:	4b72      	ldr	r3, [pc, #456]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	0e1b      	lsrs	r3, r3, #24
 80058dc:	f003 030f 	and.w	r3, r3, #15
 80058e0:	4a6f      	ldr	r2, [pc, #444]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80058e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
 80058e8:	e36b      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34
 80058ee:	e368      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80058f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80058f8:	430b      	orrs	r3, r1
 80058fa:	d164      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80058fc:	4b67      	ldr	r3, [pc, #412]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005906:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	2b00      	cmp	r3, #0
 800590c:	d120      	bne.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800590e:	4b63      	ldr	r3, [pc, #396]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b20      	cmp	r3, #32
 8005918:	d117      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800591a:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8005926:	4b5d      	ldr	r3, [pc, #372]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	0e1b      	lsrs	r3, r3, #24
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	e006      	b.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005932:	4b5a      	ldr	r3, [pc, #360]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	0e1b      	lsrs	r3, r3, #24
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	4a57      	ldr	r2, [pc, #348]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
 8005948:	e33b      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
 800594e:	e338      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005950:	4b52      	ldr	r3, [pc, #328]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800595a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800595e:	d112      	bne.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005966:	d10e      	bne.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005968:	4b4c      	ldr	r3, [pc, #304]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800596a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800596e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005976:	d102      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8005978:	23fa      	movs	r3, #250	; 0xfa
 800597a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800597c:	e321      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800597e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005984:	e31d      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005986:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005992:	d106      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599a:	d102      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 800599c:	4b41      	ldr	r3, [pc, #260]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
 80059a0:	e30f      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80059a2:	4b3e      	ldr	r3, [pc, #248]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d107      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b6:	d103      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 80059b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
 80059be:	e300      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
 80059c4:	e2fd      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80059c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ca:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80059ce:	430b      	orrs	r3, r1
 80059d0:	d16a      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80059d2:	4b32      	ldr	r3, [pc, #200]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d120      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059e4:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d117      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059f0:	4b2a      	ldr	r3, [pc, #168]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80059fc:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	0e1b      	lsrs	r3, r3, #24
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	e006      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005a08:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a0e:	041b      	lsls	r3, r3, #16
 8005a10:	0e1b      	lsrs	r3, r3, #24
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1e:	e2d0      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
 8005a24:	e2cd      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a34:	d112      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d10e      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a3e:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005a4e:	23fa      	movs	r3, #250	; 0xfa
 8005a50:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a52:	e2b6      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a5a:	e2b2      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a68:	d106      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a70:	d102      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005a72:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	e2a4      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005a78:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d107      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a8c:	d103      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
 8005a94:	e295      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9a:	e292      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005a9c:	46020c00 	.word	0x46020c00
 8005aa0:	0800852c 	.word	0x0800852c
 8005aa4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	d147      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005ab4:	4b9a      	ldr	r3, [pc, #616]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005aba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005ac6:	f7fd ff11 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005aca:	6378      	str	r0, [r7, #52]	; 0x34
 8005acc:	e279      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005ace:	4b94      	ldr	r3, [pc, #592]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005adc:	d112      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ae4:	d10e      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ae6:	4b8e      	ldr	r3, [pc, #568]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af4:	d102      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005af6:	23fa      	movs	r3, #250	; 0xfa
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005afa:	e262      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005afc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b02:	e25e      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005b04:	4b86      	ldr	r3, [pc, #536]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b10:	d106      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b18:	d102      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005b1a:	4b82      	ldr	r3, [pc, #520]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1e:	e250      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005b20:	4b7f      	ldr	r3, [pc, #508]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b34:	d103      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8005b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3c:	e241      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	e23e      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b48:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	d12d      	bne.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005b50:	4b73      	ldr	r3, [pc, #460]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b56:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005b5c:	4b70      	ldr	r3, [pc, #448]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b68:	d105      	bne.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005b70:	4b6c      	ldr	r3, [pc, #432]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
 8005b74:	e225      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fcb2 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8c:	e219      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b96:	f107 0318 	add.w	r3, r7, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fe0e 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba4:	e20d      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8005baa:	e20a      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	d156      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005bb8:	4b59      	ldr	r3, [pc, #356]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bca:	d028      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd2:	d845      	bhi.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bda:	d013      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be2:	d83d      	bhi.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	d004      	beq.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005bf2:	e035      	b.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005bf4:	f7fd fe8e 	bl	8003914 <HAL_RCC_GetPCLK2Freq>
 8005bf8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005bfa:	e1e2      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005bfc:	f7fd fd54 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005c00:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c02:	e1de      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c04:	4b46      	ldr	r3, [pc, #280]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c10:	d102      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005c12:	4b44      	ldr	r3, [pc, #272]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c16:	e1d4      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c1c:	e1d1      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c1e:	4b40      	ldr	r3, [pc, #256]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d117      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8005c36:	4b3a      	ldr	r3, [pc, #232]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	0e1b      	lsrs	r3, r3, #24
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	e006      	b.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005c42:	4b37      	ldr	r3, [pc, #220]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	0e1b      	lsrs	r3, r3, #24
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	4a35      	ldr	r2, [pc, #212]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c58:	e1b3      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c5e:	e1b0      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c64:	e1ad      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6a:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	d15c      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005c72:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c84:	d028      	beq.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c8c:	d845      	bhi.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c94:	d013      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9c:	d83d      	bhi.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005caa:	d004      	beq.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005cac:	e035      	b.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005cae:	f7fd fe1d 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005cb2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cb4:	e185      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fd fcf7 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005cba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cbc:	e181      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cbe:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cca:	d102      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005ccc:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cd0:	e177      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cd6:	e174      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005cd8:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d117      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ce4:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	0e1b      	lsrs	r3, r3, #24
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	e006      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005cfc:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d12:	e156      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d18:	e153      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d1e:	e150      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005d20:	46020c00 	.word	0x46020c00
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	0800852c 	.word	0x0800852c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d30:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005d34:	430b      	orrs	r3, r1
 8005d36:	d176      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005d38:	4ba4      	ldr	r3, [pc, #656]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d3e:	f003 0318 	and.w	r3, r3, #24
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	2b18      	cmp	r3, #24
 8005d48:	d86a      	bhi.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005db5 	.word	0x08005db5
 8005d54:	08005e21 	.word	0x08005e21
 8005d58:	08005e21 	.word	0x08005e21
 8005d5c:	08005e21 	.word	0x08005e21
 8005d60:	08005e21 	.word	0x08005e21
 8005d64:	08005e21 	.word	0x08005e21
 8005d68:	08005e21 	.word	0x08005e21
 8005d6c:	08005e21 	.word	0x08005e21
 8005d70:	08005dbd 	.word	0x08005dbd
 8005d74:	08005e21 	.word	0x08005e21
 8005d78:	08005e21 	.word	0x08005e21
 8005d7c:	08005e21 	.word	0x08005e21
 8005d80:	08005e21 	.word	0x08005e21
 8005d84:	08005e21 	.word	0x08005e21
 8005d88:	08005e21 	.word	0x08005e21
 8005d8c:	08005e21 	.word	0x08005e21
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005e21 	.word	0x08005e21
 8005d98:	08005e21 	.word	0x08005e21
 8005d9c:	08005e21 	.word	0x08005e21
 8005da0:	08005e21 	.word	0x08005e21
 8005da4:	08005e21 	.word	0x08005e21
 8005da8:	08005e21 	.word	0x08005e21
 8005dac:	08005e21 	.word	0x08005e21
 8005db0:	08005ddf 	.word	0x08005ddf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005db4:	f7fd fdc2 	bl	800393c <HAL_RCC_GetPCLK3Freq>
 8005db8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005dba:	e102      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005dbc:	f7fd fc74 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005dc0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005dc2:	e0fe      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dc4:	4b81      	ldr	r3, [pc, #516]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd0:	d102      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005dd2:	4b7f      	ldr	r3, [pc, #508]	; (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dd6:	e0f4      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ddc:	e0f1      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005dde:	4b7b      	ldr	r3, [pc, #492]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d117      	bne.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005dea:	4b78      	ldr	r3, [pc, #480]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005df6:	4b75      	ldr	r3, [pc, #468]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	0e1b      	lsrs	r3, r3, #24
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005e02:	4b72      	ldr	r3, [pc, #456]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	0e1b      	lsrs	r3, r3, #24
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	4a70      	ldr	r2, [pc, #448]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e18:	e0d3      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e1e:	e0d0      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e24:	e0cd      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e2a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	d155      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e32:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e44:	d013      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e4c:	d844      	bhi.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e54:	d013      	beq.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5c:	d83c      	bhi.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d014      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6a:	d014      	beq.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005e6c:	e034      	b.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6e:	f107 0318 	add.w	r3, r7, #24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fca2 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7c:	e0a1      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fb32 	bl	80044ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e8c:	e099      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005e8e:	f7fd fc0b 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8005e92:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e94:	e095      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e96:	4b4d      	ldr	r3, [pc, #308]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d117      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ea2:	4b4a      	ldr	r3, [pc, #296]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0e1b      	lsrs	r3, r3, #24
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	e006      	b.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005eba:	4b44      	ldr	r3, [pc, #272]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	0e1b      	lsrs	r3, r3, #24
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	4a42      	ldr	r2, [pc, #264]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ed0:	e077      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ed6:	e074      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005edc:	e071      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	d131      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005eea:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005ef6:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d106      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f10:	e057      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005f12:	4b2e      	ldr	r3, [pc, #184]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f20:	d112      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f28:	d10e      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f2a:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f38:	d102      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005f3a:	23fa      	movs	r3, #250	; 0xfa
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f3e:	e040      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f46:	e03c      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4c:	e039      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f52:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005f56:	430b      	orrs	r3, r1
 8005f58:	d131      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005f5a:	4b1c      	ldr	r3, [pc, #112]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f64:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005f66:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f72:	d105      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7e:	e020      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8c:	d106      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d102      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005f96:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	e012      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb0:	d102      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb6:	e004      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbc:	e001      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3738      	adds	r7, #56	; 0x38
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	46020c00 	.word	0x46020c00
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	0800852c 	.word	0x0800852c
 8005fd8:	02dc6c00 	.word	0x02dc6c00
 8005fdc:	016e3600 	.word	0x016e3600

08005fe0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005fe8:	4b47      	ldr	r3, [pc, #284]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a46      	ldr	r2, [pc, #280]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 8005fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ff2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ff4:	f7fb fde0 	bl	8001bb8 <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ffa:	e008      	b.n	800600e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ffc:	f7fb fddc 	bl	8001bb8 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e077      	b.n	80060fe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800600e:	4b3e      	ldr	r3, [pc, #248]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800601a:	4b3b      	ldr	r3, [pc, #236]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6811      	ldr	r1, [r2, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6852      	ldr	r2, [r2, #4]
 800602e:	3a01      	subs	r2, #1
 8006030:	0212      	lsls	r2, r2, #8
 8006032:	430a      	orrs	r2, r1
 8006034:	4934      	ldr	r1, [pc, #208]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 8006036:	4313      	orrs	r3, r2
 8006038:	62cb      	str	r3, [r1, #44]	; 0x2c
 800603a:	4b33      	ldr	r3, [pc, #204]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 800603c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800603e:	4b33      	ldr	r3, [pc, #204]	; (800610c <RCCEx_PLL2_Config+0x12c>)
 8006040:	4013      	ands	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6892      	ldr	r2, [r2, #8]
 8006046:	3a01      	subs	r2, #1
 8006048:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68d2      	ldr	r2, [r2, #12]
 8006050:	3a01      	subs	r2, #1
 8006052:	0252      	lsls	r2, r2, #9
 8006054:	b292      	uxth	r2, r2
 8006056:	4311      	orrs	r1, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6912      	ldr	r2, [r2, #16]
 800605c:	3a01      	subs	r2, #1
 800605e:	0412      	lsls	r2, r2, #16
 8006060:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006064:	4311      	orrs	r1, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6952      	ldr	r2, [r2, #20]
 800606a:	3a01      	subs	r2, #1
 800606c:	0612      	lsls	r2, r2, #24
 800606e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006072:	430a      	orrs	r2, r1
 8006074:	4924      	ldr	r1, [pc, #144]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 8006076:	4313      	orrs	r3, r2
 8006078:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800607a:	4b23      	ldr	r3, [pc, #140]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	f023 020c 	bic.w	r2, r3, #12
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	4920      	ldr	r1, [pc, #128]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 8006088:	4313      	orrs	r3, r2
 800608a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800608c:	4b1e      	ldr	r3, [pc, #120]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	491c      	ldr	r1, [pc, #112]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 8006096:	4313      	orrs	r3, r2
 8006098:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800609a:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	4a1a      	ldr	r2, [pc, #104]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060a0:	f023 0310 	bic.w	r3, r3, #16
 80060a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060a6:	4b18      	ldr	r3, [pc, #96]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	69d2      	ldr	r2, [r2, #28]
 80060b6:	00d2      	lsls	r2, r2, #3
 80060b8:	4913      	ldr	r1, [pc, #76]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	4a11      	ldr	r2, [pc, #68]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060c4:	f043 0310 	orr.w	r3, r3, #16
 80060c8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060d4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060d6:	f7fb fd6f 	bl	8001bb8 <HAL_GetTick>
 80060da:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060dc:	e008      	b.n	80060f0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060de:	f7fb fd6b 	bl	8001bb8 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e006      	b.n	80060fe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <RCCEx_PLL2_Config+0x128>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0

}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	46020c00 	.word	0x46020c00
 800610c:	80800000 	.word	0x80800000

08006110 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006118:	4b47      	ldr	r3, [pc, #284]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a46      	ldr	r2, [pc, #280]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 800611e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006122:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006124:	f7fb fd48 	bl	8001bb8 <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800612a:	e008      	b.n	800613e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800612c:	f7fb fd44 	bl	8001bb8 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e077      	b.n	800622e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800613e:	4b3e      	ldr	r3, [pc, #248]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800614a:	4b3b      	ldr	r3, [pc, #236]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6811      	ldr	r1, [r2, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6852      	ldr	r2, [r2, #4]
 800615e:	3a01      	subs	r2, #1
 8006160:	0212      	lsls	r2, r2, #8
 8006162:	430a      	orrs	r2, r1
 8006164:	4934      	ldr	r1, [pc, #208]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 8006166:	4313      	orrs	r3, r2
 8006168:	630b      	str	r3, [r1, #48]	; 0x30
 800616a:	4b33      	ldr	r3, [pc, #204]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 800616c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616e:	4b33      	ldr	r3, [pc, #204]	; (800623c <RCCEx_PLL3_Config+0x12c>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6892      	ldr	r2, [r2, #8]
 8006176:	3a01      	subs	r2, #1
 8006178:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	68d2      	ldr	r2, [r2, #12]
 8006180:	3a01      	subs	r2, #1
 8006182:	0252      	lsls	r2, r2, #9
 8006184:	b292      	uxth	r2, r2
 8006186:	4311      	orrs	r1, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6912      	ldr	r2, [r2, #16]
 800618c:	3a01      	subs	r2, #1
 800618e:	0412      	lsls	r2, r2, #16
 8006190:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006194:	4311      	orrs	r1, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6952      	ldr	r2, [r2, #20]
 800619a:	3a01      	subs	r2, #1
 800619c:	0612      	lsls	r2, r2, #24
 800619e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80061a2:	430a      	orrs	r2, r1
 80061a4:	4924      	ldr	r1, [pc, #144]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	f023 020c 	bic.w	r2, r3, #12
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	4920      	ldr	r1, [pc, #128]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80061bc:	4b1e      	ldr	r3, [pc, #120]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	491c      	ldr	r1, [pc, #112]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80061ca:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4a1a      	ldr	r2, [pc, #104]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061d0:	f023 0310 	bic.w	r3, r3, #16
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	69d2      	ldr	r2, [r2, #28]
 80061e6:	00d2      	lsls	r2, r2, #3
 80061e8:	4913      	ldr	r1, [pc, #76]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	4a11      	ldr	r2, [pc, #68]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061f4:	f043 0310 	orr.w	r3, r3, #16
 80061f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 8006200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006204:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006206:	f7fb fcd7 	bl	8001bb8 <HAL_GetTick>
 800620a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800620c:	e008      	b.n	8006220 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800620e:	f7fb fcd3 	bl	8001bb8 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e006      	b.n	800622e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <RCCEx_PLL3_Config+0x128>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	46020c00 	.word	0x46020c00
 800623c:	80800000 	.word	0x80800000

08006240 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e0fb      	b.n	800644a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a7f      	ldr	r2, [pc, #508]	; (8006454 <HAL_SPI_Init+0x214>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d004      	beq.n	8006266 <HAL_SPI_Init+0x26>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a7d      	ldr	r2, [pc, #500]	; (8006458 <HAL_SPI_Init+0x218>)
 8006262:	4293      	cmp	r3, r2
 8006264:	e000      	b.n	8006268 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006266:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a78      	ldr	r2, [pc, #480]	; (8006454 <HAL_SPI_Init+0x214>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_SPI_Init+0x42>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a76      	ldr	r2, [pc, #472]	; (8006458 <HAL_SPI_Init+0x218>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d105      	bne.n	800628e <HAL_SPI_Init+0x4e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b0f      	cmp	r3, #15
 8006288:	d901      	bls.n	800628e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e0dd      	b.n	800644a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fbd8 	bl	8006a44 <SPI_GetPacketSize>
 8006294:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a6e      	ldr	r2, [pc, #440]	; (8006454 <HAL_SPI_Init+0x214>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_SPI_Init+0x6a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a6c      	ldr	r2, [pc, #432]	; (8006458 <HAL_SPI_Init+0x218>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d102      	bne.n	80062b0 <HAL_SPI_Init+0x70>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d816      	bhi.n	80062de <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062b4:	4a69      	ldr	r2, [pc, #420]	; (800645c <HAL_SPI_Init+0x21c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d00e      	beq.n	80062d8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a68      	ldr	r2, [pc, #416]	; (8006460 <HAL_SPI_Init+0x220>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d009      	beq.n	80062d8 <HAL_SPI_Init+0x98>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a66      	ldr	r2, [pc, #408]	; (8006464 <HAL_SPI_Init+0x224>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <HAL_SPI_Init+0x98>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a65      	ldr	r2, [pc, #404]	; (8006468 <HAL_SPI_Init+0x228>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d104      	bne.n	80062e2 <HAL_SPI_Init+0xa2>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b10      	cmp	r3, #16
 80062dc:	d901      	bls.n	80062e2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e0b3      	b.n	800644a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fb f916 	bl	8001528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0201 	bic.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800631e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006328:	d119      	bne.n	800635e <HAL_SPI_Init+0x11e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006332:	d103      	bne.n	800633c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006338:	2b00      	cmp	r3, #0
 800633a:	d008      	beq.n	800634e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10c      	bne.n	800635e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800634c:	d107      	bne.n	800635e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800635c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00f      	beq.n	800638a <HAL_SPI_Init+0x14a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b06      	cmp	r3, #6
 8006370:	d90b      	bls.n	800638a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e007      	b.n	800639a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006398:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69da      	ldr	r2, [r3, #28]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	431a      	orrs	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ac:	ea42 0103 	orr.w	r1, r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	ea42 0103 	orr.w	r1, r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	46002000 	.word	0x46002000
 8006458:	56002000 	.word	0x56002000
 800645c:	40013000 	.word	0x40013000
 8006460:	50013000 	.word	0x50013000
 8006464:	40003800 	.word	0x40003800
 8006468:	50003800 	.word	0x50003800

0800646c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3320      	adds	r3, #32
 8006482:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_SPI_Transmit+0x2a>
 8006492:	2302      	movs	r3, #2
 8006494:	e203      	b.n	800689e <HAL_SPI_Transmit+0x432>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800649e:	f7fb fb8b 	bl	8001bb8 <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d007      	beq.n	80064c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
 80064b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80064bc:	7efb      	ldrb	r3, [r7, #27]
 80064be:	e1ee      	b.n	800689e <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_SPI_Transmit+0x60>
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80064d8:	7efb      	ldrb	r3, [r7, #27]
 80064da:	e1e0      	b.n	800689e <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2203      	movs	r2, #3
 80064e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	88fa      	ldrh	r2, [r7, #6]
 80064fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800652c:	d108      	bne.n	8006540 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e009      	b.n	8006554 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006552:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	88f9      	ldrh	r1, [r7, #6]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	430b      	orrs	r3, r1
 8006566:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <HAL_SPI_Transmit+0x134>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658e:	d107      	bne.n	80065a0 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2b0f      	cmp	r3, #15
 80065a6:	d95b      	bls.n	8006660 <HAL_SPI_Transmit+0x1f4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a8f      	ldr	r2, [pc, #572]	; (80067ec <HAL_SPI_Transmit+0x380>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d04f      	beq.n	8006652 <HAL_SPI_Transmit+0x1e6>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a8e      	ldr	r2, [pc, #568]	; (80067f0 <HAL_SPI_Transmit+0x384>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d04a      	beq.n	8006652 <HAL_SPI_Transmit+0x1e6>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a8c      	ldr	r2, [pc, #560]	; (80067f4 <HAL_SPI_Transmit+0x388>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d045      	beq.n	8006652 <HAL_SPI_Transmit+0x1e6>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a8b      	ldr	r2, [pc, #556]	; (80067f8 <HAL_SPI_Transmit+0x38c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d147      	bne.n	8006660 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80065d0:	e03f      	b.n	8006652 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d114      	bne.n	800660a <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f0:	1d1a      	adds	r2, r3, #4
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006608:	e023      	b.n	8006652 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660a:	f7fb fad5 	bl	8001bb8 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d803      	bhi.n	8006622 <HAL_SPI_Transmit+0x1b6>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006620:	d102      	bne.n	8006628 <HAL_SPI_Transmit+0x1bc>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d114      	bne.n	8006652 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f93d 	bl	80068a8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e125      	b.n	800689e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1b9      	bne.n	80065d2 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800665e:	e0f8      	b.n	8006852 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b07      	cmp	r3, #7
 8006666:	f240 80ed 	bls.w	8006844 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800666a:	e05d      	b.n	8006728 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b02      	cmp	r3, #2
 8006678:	d132      	bne.n	80066e0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	d918      	bls.n	80066b8 <HAL_SPI_Transmit+0x24c>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d014      	beq.n	80066b8 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b02      	subs	r3, #2
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80066b6:	e037      	b.n	8006728 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066bc:	881a      	ldrh	r2, [r3, #0]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c6:	1c9a      	adds	r2, r3, #2
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80066de:	e023      	b.n	8006728 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e0:	f7fb fa6a 	bl	8001bb8 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d803      	bhi.n	80066f8 <HAL_SPI_Transmit+0x28c>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f6:	d102      	bne.n	80066fe <HAL_SPI_Transmit+0x292>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d114      	bne.n	8006728 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f8d2 	bl	80068a8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006712:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0ba      	b.n	800689e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d19b      	bne.n	800666c <HAL_SPI_Transmit+0x200>
 8006734:	e08d      	b.n	8006852 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b02      	cmp	r3, #2
 8006742:	d15b      	bne.n	80067fc <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d918      	bls.n	8006782 <HAL_SPI_Transmit+0x316>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d914      	bls.n	8006782 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006768:	1d1a      	adds	r2, r3, #4
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b04      	subs	r3, #4
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006780:	e060      	b.n	8006844 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d917      	bls.n	80067be <HAL_SPI_Transmit+0x352>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d013      	beq.n	80067be <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679a:	881a      	ldrh	r2, [r3, #0]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a4:	1c9a      	adds	r2, r3, #2
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b02      	subs	r3, #2
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067bc:	e042      	b.n	8006844 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3320      	adds	r3, #32
 80067c8:	7812      	ldrb	r2, [r2, #0]
 80067ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80067e8:	e02c      	b.n	8006844 <HAL_SPI_Transmit+0x3d8>
 80067ea:	bf00      	nop
 80067ec:	40013000 	.word	0x40013000
 80067f0:	50013000 	.word	0x50013000
 80067f4:	40003800 	.word	0x40003800
 80067f8:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067fc:	f7fb f9dc 	bl	8001bb8 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d803      	bhi.n	8006814 <HAL_SPI_Transmit+0x3a8>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006812:	d102      	bne.n	800681a <HAL_SPI_Transmit+0x3ae>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d114      	bne.n	8006844 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f844 	bl	80068a8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800682e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e02c      	b.n	800689e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	f47f af72 	bne.w	8006736 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	2108      	movs	r1, #8
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f8c3 	bl	80069e8 <SPI_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f815 	bl	80068a8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800689c:	7efb      	ldrb	r3, [r7, #27]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0208 	orr.w	r2, r2, #8
 80068c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0210 	orr.w	r2, r2, #16
 80068d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0201 	bic.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800690a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b04      	cmp	r3, #4
 8006916:	d014      	beq.n	8006942 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00f      	beq.n	8006942 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006928:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0220 	orr.w	r2, r2, #32
 8006940:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b03      	cmp	r3, #3
 800694c:	d014      	beq.n	8006978 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00f      	beq.n	8006978 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800695e:	f043 0204 	orr.w	r2, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006976:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00f      	beq.n	80069a2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006988:	f043 0201 	orr.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699a      	ldr	r2, [r3, #24]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00f      	beq.n	80069cc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b2:	f043 0208 	orr.w	r2, r3, #8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 80069dc:	bf00      	nop
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80069f8:	e010      	b.n	8006a1c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069fa:	f7fb f8dd 	bl	8001bb8 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d803      	bhi.n	8006a12 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a10:	d102      	bne.n	8006a18 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e00f      	b.n	8006a3c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4013      	ands	r3, r2
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d0df      	beq.n	80069fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	3307      	adds	r3, #7
 8006a62:	08db      	lsrs	r3, r3, #3
 8006a64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d12e      	bne.n	8006aee <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e028      	b.n	8006af0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006aca:	ea42 0103 	orr.w	r1, r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e000      	b.n	8006af0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
  }
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e049      	b.n	8006ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fa fdf8 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f000 f8d6 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d001      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e072      	b.n	8006caa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a35      	ldr	r2, [pc, #212]	; (8006cb8 <HAL_TIM_Base_Start_IT+0x10c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d040      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a34      	ldr	r2, [pc, #208]	; (8006cbc <HAL_TIM_Base_Start_IT+0x110>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d03b      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf8:	d036      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c02:	d031      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a2d      	ldr	r2, [pc, #180]	; (8006cc0 <HAL_TIM_Base_Start_IT+0x114>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d02c      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <HAL_TIM_Base_Start_IT+0x118>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d027      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <HAL_TIM_Base_Start_IT+0x11c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d022      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a29      	ldr	r2, [pc, #164]	; (8006ccc <HAL_TIM_Base_Start_IT+0x120>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d01d      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <HAL_TIM_Base_Start_IT+0x124>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <HAL_TIM_Base_Start_IT+0x128>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a24      	ldr	r2, [pc, #144]	; (8006cd8 <HAL_TIM_Base_Start_IT+0x12c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a23      	ldr	r2, [pc, #140]	; (8006cdc <HAL_TIM_Base_Start_IT+0x130>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a21      	ldr	r2, [pc, #132]	; (8006ce0 <HAL_TIM_Base_Start_IT+0x134>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xbc>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <HAL_TIM_Base_Start_IT+0x138>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d115      	bne.n	8006c94 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ce8 <HAL_TIM_Base_Start_IT+0x13c>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d015      	beq.n	8006ca6 <HAL_TIM_Base_Start_IT+0xfa>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d011      	beq.n	8006ca6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c92:	e008      	b.n	8006ca6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e000      	b.n	8006ca8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	50012c00 	.word	0x50012c00
 8006cc0:	40000400 	.word	0x40000400
 8006cc4:	50000400 	.word	0x50000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	50000800 	.word	0x50000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	50000c00 	.word	0x50000c00
 8006cd8:	40013400 	.word	0x40013400
 8006cdc:	50013400 	.word	0x50013400
 8006ce0:	40014000 	.word	0x40014000
 8006ce4:	50014000 	.word	0x50014000
 8006ce8:	00010007 	.word	0x00010007

08006cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a68      	ldr	r2, [pc, #416]	; (8006ea0 <TIM_Base_SetConfig+0x1b4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d02b      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a67      	ldr	r2, [pc, #412]	; (8006ea4 <TIM_Base_SetConfig+0x1b8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d027      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d023      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d1a:	d01f      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a62      	ldr	r2, [pc, #392]	; (8006ea8 <TIM_Base_SetConfig+0x1bc>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d01b      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a61      	ldr	r2, [pc, #388]	; (8006eac <TIM_Base_SetConfig+0x1c0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d017      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a60      	ldr	r2, [pc, #384]	; (8006eb0 <TIM_Base_SetConfig+0x1c4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a5f      	ldr	r2, [pc, #380]	; (8006eb4 <TIM_Base_SetConfig+0x1c8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00f      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a5e      	ldr	r2, [pc, #376]	; (8006eb8 <TIM_Base_SetConfig+0x1cc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00b      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a5d      	ldr	r2, [pc, #372]	; (8006ebc <TIM_Base_SetConfig+0x1d0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a5c      	ldr	r2, [pc, #368]	; (8006ec0 <TIM_Base_SetConfig+0x1d4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_Base_SetConfig+0x70>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a5b      	ldr	r2, [pc, #364]	; (8006ec4 <TIM_Base_SetConfig+0x1d8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d108      	bne.n	8006d6e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a4b      	ldr	r2, [pc, #300]	; (8006ea0 <TIM_Base_SetConfig+0x1b4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d043      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a4a      	ldr	r2, [pc, #296]	; (8006ea4 <TIM_Base_SetConfig+0x1b8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d03f      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d84:	d03b      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d8c:	d037      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a45      	ldr	r2, [pc, #276]	; (8006ea8 <TIM_Base_SetConfig+0x1bc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d033      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a44      	ldr	r2, [pc, #272]	; (8006eac <TIM_Base_SetConfig+0x1c0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d02f      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a43      	ldr	r2, [pc, #268]	; (8006eb0 <TIM_Base_SetConfig+0x1c4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d02b      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a42      	ldr	r2, [pc, #264]	; (8006eb4 <TIM_Base_SetConfig+0x1c8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a41      	ldr	r2, [pc, #260]	; (8006eb8 <TIM_Base_SetConfig+0x1cc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d023      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a40      	ldr	r2, [pc, #256]	; (8006ebc <TIM_Base_SetConfig+0x1d0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01f      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a3f      	ldr	r2, [pc, #252]	; (8006ec0 <TIM_Base_SetConfig+0x1d4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01b      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a3e      	ldr	r2, [pc, #248]	; (8006ec4 <TIM_Base_SetConfig+0x1d8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d017      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a3d      	ldr	r2, [pc, #244]	; (8006ec8 <TIM_Base_SetConfig+0x1dc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a3c      	ldr	r2, [pc, #240]	; (8006ecc <TIM_Base_SetConfig+0x1e0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00f      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a3b      	ldr	r2, [pc, #236]	; (8006ed0 <TIM_Base_SetConfig+0x1e4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00b      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a3a      	ldr	r2, [pc, #232]	; (8006ed4 <TIM_Base_SetConfig+0x1e8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d007      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a39      	ldr	r2, [pc, #228]	; (8006ed8 <TIM_Base_SetConfig+0x1ec>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_Base_SetConfig+0x112>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a38      	ldr	r2, [pc, #224]	; (8006edc <TIM_Base_SetConfig+0x1f0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a1a      	ldr	r2, [pc, #104]	; (8006ea0 <TIM_Base_SetConfig+0x1b4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d023      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a19      	ldr	r2, [pc, #100]	; (8006ea4 <TIM_Base_SetConfig+0x1b8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d01f      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <TIM_Base_SetConfig+0x1d4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d01b      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <TIM_Base_SetConfig+0x1d8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d017      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1c      	ldr	r2, [pc, #112]	; (8006ec8 <TIM_Base_SetConfig+0x1dc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1b      	ldr	r2, [pc, #108]	; (8006ecc <TIM_Base_SetConfig+0x1e0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00f      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <TIM_Base_SetConfig+0x1e4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <TIM_Base_SetConfig+0x1e8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a18      	ldr	r2, [pc, #96]	; (8006ed8 <TIM_Base_SetConfig+0x1ec>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x198>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a17      	ldr	r2, [pc, #92]	; (8006edc <TIM_Base_SetConfig+0x1f0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d103      	bne.n	8006e8c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	615a      	str	r2, [r3, #20]
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	50012c00 	.word	0x50012c00
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	50000400 	.word	0x50000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	50000800 	.word	0x50000800
 8006eb8:	40000c00 	.word	0x40000c00
 8006ebc:	50000c00 	.word	0x50000c00
 8006ec0:	40013400 	.word	0x40013400
 8006ec4:	50013400 	.word	0x50013400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	50014000 	.word	0x50014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	50014400 	.word	0x50014400
 8006ed8:	40014800 	.word	0x40014800
 8006edc:	50014800 	.word	0x50014800

08006ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e042      	b.n	8006f78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fa fc29 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2224      	movs	r2, #36	; 0x24
 8006f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0201 	bic.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f8ba 	bl	800709c <UART_SetConfig>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e022      	b.n	8006f78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa46 	bl	80073cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 facd 	bl	8007510 <UART_CheckIdleState>
 8006f76:	4603      	mov	r3, r0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d17b      	bne.n	8007092 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <HAL_UART_Transmit+0x26>
 8006fa0:	88fb      	ldrh	r3, [r7, #6]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e074      	b.n	8007094 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2221      	movs	r2, #33	; 0x21
 8006fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fba:	f7fa fdfd 	bl	8001bb8 <HAL_GetTick>
 8006fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd8:	d108      	bne.n	8006fec <HAL_UART_Transmit+0x6c>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e003      	b.n	8006ff4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ff4:	e030      	b.n	8007058 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2180      	movs	r1, #128	; 0x80
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fb2f 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e03d      	b.n	8007094 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800702c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	3302      	adds	r3, #2
 8007032:	61bb      	str	r3, [r7, #24]
 8007034:	e007      	b.n	8007046 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	781a      	ldrb	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	3301      	adds	r3, #1
 8007044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1c8      	bne.n	8006ff6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2200      	movs	r2, #0
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 faf8 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e006      	b.n	8007094 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	e000      	b.n	8007094 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007092:	2302      	movs	r3, #2
  }
}
 8007094:	4618      	mov	r0, r3
 8007096:	3720      	adds	r7, #32
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800709c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070a0:	b094      	sub	sp, #80	; 0x50
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	4b9b      	ldr	r3, [pc, #620]	; (8007320 <UART_SetConfig+0x284>)
 80070b2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	431a      	orrs	r2, r3
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4994      	ldr	r1, [pc, #592]	; (8007324 <UART_SetConfig+0x288>)
 80070d4:	4019      	ands	r1, r3
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070dc:	430b      	orrs	r3, r1
 80070de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	68d9      	ldr	r1, [r3, #12]
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	ea40 0301 	orr.w	r3, r0, r1
 80070f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b87      	ldr	r3, [pc, #540]	; (8007320 <UART_SetConfig+0x284>)
 8007104:	429a      	cmp	r2, r3
 8007106:	d009      	beq.n	800711c <UART_SetConfig+0x80>
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b86      	ldr	r3, [pc, #536]	; (8007328 <UART_SetConfig+0x28c>)
 800710e:	429a      	cmp	r2, r3
 8007110:	d004      	beq.n	800711c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	4313      	orrs	r3, r2
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007126:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007130:	430b      	orrs	r3, r1
 8007132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	f023 000f 	bic.w	r0, r3, #15
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	ea40 0301 	orr.w	r3, r0, r1
 800714a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b76      	ldr	r3, [pc, #472]	; (800732c <UART_SetConfig+0x290>)
 8007152:	429a      	cmp	r2, r3
 8007154:	d102      	bne.n	800715c <UART_SetConfig+0xc0>
 8007156:	2301      	movs	r3, #1
 8007158:	64bb      	str	r3, [r7, #72]	; 0x48
 800715a:	e021      	b.n	80071a0 <UART_SetConfig+0x104>
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b73      	ldr	r3, [pc, #460]	; (8007330 <UART_SetConfig+0x294>)
 8007162:	429a      	cmp	r2, r3
 8007164:	d102      	bne.n	800716c <UART_SetConfig+0xd0>
 8007166:	2304      	movs	r3, #4
 8007168:	64bb      	str	r3, [r7, #72]	; 0x48
 800716a:	e019      	b.n	80071a0 <UART_SetConfig+0x104>
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b70      	ldr	r3, [pc, #448]	; (8007334 <UART_SetConfig+0x298>)
 8007172:	429a      	cmp	r2, r3
 8007174:	d102      	bne.n	800717c <UART_SetConfig+0xe0>
 8007176:	2308      	movs	r3, #8
 8007178:	64bb      	str	r3, [r7, #72]	; 0x48
 800717a:	e011      	b.n	80071a0 <UART_SetConfig+0x104>
 800717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b6d      	ldr	r3, [pc, #436]	; (8007338 <UART_SetConfig+0x29c>)
 8007182:	429a      	cmp	r2, r3
 8007184:	d102      	bne.n	800718c <UART_SetConfig+0xf0>
 8007186:	2310      	movs	r3, #16
 8007188:	64bb      	str	r3, [r7, #72]	; 0x48
 800718a:	e009      	b.n	80071a0 <UART_SetConfig+0x104>
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4b63      	ldr	r3, [pc, #396]	; (8007320 <UART_SetConfig+0x284>)
 8007192:	429a      	cmp	r2, r3
 8007194:	d102      	bne.n	800719c <UART_SetConfig+0x100>
 8007196:	2320      	movs	r3, #32
 8007198:	64bb      	str	r3, [r7, #72]	; 0x48
 800719a:	e001      	b.n	80071a0 <UART_SetConfig+0x104>
 800719c:	2300      	movs	r3, #0
 800719e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4b5e      	ldr	r3, [pc, #376]	; (8007320 <UART_SetConfig+0x284>)
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d004      	beq.n	80071b4 <UART_SetConfig+0x118>
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b5e      	ldr	r3, [pc, #376]	; (8007328 <UART_SetConfig+0x28c>)
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d172      	bne.n	800729a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80071b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b6:	2200      	movs	r2, #0
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	627a      	str	r2, [r7, #36]	; 0x24
 80071bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80071c0:	f7fd fdcc 	bl	8004d5c <HAL_RCCEx_GetPeriphCLKFreq>
 80071c4:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80071c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80e7 	beq.w	800739c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	4a5a      	ldr	r2, [pc, #360]	; (800733c <UART_SetConfig+0x2a0>)
 80071d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d8:	461a      	mov	r2, r3
 80071da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	4413      	add	r3, r2
 80071ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d305      	bcc.n	80071fe <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d903      	bls.n	8007206 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007204:	e048      	b.n	8007298 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007208:	2200      	movs	r2, #0
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	61fa      	str	r2, [r7, #28]
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	4a4a      	ldr	r2, [pc, #296]	; (800733c <UART_SetConfig+0x2a0>)
 8007214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007218:	b29b      	uxth	r3, r3
 800721a:	2200      	movs	r2, #0
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	617a      	str	r2, [r7, #20]
 8007220:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007224:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007228:	f7f9 f826 	bl	8000278 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4610      	mov	r0, r2
 8007232:	4619      	mov	r1, r3
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	020b      	lsls	r3, r1, #8
 800723e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007242:	0202      	lsls	r2, r0, #8
 8007244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007246:	6849      	ldr	r1, [r1, #4]
 8007248:	0849      	lsrs	r1, r1, #1
 800724a:	2000      	movs	r0, #0
 800724c:	460c      	mov	r4, r1
 800724e:	4605      	mov	r5, r0
 8007250:	eb12 0804 	adds.w	r8, r2, r4
 8007254:	eb43 0905 	adc.w	r9, r3, r5
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	60bb      	str	r3, [r7, #8]
 8007260:	60fa      	str	r2, [r7, #12]
 8007262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f9 f805 	bl	8000278 <__aeabi_uldivmod>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4613      	mov	r3, r2
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800727c:	d308      	bcc.n	8007290 <UART_SetConfig+0x1f4>
 800727e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007284:	d204      	bcs.n	8007290 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800728c:	60da      	str	r2, [r3, #12]
 800728e:	e003      	b.n	8007298 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007296:	e081      	b.n	800739c <UART_SetConfig+0x300>
 8007298:	e080      	b.n	800739c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a2:	d14d      	bne.n	8007340 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80072a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a6:	2200      	movs	r2, #0
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b0:	f7fd fd54 	bl	8004d5c <HAL_RCCEx_GetPeriphCLKFreq>
 80072b4:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d06f      	beq.n	800739c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	4a1e      	ldr	r2, [pc, #120]	; (800733c <UART_SetConfig+0x2a0>)
 80072c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c6:	461a      	mov	r2, r3
 80072c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ce:	005a      	lsls	r2, r3, #1
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	441a      	add	r2, r3
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e4:	2b0f      	cmp	r3, #15
 80072e6:	d916      	bls.n	8007316 <UART_SetConfig+0x27a>
 80072e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ee:	d212      	bcs.n	8007316 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f023 030f 	bic.w	r3, r3, #15
 80072f8:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	b29a      	uxth	r2, r3
 8007306:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007308:	4313      	orrs	r3, r2
 800730a:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007312:	60da      	str	r2, [r3, #12]
 8007314:	e042      	b.n	800739c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800731c:	e03e      	b.n	800739c <UART_SetConfig+0x300>
 800731e:	bf00      	nop
 8007320:	46002400 	.word	0x46002400
 8007324:	cfff69f3 	.word	0xcfff69f3
 8007328:	56002400 	.word	0x56002400
 800732c:	40013800 	.word	0x40013800
 8007330:	40004800 	.word	0x40004800
 8007334:	40004c00 	.word	0x40004c00
 8007338:	40005000 	.word	0x40005000
 800733c:	080085ec 	.word	0x080085ec
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007342:	2200      	movs	r2, #0
 8007344:	469a      	mov	sl, r3
 8007346:	4693      	mov	fp, r2
 8007348:	4650      	mov	r0, sl
 800734a:	4659      	mov	r1, fp
 800734c:	f7fd fd06 	bl	8004d5c <HAL_RCCEx_GetPeriphCLKFreq>
 8007350:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d021      	beq.n	800739c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	4a1a      	ldr	r2, [pc, #104]	; (80073c8 <UART_SetConfig+0x32c>)
 800735e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007362:	461a      	mov	r2, r3
 8007364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007366:	fbb3 f2f2 	udiv	r2, r3, r2
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	441a      	add	r2, r3
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737e:	2b0f      	cmp	r3, #15
 8007380:	d909      	bls.n	8007396 <UART_SetConfig+0x2fa>
 8007382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007388:	d205      	bcs.n	8007396 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800738a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738c:	b29a      	uxth	r2, r3
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60da      	str	r2, [r3, #12]
 8007394:	e002      	b.n	800739c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	2201      	movs	r2, #1
 80073a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2201      	movs	r2, #1
 80073a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	2200      	movs	r2, #0
 80073b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	2200      	movs	r2, #0
 80073b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80073b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3750      	adds	r7, #80	; 0x50
 80073c0:	46bd      	mov	sp, r7
 80073c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073c6:	bf00      	nop
 80073c8:	080085ec 	.word	0x080085ec

080073cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01a      	beq.n	80074e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ca:	d10a      	bne.n	80074e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b098      	sub	sp, #96	; 0x60
 8007514:	af02      	add	r7, sp, #8
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007520:	f7fa fb4a 	bl	8001bb8 <HAL_GetTick>
 8007524:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b08      	cmp	r3, #8
 8007532:	d12f      	bne.n	8007594 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800753c:	2200      	movs	r2, #0
 800753e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f88e 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d022      	beq.n	8007594 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007562:	653b      	str	r3, [r7, #80]	; 0x50
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	647b      	str	r3, [r7, #68]	; 0x44
 800756e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800757a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e063      	b.n	800765c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d149      	bne.n	8007636 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075aa:	2200      	movs	r2, #0
 80075ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f857 	bl	8007664 <UART_WaitOnFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d03c      	beq.n	8007636 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	623b      	str	r3, [r7, #32]
   return(result);
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
 80075dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e6      	bne.n	80075bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	64bb      	str	r3, [r7, #72]	; 0x48
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760e:	61fa      	str	r2, [r7, #28]
 8007610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	69b9      	ldr	r1, [r7, #24]
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	617b      	str	r3, [r7, #20]
   return(result);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e5      	bne.n	80075ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e012      	b.n	800765c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3758      	adds	r7, #88	; 0x58
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007674:	e049      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767c:	d045      	beq.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767e:	f7fa fa9b 	bl	8001bb8 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	429a      	cmp	r2, r3
 800768c:	d302      	bcc.n	8007694 <UART_WaitOnFlagUntilTimeout+0x30>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e048      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d031      	beq.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d110      	bne.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2208      	movs	r2, #8
 80076ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f838 	bl	8007732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2208      	movs	r2, #8
 80076c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e029      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e4:	d111      	bne.n	800770a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f81e 	bl	8007732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e00f      	b.n	800772a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4013      	ands	r3, r2
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	429a      	cmp	r2, r3
 8007718:	bf0c      	ite	eq
 800771a:	2301      	moveq	r3, #1
 800771c:	2300      	movne	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	429a      	cmp	r2, r3
 8007726:	d0a6      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007732:	b480      	push	{r7}
 8007734:	b095      	sub	sp, #84	; 0x54
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800774e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007758:	643b      	str	r3, [r7, #64]	; 0x40
 800775a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800775e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e6      	bne.n	800773a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	61fb      	str	r3, [r7, #28]
   return(result);
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007782:	f023 0301 	bic.w	r3, r3, #1
 8007786:	64bb      	str	r3, [r7, #72]	; 0x48
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3308      	adds	r3, #8
 800778e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007790:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e3      	bne.n	800776c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d118      	bne.n	80077de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f023 0310 	bic.w	r3, r3, #16
 80077c0:	647b      	str	r3, [r7, #68]	; 0x44
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6979      	ldr	r1, [r7, #20]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	613b      	str	r3, [r7, #16]
   return(result);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e6      	bne.n	80077ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80077f2:	bf00      	nop
 80077f4:	3754      	adds	r7, #84	; 0x54
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_UARTEx_DisableFifoMode+0x16>
 8007810:	2302      	movs	r3, #2
 8007812:	e027      	b.n	8007864 <HAL_UARTEx_DisableFifoMode+0x66>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2224      	movs	r2, #36	; 0x24
 8007820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0201 	bic.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007842:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007884:	2302      	movs	r3, #2
 8007886:	e02d      	b.n	80078e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2224      	movs	r2, #36	; 0x24
 8007894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f84f 	bl	8007968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007900:	2302      	movs	r3, #2
 8007902:	e02d      	b.n	8007960 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2224      	movs	r2, #36	; 0x24
 8007910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f811 	bl	8007968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007988:	e031      	b.n	80079ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800798a:	2308      	movs	r3, #8
 800798c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800798e:	2308      	movs	r3, #8
 8007990:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	0e5b      	lsrs	r3, r3, #25
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	0f5b      	lsrs	r3, r3, #29
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	7b3a      	ldrb	r2, [r7, #12]
 80079b6:	4911      	ldr	r1, [pc, #68]	; (80079fc <UARTEx_SetNbDataToProcess+0x94>)
 80079b8:	5c8a      	ldrb	r2, [r1, r2]
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079be:	7b3a      	ldrb	r2, [r7, #12]
 80079c0:	490f      	ldr	r1, [pc, #60]	; (8007a00 <UARTEx_SetNbDataToProcess+0x98>)
 80079c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	7b7a      	ldrb	r2, [r7, #13]
 80079d4:	4909      	ldr	r1, [pc, #36]	; (80079fc <UARTEx_SetNbDataToProcess+0x94>)
 80079d6:	5c8a      	ldrb	r2, [r1, r2]
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079dc:	7b7a      	ldrb	r2, [r7, #13]
 80079de:	4908      	ldr	r1, [pc, #32]	; (8007a00 <UARTEx_SetNbDataToProcess+0x98>)
 80079e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	08008604 	.word	0x08008604
 8007a00:	0800860c 	.word	0x0800860c

08007a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	f043 0201 	orr.w	r2, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8007a32:	b084      	sub	sp, #16
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	f107 001c 	add.w	r0, r7, #28
 8007a40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e008      	b.n	8007a60 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff ffd8 	bl	8007a04 <USB_CoreReset>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a6a:	b004      	add	sp, #16
 8007a6c:	4770      	bx	lr

08007a6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a76:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	43db      	mvns	r3, r3
 8007a84:	401a      	ands	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8007ab6:	e00b      	b.n	8007ad0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d106      	bne.n	8007acc <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	641a      	str	r2, [r3, #64]	; 0x40
 8007aca:	e001      	b.n	8007ad0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e000      	b.n	8007ad2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8007ade:	b084      	sub	sp, #16
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	f107 001c 	add.w	r0, r7, #28
 8007aec:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff ffc7 	bl	8007a98 <USB_SetCurrentMode>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b20:	b004      	add	sp, #16
 8007b22:	4770      	bx	lr

08007b24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b30:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <__errno>:
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <__errno+0x8>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	2000000c 	.word	0x2000000c

08007b54 <__libc_init_array>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4d0d      	ldr	r5, [pc, #52]	; (8007b8c <__libc_init_array+0x38>)
 8007b58:	2600      	movs	r6, #0
 8007b5a:	4c0d      	ldr	r4, [pc, #52]	; (8007b90 <__libc_init_array+0x3c>)
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	42a6      	cmp	r6, r4
 8007b62:	d109      	bne.n	8007b78 <__libc_init_array+0x24>
 8007b64:	4d0b      	ldr	r5, [pc, #44]	; (8007b94 <__libc_init_array+0x40>)
 8007b66:	2600      	movs	r6, #0
 8007b68:	4c0b      	ldr	r4, [pc, #44]	; (8007b98 <__libc_init_array+0x44>)
 8007b6a:	f000 fc9d 	bl	80084a8 <_init>
 8007b6e:	1b64      	subs	r4, r4, r5
 8007b70:	10a4      	asrs	r4, r4, #2
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	d105      	bne.n	8007b82 <__libc_init_array+0x2e>
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7c:	3601      	adds	r6, #1
 8007b7e:	4798      	blx	r3
 8007b80:	e7ee      	b.n	8007b60 <__libc_init_array+0xc>
 8007b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b86:	3601      	adds	r6, #1
 8007b88:	4798      	blx	r3
 8007b8a:	e7f2      	b.n	8007b72 <__libc_init_array+0x1e>
 8007b8c:	08008650 	.word	0x08008650
 8007b90:	08008650 	.word	0x08008650
 8007b94:	08008650 	.word	0x08008650
 8007b98:	08008654 	.word	0x08008654

08007b9c <memset>:
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <siprintf>:
 8007bac:	b40e      	push	{r1, r2, r3}
 8007bae:	b500      	push	{lr}
 8007bb0:	b09c      	sub	sp, #112	; 0x70
 8007bb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8007bb8:	9002      	str	r0, [sp, #8]
 8007bba:	9006      	str	r0, [sp, #24]
 8007bbc:	9107      	str	r1, [sp, #28]
 8007bbe:	9104      	str	r1, [sp, #16]
 8007bc0:	4808      	ldr	r0, [pc, #32]	; (8007be4 <siprintf+0x38>)
 8007bc2:	4909      	ldr	r1, [pc, #36]	; (8007be8 <siprintf+0x3c>)
 8007bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc8:	9105      	str	r1, [sp, #20]
 8007bca:	a902      	add	r1, sp, #8
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	f000 f868 	bl	8007ca4 <_svfiprintf_r>
 8007bd4:	9b02      	ldr	r3, [sp, #8]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	b01c      	add	sp, #112	; 0x70
 8007bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be0:	b003      	add	sp, #12
 8007be2:	4770      	bx	lr
 8007be4:	2000000c 	.word	0x2000000c
 8007be8:	ffff0208 	.word	0xffff0208

08007bec <__ssputs_r>:
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	688e      	ldr	r6, [r1, #8]
 8007bf2:	4682      	mov	sl, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	4690      	mov	r8, r2
 8007bf8:	429e      	cmp	r6, r3
 8007bfa:	461f      	mov	r7, r3
 8007bfc:	d838      	bhi.n	8007c70 <__ssputs_r+0x84>
 8007bfe:	898a      	ldrh	r2, [r1, #12]
 8007c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c04:	d032      	beq.n	8007c6c <__ssputs_r+0x80>
 8007c06:	6825      	ldr	r5, [r4, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	6909      	ldr	r1, [r1, #16]
 8007c0c:	eba5 0901 	sub.w	r9, r5, r1
 8007c10:	6965      	ldr	r5, [r4, #20]
 8007c12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c16:	444b      	add	r3, r9
 8007c18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c1c:	106d      	asrs	r5, r5, #1
 8007c1e:	429d      	cmp	r5, r3
 8007c20:	bf38      	it	cc
 8007c22:	461d      	movcc	r5, r3
 8007c24:	0553      	lsls	r3, r2, #21
 8007c26:	d531      	bpl.n	8007c8c <__ssputs_r+0xa0>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f000 fb73 	bl	8008314 <_malloc_r>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	b950      	cbnz	r0, 8007c48 <__ssputs_r+0x5c>
 8007c32:	230c      	movs	r3, #12
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c38:	f8ca 3000 	str.w	r3, [sl]
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c48:	464a      	mov	r2, r9
 8007c4a:	6921      	ldr	r1, [r4, #16]
 8007c4c:	f000 face 	bl	80081ec <memcpy>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	6126      	str	r6, [r4, #16]
 8007c5e:	444e      	add	r6, r9
 8007c60:	6165      	str	r5, [r4, #20]
 8007c62:	eba5 0509 	sub.w	r5, r5, r9
 8007c66:	6026      	str	r6, [r4, #0]
 8007c68:	463e      	mov	r6, r7
 8007c6a:	60a5      	str	r5, [r4, #8]
 8007c6c:	42be      	cmp	r6, r7
 8007c6e:	d900      	bls.n	8007c72 <__ssputs_r+0x86>
 8007c70:	463e      	mov	r6, r7
 8007c72:	4632      	mov	r2, r6
 8007c74:	4641      	mov	r1, r8
 8007c76:	6820      	ldr	r0, [r4, #0]
 8007c78:	f000 fac5 	bl	8008206 <memmove>
 8007c7c:	68a3      	ldr	r3, [r4, #8]
 8007c7e:	2000      	movs	r0, #0
 8007c80:	1b9b      	subs	r3, r3, r6
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	4433      	add	r3, r6
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	e7db      	b.n	8007c44 <__ssputs_r+0x58>
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	f000 fbb5 	bl	80083fc <_realloc_r>
 8007c92:	4606      	mov	r6, r0
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d1e1      	bne.n	8007c5c <__ssputs_r+0x70>
 8007c98:	6921      	ldr	r1, [r4, #16]
 8007c9a:	4650      	mov	r0, sl
 8007c9c:	f000 face 	bl	800823c <_free_r>
 8007ca0:	e7c7      	b.n	8007c32 <__ssputs_r+0x46>
	...

08007ca4 <_svfiprintf_r>:
 8007ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	4698      	mov	r8, r3
 8007caa:	898b      	ldrh	r3, [r1, #12]
 8007cac:	b09d      	sub	sp, #116	; 0x74
 8007cae:	4607      	mov	r7, r0
 8007cb0:	061b      	lsls	r3, r3, #24
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	d50e      	bpl.n	8007cd6 <_svfiprintf_r+0x32>
 8007cb8:	690b      	ldr	r3, [r1, #16]
 8007cba:	b963      	cbnz	r3, 8007cd6 <_svfiprintf_r+0x32>
 8007cbc:	2140      	movs	r1, #64	; 0x40
 8007cbe:	f000 fb29 	bl	8008314 <_malloc_r>
 8007cc2:	6028      	str	r0, [r5, #0]
 8007cc4:	6128      	str	r0, [r5, #16]
 8007cc6:	b920      	cbnz	r0, 8007cd2 <_svfiprintf_r+0x2e>
 8007cc8:	230c      	movs	r3, #12
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cd0:	e0d1      	b.n	8007e76 <_svfiprintf_r+0x1d2>
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	616b      	str	r3, [r5, #20]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cdc:	f04f 0901 	mov.w	r9, #1
 8007ce0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007e90 <_svfiprintf_r+0x1ec>
 8007ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce6:	2320      	movs	r3, #32
 8007ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cec:	2330      	movs	r3, #48	; 0x30
 8007cee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf2:	4623      	mov	r3, r4
 8007cf4:	469a      	mov	sl, r3
 8007cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cfa:	b10a      	cbz	r2, 8007d00 <_svfiprintf_r+0x5c>
 8007cfc:	2a25      	cmp	r2, #37	; 0x25
 8007cfe:	d1f9      	bne.n	8007cf4 <_svfiprintf_r+0x50>
 8007d00:	ebba 0b04 	subs.w	fp, sl, r4
 8007d04:	d00b      	beq.n	8007d1e <_svfiprintf_r+0x7a>
 8007d06:	465b      	mov	r3, fp
 8007d08:	4622      	mov	r2, r4
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ff6d 	bl	8007bec <__ssputs_r>
 8007d12:	3001      	adds	r0, #1
 8007d14:	f000 80aa 	beq.w	8007e6c <_svfiprintf_r+0x1c8>
 8007d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d1a:	445a      	add	r2, fp
 8007d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80a2 	beq.w	8007e6c <_svfiprintf_r+0x1c8>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d2e:	f10a 0a01 	add.w	sl, sl, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	9307      	str	r3, [sp, #28]
 8007d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d40:	4654      	mov	r4, sl
 8007d42:	2205      	movs	r2, #5
 8007d44:	4852      	ldr	r0, [pc, #328]	; (8007e90 <_svfiprintf_r+0x1ec>)
 8007d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4a:	f000 fa41 	bl	80081d0 <memchr>
 8007d4e:	9a04      	ldr	r2, [sp, #16]
 8007d50:	b9d8      	cbnz	r0, 8007d8a <_svfiprintf_r+0xe6>
 8007d52:	06d0      	lsls	r0, r2, #27
 8007d54:	bf44      	itt	mi
 8007d56:	2320      	movmi	r3, #32
 8007d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5c:	0711      	lsls	r1, r2, #28
 8007d5e:	bf44      	itt	mi
 8007d60:	232b      	movmi	r3, #43	; 0x2b
 8007d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d66:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6c:	d015      	beq.n	8007d9a <_svfiprintf_r+0xf6>
 8007d6e:	9a07      	ldr	r2, [sp, #28]
 8007d70:	4654      	mov	r4, sl
 8007d72:	2000      	movs	r0, #0
 8007d74:	f04f 0c0a 	mov.w	ip, #10
 8007d78:	4621      	mov	r1, r4
 8007d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7e:	3b30      	subs	r3, #48	; 0x30
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d94e      	bls.n	8007e22 <_svfiprintf_r+0x17e>
 8007d84:	b1b0      	cbz	r0, 8007db4 <_svfiprintf_r+0x110>
 8007d86:	9207      	str	r2, [sp, #28]
 8007d88:	e014      	b.n	8007db4 <_svfiprintf_r+0x110>
 8007d8a:	eba0 0308 	sub.w	r3, r0, r8
 8007d8e:	46a2      	mov	sl, r4
 8007d90:	fa09 f303 	lsl.w	r3, r9, r3
 8007d94:	4313      	orrs	r3, r2
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	e7d2      	b.n	8007d40 <_svfiprintf_r+0x9c>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	1d19      	adds	r1, r3, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	9103      	str	r1, [sp, #12]
 8007da4:	bfbb      	ittet	lt
 8007da6:	425b      	neglt	r3, r3
 8007da8:	f042 0202 	orrlt.w	r2, r2, #2
 8007dac:	9307      	strge	r3, [sp, #28]
 8007dae:	9307      	strlt	r3, [sp, #28]
 8007db0:	bfb8      	it	lt
 8007db2:	9204      	strlt	r2, [sp, #16]
 8007db4:	7823      	ldrb	r3, [r4, #0]
 8007db6:	2b2e      	cmp	r3, #46	; 0x2e
 8007db8:	d10c      	bne.n	8007dd4 <_svfiprintf_r+0x130>
 8007dba:	7863      	ldrb	r3, [r4, #1]
 8007dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dbe:	d135      	bne.n	8007e2c <_svfiprintf_r+0x188>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	3402      	adds	r4, #2
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	9203      	str	r2, [sp, #12]
 8007dcc:	bfb8      	it	lt
 8007dce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dd2:	9305      	str	r3, [sp, #20]
 8007dd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ea0 <_svfiprintf_r+0x1fc>
 8007dd8:	2203      	movs	r2, #3
 8007dda:	7821      	ldrb	r1, [r4, #0]
 8007ddc:	4650      	mov	r0, sl
 8007dde:	f000 f9f7 	bl	80081d0 <memchr>
 8007de2:	b140      	cbz	r0, 8007df6 <_svfiprintf_r+0x152>
 8007de4:	2340      	movs	r3, #64	; 0x40
 8007de6:	eba0 000a 	sub.w	r0, r0, sl
 8007dea:	3401      	adds	r4, #1
 8007dec:	fa03 f000 	lsl.w	r0, r3, r0
 8007df0:	9b04      	ldr	r3, [sp, #16]
 8007df2:	4303      	orrs	r3, r0
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfa:	2206      	movs	r2, #6
 8007dfc:	4825      	ldr	r0, [pc, #148]	; (8007e94 <_svfiprintf_r+0x1f0>)
 8007dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e02:	f000 f9e5 	bl	80081d0 <memchr>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d038      	beq.n	8007e7c <_svfiprintf_r+0x1d8>
 8007e0a:	4b23      	ldr	r3, [pc, #140]	; (8007e98 <_svfiprintf_r+0x1f4>)
 8007e0c:	bb1b      	cbnz	r3, 8007e56 <_svfiprintf_r+0x1b2>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	f023 0307 	bic.w	r3, r3, #7
 8007e16:	3308      	adds	r3, #8
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1c:	4433      	add	r3, r6
 8007e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e20:	e767      	b.n	8007cf2 <_svfiprintf_r+0x4e>
 8007e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e26:	460c      	mov	r4, r1
 8007e28:	2001      	movs	r0, #1
 8007e2a:	e7a5      	b.n	8007d78 <_svfiprintf_r+0xd4>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	3401      	adds	r4, #1
 8007e30:	f04f 0c0a 	mov.w	ip, #10
 8007e34:	4619      	mov	r1, r3
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3e:	3a30      	subs	r2, #48	; 0x30
 8007e40:	2a09      	cmp	r2, #9
 8007e42:	d903      	bls.n	8007e4c <_svfiprintf_r+0x1a8>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0c5      	beq.n	8007dd4 <_svfiprintf_r+0x130>
 8007e48:	9105      	str	r1, [sp, #20]
 8007e4a:	e7c3      	b.n	8007dd4 <_svfiprintf_r+0x130>
 8007e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e50:	4604      	mov	r4, r0
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7f0      	b.n	8007e38 <_svfiprintf_r+0x194>
 8007e56:	ab03      	add	r3, sp, #12
 8007e58:	462a      	mov	r2, r5
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4b0e      	ldr	r3, [pc, #56]	; (8007e9c <_svfiprintf_r+0x1f8>)
 8007e62:	e000      	b.n	8007e66 <_svfiprintf_r+0x1c2>
 8007e64:	bf00      	nop
 8007e66:	1c42      	adds	r2, r0, #1
 8007e68:	4606      	mov	r6, r0
 8007e6a:	d1d6      	bne.n	8007e1a <_svfiprintf_r+0x176>
 8007e6c:	89ab      	ldrh	r3, [r5, #12]
 8007e6e:	065b      	lsls	r3, r3, #25
 8007e70:	f53f af2c 	bmi.w	8007ccc <_svfiprintf_r+0x28>
 8007e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e76:	b01d      	add	sp, #116	; 0x74
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	ab03      	add	r3, sp, #12
 8007e7e:	462a      	mov	r2, r5
 8007e80:	a904      	add	r1, sp, #16
 8007e82:	4638      	mov	r0, r7
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <_svfiprintf_r+0x1f8>)
 8007e88:	f000 f87c 	bl	8007f84 <_printf_i>
 8007e8c:	e7eb      	b.n	8007e66 <_svfiprintf_r+0x1c2>
 8007e8e:	bf00      	nop
 8007e90:	08008614 	.word	0x08008614
 8007e94:	0800861e 	.word	0x0800861e
 8007e98:	00000000 	.word	0x00000000
 8007e9c:	08007bed 	.word	0x08007bed
 8007ea0:	0800861a 	.word	0x0800861a

08007ea4 <_printf_common>:
 8007ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	4699      	mov	r9, r3
 8007eac:	688a      	ldr	r2, [r1, #8]
 8007eae:	4607      	mov	r7, r0
 8007eb0:	690b      	ldr	r3, [r1, #16]
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	bfb8      	it	lt
 8007ebc:	4613      	movlt	r3, r2
 8007ebe:	6033      	str	r3, [r6, #0]
 8007ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ec4:	b10a      	cbz	r2, 8007eca <_printf_common+0x26>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	0699      	lsls	r1, r3, #26
 8007ece:	bf42      	ittt	mi
 8007ed0:	6833      	ldrmi	r3, [r6, #0]
 8007ed2:	3302      	addmi	r3, #2
 8007ed4:	6033      	strmi	r3, [r6, #0]
 8007ed6:	6825      	ldr	r5, [r4, #0]
 8007ed8:	f015 0506 	ands.w	r5, r5, #6
 8007edc:	d106      	bne.n	8007eec <_printf_common+0x48>
 8007ede:	f104 0a19 	add.w	sl, r4, #25
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	6832      	ldr	r2, [r6, #0]
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dc29      	bgt.n	8007f40 <_printf_common+0x9c>
 8007eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ef0:	1e13      	subs	r3, r2, #0
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	bf18      	it	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	0692      	lsls	r2, r2, #26
 8007efa:	d42e      	bmi.n	8007f5a <_printf_common+0xb6>
 8007efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f00:	4649      	mov	r1, r9
 8007f02:	4638      	mov	r0, r7
 8007f04:	47c0      	blx	r8
 8007f06:	3001      	adds	r0, #1
 8007f08:	d021      	beq.n	8007f4e <_printf_common+0xaa>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	341a      	adds	r4, #26
 8007f0e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007f12:	f003 0306 	and.w	r3, r3, #6
 8007f16:	6832      	ldr	r2, [r6, #0]
 8007f18:	2600      	movs	r6, #0
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007f20:	bf08      	it	eq
 8007f22:	1aad      	subeq	r5, r5, r2
 8007f24:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007f28:	bf14      	ite	ne
 8007f2a:	2500      	movne	r5, #0
 8007f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f30:	4293      	cmp	r3, r2
 8007f32:	bfc4      	itt	gt
 8007f34:	1a9b      	subgt	r3, r3, r2
 8007f36:	18ed      	addgt	r5, r5, r3
 8007f38:	42b5      	cmp	r5, r6
 8007f3a:	d11a      	bne.n	8007f72 <_printf_common+0xce>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e008      	b.n	8007f52 <_printf_common+0xae>
 8007f40:	2301      	movs	r3, #1
 8007f42:	4652      	mov	r2, sl
 8007f44:	4649      	mov	r1, r9
 8007f46:	4638      	mov	r0, r7
 8007f48:	47c0      	blx	r8
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d103      	bne.n	8007f56 <_printf_common+0xb2>
 8007f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f56:	3501      	adds	r5, #1
 8007f58:	e7c3      	b.n	8007ee2 <_printf_common+0x3e>
 8007f5a:	18e1      	adds	r1, r4, r3
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	2030      	movs	r0, #48	; 0x30
 8007f60:	3302      	adds	r3, #2
 8007f62:	4422      	add	r2, r4
 8007f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f70:	e7c4      	b.n	8007efc <_printf_common+0x58>
 8007f72:	2301      	movs	r3, #1
 8007f74:	4622      	mov	r2, r4
 8007f76:	4649      	mov	r1, r9
 8007f78:	4638      	mov	r0, r7
 8007f7a:	47c0      	blx	r8
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0e6      	beq.n	8007f4e <_printf_common+0xaa>
 8007f80:	3601      	adds	r6, #1
 8007f82:	e7d9      	b.n	8007f38 <_printf_common+0x94>

08007f84 <_printf_i>:
 8007f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	7e0f      	ldrb	r7, [r1, #24]
 8007f8a:	4691      	mov	r9, r2
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	2f78      	cmp	r7, #120	; 0x78
 8007f92:	469a      	mov	sl, r3
 8007f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f9a:	d807      	bhi.n	8007fac <_printf_i+0x28>
 8007f9c:	2f62      	cmp	r7, #98	; 0x62
 8007f9e:	d80a      	bhi.n	8007fb6 <_printf_i+0x32>
 8007fa0:	2f00      	cmp	r7, #0
 8007fa2:	f000 80d8 	beq.w	8008156 <_printf_i+0x1d2>
 8007fa6:	2f58      	cmp	r7, #88	; 0x58
 8007fa8:	f000 80a3 	beq.w	80080f2 <_printf_i+0x16e>
 8007fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fb4:	e03a      	b.n	800802c <_printf_i+0xa8>
 8007fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fba:	2b15      	cmp	r3, #21
 8007fbc:	d8f6      	bhi.n	8007fac <_printf_i+0x28>
 8007fbe:	a101      	add	r1, pc, #4	; (adr r1, 8007fc4 <_printf_i+0x40>)
 8007fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc4:	0800801d 	.word	0x0800801d
 8007fc8:	08008031 	.word	0x08008031
 8007fcc:	08007fad 	.word	0x08007fad
 8007fd0:	08007fad 	.word	0x08007fad
 8007fd4:	08007fad 	.word	0x08007fad
 8007fd8:	08007fad 	.word	0x08007fad
 8007fdc:	08008031 	.word	0x08008031
 8007fe0:	08007fad 	.word	0x08007fad
 8007fe4:	08007fad 	.word	0x08007fad
 8007fe8:	08007fad 	.word	0x08007fad
 8007fec:	08007fad 	.word	0x08007fad
 8007ff0:	0800813d 	.word	0x0800813d
 8007ff4:	08008061 	.word	0x08008061
 8007ff8:	0800811f 	.word	0x0800811f
 8007ffc:	08007fad 	.word	0x08007fad
 8008000:	08007fad 	.word	0x08007fad
 8008004:	0800815f 	.word	0x0800815f
 8008008:	08007fad 	.word	0x08007fad
 800800c:	08008061 	.word	0x08008061
 8008010:	08007fad 	.word	0x08007fad
 8008014:	08007fad 	.word	0x08007fad
 8008018:	08008127 	.word	0x08008127
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	602a      	str	r2, [r5, #0]
 8008024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800802c:	2301      	movs	r3, #1
 800802e:	e0a3      	b.n	8008178 <_printf_i+0x1f4>
 8008030:	6820      	ldr	r0, [r4, #0]
 8008032:	6829      	ldr	r1, [r5, #0]
 8008034:	0606      	lsls	r6, r0, #24
 8008036:	f101 0304 	add.w	r3, r1, #4
 800803a:	d50a      	bpl.n	8008052 <_printf_i+0xce>
 800803c:	680e      	ldr	r6, [r1, #0]
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	2e00      	cmp	r6, #0
 8008042:	da03      	bge.n	800804c <_printf_i+0xc8>
 8008044:	232d      	movs	r3, #45	; 0x2d
 8008046:	4276      	negs	r6, r6
 8008048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800804c:	485e      	ldr	r0, [pc, #376]	; (80081c8 <_printf_i+0x244>)
 800804e:	230a      	movs	r3, #10
 8008050:	e019      	b.n	8008086 <_printf_i+0x102>
 8008052:	680e      	ldr	r6, [r1, #0]
 8008054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	bf18      	it	ne
 800805c:	b236      	sxthne	r6, r6
 800805e:	e7ef      	b.n	8008040 <_printf_i+0xbc>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	6820      	ldr	r0, [r4, #0]
 8008064:	1d19      	adds	r1, r3, #4
 8008066:	6029      	str	r1, [r5, #0]
 8008068:	0601      	lsls	r1, r0, #24
 800806a:	d501      	bpl.n	8008070 <_printf_i+0xec>
 800806c:	681e      	ldr	r6, [r3, #0]
 800806e:	e002      	b.n	8008076 <_printf_i+0xf2>
 8008070:	0646      	lsls	r6, r0, #25
 8008072:	d5fb      	bpl.n	800806c <_printf_i+0xe8>
 8008074:	881e      	ldrh	r6, [r3, #0]
 8008076:	2f6f      	cmp	r7, #111	; 0x6f
 8008078:	4853      	ldr	r0, [pc, #332]	; (80081c8 <_printf_i+0x244>)
 800807a:	bf0c      	ite	eq
 800807c:	2308      	moveq	r3, #8
 800807e:	230a      	movne	r3, #10
 8008080:	2100      	movs	r1, #0
 8008082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008086:	6865      	ldr	r5, [r4, #4]
 8008088:	2d00      	cmp	r5, #0
 800808a:	60a5      	str	r5, [r4, #8]
 800808c:	bfa2      	ittt	ge
 800808e:	6821      	ldrge	r1, [r4, #0]
 8008090:	f021 0104 	bicge.w	r1, r1, #4
 8008094:	6021      	strge	r1, [r4, #0]
 8008096:	b90e      	cbnz	r6, 800809c <_printf_i+0x118>
 8008098:	2d00      	cmp	r5, #0
 800809a:	d04d      	beq.n	8008138 <_printf_i+0x1b4>
 800809c:	4615      	mov	r5, r2
 800809e:	fbb6 f1f3 	udiv	r1, r6, r3
 80080a2:	fb03 6711 	mls	r7, r3, r1, r6
 80080a6:	5dc7      	ldrb	r7, [r0, r7]
 80080a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080ac:	4637      	mov	r7, r6
 80080ae:	460e      	mov	r6, r1
 80080b0:	42bb      	cmp	r3, r7
 80080b2:	d9f4      	bls.n	800809e <_printf_i+0x11a>
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d10b      	bne.n	80080d0 <_printf_i+0x14c>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	07de      	lsls	r6, r3, #31
 80080bc:	d508      	bpl.n	80080d0 <_printf_i+0x14c>
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	6861      	ldr	r1, [r4, #4]
 80080c2:	4299      	cmp	r1, r3
 80080c4:	bfde      	ittt	le
 80080c6:	2330      	movle	r3, #48	; 0x30
 80080c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80080d0:	1b52      	subs	r2, r2, r5
 80080d2:	6122      	str	r2, [r4, #16]
 80080d4:	464b      	mov	r3, r9
 80080d6:	aa03      	add	r2, sp, #12
 80080d8:	4621      	mov	r1, r4
 80080da:	4640      	mov	r0, r8
 80080dc:	f8cd a000 	str.w	sl, [sp]
 80080e0:	f7ff fee0 	bl	8007ea4 <_printf_common>
 80080e4:	3001      	adds	r0, #1
 80080e6:	d14c      	bne.n	8008182 <_printf_i+0x1fe>
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ec:	b004      	add	sp, #16
 80080ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f2:	4835      	ldr	r0, [pc, #212]	; (80081c8 <_printf_i+0x244>)
 80080f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080f8:	6829      	ldr	r1, [r5, #0]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008100:	6029      	str	r1, [r5, #0]
 8008102:	061d      	lsls	r5, r3, #24
 8008104:	d514      	bpl.n	8008130 <_printf_i+0x1ac>
 8008106:	07df      	lsls	r7, r3, #31
 8008108:	bf44      	itt	mi
 800810a:	f043 0320 	orrmi.w	r3, r3, #32
 800810e:	6023      	strmi	r3, [r4, #0]
 8008110:	b91e      	cbnz	r6, 800811a <_printf_i+0x196>
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	f023 0320 	bic.w	r3, r3, #32
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	2310      	movs	r3, #16
 800811c:	e7b0      	b.n	8008080 <_printf_i+0xfc>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f043 0320 	orr.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	2378      	movs	r3, #120	; 0x78
 8008128:	4828      	ldr	r0, [pc, #160]	; (80081cc <_printf_i+0x248>)
 800812a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800812e:	e7e3      	b.n	80080f8 <_printf_i+0x174>
 8008130:	0659      	lsls	r1, r3, #25
 8008132:	bf48      	it	mi
 8008134:	b2b6      	uxthmi	r6, r6
 8008136:	e7e6      	b.n	8008106 <_printf_i+0x182>
 8008138:	4615      	mov	r5, r2
 800813a:	e7bb      	b.n	80080b4 <_printf_i+0x130>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	6826      	ldr	r6, [r4, #0]
 8008140:	1d18      	adds	r0, r3, #4
 8008142:	6961      	ldr	r1, [r4, #20]
 8008144:	6028      	str	r0, [r5, #0]
 8008146:	0635      	lsls	r5, r6, #24
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	d501      	bpl.n	8008150 <_printf_i+0x1cc>
 800814c:	6019      	str	r1, [r3, #0]
 800814e:	e002      	b.n	8008156 <_printf_i+0x1d2>
 8008150:	0670      	lsls	r0, r6, #25
 8008152:	d5fb      	bpl.n	800814c <_printf_i+0x1c8>
 8008154:	8019      	strh	r1, [r3, #0]
 8008156:	2300      	movs	r3, #0
 8008158:	4615      	mov	r5, r2
 800815a:	6123      	str	r3, [r4, #16]
 800815c:	e7ba      	b.n	80080d4 <_printf_i+0x150>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	2100      	movs	r1, #0
 8008162:	1d1a      	adds	r2, r3, #4
 8008164:	602a      	str	r2, [r5, #0]
 8008166:	681d      	ldr	r5, [r3, #0]
 8008168:	6862      	ldr	r2, [r4, #4]
 800816a:	4628      	mov	r0, r5
 800816c:	f000 f830 	bl	80081d0 <memchr>
 8008170:	b108      	cbz	r0, 8008176 <_printf_i+0x1f2>
 8008172:	1b40      	subs	r0, r0, r5
 8008174:	6060      	str	r0, [r4, #4]
 8008176:	6863      	ldr	r3, [r4, #4]
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	2300      	movs	r3, #0
 800817c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008180:	e7a8      	b.n	80080d4 <_printf_i+0x150>
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	462a      	mov	r2, r5
 8008186:	4649      	mov	r1, r9
 8008188:	4640      	mov	r0, r8
 800818a:	47d0      	blx	sl
 800818c:	3001      	adds	r0, #1
 800818e:	d0ab      	beq.n	80080e8 <_printf_i+0x164>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	079b      	lsls	r3, r3, #30
 8008194:	d413      	bmi.n	80081be <_printf_i+0x23a>
 8008196:	68e0      	ldr	r0, [r4, #12]
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	4298      	cmp	r0, r3
 800819c:	bfb8      	it	lt
 800819e:	4618      	movlt	r0, r3
 80081a0:	e7a4      	b.n	80080ec <_printf_i+0x168>
 80081a2:	2301      	movs	r3, #1
 80081a4:	4632      	mov	r2, r6
 80081a6:	4649      	mov	r1, r9
 80081a8:	4640      	mov	r0, r8
 80081aa:	47d0      	blx	sl
 80081ac:	3001      	adds	r0, #1
 80081ae:	d09b      	beq.n	80080e8 <_printf_i+0x164>
 80081b0:	3501      	adds	r5, #1
 80081b2:	68e3      	ldr	r3, [r4, #12]
 80081b4:	9903      	ldr	r1, [sp, #12]
 80081b6:	1a5b      	subs	r3, r3, r1
 80081b8:	42ab      	cmp	r3, r5
 80081ba:	dcf2      	bgt.n	80081a2 <_printf_i+0x21e>
 80081bc:	e7eb      	b.n	8008196 <_printf_i+0x212>
 80081be:	2500      	movs	r5, #0
 80081c0:	f104 0619 	add.w	r6, r4, #25
 80081c4:	e7f5      	b.n	80081b2 <_printf_i+0x22e>
 80081c6:	bf00      	nop
 80081c8:	08008625 	.word	0x08008625
 80081cc:	08008636 	.word	0x08008636

080081d0 <memchr>:
 80081d0:	b2c9      	uxtb	r1, r1
 80081d2:	4402      	add	r2, r0
 80081d4:	b510      	push	{r4, lr}
 80081d6:	4290      	cmp	r0, r2
 80081d8:	4603      	mov	r3, r0
 80081da:	d101      	bne.n	80081e0 <memchr+0x10>
 80081dc:	2300      	movs	r3, #0
 80081de:	e003      	b.n	80081e8 <memchr+0x18>
 80081e0:	781c      	ldrb	r4, [r3, #0]
 80081e2:	3001      	adds	r0, #1
 80081e4:	428c      	cmp	r4, r1
 80081e6:	d1f6      	bne.n	80081d6 <memchr+0x6>
 80081e8:	4618      	mov	r0, r3
 80081ea:	bd10      	pop	{r4, pc}

080081ec <memcpy>:
 80081ec:	440a      	add	r2, r1
 80081ee:	1e43      	subs	r3, r0, #1
 80081f0:	4291      	cmp	r1, r2
 80081f2:	d100      	bne.n	80081f6 <memcpy+0xa>
 80081f4:	4770      	bx	lr
 80081f6:	b510      	push	{r4, lr}
 80081f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081fc:	4291      	cmp	r1, r2
 80081fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008202:	d1f9      	bne.n	80081f8 <memcpy+0xc>
 8008204:	bd10      	pop	{r4, pc}

08008206 <memmove>:
 8008206:	4288      	cmp	r0, r1
 8008208:	b510      	push	{r4, lr}
 800820a:	eb01 0402 	add.w	r4, r1, r2
 800820e:	d902      	bls.n	8008216 <memmove+0x10>
 8008210:	4284      	cmp	r4, r0
 8008212:	4623      	mov	r3, r4
 8008214:	d807      	bhi.n	8008226 <memmove+0x20>
 8008216:	1e43      	subs	r3, r0, #1
 8008218:	42a1      	cmp	r1, r4
 800821a:	d008      	beq.n	800822e <memmove+0x28>
 800821c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008220:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008224:	e7f8      	b.n	8008218 <memmove+0x12>
 8008226:	4402      	add	r2, r0
 8008228:	4601      	mov	r1, r0
 800822a:	428a      	cmp	r2, r1
 800822c:	d100      	bne.n	8008230 <memmove+0x2a>
 800822e:	bd10      	pop	{r4, pc}
 8008230:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008234:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008238:	e7f7      	b.n	800822a <memmove+0x24>
	...

0800823c <_free_r>:
 800823c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800823e:	2900      	cmp	r1, #0
 8008240:	d043      	beq.n	80082ca <_free_r+0x8e>
 8008242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008246:	1f0c      	subs	r4, r1, #4
 8008248:	9001      	str	r0, [sp, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	bfb8      	it	lt
 800824e:	18e4      	addlt	r4, r4, r3
 8008250:	f000 f914 	bl	800847c <__malloc_lock>
 8008254:	4a1e      	ldr	r2, [pc, #120]	; (80082d0 <_free_r+0x94>)
 8008256:	9801      	ldr	r0, [sp, #4]
 8008258:	6813      	ldr	r3, [r2, #0]
 800825a:	b933      	cbnz	r3, 800826a <_free_r+0x2e>
 800825c:	6063      	str	r3, [r4, #4]
 800825e:	6014      	str	r4, [r2, #0]
 8008260:	b003      	add	sp, #12
 8008262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008266:	f000 b90f 	b.w	8008488 <__malloc_unlock>
 800826a:	42a3      	cmp	r3, r4
 800826c:	d908      	bls.n	8008280 <_free_r+0x44>
 800826e:	6825      	ldr	r5, [r4, #0]
 8008270:	1961      	adds	r1, r4, r5
 8008272:	428b      	cmp	r3, r1
 8008274:	bf01      	itttt	eq
 8008276:	6819      	ldreq	r1, [r3, #0]
 8008278:	685b      	ldreq	r3, [r3, #4]
 800827a:	1949      	addeq	r1, r1, r5
 800827c:	6021      	streq	r1, [r4, #0]
 800827e:	e7ed      	b.n	800825c <_free_r+0x20>
 8008280:	461a      	mov	r2, r3
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	b10b      	cbz	r3, 800828a <_free_r+0x4e>
 8008286:	42a3      	cmp	r3, r4
 8008288:	d9fa      	bls.n	8008280 <_free_r+0x44>
 800828a:	6811      	ldr	r1, [r2, #0]
 800828c:	1855      	adds	r5, r2, r1
 800828e:	42a5      	cmp	r5, r4
 8008290:	d10b      	bne.n	80082aa <_free_r+0x6e>
 8008292:	6824      	ldr	r4, [r4, #0]
 8008294:	4421      	add	r1, r4
 8008296:	1854      	adds	r4, r2, r1
 8008298:	6011      	str	r1, [r2, #0]
 800829a:	42a3      	cmp	r3, r4
 800829c:	d1e0      	bne.n	8008260 <_free_r+0x24>
 800829e:	681c      	ldr	r4, [r3, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	4421      	add	r1, r4
 80082a4:	6053      	str	r3, [r2, #4]
 80082a6:	6011      	str	r1, [r2, #0]
 80082a8:	e7da      	b.n	8008260 <_free_r+0x24>
 80082aa:	d902      	bls.n	80082b2 <_free_r+0x76>
 80082ac:	230c      	movs	r3, #12
 80082ae:	6003      	str	r3, [r0, #0]
 80082b0:	e7d6      	b.n	8008260 <_free_r+0x24>
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	1961      	adds	r1, r4, r5
 80082b6:	428b      	cmp	r3, r1
 80082b8:	bf02      	ittt	eq
 80082ba:	6819      	ldreq	r1, [r3, #0]
 80082bc:	685b      	ldreq	r3, [r3, #4]
 80082be:	1949      	addeq	r1, r1, r5
 80082c0:	6063      	str	r3, [r4, #4]
 80082c2:	bf08      	it	eq
 80082c4:	6021      	streq	r1, [r4, #0]
 80082c6:	6054      	str	r4, [r2, #4]
 80082c8:	e7ca      	b.n	8008260 <_free_r+0x24>
 80082ca:	b003      	add	sp, #12
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	bf00      	nop
 80082d0:	200005d4 	.word	0x200005d4

080082d4 <sbrk_aligned>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	4e0e      	ldr	r6, [pc, #56]	; (8008310 <sbrk_aligned+0x3c>)
 80082d8:	460c      	mov	r4, r1
 80082da:	4605      	mov	r5, r0
 80082dc:	6831      	ldr	r1, [r6, #0]
 80082de:	b911      	cbnz	r1, 80082e6 <sbrk_aligned+0x12>
 80082e0:	f000 f8bc 	bl	800845c <_sbrk_r>
 80082e4:	6030      	str	r0, [r6, #0]
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	f000 f8b7 	bl	800845c <_sbrk_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d00a      	beq.n	8008308 <sbrk_aligned+0x34>
 80082f2:	1cc4      	adds	r4, r0, #3
 80082f4:	f024 0403 	bic.w	r4, r4, #3
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	d007      	beq.n	800830c <sbrk_aligned+0x38>
 80082fc:	1a21      	subs	r1, r4, r0
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 f8ac 	bl	800845c <_sbrk_r>
 8008304:	3001      	adds	r0, #1
 8008306:	d101      	bne.n	800830c <sbrk_aligned+0x38>
 8008308:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800830c:	4620      	mov	r0, r4
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	200005d8 	.word	0x200005d8

08008314 <_malloc_r>:
 8008314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008318:	1ccd      	adds	r5, r1, #3
 800831a:	4607      	mov	r7, r0
 800831c:	f025 0503 	bic.w	r5, r5, #3
 8008320:	3508      	adds	r5, #8
 8008322:	2d0c      	cmp	r5, #12
 8008324:	bf38      	it	cc
 8008326:	250c      	movcc	r5, #12
 8008328:	2d00      	cmp	r5, #0
 800832a:	db01      	blt.n	8008330 <_malloc_r+0x1c>
 800832c:	42a9      	cmp	r1, r5
 800832e:	d905      	bls.n	800833c <_malloc_r+0x28>
 8008330:	230c      	movs	r3, #12
 8008332:	2600      	movs	r6, #0
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	4630      	mov	r0, r6
 8008338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833c:	4e2e      	ldr	r6, [pc, #184]	; (80083f8 <_malloc_r+0xe4>)
 800833e:	f000 f89d 	bl	800847c <__malloc_lock>
 8008342:	6833      	ldr	r3, [r6, #0]
 8008344:	461c      	mov	r4, r3
 8008346:	bb34      	cbnz	r4, 8008396 <_malloc_r+0x82>
 8008348:	4629      	mov	r1, r5
 800834a:	4638      	mov	r0, r7
 800834c:	f7ff ffc2 	bl	80082d4 <sbrk_aligned>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	4604      	mov	r4, r0
 8008354:	d14d      	bne.n	80083f2 <_malloc_r+0xde>
 8008356:	6834      	ldr	r4, [r6, #0]
 8008358:	4626      	mov	r6, r4
 800835a:	2e00      	cmp	r6, #0
 800835c:	d140      	bne.n	80083e0 <_malloc_r+0xcc>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	4631      	mov	r1, r6
 8008362:	4638      	mov	r0, r7
 8008364:	eb04 0803 	add.w	r8, r4, r3
 8008368:	f000 f878 	bl	800845c <_sbrk_r>
 800836c:	4580      	cmp	r8, r0
 800836e:	d13a      	bne.n	80083e6 <_malloc_r+0xd2>
 8008370:	6821      	ldr	r1, [r4, #0]
 8008372:	3503      	adds	r5, #3
 8008374:	4638      	mov	r0, r7
 8008376:	1a6d      	subs	r5, r5, r1
 8008378:	f025 0503 	bic.w	r5, r5, #3
 800837c:	3508      	adds	r5, #8
 800837e:	2d0c      	cmp	r5, #12
 8008380:	bf38      	it	cc
 8008382:	250c      	movcc	r5, #12
 8008384:	4629      	mov	r1, r5
 8008386:	f7ff ffa5 	bl	80082d4 <sbrk_aligned>
 800838a:	3001      	adds	r0, #1
 800838c:	d02b      	beq.n	80083e6 <_malloc_r+0xd2>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	442b      	add	r3, r5
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	e00e      	b.n	80083b4 <_malloc_r+0xa0>
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	1b52      	subs	r2, r2, r5
 800839a:	d41e      	bmi.n	80083da <_malloc_r+0xc6>
 800839c:	2a0b      	cmp	r2, #11
 800839e:	d916      	bls.n	80083ce <_malloc_r+0xba>
 80083a0:	1961      	adds	r1, r4, r5
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	6025      	str	r5, [r4, #0]
 80083a6:	bf18      	it	ne
 80083a8:	6059      	strne	r1, [r3, #4]
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	bf08      	it	eq
 80083ae:	6031      	streq	r1, [r6, #0]
 80083b0:	5162      	str	r2, [r4, r5]
 80083b2:	604b      	str	r3, [r1, #4]
 80083b4:	f104 060b 	add.w	r6, r4, #11
 80083b8:	4638      	mov	r0, r7
 80083ba:	f000 f865 	bl	8008488 <__malloc_unlock>
 80083be:	1d23      	adds	r3, r4, #4
 80083c0:	f026 0607 	bic.w	r6, r6, #7
 80083c4:	1af2      	subs	r2, r6, r3
 80083c6:	d0b6      	beq.n	8008336 <_malloc_r+0x22>
 80083c8:	1b9b      	subs	r3, r3, r6
 80083ca:	50a3      	str	r3, [r4, r2]
 80083cc:	e7b3      	b.n	8008336 <_malloc_r+0x22>
 80083ce:	6862      	ldr	r2, [r4, #4]
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	bf0c      	ite	eq
 80083d4:	6032      	streq	r2, [r6, #0]
 80083d6:	605a      	strne	r2, [r3, #4]
 80083d8:	e7ec      	b.n	80083b4 <_malloc_r+0xa0>
 80083da:	4623      	mov	r3, r4
 80083dc:	6864      	ldr	r4, [r4, #4]
 80083de:	e7b2      	b.n	8008346 <_malloc_r+0x32>
 80083e0:	4634      	mov	r4, r6
 80083e2:	6876      	ldr	r6, [r6, #4]
 80083e4:	e7b9      	b.n	800835a <_malloc_r+0x46>
 80083e6:	230c      	movs	r3, #12
 80083e8:	4638      	mov	r0, r7
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	f000 f84c 	bl	8008488 <__malloc_unlock>
 80083f0:	e7a1      	b.n	8008336 <_malloc_r+0x22>
 80083f2:	6025      	str	r5, [r4, #0]
 80083f4:	e7de      	b.n	80083b4 <_malloc_r+0xa0>
 80083f6:	bf00      	nop
 80083f8:	200005d4 	.word	0x200005d4

080083fc <_realloc_r>:
 80083fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008400:	4680      	mov	r8, r0
 8008402:	4614      	mov	r4, r2
 8008404:	460e      	mov	r6, r1
 8008406:	b921      	cbnz	r1, 8008412 <_realloc_r+0x16>
 8008408:	4611      	mov	r1, r2
 800840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	f7ff bf81 	b.w	8008314 <_malloc_r>
 8008412:	b92a      	cbnz	r2, 8008420 <_realloc_r+0x24>
 8008414:	4625      	mov	r5, r4
 8008416:	f7ff ff11 	bl	800823c <_free_r>
 800841a:	4628      	mov	r0, r5
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	f000 f838 	bl	8008494 <_malloc_usable_size_r>
 8008424:	4284      	cmp	r4, r0
 8008426:	4607      	mov	r7, r0
 8008428:	d802      	bhi.n	8008430 <_realloc_r+0x34>
 800842a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800842e:	d812      	bhi.n	8008456 <_realloc_r+0x5a>
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff ff6e 	bl	8008314 <_malloc_r>
 8008438:	4605      	mov	r5, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d0ed      	beq.n	800841a <_realloc_r+0x1e>
 800843e:	42bc      	cmp	r4, r7
 8008440:	4622      	mov	r2, r4
 8008442:	4631      	mov	r1, r6
 8008444:	bf28      	it	cs
 8008446:	463a      	movcs	r2, r7
 8008448:	f7ff fed0 	bl	80081ec <memcpy>
 800844c:	4631      	mov	r1, r6
 800844e:	4640      	mov	r0, r8
 8008450:	f7ff fef4 	bl	800823c <_free_r>
 8008454:	e7e1      	b.n	800841a <_realloc_r+0x1e>
 8008456:	4635      	mov	r5, r6
 8008458:	e7df      	b.n	800841a <_realloc_r+0x1e>
	...

0800845c <_sbrk_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	2300      	movs	r3, #0
 8008460:	4d05      	ldr	r5, [pc, #20]	; (8008478 <_sbrk_r+0x1c>)
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 fa96 	bl	8001998 <_sbrk>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_sbrk_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_sbrk_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	200005dc 	.word	0x200005dc

0800847c <__malloc_lock>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__malloc_lock+0x8>)
 800847e:	f000 b811 	b.w	80084a4 <__retarget_lock_acquire_recursive>
 8008482:	bf00      	nop
 8008484:	200005e0 	.word	0x200005e0

08008488 <__malloc_unlock>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__malloc_unlock+0x8>)
 800848a:	f000 b80c 	b.w	80084a6 <__retarget_lock_release_recursive>
 800848e:	bf00      	nop
 8008490:	200005e0 	.word	0x200005e0

08008494 <_malloc_usable_size_r>:
 8008494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008498:	1f18      	subs	r0, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	bfbc      	itt	lt
 800849e:	580b      	ldrlt	r3, [r1, r0]
 80084a0:	18c0      	addlt	r0, r0, r3
 80084a2:	4770      	bx	lr

080084a4 <__retarget_lock_acquire_recursive>:
 80084a4:	4770      	bx	lr

080084a6 <__retarget_lock_release_recursive>:
 80084a6:	4770      	bx	lr

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
