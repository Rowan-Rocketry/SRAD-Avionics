
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa0  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014b  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a330  0800a330  0001a330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800a334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000609  20000070  0800a3a4  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  20000679  0800a3a4  00020679  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021afb  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035d1  00000000  00000000  00041ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b50  00000000  00000000  00045178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019f8  00000000  00000000  00046cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004f5a  00000000  00000000  000486c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020542  00000000  00000000  0004d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013df26  00000000  00000000  0006db5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001aba82  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b34  00000000  00000000  001abad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a1c0 	.word	0x0800a1c0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800a1c0 	.word	0x0800a1c0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09c      	sub	sp, #112	; 0x70
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f001 fa43 	bl	8001a28 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Configure MS5607
  MS5607_HandleTypeDef ms5607Config = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
  ms5607Config.spi = &hspi1;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <main+0xa8>)
 80005b2:	617b      	str	r3, [r7, #20]
  ms5607Config.timer = &htim16;
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <main+0xac>)
 80005b6:	61bb      	str	r3, [r7, #24]
  ms5607Config.csPort = GPIOA;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <main+0xb0>)
 80005ba:	61fb      	str	r3, [r7, #28]
  ms5607Config.csPin = GPIO_PIN_3;
 80005bc:	2308      	movs	r3, #8
 80005be:	843b      	strh	r3, [r7, #32]
  ms5607Config.osr = MS5607_OSR_1024;
 80005c0:	2304      	movs	r3, #4
 80005c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MS5607_init(&ms5607Config);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fb32 	bl	8000c34 <MS5607_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f840 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 fa94 	bl	8000b00 <MX_GPIO_Init>
  MX_TIM16_Init();
 80005d8:	f000 f9ee 	bl	80009b8 <MX_TIM16_Init>
  MX_SPI1_Init();
 80005dc:	f000 f910 	bl	8000800 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005e0:	f000 f97c 	bl	80008dc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 fa14 	bl	8000a10 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80005e8:	f000 f8e6 	bl	80007b8 <MX_SDMMC1_SD_Init>
  MX_USB_PCD_Init();
 80005ec:	f000 fa5c 	bl	8000aa8 <MX_USB_PCD_Init>
  MX_RTC_Init();
 80005f0:	f000 f894 	bl	800071c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Test UART VCP
  uart_buffer_length = sprintf(uart_buffer, "UART VCP Test!\n");
 80005f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f8:	4914      	ldr	r1, [pc, #80]	; (800064c <main+0xb4>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f009 f962 	bl	80098c4 <siprintf>
 8000600:	66f8      	str	r0, [r7, #108]	; 0x6c
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, uart_buffer_length, 100);
 8000602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000604:	b29a      	uxth	r2, r3
 8000606:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <main+0xb8>)
 800060e:	f007 fe55 	bl	80082bc <HAL_UART_Transmit>


	MS5607_readUncompPres();
 8000612:	f000 fdf3 	bl	80011fc <MS5607_readUncompPres>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	//writePressure();
	if (MS5607_getState() == MS5607_IDLE)
 8000616:	f000 fe4f 	bl	80012b8 <MS5607_getState>
 800061a:	4603      	mov	r3, r0
 800061c:	2b03      	cmp	r3, #3
 800061e:	d1fa      	bne.n	8000616 <main+0x7e>
	{
		// Get result of digital read
		MS5607_RawVal rawVals = MS5607_getRawValues();
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fe29 	bl	800127c <MS5607_getRawValues>

		// Compensate digital reading
		MS5607_CompVal compVals = MS5607_getCompValues(&rawVals);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	f107 020c 	add.w	r2, r7, #12
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fb66 	bl	8000d04 <MS5607_getCompValues>

	 // Measure again
		MS5607_readUncompPres();
 8000638:	f000 fde0 	bl	80011fc <MS5607_readUncompPres>
	if (MS5607_getState() == MS5607_IDLE)
 800063c:	e7eb      	b.n	8000616 <main+0x7e>
 800063e:	bf00      	nop
 8000640:	20000138 	.word	0x20000138
 8000644:	20000258 	.word	0x20000258
 8000648:	42020000 	.word	0x42020000
 800064c:	0800a1d8 	.word	0x0800a1d8
 8000650:	200002a4 	.word	0x200002a4

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09e      	sub	sp, #120	; 0x78
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2260      	movs	r2, #96	; 0x60
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f009 f926 	bl	80098b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000678:	2000      	movs	r0, #0
 800067a:	f001 fe7f 	bl	800237c <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 fad0 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000688:	2338      	movs	r3, #56	; 0x38
 800068a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000692:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 129;
 80006ba:	2381      	movs	r3, #129	; 0x81
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 feec 	bl	80024b4 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006e2:	f000 faa1 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	231f      	movs	r3, #31
 80006e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fdb2 	bl	800326c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800070e:	f000 fa8b 	bl	8000c28 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3778      	adds	r7, #120	; 0x78
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_RTC_Init+0x94>)
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <MX_RTC_Init+0x98>)
 8000738:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_RTC_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_RTC_Init+0x94>)
 8000742:	227f      	movs	r2, #127	; 0x7f
 8000744:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_RTC_Init+0x94>)
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_RTC_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_RTC_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_RTC_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_RTC_Init+0x94>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000764:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_RTC_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_RTC_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000772:	480f      	ldr	r0, [pc, #60]	; (80007b0 <MX_RTC_Init+0x94>)
 8000774:	f005 fd38 	bl	80061e8 <HAL_RTC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800077e:	f000 fa53 	bl	8000c28 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_RTC_Init+0x94>)
 8000798:	f005 fe54 	bl	8006444 <HAL_RTCEx_PrivilegeModeSet>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f000 fa41 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	46007800 	.word	0x46007800

080007b8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SDMMC1_SD_Init+0x40>)
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_SDMMC1_SD_Init+0x44>)
 80007c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_SDMMC1_SD_Init+0x40>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_SDMMC1_SD_Init+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SDMMC1_SD_Init+0x40>)
 80007d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_SDMMC1_SD_Init+0x40>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SDMMC1_SD_Init+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_SDMMC1_SD_Init+0x40>)
 80007e4:	f005 fe5c 	bl	80064a0 <HAL_SD_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80007ee:	f000 fa1b 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000bc 	.word	0x200000bc
 80007fc:	420c8000 	.word	0x420c8000

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000812:	4a31      	ldr	r2, [pc, #196]	; (80008d8 <MX_SPI1_Init+0xd8>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000818:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000826:	2207      	movs	r2, #7
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_SPI1_Init+0xd4>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_SPI1_Init+0xd4>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000858:	2207      	movs	r2, #7
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_SPI1_Init+0xd4>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000864:	2200      	movs	r2, #0
 8000866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI1_Init+0xd4>)
 800086a:	2200      	movs	r2, #0
 800086c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000870:	2200      	movs	r2, #0
 8000872:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000876:	2200      	movs	r2, #0
 8000878:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0xd4>)
 800087c:	2200      	movs	r2, #0
 800087e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000882:	2200      	movs	r2, #0
 8000884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000888:	2200      	movs	r2, #0
 800088a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0xd4>)
 800088e:	2200      	movs	r2, #0
 8000890:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_SPI1_Init+0xd4>)
 8000894:	2200      	movs	r2, #0
 8000896:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000898:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MX_SPI1_Init+0xd4>)
 800089a:	f006 fe6f 	bl	800757c <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 80008a4:	f000 f9c0 	bl	8000c28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80008ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_SPI1_Init+0xd4>)
 80008bc:	f007 fa7b 	bl	8007db6 <HAL_SPIEx_SetConfigAutonomousMode>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 80008c6:	f000 f9af 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000138 	.word	0x20000138
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <MX_SPI2_Init+0xd4>)
 80008ee:	4a31      	ldr	r2, [pc, #196]	; (80009b4 <MX_SPI2_Init+0xd8>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <MX_SPI2_Init+0xd4>)
 80008f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_SPI2_Init+0xd4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000902:	2203      	movs	r2, #3
 8000904:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000914:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000918:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000934:	2207      	movs	r2, #7
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800093a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000942:	2200      	movs	r2, #0
 8000944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000948:	2200      	movs	r2, #0
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800094e:	2200      	movs	r2, #0
 8000950:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000954:	2200      	movs	r2, #0
 8000956:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800095a:	2200      	movs	r2, #0
 800095c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000960:	2200      	movs	r2, #0
 8000962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000966:	2200      	movs	r2, #0
 8000968:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800096c:	2200      	movs	r2, #0
 800096e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000972:	2200      	movs	r2, #0
 8000974:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_SPI2_Init+0xd4>)
 8000978:	f006 fe00 	bl	800757c <HAL_SPI_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000982:	f000 f951 	bl	8000c28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800098a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800098e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_SPI2_Init+0xd4>)
 800099a:	f007 fa0c 	bl	8007db6 <HAL_SPIEx_SetConfigAutonomousMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80009a4:	f000 f940 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200001c8 	.word	0x200001c8
 80009b4:	40003800 	.word	0x40003800

080009b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	uint16_t ms5607MeasurementDelay = MS5607_getMeasurementDelay();
 80009be:	f000 fc6f 	bl	80012a0 <MS5607_getMeasurementDelay>
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009c8:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <MX_TIM16_Init+0x54>)
 80009ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 40-1;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009ce:	2227      	movs	r2, #39	; 0x27
 80009d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = ms5607MeasurementDelay;
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009dc:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_TIM16_Init+0x50>)
 80009f2:	f007 fa21 	bl	8007e38 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM16_Init+0x48>
  {
    Error_Handler();
 80009fc:	f000 f914 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000258 	.word	0x20000258
 8000a0c:	40014400 	.word	0x40014400

08000a10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART1_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a5a:	f007 fbdf 	bl	800821c <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f8e0 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a6c:	f008 f89e 	bl	8008bac <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f8d7 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a7e:	f008 f8d3 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f8ce 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART1_UART_Init+0x90>)
 8000a8e:	f008 f854 	bl	8008b3a <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f8c6 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200002a4 	.word	0x200002a4
 8000aa4:	40013800 	.word	0x40013800

08000aa8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	; (8000afc <MX_USB_PCD_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USB_PCD_Init+0x50>)
 8000ae4:	f001 fb1c 	bl	8002120 <HAL_PCD_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USB_PCD_Init+0x4a>
  {
    Error_Handler();
 8000aee:	f000 f89b 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000338 	.word	0x20000338
 8000afc:	40016000 	.word	0x40016000

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b1c:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b26:	4b3c      	ldr	r3, [pc, #240]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b3a:	4a37      	ldr	r2, [pc, #220]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b44:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b58:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b76:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b94:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_GPIO_Init+0x118>)
 8000ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ba4:	f003 0308 	and.w	r3, r3, #8
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2102      	movs	r1, #2
 8000bb0:	481a      	ldr	r0, [pc, #104]	; (8000c1c <MX_GPIO_Init+0x11c>)
 8000bb2:	f001 fa9d 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4819      	ldr	r0, [pc, #100]	; (8000c20 <MX_GPIO_Init+0x120>)
 8000bbc:	f001 fa98 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_GPIO_Init+0x11c>)
 8000bd8:	f001 f8b2 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_GPIO_Init+0x124>)
 8000bf0:	f001 f8a6 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_GPIO_Init+0x120>)
 8000c0c:	f001 f898 	bl	8001d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	46020c00 	.word	0x46020c00
 8000c1c:	42021c00 	.word	0x42021c00
 8000c20:	42020000 	.word	0x42020000
 8000c24:	42020800 	.word	0x42020800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <MS5607_init>:
static uint16_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_init(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	MS5607_disable();
 8000c3c:	f000 fb0e 	bl	800125c <MS5607_disable>

	config = MS5607_initStruct;
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <MS5607_init+0xb8>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <MS5607_init+0xb8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	7b9b      	ldrb	r3, [r3, #14]
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MS5607_init+0xbc>)
 8000c54:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <MS5607_init+0xb8>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	7b9b      	ldrb	r3, [r3, #14]
 8000c5c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MS5607_init+0xc0>)
 8000c64:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MS5607_init+0xb8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	7b9b      	ldrb	r3, [r3, #14]
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d82a      	bhi.n	8000cc6 <MS5607_init+0x92>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <MS5607_init+0x44>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c9d 	.word	0x08000c9d
 8000c7c:	08000cc7 	.word	0x08000cc7
 8000c80:	08000ca5 	.word	0x08000ca5
 8000c84:	08000cc7 	.word	0x08000cc7
 8000c88:	08000cad 	.word	0x08000cad
 8000c8c:	08000cc7 	.word	0x08000cc7
 8000c90:	08000cb5 	.word	0x08000cb5
 8000c94:	08000cc7 	.word	0x08000cc7
 8000c98:	08000cbf 	.word	0x08000cbf
	{
		case MS5607_OSR_256:
			measurementDelay = 50;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MS5607_init+0xc4>)
 8000c9e:	2232      	movs	r2, #50	; 0x32
 8000ca0:	801a      	strh	r2, [r3, #0]
			break;
 8000ca2:	e010      	b.n	8000cc6 <MS5607_init+0x92>
		case MS5607_OSR_512:
			measurementDelay = 110;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MS5607_init+0xc4>)
 8000ca6:	226e      	movs	r2, #110	; 0x6e
 8000ca8:	801a      	strh	r2, [r3, #0]
			break;
 8000caa:	e00c      	b.n	8000cc6 <MS5607_init+0x92>
		case MS5607_OSR_1024:
			measurementDelay = 210;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MS5607_init+0xc4>)
 8000cae:	22d2      	movs	r2, #210	; 0xd2
 8000cb0:	801a      	strh	r2, [r3, #0]
			break;
 8000cb2:	e008      	b.n	8000cc6 <MS5607_init+0x92>
		case MS5607_OSR_2048:
			measurementDelay = 410;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MS5607_init+0xc4>)
 8000cb6:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8000cba:	801a      	strh	r2, [r3, #0]
			break;
 8000cbc:	e003      	b.n	8000cc6 <MS5607_init+0x92>
		case MS5607_OSR_4096:
			measurementDelay = 822;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MS5607_init+0xc4>)
 8000cc0:	f240 3236 	movw	r2, #822	; 0x336
 8000cc4:	801a      	strh	r2, [r3, #0]
	}

	MS5607_enable();
 8000cc6:	f000 fab9 	bl	800123c <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_RESET, 1, 100);
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MS5607_init+0xb8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4909      	ldr	r1, [pc, #36]	; (8000cfc <MS5607_init+0xc8>)
 8000cd6:	f006 fd67 	bl	80077a8 <HAL_SPI_Transmit>
	MS5607_disable();
 8000cda:	f000 fabf 	bl	800125c <MS5607_disable>

	state = MS5607_STARTUP;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MS5607_init+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000644 	.word	0x20000644
 8000cf0:	20000660 	.word	0x20000660
 8000cf4:	20000661 	.word	0x20000661
 8000cf8:	2000065e 	.word	0x2000065e
 8000cfc:	0800a1ec 	.word	0x0800a1ec
 8000d00:	2000065c 	.word	0x2000065c

08000d04 <MS5607_getCompValues>:
		promDataPtr[promAddr-1] = ((uint8_t)responseBuffer[0]<<8) | (uint8_t)responseBuffer[1];
	}
}

MS5607_CompVal MS5607_getCompValues(MS5607_RawVal* rawVals)
{
 8000d04:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d08:	b0d5      	sub	sp, #340	; 0x154
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000d10:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
	MS5607_CompVal compVals;

	uint32_t digTemp = rawVals->temp;
 8000d14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint32_t digPres = rawVals->pres;
 8000d1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	// dT = D2 - TREF
	int32_t deltaTemp = digTemp - ((int32_t)promData.tRef << 8);
 8000d28:	4baf      	ldr	r3, [pc, #700]	; (8000fe8 <MS5607_getCompValues+0x2e4>)
 8000d2a:	891b      	ldrh	r3, [r3, #8]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d34:	1a9b      	subs	r3, r3, r2
 8000d36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	
	// TEMP = 20°C + dT*TEMPSENS
	int32_t temp1 = 2000 + deltaTemp*((int32_t)promData.tempSens << 23);
 8000d3a:	4bab      	ldr	r3, [pc, #684]	; (8000fe8 <MS5607_getCompValues+0x2e4>)
 8000d3c:	895b      	ldrh	r3, [r3, #10]
 8000d3e:	05da      	lsls	r2, r3, #23
 8000d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d44:	fb02 f303 	mul.w	r3, r2, r3
 8000d48:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000d4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	// OFF = OFFT1 + TCO*dT
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8000d50:	4ba5      	ldr	r3, [pc, #660]	; (8000fe8 <MS5607_getCompValues+0x2e4>)
 8000d52:	885b      	ldrh	r3, [r3, #2]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2200      	movs	r2, #0
 8000d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000d60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8000d64:	460b      	mov	r3, r1
 8000d66:	0bdb      	lsrs	r3, r3, #15
 8000d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	045b      	lsls	r3, r3, #17
 8000d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				   + (((int64_t)promData.tco*deltaTemp) >> 6);
 8000d74:	4b9c      	ldr	r3, [pc, #624]	; (8000fe8 <MS5607_getCompValues+0x2e4>)
 8000d76:	88db      	ldrh	r3, [r3, #6]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000d80:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8000d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d88:	17da      	asrs	r2, r3, #31
 8000d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000d8e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000d92:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8000d96:	460b      	mov	r3, r1
 8000d98:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000d9c:	fb02 f203 	mul.w	r2, r2, r3
 8000da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000da4:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8
 8000da8:	4601      	mov	r1, r0
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000db4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8000db8:	fba2 4501 	umull	r4, r5, r2, r1
 8000dbc:	442b      	add	r3, r5
 8000dbe:	461d      	mov	r5, r3
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	09a2      	lsrs	r2, r4, #6
 8000dca:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000dce:	11ab      	asrs	r3, r5, #6
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8000dd0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	1889      	adds	r1, r1, r2
 8000dd8:	6339      	str	r1, [r7, #48]	; 0x30
 8000dda:	4629      	mov	r1, r5
 8000ddc:	eb43 0101 	adc.w	r1, r3, r1
 8000de0:	6379      	str	r1, [r7, #52]	; 0x34
 8000de2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000de6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	
	// SENS = SENST1 + TCS* dT
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 8000dea:	4b7f      	ldr	r3, [pc, #508]	; (8000fe8 <MS5607_getCompValues+0x2e4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	2200      	movs	r2, #0
 8000df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000df6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000dfa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000dfe:	460b      	mov	r3, r1
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000e06:	460b      	mov	r3, r1
 8000e08:	041b      	lsls	r3, r3, #16
 8000e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						+ (((int64_t)promData.tcs*deltaTemp) >> 7);
 8000e0e:	4b76      	ldr	r3, [pc, #472]	; (8000fe8 <MS5607_getCompValues+0x2e4>)
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000e1a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e22:	17da      	asrs	r2, r3, #31
 8000e24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e28:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000e30:	460b      	mov	r3, r1
 8000e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000e36:	4622      	mov	r2, r4
 8000e38:	fb02 f203 	mul.w	r2, r2, r3
 8000e3c:	e9c7 453a 	strd	r4, r5, [r7, #232]	; 0xe8
 8000e40:	462b      	mov	r3, r5
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	4621      	mov	r1, r4
 8000e48:	fb01 f303 	mul.w	r3, r1, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4622      	mov	r2, r4
 8000e50:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000e54:	fba2 ab01 	umull	sl, fp, r2, r1
 8000e58:	445b      	add	r3, fp
 8000e5a:	469b      	mov	fp, r3
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	ea4f 12da 	mov.w	r2, sl, lsr #7
 8000e68:	ea42 624b 	orr.w	r2, r2, fp, lsl #25
 8000e6c:	ea4f 13eb 	mov.w	r3, fp, asr #7
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 8000e70:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8000e74:	4621      	mov	r1, r4
 8000e76:	1889      	adds	r1, r1, r2
 8000e78:	62b9      	str	r1, [r7, #40]	; 0x28
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	eb43 0101 	adc.w	r1, r3, r1
 8000e80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000e82:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000e86:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

	// Second order compensation
	if (temp1 < 2000)
 8000e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000e8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e92:	f280 8159 	bge.w	8001148 <MS5607_getCompValues+0x444>
	{
		int32_t temp2 = (deltaTemp*deltaTemp) >> 31;
 8000e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e9a:	fb03 f303 	mul.w	r3, r3, r3
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		int32_t temp2000 = temp1 - 2000;
 8000ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000ea8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000eac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		int64_t offset2 = 61*((int64_t)temp2000 * (int64_t)temp2000) >> 4;
 8000eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000eb4:	17da      	asrs	r2, r3, #31
 8000eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ec2:	17da      	asrs	r2, r3, #31
 8000ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000ecc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000ed0:	462b      	mov	r3, r5
 8000ed2:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	fb02 f203 	mul.w	r2, r2, r3
 8000edc:	465b      	mov	r3, fp
 8000ede:	4621      	mov	r1, r4
 8000ee0:	fb01 f303 	mul.w	r3, r1, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	4651      	mov	r1, sl
 8000eea:	fba2 1201 	umull	r1, r2, r2, r1
 8000eee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000ef8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000efc:	4413      	add	r3, r2
 8000efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000f02:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000f06:	4622      	mov	r2, r4
 8000f08:	462b      	mov	r3, r5
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	f04f 0100 	mov.w	r1, #0
 8000f12:	0119      	lsls	r1, r3, #4
 8000f14:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000f18:	0110      	lsls	r0, r2, #4
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4621      	mov	r1, r4
 8000f20:	ebb2 0801 	subs.w	r8, r2, r1
 8000f24:	4629      	mov	r1, r5
 8000f26:	eb63 0901 	sbc.w	r9, r3, r1
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8000f36:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8000f3a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8000f3e:	4690      	mov	r8, r2
 8000f40:	4699      	mov	r9, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	eb18 0303 	adds.w	r3, r8, r3
 8000f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f4c:	462b      	mov	r3, r5
 8000f4e:	eb49 0303 	adc.w	r3, r9, r3
 8000f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000f62:	4621      	mov	r1, r4
 8000f64:	090a      	lsrs	r2, r1, #4
 8000f66:	4629      	mov	r1, r5
 8000f68:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	110b      	asrs	r3, r1, #4
 8000f70:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		int64_t sense2 = ((int64_t)temp2000 * (int64_t)temp2000) << 1;
 8000f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f78:	17da      	asrs	r2, r3, #31
 8000f7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f7c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f82:	17da      	asrs	r2, r3, #31
 8000f84:	673b      	str	r3, [r7, #112]	; 0x70
 8000f86:	677a      	str	r2, [r7, #116]	; 0x74
 8000f88:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000f8c:	462b      	mov	r3, r5
 8000f8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8000f92:	4642      	mov	r2, r8
 8000f94:	fb02 f203 	mul.w	r2, r2, r3
 8000f98:	464b      	mov	r3, r9
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	fb01 f303 	mul.w	r3, r1, r3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4622      	mov	r2, r4
 8000fa4:	4641      	mov	r1, r8
 8000fa6:	fba2 1201 	umull	r1, r2, r2, r1
 8000faa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000fae:	460a      	mov	r2, r1
 8000fb0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000fb8:	4413      	add	r3, r2
 8000fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	18db      	adds	r3, r3, r3
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	eb42 0303 	adc.w	r3, r2, r3
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000fd4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		if (temp1 < -1500)
 8000fd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <MS5607_getCompValues+0x2e8>)
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	f280 8091 	bge.w	8001106 <MS5607_getCompValues+0x402>
 8000fe4:	e004      	b.n	8000ff0 <MS5607_getCompValues+0x2ec>
 8000fe6:	bf00      	nop
 8000fe8:	20000648 	.word	0x20000648
 8000fec:	fffffa24 	.word	0xfffffa24
		{
			int32_t temp1500 = temp1 + 1500;
 8000ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000ff4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000ff8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			offset2 += 15 * ((int64_t)temp1500 * (int64_t)temp1500);
 8000ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001000:	17da      	asrs	r2, r3, #31
 8001002:	66bb      	str	r3, [r7, #104]	; 0x68
 8001004:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001006:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800100a:	17da      	asrs	r2, r3, #31
 800100c:	663b      	str	r3, [r7, #96]	; 0x60
 800100e:	667a      	str	r2, [r7, #100]	; 0x64
 8001010:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001014:	462b      	mov	r3, r5
 8001016:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800101a:	4642      	mov	r2, r8
 800101c:	fb02 f203 	mul.w	r2, r2, r3
 8001020:	464b      	mov	r3, r9
 8001022:	4621      	mov	r1, r4
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	4413      	add	r3, r2
 800102a:	4622      	mov	r2, r4
 800102c:	4641      	mov	r1, r8
 800102e:	fba2 1201 	umull	r1, r2, r2, r1
 8001032:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001036:	460a      	mov	r2, r1
 8001038:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800103c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001040:	4413      	add	r3, r2
 8001042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001046:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800104a:	4622      	mov	r2, r4
 800104c:	462b      	mov	r3, r5
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	f04f 0100 	mov.w	r1, #0
 8001056:	0119      	lsls	r1, r3, #4
 8001058:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800105c:	0110      	lsls	r0, r2, #4
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4621      	mov	r1, r4
 8001064:	1a51      	subs	r1, r2, r1
 8001066:	65b9      	str	r1, [r7, #88]	; 0x58
 8001068:	4629      	mov	r1, r5
 800106a:	eb63 0301 	sbc.w	r3, r3, r1
 800106e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001070:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001074:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001078:	4621      	mov	r1, r4
 800107a:	1851      	adds	r1, r2, r1
 800107c:	61b9      	str	r1, [r7, #24]
 800107e:	4629      	mov	r1, r5
 8001080:	eb43 0101 	adc.w	r1, r3, r1
 8001084:	61f9      	str	r1, [r7, #28]
 8001086:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800108a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			sense2 += ((int64_t)temp1500 * (int64_t)temp1500) << 3;
 800108e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001092:	17da      	asrs	r2, r3, #31
 8001094:	653b      	str	r3, [r7, #80]	; 0x50
 8001096:	657a      	str	r2, [r7, #84]	; 0x54
 8001098:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800109c:	17da      	asrs	r2, r3, #31
 800109e:	64bb      	str	r3, [r7, #72]	; 0x48
 80010a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80010a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80010a6:	462b      	mov	r3, r5
 80010a8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80010ac:	4642      	mov	r2, r8
 80010ae:	fb02 f203 	mul.w	r2, r2, r3
 80010b2:	464b      	mov	r3, r9
 80010b4:	4621      	mov	r1, r4
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	4622      	mov	r2, r4
 80010be:	4641      	mov	r1, r8
 80010c0:	fba2 1201 	umull	r1, r2, r2, r1
 80010c4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80010c8:	460a      	mov	r2, r1
 80010ca:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80010ce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80010d2:	4413      	add	r3, r2
 80010d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80010d8:	f04f 0000 	mov.w	r0, #0
 80010dc:	f04f 0100 	mov.w	r1, #0
 80010e0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80010e4:	462b      	mov	r3, r5
 80010e6:	00d9      	lsls	r1, r3, #3
 80010e8:	4623      	mov	r3, r4
 80010ea:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80010ee:	4623      	mov	r3, r4
 80010f0:	00d8      	lsls	r0, r3, #3
 80010f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80010f6:	1814      	adds	r4, r2, r0
 80010f8:	613c      	str	r4, [r7, #16]
 80010fa:	414b      	adcs	r3, r1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001102:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
		}

		temp1 -= temp2;
 8001106:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800110a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		offset -= offset2;
 8001114:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001118:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800111c:	1a84      	subs	r4, r0, r2
 800111e:	60bc      	str	r4, [r7, #8]
 8001120:	eb61 0303 	sbc.w	r3, r1, r3
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800112a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		sensitivity -= sense2;
 800112e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001132:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001136:	1a84      	subs	r4, r0, r2
 8001138:	603c      	str	r4, [r7, #0]
 800113a:	eb61 0303 	sbc.w	r3, r1, r3
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001144:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	}

	// Populate and return the compensated values
	compVals.pres = (((int64_t)(digPres*sensitivity) >> 21) - offset) >> 15;
 8001148:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800114c:	2200      	movs	r2, #0
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
 8001150:	647a      	str	r2, [r7, #68]	; 0x44
 8001152:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001156:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800115a:	462a      	mov	r2, r5
 800115c:	fb02 f203 	mul.w	r2, r2, r3
 8001160:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001164:	4621      	mov	r1, r4
 8001166:	fb01 f303 	mul.w	r3, r1, r3
 800116a:	4413      	add	r3, r2
 800116c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001170:	4621      	mov	r1, r4
 8001172:	fba2 1201 	umull	r1, r2, r2, r1
 8001176:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800117a:	460a      	mov	r2, r1
 800117c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001180:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001184:	4413      	add	r3, r2
 8001186:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001196:	4621      	mov	r1, r4
 8001198:	0d4a      	lsrs	r2, r1, #21
 800119a:	4629      	mov	r1, r5
 800119c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 80011a0:	4629      	mov	r1, r5
 80011a2:	154b      	asrs	r3, r1, #21
 80011a4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80011a8:	1a14      	subs	r4, r2, r0
 80011aa:	63bc      	str	r4, [r7, #56]	; 0x38
 80011ac:	eb63 0301 	sbc.w	r3, r3, r1
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80011be:	4621      	mov	r1, r4
 80011c0:	0bca      	lsrs	r2, r1, #15
 80011c2:	4629      	mov	r1, r5
 80011c4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80011c8:	4629      	mov	r1, r5
 80011ca:	13cb      	asrs	r3, r1, #15
 80011cc:	4613      	mov	r3, r2
 80011ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	compVals.temp = temp1;
 80011d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80011d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	return compVals;
 80011da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80011de:	461a      	mov	r2, r3
 80011e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011e8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80011ec:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80011f0:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80011f4:	46bd      	mov	sp, r7
 80011f6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011fa:	4770      	bx	lr

080011fc <MS5607_readUncompPres>:

void MS5607_readUncompPres()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	state = MS5607_PRES_READ;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MS5607_readUncompPres+0x34>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 8001206:	f000 f819 	bl	800123c <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MS5607_readUncompPres+0x38>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	2201      	movs	r2, #1
 8001214:	4908      	ldr	r1, [pc, #32]	; (8001238 <MS5607_readUncompPres+0x3c>)
 8001216:	f006 fac7 	bl	80077a8 <HAL_SPI_Transmit>
	MS5607_disable();
 800121a:	f000 f81f 	bl	800125c <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <MS5607_readUncompPres+0x38>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f006 fe5f 	bl	8007ee8 <HAL_TIM_Base_Start_IT>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000065c 	.word	0x2000065c
 8001234:	20000644 	.word	0x20000644
 8001238:	20000660 	.word	0x20000660

0800123c <MS5607_enable>:
	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
}

void MS5607_enable()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <MS5607_enable+0x1c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6898      	ldr	r0, [r3, #8]
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <MS5607_enable+0x1c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	899b      	ldrh	r3, [r3, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f000 ff4e 	bl	80020f0 <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000644 	.word	0x20000644

0800125c <MS5607_disable>:

void MS5607_disable()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <MS5607_disable+0x1c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6898      	ldr	r0, [r3, #8]
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <MS5607_disable+0x1c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	899b      	ldrh	r3, [r3, #12]
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	f000 ff3e 	bl	80020f0 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000644 	.word	0x20000644

0800127c <MS5607_getRawValues>:
		state = MS5607_IDLE;
	}
}

MS5607_RawVal MS5607_getRawValues()
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	return rawValues;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <MS5607_getRawValues+0x20>)
 8001288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000654 	.word	0x20000654

080012a0 <MS5607_getMeasurementDelay>:

uint16_t MS5607_getMeasurementDelay()
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	return measurementDelay;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <MS5607_getMeasurementDelay+0x14>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000065e 	.word	0x2000065e

080012b8 <MS5607_getState>:

MS5607_MeasureState MS5607_getState()
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	return state;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <MS5607_getState+0x14>)
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000065c 	.word	0x2000065c

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b4      	sub	sp, #208	; 0xd0
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	22c0      	movs	r2, #192	; 0xc0
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f008 fadf 	bl	80098b4 <memset>
  if(hrtc->Instance==RTC)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a19      	ldr	r2, [pc, #100]	; (8001360 <HAL_RTC_MspInit+0x80>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d12a      	bne.n	8001356 <HAL_RTC_MspInit+0x76>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001300:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800130c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fb7d 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001324:	f7ff fc80 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_RTC_MspInit+0x84>)
 800132a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800132e:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_RTC_MspInit+0x84>)
 8001330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001334:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_RTC_MspInit+0x84>)
 800133a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_RTC_MspInit+0x84>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001344:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_RTC_MspInit+0x84>)
 800134a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800134e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	37d0      	adds	r7, #208	; 0xd0
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	46007800 	.word	0x46007800
 8001364:	46020c00 	.word	0x46020c00

08001368 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0bc      	sub	sp, #240	; 0xf0
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	22c0      	movs	r2, #192	; 0xc0
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f008 fa93 	bl	80098b4 <memset>
  if(hsd->Instance==SDMMC1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a39      	ldr	r2, [pc, #228]	; (8001478 <HAL_SD_MspInit+0x110>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d16b      	bne.n	8001470 <HAL_SD_MspInit+0x108>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001398:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 80013a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fb31 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80013bc:	f7ff fc34 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_SD_MspInit+0x114>)
 80013c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c6:	4a2d      	ldr	r2, [pc, #180]	; (800147c <HAL_SD_MspInit+0x114>)
 80013c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_SD_MspInit+0x114>)
 80013d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_SD_MspInit+0x114>)
 80013e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e4:	4a25      	ldr	r2, [pc, #148]	; (800147c <HAL_SD_MspInit+0x114>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_SD_MspInit+0x114>)
 80013f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_SD_MspInit+0x114>)
 80013fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_SD_MspInit+0x114>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_SD_MspInit+0x114>)
 800140e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800141a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800141e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001434:	230c      	movs	r3, #12
 8001436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800143e:	4619      	mov	r1, r3
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <HAL_SD_MspInit+0x118>)
 8001442:	f000 fc7d 	bl	8001d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001446:	2304      	movs	r3, #4
 8001448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800145e:	230c      	movs	r3, #12
 8001460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <HAL_SD_MspInit+0x11c>)
 800146c:	f000 fc68 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	37f0      	adds	r7, #240	; 0xf0
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	420c8000 	.word	0x420c8000
 800147c:	46020c00 	.word	0x46020c00
 8001480:	42020800 	.word	0x42020800
 8001484:	42020c00 	.word	0x42020c00

08001488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0be      	sub	sp, #248	; 0xf8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	22c0      	movs	r2, #192	; 0xc0
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f008 fa03 	bl	80098b4 <memset>
  if(hspi->Instance==SPI1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6b      	ldr	r2, [pc, #428]	; (8001660 <HAL_SPI_MspInit+0x1d8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d147      	bne.n	8001548 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80014c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 faa1 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80014dc:	f7ff fba4 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e0:	4b60      	ldr	r3, [pc, #384]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80014e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014e6:	4a5f      	ldr	r2, [pc, #380]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80014f0:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80014f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 8001500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001504:	4a57      	ldr	r2, [pc, #348]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800150e:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 8001510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c2      	movs	r3, #194	; 0xc2
 800151e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001534:	2305      	movs	r3, #5
 8001536:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800153e:	4619      	mov	r1, r3
 8001540:	4849      	ldr	r0, [pc, #292]	; (8001668 <HAL_SPI_MspInit+0x1e0>)
 8001542:	f000 fbfd 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001546:	e086      	b.n	8001656 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a47      	ldr	r2, [pc, #284]	; (800166c <HAL_SPI_MspInit+0x1e4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	f040 8081 	bne.w	8001656 <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fa53 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 8001578:	f7ff fb56 	bl	8000c28 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 800157e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001582:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 800158e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b32      	ldr	r3, [pc, #200]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 800159c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80015ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80015ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015be:	4a29      	ldr	r2, [pc, #164]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_SPI_MspInit+0x1dc>)
 80015ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80015ee:	2303      	movs	r3, #3
 80015f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015f8:	4619      	mov	r1, r3
 80015fa:	481d      	ldr	r0, [pc, #116]	; (8001670 <HAL_SPI_MspInit+0x1e8>)
 80015fc:	f000 fba0 	bl	8001d40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001600:	2304      	movs	r3, #4
 8001602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001618:	2305      	movs	r3, #5
 800161a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001622:	4619      	mov	r1, r3
 8001624:	4812      	ldr	r0, [pc, #72]	; (8001670 <HAL_SPI_MspInit+0x1e8>)
 8001626:	f000 fb8b 	bl	8001d40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800162a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001644:	2305      	movs	r3, #5
 8001646:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800164e:	4619      	mov	r1, r3
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <HAL_SPI_MspInit+0x1ec>)
 8001652:	f000 fb75 	bl	8001d40 <HAL_GPIO_Init>
}
 8001656:	bf00      	nop
 8001658:	37f8      	adds	r7, #248	; 0xf8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40013000 	.word	0x40013000
 8001664:	46020c00 	.word	0x46020c00
 8001668:	42020000 	.word	0x42020000
 800166c:	40003800 	.word	0x40003800
 8001670:	42020800 	.word	0x42020800
 8001674:	42020400 	.word	0x42020400

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10e      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_TIM_Base_MspInit+0x40>)
 800168c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_TIM_Base_MspInit+0x40>)
 8001692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001696:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_TIM_Base_MspInit+0x40>)
 800169c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40014400 	.word	0x40014400
 80016b8:	46020c00 	.word	0x46020c00

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0ba      	sub	sp, #232	; 0xe8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	22c0      	movs	r2, #192	; 0xc0
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 f8e9 	bl	80098b4 <memset>
  if(huart->Instance==USART1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a26      	ldr	r2, [pc, #152]	; (8001780 <HAL_UART_MspInit+0xc4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d145      	bne.n	8001778 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016ec:	f04f 0201 	mov.w	r2, #1
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016f8:	2300      	movs	r3, #0
 80016fa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4618      	mov	r0, r3
 8001702:	f002 f989 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800170c:	f7ff fa8c 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_UART_MspInit+0xc8>)
 8001712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001716:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_UART_MspInit+0xc8>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_UART_MspInit+0xc8>)
 8001722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0xc8>)
 8001730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001734:	4a13      	ldr	r2, [pc, #76]	; (8001784 <HAL_UART_MspInit+0xc8>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_MspInit+0xc8>)
 8001740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800174c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001766:	2307      	movs	r3, #7
 8001768:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001770:	4619      	mov	r1, r3
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_UART_MspInit+0xcc>)
 8001774:	f000 fae4 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	37e8      	adds	r7, #232	; 0xe8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40013800 	.word	0x40013800
 8001784:	46020c00 	.word	0x46020c00
 8001788:	42020000 	.word	0x42020000

0800178c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0bc      	sub	sp, #240	; 0xf0
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	22c0      	movs	r2, #192	; 0xc0
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f008 f881 	bl	80098b4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a38      	ldr	r2, [pc, #224]	; (8001898 <HAL_PCD_MspInit+0x10c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d169      	bne.n	8001890 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 f920 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80017de:	f7ff fa23 	bl	8000c28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_PCD_MspInit+0x110>)
 80017e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e8:	4a2c      	ldr	r2, [pc, #176]	; (800189c <HAL_PCD_MspInit+0x110>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_PCD_MspInit+0x110>)
 80017f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001800:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001804:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800181a:	230a      	movs	r3, #10
 800181c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001824:	4619      	mov	r1, r3
 8001826:	481e      	ldr	r0, [pc, #120]	; (80018a0 <HAL_PCD_MspInit+0x114>)
 8001828:	f000 fa8a 	bl	8001d40 <HAL_GPIO_Init>

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_PCD_MspInit+0x110>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <HAL_PCD_MspInit+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_PCD_MspInit+0x110>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001840:	4a16      	ldr	r2, [pc, #88]	; (800189c <HAL_PCD_MspInit+0x110>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_PCD_MspInit+0x110>)
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]
      HAL_PWREx_EnableVddUSB();
 8001858:	f000 fe1c 	bl	8002494 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_PCD_MspInit+0x110>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_PCD_MspInit+0x110>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800186c:	e001      	b.n	8001872 <HAL_PCD_MspInit+0xe6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800186e:	f000 fe11 	bl	8002494 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_PCD_MspInit+0x110>)
 8001874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001878:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_PCD_MspInit+0x110>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_PCD_MspInit+0x110>)
 8001884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	37f0      	adds	r7, #240	; 0xf0
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40016000 	.word	0x40016000
 800189c:	46020c00 	.word	0x46020c00
 80018a0:	42020000 	.word	0x42020000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f0:	f000 f8fe 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f007 ff9a 	bl	8009860 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20040000 	.word	0x20040000
 8001958:	00000400 	.word	0x00000400
 800195c:	20000664 	.word	0x20000664
 8001960:	20000680 	.word	0x20000680

08001964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <SystemInit+0x68>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <SystemInit+0x68>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <SystemInit+0x6c>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <SystemInit+0x6c>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <SystemInit+0x6c>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <SystemInit+0x6c>)
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <SystemInit+0x6c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <SystemInit+0x6c>)
 8001996:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800199a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800199e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <SystemInit+0x6c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <SystemInit+0x6c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <SystemInit+0x6c>)
 80019ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <SystemInit+0x6c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SystemInit+0x68>)
 80019ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019be:	609a      	str	r2, [r3, #8]
  #endif
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	46020c00 	.word	0x46020c00

080019d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019d8:	f7ff ffc4 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80019de:	490d      	ldr	r1, [pc, #52]	; (8001a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <LoopForever+0xe>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f4:	4c0a      	ldr	r4, [pc, #40]	; (8001a20 <LoopForever+0x16>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a02:	f007 ff33 	bl	800986c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a06:	f7fe fdc7 	bl	8000598 <main>

08001a0a <LoopForever>:

LoopForever:
    b LoopForever
 8001a0a:	e7fe      	b.n	8001a0a <LoopForever>
  ldr   r0, =_estack
 8001a0c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a18:	0800a334 	.word	0x0800a334
  ldr r2, =_sbss
 8001a1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a20:	20000679 	.word	0x20000679

08001a24 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_Init+0x4c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <HAL_Init+0x4c>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f94f 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a3e:	f001 fe07 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_Init+0x50>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	490b      	ldr	r1, [pc, #44]	; (8001a7c <HAL_Init+0x54>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_Init+0x58>)
 8001a56:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a58:	200f      	movs	r0, #15
 8001a5a:	f000 f813 	bl	8001a84 <HAL_InitTick>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e002      	b.n	8001a6e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fc32 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000
 8001a78:	46020c00 	.word	0x46020c00
 8001a7c:	0800a1f0 	.word	0x0800a1f0
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_InitTick+0x60>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e021      	b.n	8001adc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_InitTick+0x64>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_InitTick+0x60>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f939 	bl	8001d26 <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d80a      	bhi.n	8001ada <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001acc:	f000 f911 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_InitTick+0x68>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000668 	.word	0x20000668

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000668 	.word	0x20000668

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff ffee 	bl	8001b18 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_Delay+0x44>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff47 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff5e 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff90 	bl	8001c30 <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5f 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffb2 	bl	8001c98 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d52:	e1ba      	b.n	80020ca <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 81aa 	beq.w	80020c4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a55      	ldr	r2, [pc, #340]	; (8001ec8 <HAL_GPIO_Init+0x188>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d15d      	bne.n	8001e34 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0201 	and.w	r2, r3, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001da8:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <HAL_GPIO_Init+0x18c>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001db0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001db2:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <HAL_GPIO_Init+0x18c>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220b      	movs	r2, #11
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	69f9      	ldr	r1, [r7, #28]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2202      	movs	r2, #2
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e067      	b.n	8001f04 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x104>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b12      	cmp	r3, #18
 8001e42:	d145      	bne.n	8001ed0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 020f 	and.w	r2, r3, #15
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69f9      	ldr	r1, [r7, #28]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e01e      	b.n	8001f04 <HAL_GPIO_Init+0x1c4>
 8001ec6:	bf00      	nop
 8001ec8:	46020000 	.word	0x46020000
 8001ecc:	0800a248 	.word	0x0800a248
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d00b      	beq.n	8001f24 <HAL_GPIO_Init+0x1e4>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f18:	2b11      	cmp	r3, #17
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	d130      	bne.n	8001f86 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 0201 	and.w	r2, r3, #1
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d017      	beq.n	8001fbe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d07c      	beq.n	80020c4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001fca:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0a9a      	lsrs	r2, r3, #10
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_GPIO_Init+0x3ac>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	00d2      	lsls	r2, r2, #3
 8001ffe:	4093      	lsls	r3, r2
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	4313      	orrs	r3, r2
 8002004:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002006:	4938      	ldr	r1, [pc, #224]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3318      	adds	r3, #24
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002014:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	4013      	ands	r3, r2
 8002022:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	4013      	ands	r3, r2
 800204c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002062:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 800206a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800206e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	4013      	ands	r3, r2
 8002078:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 8002098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_GPIO_Init+0x3a8>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f47f ae3d 	bne.w	8001d54 <HAL_GPIO_Init+0x14>
  }
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	3724      	adds	r7, #36	; 0x24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	46022000 	.word	0x46022000
 80020ec:	002f7f7f 	.word	0x002f7f7f

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800210c:	e002      	b.n	8002114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	b08f      	sub	sp, #60	; 0x3c
 8002124:	af0a      	add	r7, sp, #40	; 0x28
 8002126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0fe      	b.n	8002330 <HAL_PCD_Init+0x210>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fb20 	bl	800178c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f007 fb14 	bl	8009786 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	687e      	ldr	r6, [r7, #4]
 8002166:	466d      	mov	r5, sp
 8002168:	f106 0410 	add.w	r4, r6, #16
 800216c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002178:	e885 0003 	stmia.w	r5, {r0, r1}
 800217c:	1d33      	adds	r3, r6, #4
 800217e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002180:	6838      	ldr	r0, [r7, #0]
 8002182:	f007 fae2 	bl	800974a <USB_CoreInit>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0cb      	b.n	8002330 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f007 fb06 	bl	80097b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e03e      	b.n	8002228 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	333d      	adds	r3, #61	; 0x3d
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	333c      	adds	r3, #60	; 0x3c
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	333f      	adds	r3, #63	; 0x3f
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	334c      	adds	r3, #76	; 0x4c
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3350      	adds	r3, #80	; 0x50
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	3354      	adds	r3, #84	; 0x54
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	3301      	adds	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d3bb      	bcc.n	80021aa <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e044      	b.n	80022c2 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	f203 137d 	addw	r3, r3, #381	; 0x17d
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	3301      	adds	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3b5      	bcc.n	8002238 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	687e      	ldr	r6, [r7, #4]
 80022d4:	466d      	mov	r5, sp
 80022d6:	f106 0410 	add.w	r4, r6, #16
 80022da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ea:	1d33      	adds	r3, r6, #4
 80022ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ee:	6838      	ldr	r0, [r7, #0]
 80022f0:	f007 fa81 	bl	80097f6 <USB_DevInit>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_PCD_Init+0x1e6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e014      	b.n	8002330 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f80a 	bl	8002338 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f007 fa87 	bl	800983c <USB_DevDisconnect>

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002338 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  hpcd->LPM_State = LPM_L0;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0202 	orr.w	r2, r3, #2
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800238c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d10b      	bne.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d905      	bls.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800239e:	4b33      	ldr	r3, [pc, #204]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4a32      	ldr	r2, [pc, #200]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e057      	b.n	800245e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b4:	d90a      	bls.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	60d3      	str	r3, [r2, #12]
 80023ca:	e007      	b.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80023d4:	4925      	ldr	r1, [pc, #148]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	099b      	lsrs	r3, r3, #6
 80023e8:	2232      	movs	r2, #50	; 0x32
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	4a21      	ldr	r2, [pc, #132]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80023fa:	e002      	b.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3b01      	subs	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x98>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f3      	bne.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01b      	beq.n	8002452 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a15      	ldr	r2, [pc, #84]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	2232      	movs	r2, #50	; 0x32
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	3301      	adds	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002438:	e002      	b.n	8002440 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3b01      	subs	r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f3      	bne.n	800243a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e000      	b.n	800245e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	46020800 	.word	0x46020800
 8002470:	20000000 	.word	0x20000000
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_PWREx_GetVoltageRange+0x18>)
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	46020800 	.word	0x46020800

08002494 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6113      	str	r3, [r2, #16]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	46020800 	.word	0x46020800

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	; 0x38
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f000 bec8 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b99      	ldr	r3, [pc, #612]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	4b96      	ldr	r3, [pc, #600]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 816c 	beq.w	80027c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_RCC_OscConfig+0x52>
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	f040 80de 	bne.w	80026ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 80da 	bne.w	80026ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	f000 bea5 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002518:	4b86      	ldr	r3, [pc, #536]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <HAL_RCC_OscConfig+0x7a>
 8002524:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800252c:	e005      	b.n	800253a <HAL_RCC_OscConfig+0x86>
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800253a:	4293      	cmp	r3, r2
 800253c:	d255      	bcs.n	80025ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	4618      	mov	r0, r3
 800254a:	f001 f9df 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	f000 be82 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4a75      	ldr	r2, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002564:	6093      	str	r3, [r2, #8]
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	4970      	ldr	r1, [pc, #448]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002580:	d309      	bcc.n	8002596 <HAL_RCC_OscConfig+0xe2>
 8002582:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f023 021f 	bic.w	r2, r3, #31
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4969      	ldr	r1, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
 8002594:	e07e      	b.n	8002694 <HAL_RCC_OscConfig+0x1e0>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	2b00      	cmp	r3, #0
 800259c:	da0a      	bge.n	80025b4 <HAL_RCC_OscConfig+0x100>
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	4961      	ldr	r1, [pc, #388]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60cb      	str	r3, [r1, #12]
 80025b2:	e06f      	b.n	8002694 <HAL_RCC_OscConfig+0x1e0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d30a      	bcc.n	80025d4 <HAL_RCC_OscConfig+0x120>
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	029b      	lsls	r3, r3, #10
 80025cc:	4959      	ldr	r1, [pc, #356]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
 80025d2:	e05f      	b.n	8002694 <HAL_RCC_OscConfig+0x1e0>
 80025d4:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	03db      	lsls	r3, r3, #15
 80025e2:	4954      	ldr	r1, [pc, #336]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60cb      	str	r3, [r1, #12]
 80025e8:	e054      	b.n	8002694 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4a51      	ldr	r2, [pc, #324]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f4:	6093      	str	r3, [r2, #8]
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	494c      	ldr	r1, [pc, #304]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002610:	d309      	bcc.n	8002626 <HAL_RCC_OscConfig+0x172>
 8002612:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 021f 	bic.w	r2, r3, #31
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4945      	ldr	r1, [pc, #276]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002620:	4313      	orrs	r3, r2
 8002622:	60cb      	str	r3, [r1, #12]
 8002624:	e028      	b.n	8002678 <HAL_RCC_OscConfig+0x1c4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	da0a      	bge.n	8002644 <HAL_RCC_OscConfig+0x190>
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	015b      	lsls	r3, r3, #5
 800263c:	493d      	ldr	r1, [pc, #244]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 800263e:	4313      	orrs	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
 8002642:	e019      	b.n	8002678 <HAL_RCC_OscConfig+0x1c4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264c:	d30a      	bcc.n	8002664 <HAL_RCC_OscConfig+0x1b0>
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
 8002662:	e009      	b.n	8002678 <HAL_RCC_OscConfig+0x1c4>
 8002664:	4b33      	ldr	r3, [pc, #204]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	03db      	lsls	r3, r3, #15
 8002672:	4930      	ldr	r1, [pc, #192]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002674:	4313      	orrs	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4618      	mov	r0, r3
 8002684:	f001 f942 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f000 bde5 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002694:	f001 f8e4 	bl	8003860 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x284>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff f9f1 	bl	8001a84 <HAL_InitTick>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80026a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 808a 	beq.w	80027c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80026b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b6:	f000 bdd2 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d066      	beq.n	8002790 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026ce:	f7ff fa23 	bl	8001b18 <HAL_GetTick>
 80026d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d6:	f7ff fa1f 	bl	8001b18 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d902      	bls.n	80026ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	f000 bdba 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ef      	beq.n	80026d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 80026fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002700:	6093      	str	r3, [r2, #8]
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	4909      	ldr	r1, [pc, #36]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800271c:	d30e      	bcc.n	800273c <HAL_RCC_OscConfig+0x288>
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 021f 	bic.w	r2, r3, #31
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4902      	ldr	r1, [pc, #8]	; (8002734 <HAL_RCC_OscConfig+0x280>)
 800272c:	4313      	orrs	r3, r2
 800272e:	60cb      	str	r3, [r1, #12]
 8002730:	e04a      	b.n	80027c8 <HAL_RCC_OscConfig+0x314>
 8002732:	bf00      	nop
 8002734:	46020c00 	.word	0x46020c00
 8002738:	20000004 	.word	0x20000004
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	da0a      	bge.n	800275a <HAL_RCC_OscConfig+0x2a6>
 8002744:	4b98      	ldr	r3, [pc, #608]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	4995      	ldr	r1, [pc, #596]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	60cb      	str	r3, [r1, #12]
 8002758:	e036      	b.n	80027c8 <HAL_RCC_OscConfig+0x314>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002762:	d30a      	bcc.n	800277a <HAL_RCC_OscConfig+0x2c6>
 8002764:	4b90      	ldr	r3, [pc, #576]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	498d      	ldr	r1, [pc, #564]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
 8002778:	e026      	b.n	80027c8 <HAL_RCC_OscConfig+0x314>
 800277a:	4b8b      	ldr	r3, [pc, #556]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	03db      	lsls	r3, r3, #15
 8002788:	4987      	ldr	r1, [pc, #540]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	60cb      	str	r3, [r1, #12]
 800278e:	e01b      	b.n	80027c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002790:	4b85      	ldr	r3, [pc, #532]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a84      	ldr	r2, [pc, #528]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800279c:	f7ff f9bc 	bl	8001b18 <HAL_GetTick>
 80027a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80027a2:	e009      	b.n	80027b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a4:	f7ff f9b8 	bl	8001b18 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f000 bd53 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80027b8:	4b7b      	ldr	r3, [pc, #492]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ef      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2f0>
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 808b 	beq.w	80028ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_OscConfig+0x334>
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d17d      	bne.n	80028ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f000 bd34 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x35a>
 8002800:	4b69      	ldr	r3, [pc, #420]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a68      	ldr	r2, [pc, #416]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e041      	b.n	8002892 <HAL_RCC_OscConfig+0x3de>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002816:	d112      	bne.n	800283e <HAL_RCC_OscConfig+0x38a>
 8002818:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a62      	ldr	r2, [pc, #392]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5f      	ldr	r2, [pc, #380]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5c      	ldr	r2, [pc, #368]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	e029      	b.n	8002892 <HAL_RCC_OscConfig+0x3de>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002846:	d112      	bne.n	800286e <HAL_RCC_OscConfig+0x3ba>
 8002848:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a56      	ldr	r2, [pc, #344]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b54      	ldr	r3, [pc, #336]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a53      	ldr	r2, [pc, #332]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e011      	b.n	8002892 <HAL_RCC_OscConfig+0x3de>
 800286e:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a4d      	ldr	r2, [pc, #308]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a4a      	ldr	r2, [pc, #296]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a47      	ldr	r2, [pc, #284]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002890:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d014      	beq.n	80028c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800289a:	f7ff f93d 	bl	8001b18 <HAL_GetTick>
 800289e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a2:	f7ff f939 	bl	8001b18 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d902      	bls.n	80028b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	f000 bcd4 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ef      	beq.n	80028a2 <HAL_RCC_OscConfig+0x3ee>
 80028c2:	e013      	b.n	80028ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80028c4:	f7ff f928 	bl	8001b18 <HAL_GetTick>
 80028c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	e009      	b.n	80028e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f924 	bl	8001b18 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d902      	bls.n	80028e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	f000 bcbf 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ef      	bne.n	80028cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05f      	beq.n	80029b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x456>
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d114      	bne.n	800292e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	2b02      	cmp	r3, #2
 8002908:	d111      	bne.n	800292e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f000 bca3 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	4920      	ldr	r1, [pc, #128]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800292c:	e044      	b.n	80029b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002942:	f7ff f8e9 	bl	8001b18 <HAL_GetTick>
 8002946:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	e009      	b.n	800295e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294a:	f7ff f8e5 	bl	8001b18 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d902      	bls.n	800295e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	f000 bc80 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0ef      	beq.n	800294a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	041b      	lsls	r3, r3, #16
 8002978:	490b      	ldr	r1, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	610b      	str	r3, [r1, #16]
 800297e:	e01b      	b.n	80029b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <HAL_RCC_OscConfig+0x4f4>)
 8002986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800298c:	f7ff f8c4 	bl	8001b18 <HAL_GetTick>
 8002990:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7ff f8c0 	bl	8001b18 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d904      	bls.n	80029ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f000 bc5b 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
 80029a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ac:	4baf      	ldr	r3, [pc, #700]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ed      	bne.n	8002994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80c8 	beq.w	8002b56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029cc:	4ba7      	ldr	r3, [pc, #668]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d111      	bne.n	80029fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4ba4      	ldr	r3, [pc, #656]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e0:	4aa2      	ldr	r2, [pc, #648]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029ea:	4ba0      	ldr	r3, [pc, #640]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029fe:	4b9c      	ldr	r3, [pc, #624]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d119      	bne.n	8002a3e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a0a:	4b99      	ldr	r3, [pc, #612]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	4a98      	ldr	r2, [pc, #608]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7ff f87f 	bl	8001b18 <HAL_GetTick>
 8002a1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a1c:	e009      	b.n	8002a32 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7ff f87b 	bl	8001b18 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d902      	bls.n	8002a32 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	f000 bc16 	b.w	800325e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a32:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ef      	beq.n	8002a1e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d05f      	beq.n	8002b06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002a46:	4b89      	ldr	r3, [pc, #548]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a4c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d037      	beq.n	8002acc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e3f4      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b7b      	ldr	r3, [pc, #492]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a84:	4a79      	ldr	r2, [pc, #484]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002a86:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002a8e:	f7ff f843 	bl	8001b18 <HAL_GetTick>
 8002a92:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7ff f83f 	bl	8001b18 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e3da      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ef      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002abc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4969      	ldr	r1, [pc, #420]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002acc:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ad2:	4a66      	ldr	r2, [pc, #408]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002adc:	f7ff f81c 	bl	8001b18 <HAL_GetTick>
 8002ae0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7ff f818 	bl	8001b18 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e3b3      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002af6:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ef      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x630>
 8002b04:	e01b      	b.n	8002b3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002b06:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b0e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002b12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002b16:	f7fe ffff 	bl	8001b18 <HAL_GetTick>
 8002b1a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7fe fffb 	bl	8001b18 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e396      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b30:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ef      	bne.n	8002b1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4c:	4a47      	ldr	r2, [pc, #284]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8111 	beq.w	8002d86 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6a:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7e:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b88:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d118      	bne.n	8002bda <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb4:	f7fe ffb0 	bl	8001b18 <HAL_GetTick>
 8002bb8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe ffac 	bl	8001b18 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e347      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <HAL_RCC_OscConfig+0x7bc>)
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01f      	beq.n	8002c26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bf8:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c12:	e018      	b.n	8002c46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c1a:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c24:	e00f      	b.n	8002c46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c3c:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <HAL_RCC_OscConfig+0x7b8>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d057      	beq.n	8002cfe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ff63 	bl	8001b18 <HAL_GetTick>
 8002c52:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c54:	e00e      	b.n	8002c74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe ff5f 	bl	8001b18 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d905      	bls.n	8002c74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e2f8      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
 8002c6c:	46020c00 	.word	0x46020c00
 8002c70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c74:	4b9c      	ldr	r3, [pc, #624]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0e9      	beq.n	8002c56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c8e:	4b96      	ldr	r3, [pc, #600]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c94:	4a94      	ldr	r2, [pc, #592]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe ff3a 	bl	8001b18 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e2d3      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002cb6:	4b8c      	ldr	r3, [pc, #560]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ed      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x7ec>
 8002cc4:	e053      	b.n	8002d6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ccc:	4a86      	ldr	r2, [pc, #536]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe ff1e 	bl	8001b18 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e2b7      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cee:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ed      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x824>
 8002cfc:	e037      	b.n	8002d6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002cfe:	f7fe ff0b 	bl	8001b18 <HAL_GetTick>
 8002d02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe ff07 	bl	8001b18 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e2a0      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ed      	bne.n	8002d06 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002d2a:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01a      	beq.n	8002d6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d38:	4b6b      	ldr	r3, [pc, #428]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d3e:	4a6a      	ldr	r2, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fe fee5 	bl	8001b18 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e27e      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ed      	bne.n	8002d4a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7c:	4a5a      	ldr	r2, [pc, #360]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d7e:	f023 0304 	bic.w	r3, r3, #4
 8002d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d036      	beq.n	8002e00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002d9a:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002da6:	f7fe feb7 	bl	8001b18 <HAL_GetTick>
 8002daa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dae:	f7fe feb3 	bl	8001b18 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e24e      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002dc0:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x8fa>
 8002dcc:	e018      	b.n	8002e00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002dce:	4b46      	ldr	r3, [pc, #280]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a45      	ldr	r2, [pc, #276]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dd8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dda:	f7fe fe9d 	bl	8001b18 <HAL_GetTick>
 8002dde:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de2:	f7fe fe99 	bl	8001b18 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e234      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002df4:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d036      	beq.n	8002e7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d019      	beq.n	8002e48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e20:	f7fe fe7a 	bl	8001b18 <HAL_GetTick>
 8002e24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e28:	f7fe fe76 	bl	8001b18 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e211      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x974>
 8002e46:	e018      	b.n	8002e7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002e48:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e54:	f7fe fe60 	bl	8001b18 <HAL_GetTick>
 8002e58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fe5c 	bl	8001b18 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1f7      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d07f      	beq.n	8002f86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d062      	beq.n	8002f54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e98:	6093      	str	r3, [r2, #8]
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	4910      	ldr	r1, [pc, #64]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002eb4:	d309      	bcc.n	8002eca <HAL_RCC_OscConfig+0xa16>
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 021f 	bic.w	r2, r3, #31
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4909      	ldr	r1, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
 8002ec8:	e02a      	b.n	8002f20 <HAL_RCC_OscConfig+0xa6c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da0c      	bge.n	8002eec <HAL_RCC_OscConfig+0xa38>
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	015b      	lsls	r3, r3, #5
 8002ee0:	4901      	ldr	r1, [pc, #4]	; (8002ee8 <HAL_RCC_OscConfig+0xa34>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]
 8002ee6:	e01b      	b.n	8002f20 <HAL_RCC_OscConfig+0xa6c>
 8002ee8:	46020c00 	.word	0x46020c00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d30a      	bcc.n	8002f0c <HAL_RCC_OscConfig+0xa58>
 8002ef6:	4ba1      	ldr	r3, [pc, #644]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	029b      	lsls	r3, r3, #10
 8002f04:	499d      	ldr	r1, [pc, #628]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60cb      	str	r3, [r1, #12]
 8002f0a:	e009      	b.n	8002f20 <HAL_RCC_OscConfig+0xa6c>
 8002f0c:	4b9b      	ldr	r3, [pc, #620]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	03db      	lsls	r3, r3, #15
 8002f1a:	4998      	ldr	r1, [pc, #608]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002f20:	4b96      	ldr	r3, [pc, #600]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a95      	ldr	r2, [pc, #596]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f26:	f043 0310 	orr.w	r3, r3, #16
 8002f2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f2c:	f7fe fdf4 	bl	8001b18 <HAL_GetTick>
 8002f30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f34:	f7fe fdf0 	bl	8001b18 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e18b      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f46:	4b8d      	ldr	r3, [pc, #564]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xa80>
 8002f52:	e018      	b.n	8002f86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002f54:	4b89      	ldr	r3, [pc, #548]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a88      	ldr	r2, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f5a:	f023 0310 	bic.w	r3, r3, #16
 8002f5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f60:	f7fe fdda 	bl	8001b18 <HAL_GetTick>
 8002f64:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f68:	f7fe fdd6 	bl	8001b18 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e171      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f7a:	4b80      	ldr	r3, [pc, #512]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8166 	beq.w	800325c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f96:	4b79      	ldr	r3, [pc, #484]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	f000 80f2 	beq.w	8003188 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	f040 80c5 	bne.w	8003138 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a72      	ldr	r2, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002fba:	f7fe fdad 	bl	8001b18 <HAL_GetTick>
 8002fbe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fe fda9 	bl	8001b18 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e144      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fd4:	4b69      	ldr	r3, [pc, #420]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe0:	4b66      	ldr	r3, [pc, #408]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d111      	bne.n	8003012 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff4:	4a61      	ldr	r2, [pc, #388]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8003000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003012:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <HAL_RCC_OscConfig+0xccc>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800301e:	d102      	bne.n	8003026 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003026:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0xccc>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4a55      	ldr	r2, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0xccc>)
 800302c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003030:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003032:	4b52      	ldr	r3, [pc, #328]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003046:	3a01      	subs	r2, #1
 8003048:	0212      	lsls	r2, r2, #8
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003050:	430a      	orrs	r2, r1
 8003052:	494a      	ldr	r1, [pc, #296]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8003054:	4313      	orrs	r3, r2
 8003056:	628b      	str	r3, [r1, #40]	; 0x28
 8003058:	4b48      	ldr	r3, [pc, #288]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800305a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305c:	4b49      	ldr	r3, [pc, #292]	; (8003184 <HAL_RCC_OscConfig+0xcd0>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003064:	3a01      	subs	r2, #1
 8003066:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800306e:	3a01      	subs	r2, #1
 8003070:	0252      	lsls	r2, r2, #9
 8003072:	b292      	uxth	r2, r2
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800307a:	3a01      	subs	r2, #1
 800307c:	0412      	lsls	r2, r2, #16
 800307e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003088:	3a01      	subs	r2, #1
 800308a:	0612      	lsls	r2, r2, #24
 800308c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003090:	430a      	orrs	r2, r1
 8003092:	493a      	ldr	r1, [pc, #232]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003098:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	4a37      	ldr	r2, [pc, #220]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800309e:	f023 0310 	bic.w	r3, r3, #16
 80030a2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	4a34      	ldr	r2, [pc, #208]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	4a32      	ldr	r2, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030b4:	f043 0310 	orr.w	r3, r3, #16
 80030b8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80030ba:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	f023 020c 	bic.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	492d      	ldr	r1, [pc, #180]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80030cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0xccc>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_RCC_OscConfig+0xccc>)
 80030da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030de:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80030e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	4a23      	ldr	r2, [pc, #140]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 80030fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003102:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003110:	f7fe fd02 	bl	8001b18 <HAL_GetTick>
 8003114:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fcfe 	bl	8001b18 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e099      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xc64>
 8003136:	e091      	b.n	800325c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0f      	ldr	r2, [pc, #60]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003144:	f7fe fce8 	bl	8001b18 <HAL_GetTick>
 8003148:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fce4 	bl	8001b18 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e07f      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	4a03      	ldr	r2, [pc, #12]	; (800317c <HAL_RCC_OscConfig+0xcc8>)
 8003170:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003174:	f023 0303 	bic.w	r3, r3, #3
 8003178:	6293      	str	r3, [r2, #40]	; 0x28
 800317a:	e06f      	b.n	800325c <HAL_RCC_OscConfig+0xda8>
 800317c:	46020c00 	.word	0x46020c00
 8003180:	46020800 	.word	0x46020800
 8003184:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003188:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	2b01      	cmp	r3, #1
 800319a:	d039      	beq.n	8003210 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0203 	and.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d132      	bne.n	8003210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d129      	bne.n	8003210 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d122      	bne.n	8003210 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d11a      	bne.n	8003210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d111      	bne.n	8003210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d108      	bne.n	8003210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	0e1b      	lsrs	r3, r3, #24
 8003202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e024      	b.n	800325e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003222:	429a      	cmp	r2, r3
 8003224:	d01a      	beq.n	800325c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 800322c:	f023 0310 	bic.w	r3, r3, #16
 8003230:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe fc71 	bl	8001b18 <HAL_GetTick>
 8003236:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003238:	bf00      	nop
 800323a:	f7fe fc6d 	bl	8001b18 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	4293      	cmp	r3, r2
 8003244:	d0f9      	beq.n	800323a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_RCC_OscConfig+0xdb4>)
 8003256:	f043 0310 	orr.w	r3, r3, #16
 800325a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3738      	adds	r7, #56	; 0x38
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	46020c00 	.word	0x46020c00

0800326c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e1d9      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003280:	4b9b      	ldr	r3, [pc, #620]	; (80034f0 <HAL_RCC_ClockConfig+0x284>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d910      	bls.n	80032b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b98      	ldr	r3, [pc, #608]	; (80034f0 <HAL_RCC_ClockConfig+0x284>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 020f 	bic.w	r2, r3, #15
 8003296:	4996      	ldr	r1, [pc, #600]	; (80034f0 <HAL_RCC_ClockConfig+0x284>)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b94      	ldr	r3, [pc, #592]	; (80034f0 <HAL_RCC_ClockConfig+0x284>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e1c1      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d908      	bls.n	80032de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80032cc:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	4986      	ldr	r1, [pc, #536]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d909      	bls.n	8003310 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80032fc:	4b7d      	ldr	r3, [pc, #500]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	497a      	ldr	r1, [pc, #488]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 800330c:	4313      	orrs	r3, r2
 800330e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003328:	429a      	cmp	r2, r3
 800332a:	d908      	bls.n	800333e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b71      	ldr	r3, [pc, #452]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	496e      	ldr	r1, [pc, #440]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 800333a:	4313      	orrs	r3, r2
 800333c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	429a      	cmp	r2, r3
 8003358:	d908      	bls.n	800336c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800335a:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 020f 	bic.w	r2, r3, #15
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4963      	ldr	r1, [pc, #396]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003368:	4313      	orrs	r3, r2
 800336a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80d2 	beq.w	800351e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d143      	bne.n	800340e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b5b      	ldr	r3, [pc, #364]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d110      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339a:	4a56      	ldr	r2, [pc, #344]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033a4:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80033b6:	f7fe fbaf 	bl	8001b18 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80033bc:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <HAL_RCC_ClockConfig+0x28c>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00f      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80033ca:	f7fe fba5 	bl	8001b18 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e12b      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80033dc:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_RCC_ClockConfig+0x28c>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80033f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f4:	4a3f      	ldr	r2, [pc, #252]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d121      	bne.n	800344e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e112      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e106      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0fa      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0f2      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4926      	ldr	r1, [pc, #152]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 800345c:	4313      	orrs	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003460:	f7fe fb5a 	bl	8001b18 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d112      	bne.n	8003494 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fe fb52 	bl	8001b18 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0d6      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d1ee      	bne.n	8003470 <HAL_RCC_ClockConfig+0x204>
 8003492:	e044      	b.n	800351e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d112      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349e:	f7fe fb3b 	bl	8001b18 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0bf      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d1ee      	bne.n	800349e <HAL_RCC_ClockConfig+0x232>
 80034c0:	e02d      	b.n	800351e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d123      	bne.n	8003512 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fe fb24 	bl	8001b18 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0a8      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_RCC_ClockConfig+0x288>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ee      	bne.n	80034cc <HAL_RCC_ClockConfig+0x260>
 80034ee:	e016      	b.n	800351e <HAL_RCC_ClockConfig+0x2b2>
 80034f0:	40022000 	.word	0x40022000
 80034f4:	46020c00 	.word	0x46020c00
 80034f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fe fb0c 	bl	8001b18 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e090      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003512:	4b4a      	ldr	r3, [pc, #296]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d1ee      	bne.n	80034fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	429a      	cmp	r2, r3
 8003538:	d208      	bcs.n	800354c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 020f 	bic.w	r2, r3, #15
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	493d      	ldr	r1, [pc, #244]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 8003548:	4313      	orrs	r3, r2
 800354a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800354c:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <HAL_RCC_ClockConfig+0x3d4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d210      	bcs.n	800357c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_ClockConfig+0x3d4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	4937      	ldr	r1, [pc, #220]	; (8003640 <HAL_RCC_ClockConfig+0x3d4>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b35      	ldr	r3, [pc, #212]	; (8003640 <HAL_RCC_ClockConfig+0x3d4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e05b      	b.n	8003634 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d010      	beq.n	80035aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003594:	429a      	cmp	r2, r3
 8003596:	d208      	bcs.n	80035aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4925      	ldr	r1, [pc, #148]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d209      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80035c8:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4919      	ldr	r1, [pc, #100]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d208      	bcs.n	800360a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	490d      	ldr	r1, [pc, #52]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800360a:	f000 f821 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x3d0>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	490a      	ldr	r1, [pc, #40]	; (8003644 <HAL_RCC_ClockConfig+0x3d8>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x3dc>)
 8003622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x3e0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fa2b 	bl	8001a84 <HAL_InitTick>
 800362e:	4603      	mov	r3, r0
 8003630:	73fb      	strb	r3, [r7, #15]

  return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	46020c00 	.word	0x46020c00
 8003640:	40022000 	.word	0x40022000
 8003644:	0800a1f0 	.word	0x0800a1f0
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004

08003650 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b08b      	sub	sp, #44	; 0x2c
 8003654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	4b78      	ldr	r3, [pc, #480]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x34>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d121      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d11e      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003684:	4b71      	ldr	r3, [pc, #452]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003690:	4b6e      	ldr	r3, [pc, #440]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003696:	0b1b      	lsrs	r3, r3, #12
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e005      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	0f1b      	lsrs	r3, r3, #28
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036ac:	4a68      	ldr	r2, [pc, #416]	; (8003850 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d110      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c0:	e00d      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c2:	4b62      	ldr	r3, [pc, #392]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036ce:	4b61      	ldr	r3, [pc, #388]	; (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	e004      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d101      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036da:	4b5e      	ldr	r3, [pc, #376]	; (8003854 <HAL_RCC_GetSysClockFreq+0x204>)
 80036dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	f040 80ac 	bne.w	800383e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036e6:	4b59      	ldr	r3, [pc, #356]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036f0:	4b56      	ldr	r3, [pc, #344]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80036fe:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800370a:	4b50      	ldr	r3, [pc, #320]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8086 	beq.w	800383a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d003      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0xec>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d022      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x130>
 800373a:	e043      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003858 <HAL_RCC_GetSysClockFreq+0x208>
 800374a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800375e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003762:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800385c <HAL_RCC_GetSysClockFreq+0x20c>
 8003766:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800376a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800376e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003772:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800377e:	e046      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003858 <HAL_RCC_GetSysClockFreq+0x208>
 800378e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003792:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037a2:	ed97 6a01 	vldr	s12, [r7, #4]
 80037a6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800385c <HAL_RCC_GetSysClockFreq+0x20c>
 80037aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037be:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80037c2:	e024      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037ec:	ed97 6a01 	vldr	s12, [r7, #4]
 80037f0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800385c <HAL_RCC_GetSysClockFreq+0x20c>
 80037f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003800:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003808:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800380c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	0e1b      	lsrs	r3, r3, #24
 8003814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003818:	3301      	adds	r3, #1
 800381a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003826:	edd7 6a07 	vldr	s13, [r7, #28]
 800382a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 3a90 	vmov	r3, s15
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	e001      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800383e:	6a3b      	ldr	r3, [r7, #32]
}
 8003840:	4618      	mov	r0, r3
 8003842:	372c      	adds	r7, #44	; 0x2c
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	46020c00 	.word	0x46020c00
 8003850:	0800a208 	.word	0x0800a208
 8003854:	00f42400 	.word	0x00f42400
 8003858:	4b742400 	.word	0x4b742400
 800385c:	46000000 	.word	0x46000000

08003860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003864:	f7ff fef4 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b07      	ldr	r3, [pc, #28]	; (8003888 <HAL_RCC_GetHCLKFreq+0x28>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	4906      	ldr	r1, [pc, #24]	; (800388c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003874:	5ccb      	ldrb	r3, [r1, r3]
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_RCC_GetHCLKFreq+0x30>)
 800387c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_RCC_GetHCLKFreq+0x30>)
 8003880:	681b      	ldr	r3, [r3, #0]
}
 8003882:	4618      	mov	r0, r3
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	46020c00 	.word	0x46020c00
 800388c:	0800a1f0 	.word	0x0800a1f0
 8003890:	20000000 	.word	0x20000000

08003894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003898:	f7ff ffe2 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	46020c00 	.word	0x46020c00
 80038b8:	0800a200 	.word	0x0800a200

080038bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80038c0:	f7ff ffce 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	46020c00 	.word	0x46020c00
 80038e0:	0800a200 	.word	0x0800a200

080038e4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80038e8:	f7ff ffba 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetPCLK3Freq+0x20>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCC_GetPCLK3Freq+0x24>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	46020c00 	.word	0x46020c00
 8003908:	0800a200 	.word	0x0800a200

0800390c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003914:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003922:	f7fe fda9 	bl	8002478 <HAL_PWREx_GetVoltageRange>
 8003926:	6178      	str	r0, [r7, #20]
 8003928:	e019      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800393a:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003948:	f7fe fd96 	bl	8002478 <HAL_PWREx_GetVoltageRange>
 800394c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003954:	4a2e      	ldr	r2, [pc, #184]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003964:	d003      	beq.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800396c:	d109      	bne.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003974:	d202      	bcs.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003976:	2301      	movs	r3, #1
 8003978:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800397a:	e033      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003980:	e030      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003988:	d208      	bcs.n	800399c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d102      	bne.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003992:	2303      	movs	r3, #3
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e025      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e035      	b.n	8003a08 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a2:	d90f      	bls.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039b0:	d902      	bls.n	80039b8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	e015      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80039b8:	2301      	movs	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e012      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e00f      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ca:	d109      	bne.n	80039e0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d102      	bne.n	80039da <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80039d4:	2301      	movs	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e004      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80039da:	2302      	movs	r3, #2
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e001      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80039e0:	2301      	movs	r3, #1
 80039e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 020f 	bic.w	r2, r3, #15
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	46020c00 	.word	0x46020c00
 8003a14:	40022000 	.word	0x40022000

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a1c:	b0b6      	sub	sp, #216	; 0xd8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f002 0401 	and.w	r4, r2, #1
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	ea54 0305 	orrs.w	r3, r4, r5
 8003a42:	d00b      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003a44:	4bc5      	ldr	r3, [pc, #788]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4a:	f023 0103 	bic.w	r1, r3, #3
 8003a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	4ac1      	ldr	r2, [pc, #772]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f002 0804 	and.w	r8, r2, #4
 8003a68:	f04f 0900 	mov.w	r9, #0
 8003a6c:	ea58 0309 	orrs.w	r3, r8, r9
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a72:	4bba      	ldr	r3, [pc, #744]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	4ab6      	ldr	r2, [pc, #728]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f002 0a08 	and.w	sl, r2, #8
 8003a96:	f04f 0b00 	mov.w	fp, #0
 8003a9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003aa0:	4bae      	ldr	r3, [pc, #696]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4aaa      	ldr	r2, [pc, #680]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f002 0310 	and.w	r3, r2, #16
 8003ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ace:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003ad8:	4ba0      	ldr	r3, [pc, #640]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	4a9c      	ldr	r2, [pc, #624]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003af0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f002 0320 	and.w	r3, r2, #32
 8003afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b10:	4b92      	ldr	r3, [pc, #584]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b16:	f023 0107 	bic.w	r1, r3, #7
 8003b1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	4a8e      	ldr	r2, [pc, #568]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b3e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b48:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b58:	4a80      	ldr	r2, [pc, #512]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b76:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b80:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b90:	4a72      	ldr	r2, [pc, #456]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b92:	430b      	orrs	r3, r1
 8003b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003bb8:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc8:	4a64      	ldr	r2, [pc, #400]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003be6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003bf0:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bf6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a56      	ldr	r2, [pc, #344]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c22:	460b      	mov	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003c28:	4b4c      	ldr	r3, [pc, #304]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c2e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c66:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c70:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c86:	2300      	movs	r3, #0
 8003c88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4313      	orrs	r3, r2
 8003c92:	d00b      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca4:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003cb8:	673b      	str	r3, [r7, #112]	; 0x70
 8003cba:	2300      	movs	r3, #0
 8003cbc:	677b      	str	r3, [r7, #116]	; 0x74
 8003cbe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	d04f      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	d02d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d827      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003cd8:	2b60      	cmp	r3, #96	; 0x60
 8003cda:	d02b      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d823      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d006      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d81f      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d011      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003cf0:	e01a      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cfe:	e01a      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d04:	3308      	adds	r3, #8
 8003d06:	4618      	mov	r0, r3
 8003d08:	f002 f93e 	bl	8005f88 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d12:	e010      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d18:	332c      	adds	r3, #44	; 0x2c
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 f9cc 	bl	80060b8 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d26:	e006      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d36:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d110      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d44:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	4a02      	ldr	r2, [pc, #8]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d52:	430b      	orrs	r3, r1
 8003d54:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003d5a:	bf00      	nop
 8003d5c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003d64:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d76:	2300      	movs	r3, #0
 8003d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d046      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d8c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d90:	d028      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003d92:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d96:	d821      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d022      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d81b      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da8:	d01c      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dae:	d815      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	d80f      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d011      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d00e      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dc6:	e009      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dcc:	3308      	adds	r3, #8
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f002 f8da 	bl	8005f88 <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003dda:	e004      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8003de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10d      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003dee:	4bb6      	ldr	r3, [pc, #728]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003df4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e00:	4ab1      	ldr	r2, [pc, #708]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e02:	430b      	orrs	r3, r1
 8003e04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e0e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e20:	2300      	movs	r3, #0
 8003e22:	667b      	str	r3, [r7, #100]	; 0x64
 8003e24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d03e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d81d      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e63 	.word	0x08003e63
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e54:	4b9c      	ldr	r3, [pc, #624]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	4a9b      	ldr	r2, [pc, #620]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003e60:	e00e      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e66:	332c      	adds	r3, #44	; 0x2c
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 f925 	bl	80060b8 <RCCEx_PLL3_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003e7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e80:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10d      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003e88:	4b8f      	ldr	r3, [pc, #572]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e8e:	f023 0107 	bic.w	r1, r3, #7
 8003e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	4a8b      	ldr	r2, [pc, #556]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003ea8:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eba:	2300      	movs	r3, #0
 8003ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ebe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d04a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003ed6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eda:	d821      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ee0:	d024      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ee2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ee6:	d81b      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eec:	d00e      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ef2:	d815      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d110      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003efe:	4b72      	ldr	r3, [pc, #456]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	4a71      	ldr	r2, [pc, #452]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f0a:	e012      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f10:	332c      	adds	r3, #44	; 0x2c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f002 f8d0 	bl	80060b8 <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003f1e:	e008      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003f30:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f32:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003f3a:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	4a5e      	ldr	r2, [pc, #376]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003f5a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f70:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f000 80ba 	beq.w	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d113      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f90:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f96:	4a4c      	ldr	r2, [pc, #304]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fa0:	4b49      	ldr	r3, [pc, #292]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003fb8:	4b44      	ldr	r3, [pc, #272]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	4a43      	ldr	r2, [pc, #268]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc4:	f7fd fda8 	bl	8001b18 <HAL_GetTick>
 8003fc8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fcc:	e00b      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7fd fda3 	bl	8001b18 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d903      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ed      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8003ff2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d16a      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ffa:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d023      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004014:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800401c:	4293      	cmp	r3, r2
 800401e:	d01b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004020:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800402e:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004034:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800404e:	4a1e      	ldr	r2, [pc, #120]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004054:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d019      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd fd58 	bl	8001b18 <HAL_GetTick>
 8004068:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406c:	e00d      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd fd53 	bl	8001b18 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004078:	1ad2      	subs	r2, r2, r3
 800407a:	f241 3388 	movw	r3, #5000	; 0x1388
 800407e:	429a      	cmp	r2, r3
 8004080:	d903      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 8004088:	e006      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800408c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ea      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8004098:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10d      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040b2:	4a05      	ldr	r2, [pc, #20]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040ba:	e00d      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040bc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80040c0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80040c4:	e008      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80040c6:	bf00      	nop
 80040c8:	46020c00 	.word	0x46020c00
 80040cc:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80040d4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d8:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e0:	4bb2      	ldr	r3, [pc, #712]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e6:	4ab1      	ldr	r2, [pc, #708]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80040f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040fe:	2300      	movs	r3, #0
 8004100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004102:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d042      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800410c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004114:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004118:	d022      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800411a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800411e:	d81b      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004124:	d011      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x732>
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800412a:	d815      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d019      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004134:	d110      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004136:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800413a:	3308      	adds	r3, #8
 800413c:	4618      	mov	r0, r3
 800413e:	f001 ff23 	bl	8005f88 <RCCEx_PLL2_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004148:	e00d      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414a:	4b98      	ldr	r3, [pc, #608]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	4a97      	ldr	r2, [pc, #604]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004154:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004156:	e006      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800415e:	e002      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004164:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004166:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800416e:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004174:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800417c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004180:	4a8a      	ldr	r2, [pc, #552]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004182:	430b      	orrs	r3, r1
 8004184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800418e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800419e:	643b      	str	r3, [r7, #64]	; 0x40
 80041a0:	2300      	movs	r3, #0
 80041a2:	647b      	str	r3, [r7, #68]	; 0x44
 80041a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80041a8:	460b      	mov	r3, r1
 80041aa:	4313      	orrs	r3, r2
 80041ac:	d02d      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80041ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ba:	d00b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80041bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c0:	d804      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d007      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80041d4:	bf00      	nop
 80041d6:	e002      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80041dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041de:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80041e6:	4b71      	ldr	r3, [pc, #452]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	4a6c      	ldr	r2, [pc, #432]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80041fa:	430b      	orrs	r3, r1
 80041fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004206:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800420a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
 8004218:	2300      	movs	r3, #0
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d00c      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004228:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800422c:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	4a5c      	ldr	r2, [pc, #368]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800423a:	430b      	orrs	r3, r1
 800423c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
 800424e:	2300      	movs	r3, #0
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
 8004252:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d019      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800425c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004268:	d105      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800426a:	4b50      	ldr	r3, [pc, #320]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	4a4f      	ldr	r2, [pc, #316]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004276:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004278:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800427c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004288:	4a48      	ldr	r2, [pc, #288]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800428a:	430b      	orrs	r3, r1
 800428c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	2300      	movs	r3, #0
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80042ac:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042be:	493b      	ldr	r1, [pc, #236]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80042c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	2300      	movs	r3, #0
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d00c      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f4:	492d      	ldr	r1, [pc, #180]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80042fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d00c      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800431a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800431e:	f023 0218 	bic.w	r2, r3, #24
 8004322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800432a:	4920      	ldr	r1, [pc, #128]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d034      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800434e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004352:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800435a:	d105      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004366:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800436c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004374:	d108      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800437a:	3308      	adds	r3, #8
 800437c:	4618      	mov	r0, r3
 800437e:	f001 fe03 	bl	8005f88 <RCCEx_PLL2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 8004388:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10f      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004392:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800439a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800439e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043a2:	4902      	ldr	r1, [pc, #8]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80043aa:	e005      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80043ac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80043b4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80043b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043ce:	460b      	mov	r3, r1
 80043d0:	4313      	orrs	r3, r2
 80043d2:	d03a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80043d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043e0:	d00e      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80043e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043e6:	d815      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d017      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f0:	d110      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f2:	4b27      	ldr	r3, [pc, #156]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	4a26      	ldr	r2, [pc, #152]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80043fe:	e00e      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004404:	3308      	adds	r3, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f001 fdbe 	bl	8005f88 <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004412:	e004      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 800441c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800441e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800442c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004438:	4915      	ldr	r1, [pc, #84]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004440:	e003      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004442:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004446:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800444a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	2300      	movs	r3, #0
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004460:	460b      	mov	r3, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	d00c      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800446c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004478:	4905      	ldr	r1, [pc, #20]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004480:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 8004484:	4618      	mov	r0, r3
 8004486:	37d8      	adds	r7, #216	; 0xd8
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448e:	bf00      	nop
 8004490:	46020c00 	.word	0x46020c00

08004494 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800449c:	4bad      	ldr	r3, [pc, #692]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80044a6:	4bab      	ldr	r3, [pc, #684]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80044b0:	4ba8      	ldr	r3, [pc, #672]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3301      	adds	r3, #1
 80044bc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80044be:	4ba5      	ldr	r3, [pc, #660]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80044ca:	4ba2      	ldr	r3, [pc, #648]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	08db      	lsrs	r3, r3, #3
 80044d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8123 	beq.w	8004734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d062      	beq.n	80045ba <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	f200 8081 	bhi.w	80045fe <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d024      	beq.n	800454c <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d17a      	bne.n	80045fe <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b8e      	ldr	r3, [pc, #568]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800452a:	ed97 6a02 	vldr	s12, [r7, #8]
 800452e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800475c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454a:	e08f      	b.n	800466c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800454c:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	0f1b      	lsrs	r3, r3, #28
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	e006      	b.n	8004572 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8004564:	4b7b      	ldr	r3, [pc, #492]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	0f1b      	lsrs	r3, r3, #28
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a7b      	ldr	r2, [pc, #492]	; (8004760 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004598:	ed97 6a02 	vldr	s12, [r7, #8]
 800459c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800475c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80045a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045b8:	e058      	b.n	800466c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80045c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045cc:	4b61      	ldr	r3, [pc, #388]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800475c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80045e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045fc:	e036      	b.n	800466c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045fe:	4b55      	ldr	r3, [pc, #340]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800460a:	4b52      	ldr	r3, [pc, #328]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0f1b      	lsrs	r3, r3, #28
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8004616:	4b4f      	ldr	r3, [pc, #316]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	0f1b      	lsrs	r3, r3, #28
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	4a4e      	ldr	r2, [pc, #312]	; (8004760 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a02 	vldr	s12, [r7, #8]
 800464e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800475c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800466a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d017      	beq.n	80046a8 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	0a5b      	lsrs	r3, r3, #9
 800467e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800468a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800468e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004692:	edd7 6a07 	vldr	s13, [r7, #28]
 8004696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469e:	ee17 2a90 	vmov	r2, s15
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80046ae:	4b29      	ldr	r3, [pc, #164]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d017      	beq.n	80046ea <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80046cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e0:	ee17 2a90 	vmov	r2, s15
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	e002      	b.n	80046f0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80046fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004700:	0e1b      	lsrs	r3, r3, #24
 8004702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800470e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004712:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004716:	edd7 6a07 	vldr	s13, [r7, #28]
 800471a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800471e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004722:	ee17 2a90 	vmov	r2, s15
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800472a:	e00c      	b.n	8004746 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	e008      	b.n	8004746 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
}
 8004746:	bf00      	nop
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	46020c00 	.word	0x46020c00
 8004758:	4b742400 	.word	0x4b742400
 800475c:	46000000 	.word	0x46000000
 8004760:	0800a208 	.word	0x0800a208

08004764 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800476c:	4bad      	ldr	r3, [pc, #692]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004774:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004776:	4bab      	ldr	r3, [pc, #684]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004780:	4ba8      	ldr	r3, [pc, #672]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	3301      	adds	r3, #1
 800478c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800478e:	4ba5      	ldr	r3, [pc, #660]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800479a:	4ba2      	ldr	r3, [pc, #648]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	08db      	lsrs	r3, r3, #3
 80047a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8123 	beq.w	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d062      	beq.n	800488a <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	f200 8081 	bhi.w	80048ce <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d024      	beq.n	800481c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d17a      	bne.n	80048ce <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b8e      	ldr	r3, [pc, #568]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80047fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fe:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481a:	e08f      	b.n	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800481c:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8004828:	4b7e      	ldr	r3, [pc, #504]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	0f1b      	lsrs	r3, r3, #28
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	e006      	b.n	8004842 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8004834:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004836:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	0f1b      	lsrs	r3, r3, #28
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	4a7b      	ldr	r2, [pc, #492]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004868:	ed97 6a02 	vldr	s12, [r7, #8]
 800486c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004888:	e058      	b.n	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004894:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489c:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80048ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80048b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80048bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048cc:	e036      	b.n	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80048ce:	4b55      	ldr	r3, [pc, #340]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 80048da:	4b52      	ldr	r3, [pc, #328]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0f1b      	lsrs	r3, r3, #28
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 80048e6:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	0f1b      	lsrs	r3, r3, #28
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	4a4e      	ldr	r2, [pc, #312]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80048f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a02 	vldr	s12, [r7, #8]
 800491e:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493a:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800493c:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004948:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	0a5b      	lsrs	r3, r3, #9
 800494e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800495a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800495e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004962:	edd7 6a07 	vldr	s13, [r7, #28]
 8004966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496e:	ee17 2a90 	vmov	r2, s15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e002      	b.n	800497e <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800498a:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800499c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b0:	ee17 2a90 	vmov	r2, s15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	e002      	b.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80049c0:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d017      	beq.n	80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049cc:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	0e1b      	lsrs	r3, r3, #24
 80049d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80049de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f2:	ee17 2a90 	vmov	r2, s15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049fa:	e00c      	b.n	8004a16 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
}
 8004a02:	e008      	b.n	8004a16 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	46020c00 	.word	0x46020c00
 8004a28:	4b742400 	.word	0x4b742400
 8004a2c:	46000000 	.word	0x46000000
 8004a30:	0800a208 	.word	0x0800a208

08004a34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b089      	sub	sp, #36	; 0x24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004a3c:	4bad      	ldr	r3, [pc, #692]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a44:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004a46:	4bab      	ldr	r3, [pc, #684]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004a50:	4ba8      	ldr	r3, [pc, #672]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004a5e:	4ba5      	ldr	r3, [pc, #660]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004a6a:	4ba2      	ldr	r3, [pc, #648]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6e:	08db      	lsrs	r3, r3, #3
 8004a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8123 	beq.w	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d062      	beq.n	8004b5a <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	f200 8081 	bhi.w	8004b9e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d024      	beq.n	8004aec <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d17a      	bne.n	8004b9e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b8e      	ldr	r3, [pc, #568]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ace:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004aea:	e08f      	b.n	8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004aec:	4b81      	ldr	r3, [pc, #516]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004af8:	4b7e      	ldr	r3, [pc, #504]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	0f1b      	lsrs	r3, r3, #28
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	e006      	b.n	8004b12 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004b04:	4b7b      	ldr	r3, [pc, #492]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	0f1b      	lsrs	r3, r3, #28
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	4a7b      	ldr	r2, [pc, #492]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b3c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b58:	e058      	b.n	8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b64:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b80:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9c:	e036      	b.n	8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b9e:	4b55      	ldr	r3, [pc, #340]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004baa:	4b52      	ldr	r3, [pc, #328]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0f1b      	lsrs	r3, r3, #28
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004bb6:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	0f1b      	lsrs	r3, r3, #28
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	4a4e      	ldr	r2, [pc, #312]	; (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	ee07 3a90 	vmov	s15, r3
 8004bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bee:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004c0c:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d017      	beq.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	0a5b      	lsrs	r3, r3, #9
 8004c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3e:	ee17 2a90 	vmov	r2, s15
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004c4e:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	0c1b      	lsrs	r3, r3, #16
 8004c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c70:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c80:	ee17 2a90 	vmov	r2, s15
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	e002      	b.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004c90:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d017      	beq.n	8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c9c:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	0e1b      	lsrs	r3, r3, #24
 8004ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc2:	ee17 2a90 	vmov	r2, s15
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004cca:	e00c      	b.n	8004ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	3724      	adds	r7, #36	; 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	46020c00 	.word	0x46020c00
 8004cf8:	4b742400 	.word	0x4b742400
 8004cfc:	46000000 	.word	0x46000000
 8004d00:	0800a208 	.word	0x0800a208

08004d04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08e      	sub	sp, #56	; 0x38
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d12:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004d16:	430b      	orrs	r3, r1
 8004d18:	d145      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d1a:	4b9b      	ldr	r3, [pc, #620]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d24:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004d26:	4b98      	ldr	r3, [pc, #608]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d108      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3a:	d104      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
 8004d42:	f001 b912 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004d46:	4b90      	ldr	r3, [pc, #576]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d54:	d114      	bne.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5c:	d110      	bne.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d5e:	4b8a      	ldr	r3, [pc, #552]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6c:	d103      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004d6e:	23fa      	movs	r3, #250	; 0xfa
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d72:	f001 b8fa 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d7c:	f001 b8f5 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004d80:	4b81      	ldr	r3, [pc, #516]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d103      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004d96:	4b7d      	ldr	r3, [pc, #500]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9a:	f001 b8e6 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
 8004da2:	f001 b8e2 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004daa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004dae:	430b      	orrs	r3, r1
 8004db0:	d151      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004db2:	4b75      	ldr	r3, [pc, #468]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004db4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004db8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2b80      	cmp	r3, #128	; 0x80
 8004dc2:	d035      	beq.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d841      	bhi.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2b60      	cmp	r3, #96	; 0x60
 8004dce:	d02a      	beq.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	2b60      	cmp	r3, #96	; 0x60
 8004dd4:	d83b      	bhi.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d009      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2b40      	cmp	r3, #64	; 0x40
 8004de0:	d835      	bhi.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d012      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004dee:	e02e      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fb4d 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dfe:	f001 b8b4 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e02:	f107 0318 	add.w	r3, r7, #24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fcac 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e10:	f001 b8ab 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e14:	f107 030c 	add.w	r3, r7, #12
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fe0b 	bl	8004a34 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e22:	f001 b8a2 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e2c:	f001 b89d 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e30:	4b55      	ldr	r3, [pc, #340]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3c:	d103      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004e3e:	4b54      	ldr	r3, [pc, #336]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e42:	f001 b892 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e4a:	f001 b88e 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e52:	f001 b88a 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	d126      	bne.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004e62:	4b49      	ldr	r3, [pc, #292]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6c:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004e6e:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34
 8004e86:	f001 b870 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004e8a:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e96:	d107      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9e:	d103      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004ea0:	4b3c      	ldr	r3, [pc, #240]	; (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea4:	f001 b861 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8004eac:	f001 b85d 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	d171      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004ebc:	4b32      	ldr	r3, [pc, #200]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ec2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ece:	d034      	beq.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ed6:	d853      	bhi.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ede:	d00b      	beq.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee6:	d84b      	bhi.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d016      	beq.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8004ef6:	e043      	b.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fac9 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f06:	f001 b830 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f0a:	f107 0318 	add.w	r3, r7, #24
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fc28 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f18:	f001 b827 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d103      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8004f2a:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f2e:	f001 b81c 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f36:	f001 b818 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d118      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0e1b      	lsrs	r3, r3, #24
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	e006      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	0e1b      	lsrs	r3, r3, #24
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f74:	f000 bff9 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f7c:	f000 bff5 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f84:	f000 bff1 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004f88:	46020c00 	.word	0x46020c00
 8004f8c:	0007a120 	.word	0x0007a120
 8004f90:	00f42400 	.word	0x00f42400
 8004f94:	007a1200 	.word	0x007a1200
 8004f98:	02dc6c00 	.word	0x02dc6c00
 8004f9c:	0800a208 	.word	0x0800a208
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	d17f      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004fac:	4ba8      	ldr	r3, [pc, #672]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004fae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d165      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004fbe:	4ba4      	ldr	r3, [pc, #656]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fc4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004fc8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fd0:	d034      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fd8:	d853      	bhi.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe0:	d00b      	beq.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe8:	d84b      	bhi.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d016      	beq.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff6:	d009      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004ff8:	e043      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fa48 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005008:	f000 bfaf 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800500c:	f107 0318 	add.w	r3, r7, #24
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fba7 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800501a:	f000 bfa6 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800501e:	4b8c      	ldr	r3, [pc, #560]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502a:	d103      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 800502c:	4b89      	ldr	r3, [pc, #548]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005030:	f000 bf9b 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005038:	f000 bf97 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800503c:	4b84      	ldr	r3, [pc, #528]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b20      	cmp	r3, #32
 8005046:	d118      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005048:	4b81      	ldr	r3, [pc, #516]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005054:	4b7e      	ldr	r3, [pc, #504]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	0e1b      	lsrs	r3, r3, #24
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	e006      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8005060:	4b7b      	ldr	r3, [pc, #492]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	4a7a      	ldr	r2, [pc, #488]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005076:	f000 bf78 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800507e:	f000 bf74 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005086:	f000 bf70 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005090:	d108      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff f9fc 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
 80050a0:	f000 bf63 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
 80050a8:	f000 bf5f 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80050ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b0:	1e51      	subs	r1, r2, #1
 80050b2:	430b      	orrs	r3, r1
 80050b4:	d136      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80050b6:	4b66      	ldr	r3, [pc, #408]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fe fbf8 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 80050cc:	6378      	str	r0, [r7, #52]	; 0x34
 80050ce:	f000 bf4c 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d104      	bne.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050d8:	f7fe faba 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80050dc:	6378      	str	r0, [r7, #52]	; 0x34
 80050de:	f000 bf44 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80050e2:	4b5b      	ldr	r3, [pc, #364]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ee:	d106      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d103      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
 80050fa:	f000 bf36 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80050fe:	4b54      	ldr	r3, [pc, #336]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b02      	cmp	r3, #2
 800510a:	d107      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2b03      	cmp	r3, #3
 8005110:	d104      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005116:	637b      	str	r3, [r7, #52]	; 0x34
 8005118:	f000 bf27 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
 8005120:	f000 bf23 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005128:	1f11      	subs	r1, r2, #4
 800512a:	430b      	orrs	r3, r1
 800512c:	d136      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800512e:	4b48      	ldr	r3, [pc, #288]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005134:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005138:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005140:	f7fe fba8 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005144:	6378      	str	r0, [r7, #52]	; 0x34
 8005146:	f000 bf10 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	2b10      	cmp	r3, #16
 800514e:	d104      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005150:	f7fe fa7e 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005154:	6378      	str	r0, [r7, #52]	; 0x34
 8005156:	f000 bf08 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800515a:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005166:	d106      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	2b20      	cmp	r3, #32
 800516c:	d103      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 800516e:	4b3b      	ldr	r3, [pc, #236]	; (800525c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
 8005172:	f000 befa 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005176:	4b36      	ldr	r3, [pc, #216]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d107      	bne.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2b30      	cmp	r3, #48	; 0x30
 8005188:	d104      	bne.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800518a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
 8005190:	f000 beeb 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
 8005198:	f000 bee7 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800519c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a0:	f1a2 0108 	sub.w	r1, r2, #8
 80051a4:	430b      	orrs	r3, r1
 80051a6:	d136      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80051a8:	4b29      	ldr	r3, [pc, #164]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051ba:	f7fe fb6b 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 80051be:	6378      	str	r0, [r7, #52]	; 0x34
 80051c0:	f000 bed3 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	2b40      	cmp	r3, #64	; 0x40
 80051c8:	d104      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fe fa41 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80051ce:	6378      	str	r0, [r7, #52]	; 0x34
 80051d0:	f000 becb 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80051d4:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d106      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d103      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34
 80051ec:	f000 bebd 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80051f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d107      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2bc0      	cmp	r3, #192	; 0xc0
 8005202:	d104      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8005204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	f000 beae 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	f000 beaa 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521a:	f1a2 0110 	sub.w	r1, r2, #16
 800521e:	430b      	orrs	r3, r1
 8005220:	d141      	bne.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005234:	f7fe fb2e 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005238:	6378      	str	r0, [r7, #52]	; 0x34
 800523a:	f000 be96 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005244:	d10c      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005246:	f7fe fa03 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800524a:	6378      	str	r0, [r7, #52]	; 0x34
 800524c:	f000 be8d 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005250:	46020c00 	.word	0x46020c00
 8005254:	02dc6c00 	.word	0x02dc6c00
 8005258:	0800a208 	.word	0x0800a208
 800525c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005260:	4baa      	ldr	r3, [pc, #680]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d107      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d103      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005276:	4ba6      	ldr	r3, [pc, #664]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	f000 be76 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800527e:	4ba3      	ldr	r3, [pc, #652]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d108      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005292:	d104      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8005294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
 800529a:	f000 be66 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
 80052a2:	f000 be62 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80052a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052aa:	f1a2 0120 	sub.w	r1, r2, #32
 80052ae:	430b      	orrs	r3, r1
 80052b0:	d158      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80052b2:	4b96      	ldr	r3, [pc, #600]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80052c4:	f7fe fb0e 	bl	80038e4 <HAL_RCC_GetPCLK3Freq>
 80052c8:	6378      	str	r0, [r7, #52]	; 0x34
 80052ca:	f000 be4e 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d104      	bne.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052d4:	f7fe f9bc 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80052d8:	6378      	str	r0, [r7, #52]	; 0x34
 80052da:	f000 be46 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80052de:	4b8b      	ldr	r3, [pc, #556]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ea:	d106      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d103      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 80052f2:	4b87      	ldr	r3, [pc, #540]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	f000 be38 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80052fa:	4b84      	ldr	r3, [pc, #528]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80052fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d107      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	2b03      	cmp	r3, #3
 800530c:	d104      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
 8005314:	f000 be29 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005318:	4b7c      	ldr	r3, [pc, #496]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b20      	cmp	r3, #32
 8005322:	d11b      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	2b04      	cmp	r3, #4
 8005328:	d118      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800532a:	4b78      	ldr	r3, [pc, #480]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8005336:	4b75      	ldr	r3, [pc, #468]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0e1b      	lsrs	r3, r3, #24
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005342:	4b72      	ldr	r3, [pc, #456]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	0e1b      	lsrs	r3, r3, #24
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	4a70      	ldr	r2, [pc, #448]	; (8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
 8005358:	f000 be07 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
 8005360:	f000 be03 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005368:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800536c:	430b      	orrs	r3, r1
 800536e:	d16c      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005370:	4b66      	ldr	r3, [pc, #408]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005376:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800537a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d104      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005384:	f7fe f964 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005388:	6378      	str	r0, [r7, #52]	; 0x34
 800538a:	f000 bdee 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	d108      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005396:	f107 0318 	add.w	r3, r7, #24
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff f9e2 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
 80053a4:	f000 bde1 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80053ae:	f7fe fa57 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80053b2:	6378      	str	r0, [r7, #52]	; 0x34
 80053b4:	f000 bdd9 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80053be:	d122      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053c0:	4b52      	ldr	r3, [pc, #328]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d118      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053cc:	4b4f      	ldr	r3, [pc, #316]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80053d8:	4b4c      	ldr	r3, [pc, #304]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	0e1b      	lsrs	r3, r3, #24
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	e006      	b.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80053e4:	4b49      	ldr	r3, [pc, #292]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80053e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	0e1b      	lsrs	r3, r3, #24
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	4a48      	ldr	r2, [pc, #288]	; (8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80053f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
 80053fa:	f000 bdb6 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
 8005402:	f000 bdb2 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005406:	4b41      	ldr	r3, [pc, #260]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005412:	d107      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800541a:	d103      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 800541c:	4b3c      	ldr	r3, [pc, #240]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800541e:	637b      	str	r3, [r7, #52]	; 0x34
 8005420:	f000 bda3 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005424:	4b39      	ldr	r3, [pc, #228]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005430:	d107      	bne.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005438:	d103      	bne.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 800543a:	4b35      	ldr	r3, [pc, #212]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	f000 bd94 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
 8005446:	f000 bd90 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800544a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800544e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005452:	430b      	orrs	r3, r1
 8005454:	d160      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005456:	4b2d      	ldr	r3, [pc, #180]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005458:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	2b04      	cmp	r3, #4
 8005466:	d84c      	bhi.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	080054a9 	.word	0x080054a9
 8005474:	08005485 	.word	0x08005485
 8005478:	08005497 	.word	0x08005497
 800547c:	080054b3 	.word	0x080054b3
 8005480:	080054bd 	.word	0x080054bd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff f803 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005492:	f000 bd6a 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005496:	f107 030c 	add.w	r3, r7, #12
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff faca 	bl	8004a34 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054a4:	f000 bd61 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80054a8:	f7fe f9da 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80054ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80054ae:	f000 bd5c 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80054b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054b8:	f000 bd57 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054bc:	4b13      	ldr	r3, [pc, #76]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d118      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	0e1b      	lsrs	r3, r3, #24
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	e006      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	4a09      	ldr	r2, [pc, #36]	; (8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80054f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054f6:	f000 bd38 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054fe:	f000 bd34 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005506:	f000 bd30 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800550a:	bf00      	nop
 800550c:	46020c00 	.word	0x46020c00
 8005510:	00f42400 	.word	0x00f42400
 8005514:	0800a208 	.word	0x0800a208
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551c:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005520:	430b      	orrs	r3, r1
 8005522:	d167      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005524:	4ba0      	ldr	r3, [pc, #640]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800552a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800552e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005536:	d036      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800553e:	d855      	bhi.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005546:	d029      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800554e:	d84d      	bhi.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005556:	d013      	beq.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800555e:	d845      	bhi.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	d015      	beq.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556c:	d13e      	bne.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800556e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe ff8e 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800557c:	f000 bcf5 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff fa55 	bl	8004a34 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800558e:	f000 bcec 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005592:	f7fe f965 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 8005596:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005598:	f000 bce7 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800559c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055a2:	f000 bce2 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055a6:	4b80      	ldr	r3, [pc, #512]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d118      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055b2:	4b7d      	ldr	r3, [pc, #500]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80055be:	4b7a      	ldr	r3, [pc, #488]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	e006      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80055ca:	4b77      	ldr	r3, [pc, #476]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80055cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	4a74      	ldr	r2, [pc, #464]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80055da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055e0:	f000 bcc3 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055e8:	f000 bcbf 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f0:	f000 bcbb 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80055f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f8:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80055fc:	430b      	orrs	r3, r1
 80055fe:	d14c      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005600:	4b69      	ldr	r3, [pc, #420]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005606:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800560a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005612:	f7fe f93f 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005616:	6378      	str	r0, [r7, #52]	; 0x34
 8005618:	f000 bca7 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d104      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005624:	f7fe f814 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005628:	6378      	str	r0, [r7, #52]	; 0x34
 800562a:	f000 bc9e 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800562e:	4b5e      	ldr	r3, [pc, #376]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563a:	d107      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005642:	d103      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8005644:	4b5a      	ldr	r3, [pc, #360]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	f000 bc8f 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800564c:	4b56      	ldr	r3, [pc, #344]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b20      	cmp	r3, #32
 8005656:	d11c      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800565e:	d118      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005660:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800566c:	4b4e      	ldr	r3, [pc, #312]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	0e1b      	lsrs	r3, r3, #24
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	e006      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8005678:	4b4b      	ldr	r3, [pc, #300]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800567a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	4a49      	ldr	r2, [pc, #292]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
 800568e:	f000 bc6c 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
 8005696:	f000 bc68 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800569a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569e:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80056a2:	430b      	orrs	r3, r1
 80056a4:	d14c      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80056a6:	4b40      	ldr	r3, [pc, #256]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fe f8ec 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 80056bc:	6378      	str	r0, [r7, #52]	; 0x34
 80056be:	f000 bc54 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d104      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056ca:	f7fd ffc1 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80056ce:	6378      	str	r0, [r7, #52]	; 0x34
 80056d0:	f000 bc4b 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80056d4:	4b34      	ldr	r3, [pc, #208]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e0:	d107      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e8:	d103      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	f000 bc3c 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80056f2:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d11c      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005704:	d118      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005706:	4b28      	ldr	r3, [pc, #160]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005712:	4b25      	ldr	r3, [pc, #148]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	0e1b      	lsrs	r3, r3, #24
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	e006      	b.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800571e:	4b22      	ldr	r3, [pc, #136]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	0e1b      	lsrs	r3, r3, #24
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800572e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
 8005734:	f000 bc19 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	637b      	str	r3, [r7, #52]	; 0x34
 800573c:	f000 bc15 	b.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005744:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005748:	430b      	orrs	r3, r1
 800574a:	d157      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800574c:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800574e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005752:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005756:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	2bc0      	cmp	r3, #192	; 0xc0
 800575c:	d02a      	beq.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2bc0      	cmp	r3, #192	; 0xc0
 8005762:	d848      	bhi.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d00d      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d842      	bhi.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d011      	beq.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800577c:	e03b      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800577e:	f7fe f8b1 	bl	80038e4 <HAL_RCC_GetPCLK3Freq>
 8005782:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005784:	e3f1      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005792:	d102      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005798:	e3e7      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800579e:	e3e4      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80057a0:	f7fd ff56 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 80057a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80057a6:	e3e0      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80057a8:	46020c00 	.word	0x46020c00
 80057ac:	0800a208 	.word	0x0800a208
 80057b0:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80057b4:	4ba3      	ldr	r3, [pc, #652]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d117      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057c0:	4ba0      	ldr	r3, [pc, #640]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80057cc:	4b9d      	ldr	r3, [pc, #628]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	0e1b      	lsrs	r3, r3, #24
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	e006      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80057d8:	4b9a      	ldr	r3, [pc, #616]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80057da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	0e1b      	lsrs	r3, r3, #24
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	4a98      	ldr	r2, [pc, #608]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057ee:	e3bc      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057f4:	e3b9      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057fa:	e3b6      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80057fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005800:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005804:	430b      	orrs	r3, r1
 8005806:	d147      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005808:	4b8e      	ldr	r3, [pc, #568]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800580a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800580e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005812:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800581a:	f7fe f83b 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 800581e:	6378      	str	r0, [r7, #52]	; 0x34
 8005820:	e3a3      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005828:	d103      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800582a:	f7fd ff11 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800582e:	6378      	str	r0, [r7, #52]	; 0x34
 8005830:	e39b      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005832:	4b84      	ldr	r3, [pc, #528]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	d106      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005846:	d102      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8005848:	4b80      	ldr	r3, [pc, #512]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
 800584c:	e38d      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800584e:	4b7d      	ldr	r3, [pc, #500]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b20      	cmp	r3, #32
 8005858:	d11b      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005860:	d117      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005862:	4b78      	ldr	r3, [pc, #480]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 800586e:	4b75      	ldr	r3, [pc, #468]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	0e1b      	lsrs	r3, r3, #24
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	e006      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800587a:	4b72      	ldr	r3, [pc, #456]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800587c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	0e1b      	lsrs	r3, r3, #24
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	4a6f      	ldr	r2, [pc, #444]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
 8005890:	e36b      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
 8005896:	e368      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80058a0:	430b      	orrs	r3, r1
 80058a2:	d164      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80058a4:	4b67      	ldr	r3, [pc, #412]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d120      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058b6:	4b63      	ldr	r3, [pc, #396]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d117      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058c2:	4b60      	ldr	r3, [pc, #384]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 80058ce:	4b5d      	ldr	r3, [pc, #372]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	0e1b      	lsrs	r3, r3, #24
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	e006      	b.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 80058da:	4b5a      	ldr	r3, [pc, #360]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	0e1b      	lsrs	r3, r3, #24
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	4a57      	ldr	r2, [pc, #348]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80058ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
 80058f0:	e33b      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
 80058f6:	e338      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80058f8:	4b52      	ldr	r3, [pc, #328]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80058fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005906:	d112      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590e:	d10e      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005910:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800591e:	d102      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8005920:	23fa      	movs	r3, #250	; 0xfa
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005924:	e321      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005926:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800592c:	e31d      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800592e:	4b45      	ldr	r3, [pc, #276]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593a:	d106      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005942:	d102      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8005944:	4b41      	ldr	r3, [pc, #260]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
 8005948:	e30f      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800594a:	4b3e      	ldr	r3, [pc, #248]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800594c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d107      	bne.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595e:	d103      	bne.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8005960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	e300      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
 800596c:	e2fd      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800596e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005972:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005976:	430b      	orrs	r3, r1
 8005978:	d16a      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800597a:	4b32      	ldr	r3, [pc, #200]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800597c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005980:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005984:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	2b00      	cmp	r3, #0
 800598a:	d120      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800598c:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b20      	cmp	r3, #32
 8005996:	d117      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80059a4:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	e006      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80059b0:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	0e1b      	lsrs	r3, r3, #24
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
 80059c6:	e2d0      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
 80059cc:	e2cd      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80059ce:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059dc:	d112      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	d10e      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059e6:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80059e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059f4:	d102      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80059f6:	23fa      	movs	r3, #250	; 0xfa
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059fa:	e2b6      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80059fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a02:	e2b2      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005a04:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a10:	d106      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a18:	d102      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1e:	e2a4      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005a20:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a34:	d103      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3c:	e295      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
 8005a42:	e292      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005a44:	46020c00 	.word	0x46020c00
 8005a48:	0800a208 	.word	0x0800a208
 8005a4c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a54:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	d147      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005a5c:	4b9a      	ldr	r3, [pc, #616]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a62:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a6e:	f7fd ff11 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005a72:	6378      	str	r0, [r7, #52]	; 0x34
 8005a74:	e279      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005a76:	4b94      	ldr	r3, [pc, #592]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a84:	d112      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a8c:	d10e      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a8e:	4b8e      	ldr	r3, [pc, #568]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9c:	d102      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005a9e:	23fa      	movs	r3, #250	; 0xfa
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aa2:	e262      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005aa4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aaa:	e25e      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005aac:	4b86      	ldr	r3, [pc, #536]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab8:	d106      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ac0:	d102      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005ac2:	4b82      	ldr	r3, [pc, #520]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac6:	e250      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005ac8:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005adc:	d103      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8005ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae4:	e241      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aea:	e23e      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005af4:	430b      	orrs	r3, r1
 8005af6:	d12d      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005af8:	4b73      	ldr	r3, [pc, #460]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005afe:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005b02:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005b04:	4b70      	ldr	r3, [pc, #448]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b10:	d105      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005b18:	4b6c      	ldr	r3, [pc, #432]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1c:	e225      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b24:	d107      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fcb2 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
 8005b34:	e219      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3e:	f107 0318 	add.w	r3, r7, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fe0e 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4c:	e20d      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
 8005b52:	e20a      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b58:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	d156      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005b60:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b72:	d028      	beq.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b7a:	d845      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b82:	d013      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8a:	d83d      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b98:	d004      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005b9a:	e035      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fd fe8e 	bl	80038bc <HAL_RCC_GetPCLK2Freq>
 8005ba0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ba2:	e1e2      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005ba4:	f7fd fd54 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005ba8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005baa:	e1de      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bac:	4b46      	ldr	r3, [pc, #280]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005bba:	4b44      	ldr	r3, [pc, #272]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bbe:	e1d4      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc4:	e1d1      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005bc6:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d117      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8005bde:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	0e1b      	lsrs	r3, r3, #24
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	e006      	b.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	0e1b      	lsrs	r3, r3, #24
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	4a35      	ldr	r2, [pc, #212]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c00:	e1b3      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c06:	e1b0      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c0c:	e1ad      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c12:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005c16:	430b      	orrs	r3, r1
 8005c18:	d15c      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005c1a:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c24:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c2c:	d028      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c34:	d845      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3c:	d013      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c44:	d83d      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c52:	d004      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005c54:	e035      	b.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005c56:	f7fd fe1d 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005c5a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c5c:	e185      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fd fcf7 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005c62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c64:	e181      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c72:	d102      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c78:	e177      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c7e:	e174      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c80:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d117      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	0e1b      	lsrs	r3, r3, #24
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	e006      	b.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005ca4:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	0e1b      	lsrs	r3, r3, #24
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	4a07      	ldr	r2, [pc, #28]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cba:	e156      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cc0:	e153      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cc6:	e150      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005cc8:	46020c00 	.word	0x46020c00
 8005ccc:	00f42400 	.word	0x00f42400
 8005cd0:	0800a208 	.word	0x0800a208
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd8:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	d176      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005ce0:	4ba4      	ldr	r3, [pc, #656]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ce6:	f003 0318 	and.w	r3, r3, #24
 8005cea:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	2b18      	cmp	r3, #24
 8005cf0:	d86a      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005dc9 	.word	0x08005dc9
 8005d00:	08005dc9 	.word	0x08005dc9
 8005d04:	08005dc9 	.word	0x08005dc9
 8005d08:	08005dc9 	.word	0x08005dc9
 8005d0c:	08005dc9 	.word	0x08005dc9
 8005d10:	08005dc9 	.word	0x08005dc9
 8005d14:	08005dc9 	.word	0x08005dc9
 8005d18:	08005d65 	.word	0x08005d65
 8005d1c:	08005dc9 	.word	0x08005dc9
 8005d20:	08005dc9 	.word	0x08005dc9
 8005d24:	08005dc9 	.word	0x08005dc9
 8005d28:	08005dc9 	.word	0x08005dc9
 8005d2c:	08005dc9 	.word	0x08005dc9
 8005d30:	08005dc9 	.word	0x08005dc9
 8005d34:	08005dc9 	.word	0x08005dc9
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005dc9 	.word	0x08005dc9
 8005d40:	08005dc9 	.word	0x08005dc9
 8005d44:	08005dc9 	.word	0x08005dc9
 8005d48:	08005dc9 	.word	0x08005dc9
 8005d4c:	08005dc9 	.word	0x08005dc9
 8005d50:	08005dc9 	.word	0x08005dc9
 8005d54:	08005dc9 	.word	0x08005dc9
 8005d58:	08005d87 	.word	0x08005d87
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005d5c:	f7fd fdc2 	bl	80038e4 <HAL_RCC_GetPCLK3Freq>
 8005d60:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d62:	e102      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005d64:	f7fd fc74 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005d68:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d6a:	e0fe      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d6c:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d78:	d102      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8005d7a:	4b7f      	ldr	r3, [pc, #508]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d7e:	e0f4      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d84:	e0f1      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d86:	4b7b      	ldr	r3, [pc, #492]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d117      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d92:	4b78      	ldr	r3, [pc, #480]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005d9e:	4b75      	ldr	r3, [pc, #468]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0e1b      	lsrs	r3, r3, #24
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	e006      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005daa:	4b72      	ldr	r3, [pc, #456]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	0e1b      	lsrs	r3, r3, #24
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	4a70      	ldr	r2, [pc, #448]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dc0:	e0d3      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc6:	e0d0      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dcc:	e0cd      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	d155      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005dda:	4b66      	ldr	r3, [pc, #408]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ddc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005de0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005de4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dec:	d013      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005df4:	d844      	bhi.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dfc:	d013      	beq.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e04:	d83c      	bhi.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d014      	beq.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e12:	d014      	beq.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8005e14:	e034      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e16:	f107 0318 	add.w	r3, r7, #24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fca2 	bl	8004764 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e24:	e0a1      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fb32 	bl	8004494 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e34:	e099      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005e36:	f7fd fc0b 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 8005e3a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e3c:	e095      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e3e:	4b4d      	ldr	r3, [pc, #308]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d117      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e4a:	4b4a      	ldr	r3, [pc, #296]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8005e56:	4b47      	ldr	r3, [pc, #284]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	0e1b      	lsrs	r3, r3, #24
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005e62:	4b44      	ldr	r3, [pc, #272]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e68:	041b      	lsls	r3, r3, #16
 8005e6a:	0e1b      	lsrs	r3, r3, #24
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	4a42      	ldr	r2, [pc, #264]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e78:	e077      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7e:	e074      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e84:	e071      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e8a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	d131      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005e92:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e9c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005e9e:	4b35      	ldr	r3, [pc, #212]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d106      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb8:	e057      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec8:	d112      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ed2:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee0:	d102      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 8005ee2:	23fa      	movs	r3, #250	; 0xfa
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ee6:	e040      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005ee8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005eee:	e03c      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef4:	e039      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005efa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005efe:	430b      	orrs	r3, r1
 8005f00:	d131      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f08:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f0c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005f0e:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1a:	d105      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8005f22:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
 8005f26:	e020      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f34:	d106      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3c:	d102      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
 8005f42:	e012      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f50:	d106      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	d102      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8005f5a:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5e:	e004      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
 8005f64:	e001      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3738      	adds	r7, #56	; 0x38
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	46020c00 	.word	0x46020c00
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	0800a208 	.word	0x0800a208
 8005f80:	02dc6c00 	.word	0x02dc6c00
 8005f84:	016e3600 	.word	0x016e3600

08005f88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005f90:	4b47      	ldr	r3, [pc, #284]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a46      	ldr	r2, [pc, #280]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8005f96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f9c:	f7fb fdbc 	bl	8001b18 <HAL_GetTick>
 8005fa0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fa2:	e008      	b.n	8005fb6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fa4:	f7fb fdb8 	bl	8001b18 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e077      	b.n	80060a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005fc2:	4b3b      	ldr	r3, [pc, #236]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6811      	ldr	r1, [r2, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6852      	ldr	r2, [r2, #4]
 8005fd6:	3a01      	subs	r2, #1
 8005fd8:	0212      	lsls	r2, r2, #8
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	4934      	ldr	r1, [pc, #208]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005fe2:	4b33      	ldr	r3, [pc, #204]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8005fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe6:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <RCCEx_PLL2_Config+0x12c>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6892      	ldr	r2, [r2, #8]
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68d2      	ldr	r2, [r2, #12]
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	0252      	lsls	r2, r2, #9
 8005ffc:	b292      	uxth	r2, r2
 8005ffe:	4311      	orrs	r1, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6912      	ldr	r2, [r2, #16]
 8006004:	3a01      	subs	r2, #1
 8006006:	0412      	lsls	r2, r2, #16
 8006008:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800600c:	4311      	orrs	r1, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6952      	ldr	r2, [r2, #20]
 8006012:	3a01      	subs	r2, #1
 8006014:	0612      	lsls	r2, r2, #24
 8006016:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800601a:	430a      	orrs	r2, r1
 800601c:	4924      	ldr	r1, [pc, #144]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 800601e:	4313      	orrs	r3, r2
 8006020:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006022:	4b23      	ldr	r3, [pc, #140]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	f023 020c 	bic.w	r2, r3, #12
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	4920      	ldr	r1, [pc, #128]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006030:	4313      	orrs	r3, r2
 8006032:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006034:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	491c      	ldr	r1, [pc, #112]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 800603e:	4313      	orrs	r3, r2
 8006040:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006042:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	4a1a      	ldr	r2, [pc, #104]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006048:	f023 0310 	bic.w	r3, r3, #16
 800604c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800604e:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006056:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	69d2      	ldr	r2, [r2, #28]
 800605e:	00d2      	lsls	r2, r2, #3
 8006060:	4913      	ldr	r1, [pc, #76]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006062:	4313      	orrs	r3, r2
 8006064:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	4a11      	ldr	r2, [pc, #68]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 800606c:	f043 0310 	orr.w	r3, r3, #16
 8006070:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a0e      	ldr	r2, [pc, #56]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 8006078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800607c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800607e:	f7fb fd4b 	bl	8001b18 <HAL_GetTick>
 8006082:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006084:	e008      	b.n	8006098 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006086:	f7fb fd47 	bl	8001b18 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e006      	b.n	80060a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <RCCEx_PLL2_Config+0x128>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0

}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	46020c00 	.word	0x46020c00
 80060b4:	80800000 	.word	0x80800000

080060b8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80060c0:	4b47      	ldr	r3, [pc, #284]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a46      	ldr	r2, [pc, #280]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 80060c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060cc:	f7fb fd24 	bl	8001b18 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060d2:	e008      	b.n	80060e6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060d4:	f7fb fd20 	bl	8001b18 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e077      	b.n	80061d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060e6:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80060f2:	4b3b      	ldr	r3, [pc, #236]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060fa:	f023 0303 	bic.w	r3, r3, #3
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6811      	ldr	r1, [r2, #0]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6852      	ldr	r2, [r2, #4]
 8006106:	3a01      	subs	r2, #1
 8006108:	0212      	lsls	r2, r2, #8
 800610a:	430a      	orrs	r2, r1
 800610c:	4934      	ldr	r1, [pc, #208]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 800610e:	4313      	orrs	r3, r2
 8006110:	630b      	str	r3, [r1, #48]	; 0x30
 8006112:	4b33      	ldr	r3, [pc, #204]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006116:	4b33      	ldr	r3, [pc, #204]	; (80061e4 <RCCEx_PLL3_Config+0x12c>)
 8006118:	4013      	ands	r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6892      	ldr	r2, [r2, #8]
 800611e:	3a01      	subs	r2, #1
 8006120:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	68d2      	ldr	r2, [r2, #12]
 8006128:	3a01      	subs	r2, #1
 800612a:	0252      	lsls	r2, r2, #9
 800612c:	b292      	uxth	r2, r2
 800612e:	4311      	orrs	r1, r2
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6912      	ldr	r2, [r2, #16]
 8006134:	3a01      	subs	r2, #1
 8006136:	0412      	lsls	r2, r2, #16
 8006138:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800613c:	4311      	orrs	r1, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6952      	ldr	r2, [r2, #20]
 8006142:	3a01      	subs	r2, #1
 8006144:	0612      	lsls	r2, r2, #24
 8006146:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800614a:	430a      	orrs	r2, r1
 800614c:	4924      	ldr	r1, [pc, #144]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 800614e:	4313      	orrs	r3, r2
 8006150:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006152:	4b23      	ldr	r3, [pc, #140]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	f023 020c 	bic.w	r2, r3, #12
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	4920      	ldr	r1, [pc, #128]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006160:	4313      	orrs	r3, r2
 8006162:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006164:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	491c      	ldr	r1, [pc, #112]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 800616e:	4313      	orrs	r3, r2
 8006170:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006172:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006178:	f023 0310 	bic.w	r3, r3, #16
 800617c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800617e:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006186:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	69d2      	ldr	r2, [r2, #28]
 800618e:	00d2      	lsls	r2, r2, #3
 8006190:	4913      	ldr	r1, [pc, #76]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006192:	4313      	orrs	r3, r2
 8006194:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	4a11      	ldr	r2, [pc, #68]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 800619c:	f043 0310 	orr.w	r3, r3, #16
 80061a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a0e      	ldr	r2, [pc, #56]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061ae:	f7fb fcb3 	bl	8001b18 <HAL_GetTick>
 80061b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061b4:	e008      	b.n	80061c8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061b6:	f7fb fcaf 	bl	8001b18 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e006      	b.n	80061d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <RCCEx_PLL3_Config+0x128>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	46020c00 	.word	0x46020c00
 80061e4:	80800000 	.word	0x80800000

080061e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d071      	beq.n	80062de <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb f866 	bl	80012e0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800621c:	4b32      	ldr	r3, [pc, #200]	; (80062e8 <HAL_RTC_Init+0x100>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b10      	cmp	r3, #16
 8006226:	d051      	beq.n	80062cc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006228:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <HAL_RTC_Init+0x100>)
 800622a:	22ca      	movs	r2, #202	; 0xca
 800622c:	625a      	str	r2, [r3, #36]	; 0x24
 800622e:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <HAL_RTC_Init+0x100>)
 8006230:	2253      	movs	r2, #83	; 0x53
 8006232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f88b 	bl	8006350 <RTC_EnterInitMode>
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d13f      	bne.n	80062c4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006244:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <HAL_RTC_Init+0x100>)
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	4a27      	ldr	r2, [pc, #156]	; (80062e8 <HAL_RTC_Init+0x100>)
 800624a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800624e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006252:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006254:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <HAL_RTC_Init+0x100>)
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6859      	ldr	r1, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	4319      	orrs	r1, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	430b      	orrs	r3, r1
 8006268:	491f      	ldr	r1, [pc, #124]	; (80062e8 <HAL_RTC_Init+0x100>)
 800626a:	4313      	orrs	r3, r2
 800626c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	491b      	ldr	r1, [pc, #108]	; (80062e8 <HAL_RTC_Init+0x100>)
 800627a:	4313      	orrs	r3, r2
 800627c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800627e:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <HAL_RTC_Init+0x100>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	430b      	orrs	r3, r1
 8006290:	4915      	ldr	r1, [pc, #84]	; (80062e8 <HAL_RTC_Init+0x100>)
 8006292:	4313      	orrs	r3, r2
 8006294:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f896 	bl	80063c8 <RTC_ExitInitMode>
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10e      	bne.n	80062c4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <HAL_RTC_Init+0x100>)
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a19      	ldr	r1, [r3, #32]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	4319      	orrs	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	430b      	orrs	r3, r1
 80062be:	490a      	ldr	r1, [pc, #40]	; (80062e8 <HAL_RTC_Init+0x100>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <HAL_RTC_Init+0x100>)
 80062c6:	22ff      	movs	r2, #255	; 0xff
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24
 80062ca:	e001      	b.n	80062d0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	46007800 	.word	0x46007800

080062ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80062f4:	4b15      	ldr	r3, [pc, #84]	; (800634c <HAL_RTC_WaitForSynchro+0x60>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4a14      	ldr	r2, [pc, #80]	; (800634c <HAL_RTC_WaitForSynchro+0x60>)
 80062fa:	f023 0320 	bic.w	r3, r3, #32
 80062fe:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006300:	f7fb fc0a 	bl	8001b18 <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006306:	e013      	b.n	8006330 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006308:	f7fb fc06 	bl	8001b18 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006316:	d90b      	bls.n	8006330 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <HAL_RTC_WaitForSynchro+0x60>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10c      	bne.n	800633e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2203      	movs	r2, #3
 8006328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e008      	b.n	8006342 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_RTC_WaitForSynchro+0x60>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0e5      	beq.n	8006308 <HAL_RTC_WaitForSynchro+0x1c>
 800633c:	e000      	b.n	8006340 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800633e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	46007800 	.word	0x46007800

08006350 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <RTC_EnterInitMode+0x74>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d128      	bne.n	80063ba <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006368:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <RTC_EnterInitMode+0x74>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <RTC_EnterInitMode+0x74>)
 800636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006372:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006374:	f7fb fbd0 	bl	8001b18 <HAL_GetTick>
 8006378:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800637a:	e013      	b.n	80063a4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800637c:	f7fb fbcc 	bl	8001b18 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800638a:	d90b      	bls.n	80063a4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <RTC_EnterInitMode+0x74>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10f      	bne.n	80063b8 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2203      	movs	r2, #3
 80063a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80063a4:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <RTC_EnterInitMode+0x74>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <RTC_EnterInitMode+0x6a>
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d1e2      	bne.n	800637c <RTC_EnterInitMode+0x2c>
 80063b6:	e000      	b.n	80063ba <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80063b8:	bf00      	nop
        }
      }
    }
  }

  return status;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	46007800 	.word	0x46007800

080063c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80063d4:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <RTC_ExitInitMode+0x78>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	4a19      	ldr	r2, [pc, #100]	; (8006440 <RTC_ExitInitMode+0x78>)
 80063da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063de:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80063e0:	4b17      	ldr	r3, [pc, #92]	; (8006440 <RTC_ExitInitMode+0x78>)
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10c      	bne.n	8006406 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ff7d 	bl	80062ec <HAL_RTC_WaitForSynchro>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01e      	beq.n	8006436 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2203      	movs	r2, #3
 80063fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	73fb      	strb	r3, [r7, #15]
 8006404:	e017      	b.n	8006436 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006406:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <RTC_ExitInitMode+0x78>)
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	4a0d      	ldr	r2, [pc, #52]	; (8006440 <RTC_ExitInitMode+0x78>)
 800640c:	f023 0320 	bic.w	r3, r3, #32
 8006410:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff ff6a 	bl	80062ec <HAL_RTC_WaitForSynchro>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2203      	movs	r2, #3
 8006422:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <RTC_ExitInitMode+0x78>)
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	4a04      	ldr	r2, [pc, #16]	; (8006440 <RTC_ExitInitMode+0x78>)
 8006430:	f043 0320 	orr.w	r3, r3, #32
 8006434:	6193      	str	r3, [r2, #24]
  }
  return status;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	46007800 	.word	0x46007800

08006444 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4910      	ldr	r1, [pc, #64]	; (8006498 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006458:	4313      	orrs	r3, r2
 800645a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	431a      	orrs	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	490c      	ldr	r1, [pc, #48]	; (800649c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800646c:	4313      	orrs	r3, r2
 800646e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	6919      	ldr	r1, [r3, #16]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	430b      	orrs	r3, r1
 8006484:	4905      	ldr	r1, [pc, #20]	; (800649c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006486:	4313      	orrs	r3, r2
 8006488:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	46007800 	.word	0x46007800
 800649c:	46007c00 	.word	0x46007c00

080064a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e075      	b.n	800659e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fa ff4f 	bl	8001368 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f868 	bl	80065a8 <HAL_SD_InitCard>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e05d      	b.n	800659e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fa9d 	bl	8006a28 <HAL_SD_GetCardStatus>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e052      	b.n	800659e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80064f8:	7e3b      	ldrb	r3, [r7, #24]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80064fe:	7e7b      	ldrb	r3, [r7, #25]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10a      	bne.n	8006522 <HAL_SD_Init+0x82>
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d102      	bne.n	8006518 <HAL_SD_Init+0x78>
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651e:	659a      	str	r2, [r3, #88]	; 0x58
 8006520:	e00b      	b.n	800653a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	2b01      	cmp	r3, #1
 8006528:	d104      	bne.n	8006534 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006530:	659a      	str	r2, [r3, #88]	; 0x58
 8006532:	e002      	b.n	800653a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fb2f 	bl	8006ba4 <HAL_SD_ConfigWideBusOperation>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e026      	b.n	800659e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006550:	f7fb fae2 	bl	8001b18 <HAL_GetTick>
 8006554:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006556:	e011      	b.n	800657c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006558:	f7fb fade 	bl	8001b18 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006566:	d109      	bne.n	800657c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800656e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e010      	b.n	800659e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fc23 	bl	8006dc8 <HAL_SD_GetCardState>
 8006582:	4603      	mov	r3, r0
 8006584:	2b04      	cmp	r3, #4
 8006586:	d1e7      	bne.n	8006558 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3728      	adds	r7, #40	; 0x28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b08d      	sub	sp, #52	; 0x34
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80065bc:	2300      	movs	r3, #0
 80065be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80065c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80065c4:	f04f 0100 	mov.w	r1, #0
 80065c8:	f7fe fb9c 	bl	8004d04 <HAL_RCCEx_GetPeriphCLKFreq>
 80065cc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e070      	b.n	80066ca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	0a1b      	lsrs	r3, r3, #8
 80065ec:	4a39      	ldr	r2, [pc, #228]	; (80066d4 <HAL_SD_InitCard+0x12c>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681c      	ldr	r4, [r3, #0]
 80065fa:	466a      	mov	r2, sp
 80065fc:	f107 0318 	add.w	r3, r7, #24
 8006600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006604:	e882 0003 	stmia.w	r2, {r0, r1}
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800660e:	4620      	mov	r0, r4
 8006610:	f002 fb96 	bl	8008d40 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f002 fbc8 	bl	8008dae <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	fbb2 f3f3 	udiv	r3, r2, r3
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006636:	4a28      	ldr	r2, [pc, #160]	; (80066d8 <HAL_SD_InitCard+0x130>)
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	fbb2 f3f3 	udiv	r3, r2, r3
 800663e:	3301      	adds	r3, #1
 8006640:	4618      	mov	r0, r3
 8006642:	f7fb fa75 	bl	8001b30 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fcac 	bl	8006fa4 <SD_PowerON>
 800664c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e02e      	b.n	80066ca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fbcb 	bl	8006e08 <SD_InitCard>
 8006672:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e01b      	b.n	80066ca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800669a:	4618      	mov	r0, r3
 800669c:	f002 fc1c 	bl	8008ed8 <SDMMC_CmdBlockLength>
 80066a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00f      	beq.n	80066c8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a0b      	ldr	r2, [pc, #44]	; (80066dc <HAL_SD_InitCard+0x134>)
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	372c      	adds	r7, #44	; 0x2c
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd90      	pop	{r4, r7, pc}
 80066d2:	bf00      	nop
 80066d4:	014f8b59 	.word	0x014f8b59
 80066d8:	00012110 	.word	0x00012110
 80066dc:	1fe00fff 	.word	0x1fe00fff

080066e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	0f9b      	lsrs	r3, r3, #30
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fa:	0e9b      	lsrs	r3, r3, #26
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	b2da      	uxtb	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	0e1b      	lsrs	r3, r3, #24
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	b2da      	uxtb	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	b2da      	uxtb	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	b2da      	uxtb	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	0d1b      	lsrs	r3, r3, #20
 8006742:	b29a      	uxth	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674c:	0c1b      	lsrs	r3, r3, #16
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	b2da      	uxtb	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675e:	0bdb      	lsrs	r3, r3, #15
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006770:	0b9b      	lsrs	r3, r3, #14
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	b2da      	uxtb	r2, r3
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006782:	0b5b      	lsrs	r3, r3, #13
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006794:	0b1b      	lsrs	r3, r3, #12
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	b2da      	uxtb	r2, r3
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2200      	movs	r2, #0
 80067a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d163      	bne.n	8006878 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b4:	009a      	lsls	r2, r3, #2
 80067b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067ba:	4013      	ands	r3, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80067c0:	0f92      	lsrs	r2, r2, #30
 80067c2:	431a      	orrs	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067cc:	0edb      	lsrs	r3, r3, #27
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067de:	0e1b      	lsrs	r3, r3, #24
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f0:	0d5b      	lsrs	r3, r3, #21
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006802:	0c9b      	lsrs	r3, r3, #18
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006814:	0bdb      	lsrs	r3, r3, #15
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	b2da      	uxtb	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	7e1b      	ldrb	r3, [r3, #24]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	3302      	adds	r3, #2
 8006838:	2201      	movs	r2, #1
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006842:	fb03 f202 	mul.w	r2, r3, r2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	7a1b      	ldrb	r3, [r3, #8]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	2201      	movs	r2, #1
 8006856:	409a      	lsls	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006864:	0a52      	lsrs	r2, r2, #9
 8006866:	fb03 f202 	mul.w	r2, r3, r2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006874:	655a      	str	r2, [r3, #84]	; 0x54
 8006876:	e031      	b.n	80068dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	2b01      	cmp	r3, #1
 800687e:	d11d      	bne.n	80068bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	431a      	orrs	r2, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	3301      	adds	r3, #1
 800689c:	029a      	lsls	r2, r3, #10
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	655a      	str	r2, [r3, #84]	; 0x54
 80068ba:	e00f      	b.n	80068dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a58      	ldr	r2, [pc, #352]	; (8006a24 <HAL_SD_GetCardCSD+0x344>)
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e09d      	b.n	8006a18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e0:	0b9b      	lsrs	r3, r3, #14
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f2:	09db      	lsrs	r3, r3, #7
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006914:	0fdb      	lsrs	r3, r3, #31
 8006916:	b2da      	uxtb	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006920:	0f5b      	lsrs	r3, r3, #29
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	b2da      	uxtb	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006932:	0e9b      	lsrs	r3, r3, #26
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	b2da      	uxtb	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006944:	0d9b      	lsrs	r3, r3, #22
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	b2da      	uxtb	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006956:	0d5b      	lsrs	r3, r3, #21
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	0bdb      	lsrs	r3, r3, #15
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699a:	0b9b      	lsrs	r3, r3, #14
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ae:	0b5b      	lsrs	r3, r3, #13
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c2:	0b1b      	lsrs	r3, r3, #12
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d6:	0a9b      	lsrs	r3, r3, #10
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	1fe00fff 	.word	0x1fe00fff

08006a28 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b094      	sub	sp, #80	; 0x50
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d101      	bne.n	8006a48 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0a7      	b.n	8006b98 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a48:	f107 0308 	add.w	r3, r7, #8
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fb36 	bl	80070c0 <SD_SendSDStatus>
 8006a54:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d011      	beq.n	8006a80 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a4f      	ldr	r2, [pc, #316]	; (8006ba0 <HAL_SD_GetCardStatus+0x178>)
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a7e:	e070      	b.n	8006b62 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	099b      	lsrs	r3, r3, #6
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	0a1b      	lsrs	r3, r3, #8
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	0e1b      	lsrs	r3, r3, #24
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	061a      	lsls	r2, r3, #24
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ad0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	0d1b      	lsrs	r3, r3, #20
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	0c1b      	lsrs	r3, r3, #16
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	4313      	orrs	r3, r2
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	0a9b      	lsrs	r3, r3, #10
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	0e1b      	lsrs	r3, r3, #24
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f002 f9b4 	bl	8008ed8 <SDMMC_CmdBlockLength>
 8006b70:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00d      	beq.n	8006b94 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a08      	ldr	r2, [pc, #32]	; (8006ba0 <HAL_SD_GetCardStatus+0x178>)
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b84:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3750      	adds	r7, #80	; 0x50
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	1fe00fff 	.word	0x1fe00fff

08006ba4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b08d      	sub	sp, #52	; 0x34
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d02e      	beq.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bca:	d106      	bne.n	8006bda <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	635a      	str	r2, [r3, #52]	; 0x34
 8006bd8:	e029      	b.n	8006c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be0:	d10a      	bne.n	8006bf8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fb64 	bl	80072b0 <SD_WideBus_Enable>
 8006be8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8006bf6:	e01a      	b.n	8006c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fba1 	bl	8007346 <SD_WideBus_Disable>
 8006c04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	635a      	str	r2, [r3, #52]	; 0x34
 8006c12:	e00c      	b.n	8006c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8006c20:	e005      	b.n	8006c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a5f      	ldr	r2, [pc, #380]	; (8006db8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c44:	e096      	b.n	8006d74 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c46:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006c4a:	f04f 0100 	mov.w	r1, #0
 8006c4e:	f7fe f859 	bl	8004d04 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c52:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8083 	beq.w	8006d62 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695a      	ldr	r2, [r3, #20]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4950      	ldr	r1, [pc, #320]	; (8006dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c7a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c7e:	0e1b      	lsrs	r3, r3, #24
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d303      	bcc.n	8006c8c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	e05a      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c94:	d103      	bne.n	8006c9e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	e051      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca6:	d126      	bne.n	8006cf6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10e      	bne.n	8006cce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4a43      	ldr	r2, [pc, #268]	; (8006dc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d906      	bls.n	8006cc6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4a40      	ldr	r2, [pc, #256]	; (8006dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc0:	0e5b      	lsrs	r3, r3, #25
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e03d      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e039      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cda:	4a39      	ldr	r2, [pc, #228]	; (8006dc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d906      	bls.n	8006cee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4a36      	ldr	r2, [pc, #216]	; (8006dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce8:	0e5b      	lsrs	r3, r3, #25
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e029      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	e025      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10e      	bne.n	8006d1c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4a30      	ldr	r2, [pc, #192]	; (8006dc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d906      	bls.n	8006d14 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	0e1b      	lsrs	r3, r3, #24
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	e016      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	e012      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	4a26      	ldr	r2, [pc, #152]	; (8006dc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d906      	bls.n	8006d3c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4a22      	ldr	r2, [pc, #136]	; (8006dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	0e1b      	lsrs	r3, r3, #24
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e002      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681c      	ldr	r4, [r3, #0]
 8006d46:	466a      	mov	r2, sp
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d50:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d54:	f107 0308 	add.w	r3, r7, #8
 8006d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f001 fff0 	bl	8008d40 <SDMMC_Init>
 8006d60:	e008      	b.n	8006d74 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f002 f8ab 	bl	8008ed8 <SDMMC_CmdBlockLength>
 8006d82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	372c      	adds	r7, #44	; 0x2c
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd90      	pop	{r4, r7, pc}
 8006db8:	1fe00fff 	.word	0x1fe00fff
 8006dbc:	55e63b89 	.word	0x55e63b89
 8006dc0:	02faf080 	.word	0x02faf080
 8006dc4:	017d7840 	.word	0x017d7840

08006dc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa40 	bl	8007260 <SD_SendStatus>
 8006de0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	0a5b      	lsrs	r3, r3, #9
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006dfe:	693b      	ldr	r3, [r7, #16]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b090      	sub	sp, #64	; 0x40
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e14:	f7fa fe80 	bl	8001b18 <HAL_GetTick>
 8006e18:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 ffd6 	bl	8008dd0 <SDMMC_GetPowerState>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e2e:	e0b5      	b.n	8006f9c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d02e      	beq.n	8006e96 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f002 f957 	bl	80090f0 <SDMMC_CmdSendCID>
 8006e42:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <SD_InitCard+0x46>
    {
      return errorstate;
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	e0a6      	b.n	8006f9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2100      	movs	r1, #0
 8006e54:	4618      	mov	r0, r3
 8006e56:	f002 f800 	bl	8008e5a <SDMMC_GetResponse>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2104      	movs	r1, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 fff7 	bl	8008e5a <SDMMC_GetResponse>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2108      	movs	r1, #8
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 ffee 	bl	8008e5a <SDMMC_GetResponse>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	210c      	movs	r1, #12
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 ffe5 	bl	8008e5a <SDMMC_GetResponse>
 8006e90:	4602      	mov	r2, r0
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d01d      	beq.n	8006eda <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006e9e:	e019      	b.n	8006ed4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f107 020a 	add.w	r2, r7, #10
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 f95f 	bl	800916e <SDMMC_CmdSetRelAdd>
 8006eb0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <SD_InitCard+0xb4>
      {
        return errorstate;
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	e06f      	b.n	8006f9c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006ebc:	f7fa fe2c 	bl	8001b18 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	f241 3287 	movw	r2, #4999	; 0x1387
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d902      	bls.n	8006ed4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006ece:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ed2:	e063      	b.n	8006f9c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006ed4:	897b      	ldrh	r3, [r7, #10]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0e2      	beq.n	8006ea0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d036      	beq.n	8006f50 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ee2:	897b      	ldrh	r3, [r7, #10]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	041b      	lsls	r3, r3, #16
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f002 f919 	bl	800912e <SDMMC_CmdSendCSD>
 8006efc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <SD_InitCard+0x100>
    {
      return errorstate;
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	e049      	b.n	8006f9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 ffa3 	bl	8008e5a <SDMMC_GetResponse>
 8006f14:	4602      	mov	r2, r0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2104      	movs	r1, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 ff9a 	bl	8008e5a <SDMMC_GetResponse>
 8006f26:	4602      	mov	r2, r0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2108      	movs	r1, #8
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 ff91 	bl	8008e5a <SDMMC_GetResponse>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	210c      	movs	r1, #12
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 ff88 	bl	8008e5a <SDMMC_GetResponse>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2104      	movs	r1, #4
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 ff7f 	bl	8008e5a <SDMMC_GetResponse>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	0d1a      	lsrs	r2, r3, #20
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f64:	f107 030c 	add.w	r3, r7, #12
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff fbb8 	bl	80066e0 <HAL_SD_GetCardCSD>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f7a:	e00f      	b.n	8006f9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f001 ffc8 	bl	8008f1e <SDMMC_CmdSelDesel>
 8006f8e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <SD_InitCard+0x192>
  {
    return errorstate;
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	e000      	b.n	8006f9c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3740      	adds	r7, #64	; 0x40
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 ffd1 	bl	8008f64 <SDMMC_CmdGoIdleState>
 8006fc2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <SD_PowerON+0x2a>
  {
    return errorstate;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	e072      	b.n	80070b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f001 ffe4 	bl	8008fa0 <SDMMC_CmdOperCond>
 8006fd8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fe0:	d10d      	bne.n	8006ffe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 ffb9 	bl	8008f64 <SDMMC_CmdGoIdleState>
 8006ff2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <SD_PowerON+0x60>
    {
      return errorstate;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	e05a      	b.n	80070b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d137      	bne.n	800707c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f001 ffe4 	bl	8008fe0 <SDMMC_CmdAppCommand>
 8007018:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d02d      	beq.n	800707c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007020:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007024:	e046      	b.n	80070b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f001 ffd7 	bl	8008fe0 <SDMMC_CmdAppCommand>
 8007032:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <SD_PowerON+0x9a>
    {
      return errorstate;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	e03a      	b.n	80070b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	491e      	ldr	r1, [pc, #120]	; (80070bc <SD_PowerON+0x118>)
 8007044:	4618      	mov	r0, r3
 8007046:	f001 ffee 	bl	8009026 <SDMMC_CmdAppOperCommand>
 800704a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007052:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007056:	e02d      	b.n	80070b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f001 fefb 	bl	8008e5a <SDMMC_GetResponse>
 8007064:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	0fdb      	lsrs	r3, r3, #31
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <SD_PowerON+0xce>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <SD_PowerON+0xd0>
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]

    count++;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3301      	adds	r3, #1
 800707a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007082:	4293      	cmp	r3, r2
 8007084:	d802      	bhi.n	800708c <SD_PowerON+0xe8>
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0cc      	beq.n	8007026 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007092:	4293      	cmp	r3, r2
 8007094:	d902      	bls.n	800709c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800709a:	e00b      	b.n	80070b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	c1100000 	.word	0xc1100000

080070c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08c      	sub	sp, #48	; 0x30
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070ca:	f7fa fd25 	bl	8001b18 <HAL_GetTick>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 febd 	bl	8008e5a <SDMMC_GetResponse>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ea:	d102      	bne.n	80070f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070f0:	e0b0      	b.n	8007254 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2140      	movs	r1, #64	; 0x40
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 feed 	bl	8008ed8 <SDMMC_CmdBlockLength>
 80070fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	e0a0      	b.n	8007254 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f001 ff5e 	bl	8008fe0 <SDMMC_CmdAppCommand>
 8007124:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	e08d      	b.n	8007254 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800713c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800713e:	2340      	movs	r3, #64	; 0x40
 8007140:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007142:	2360      	movs	r3, #96	; 0x60
 8007144:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007146:	2302      	movs	r3, #2
 8007148:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800714a:	2300      	movs	r3, #0
 800714c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800714e:	2301      	movs	r3, #1
 8007150:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f107 0208 	add.w	r2, r7, #8
 800715a:	4611      	mov	r1, r2
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fe8f 	bl	8008e80 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f002 f846 	bl	80091f8 <SDMMC_CmdStatusRegister>
 800716c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02b      	beq.n	80071cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	e069      	b.n	8007254 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d013      	beq.n	80071b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800718e:	2300      	movs	r3, #0
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007192:	e00d      	b.n	80071b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fdfb 	bl	8008d94 <SDMMC_ReadFIFO>
 800719e:	4602      	mov	r2, r0
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	601a      	str	r2, [r3, #0]
        pData++;
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	3304      	adds	r3, #4
 80071a8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	3301      	adds	r3, #1
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	2b07      	cmp	r3, #7
 80071b4:	d9ee      	bls.n	8007194 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071b6:	f7fa fcaf 	bl	8001b18 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c4:	d102      	bne.n	80071cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071ca:	e043      	b.n	8007254 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0d2      	beq.n	8007180 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071e8:	2308      	movs	r3, #8
 80071ea:	e033      	b.n	8007254 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	e02a      	b.n	8007254 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d017      	beq.n	800723c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800720c:	2320      	movs	r3, #32
 800720e:	e021      	b.n	8007254 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f001 fdbd 	bl	8008d94 <SDMMC_ReadFIFO>
 800721a:	4602      	mov	r2, r0
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	601a      	str	r2, [r3, #0]
    pData++;
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	3304      	adds	r3, #4
 8007224:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007226:	f7fa fc77 	bl	8001b18 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007234:	d102      	bne.n	800723c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007236:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800723a:	e00b      	b.n	8007254 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e2      	bne.n	8007210 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a03      	ldr	r2, [pc, #12]	; (800725c <SD_SendSDStatus+0x19c>)
 8007250:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3730      	adds	r7, #48	; 0x30
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	18000f3a 	.word	0x18000f3a

08007260 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007274:	e018      	b.n	80072a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f001 ff95 	bl	80091b2 <SDMMC_CmdSendStatus>
 8007288:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	e009      	b.n	80072a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fddd 	bl	8008e5a <SDMMC_GetResponse>
 80072a0:	4602      	mov	r2, r0
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fdc7 	bl	8008e5a <SDMMC_GetResponse>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d6:	d102      	bne.n	80072de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072dc:	e02f      	b.n	800733e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072de:	f107 030c 	add.w	r3, r7, #12
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f879 	bl	80073dc <SD_FindSCR>
 80072ea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	e023      	b.n	800733e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01c      	beq.n	800733a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f001 fe67 	bl	8008fe0 <SDMMC_CmdAppCommand>
 8007312:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	e00f      	b.n	800733e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2102      	movs	r1, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fe9e 	bl	8009066 <SDMMC_CmdBusWidth>
 800732a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	e003      	b.n	800733e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007336:	2300      	movs	r3, #0
 8007338:	e001      	b.n	800733e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800733a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f001 fd7c 	bl	8008e5a <SDMMC_GetResponse>
 8007362:	4603      	mov	r3, r0
 8007364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800736c:	d102      	bne.n	8007374 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800736e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007372:	e02f      	b.n	80073d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007374:	f107 030c 	add.w	r3, r7, #12
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f82e 	bl	80073dc <SD_FindSCR>
 8007380:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	e023      	b.n	80073d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d01c      	beq.n	80073d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739e:	041b      	lsls	r3, r3, #16
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f001 fe1c 	bl	8008fe0 <SDMMC_CmdAppCommand>
 80073a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	e00f      	b.n	80073d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 fe53 	bl	8009066 <SDMMC_CmdBusWidth>
 80073c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	e003      	b.n	80073d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e001      	b.n	80073d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08e      	sub	sp, #56	; 0x38
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073e6:	f7fa fb97 	bl	8001b18 <HAL_GetTick>
 80073ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80073f0:	2300      	movs	r3, #0
 80073f2:	60bb      	str	r3, [r7, #8]
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2108      	movs	r1, #8
 8007402:	4618      	mov	r0, r3
 8007404:	f001 fd68 	bl	8008ed8 <SDMMC_CmdBlockLength>
 8007408:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	e0ad      	b.n	8007570 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	041b      	lsls	r3, r3, #16
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f001 fddd 	bl	8008fe0 <SDMMC_CmdAppCommand>
 8007426:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <SD_FindSCR+0x56>
  {
    return errorstate;
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	e09e      	b.n	8007570 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007436:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007438:	2308      	movs	r3, #8
 800743a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800743c:	2330      	movs	r3, #48	; 0x30
 800743e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007440:	2302      	movs	r3, #2
 8007442:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007444:	2300      	movs	r3, #0
 8007446:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007448:	2301      	movs	r3, #1
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f107 0210 	add.w	r2, r7, #16
 8007454:	4611      	mov	r1, r2
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fd12 	bl	8008e80 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f001 fe23 	bl	80090ac <SDMMC_CmdSendSCR>
 8007466:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d027      	beq.n	80074be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	e07e      	b.n	8007570 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d113      	bne.n	80074a8 <SD_FindSCR+0xcc>
 8007480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007482:	2b00      	cmp	r3, #0
 8007484:	d110      	bne.n	80074a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fc82 	bl	8008d94 <SDMMC_ReadFIFO>
 8007490:	4603      	mov	r3, r0
 8007492:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f001 fc7b 	bl	8008d94 <SDMMC_ReadFIFO>
 800749e:	4603      	mov	r3, r0
 80074a0:	60fb      	str	r3, [r7, #12]
      index++;
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	3301      	adds	r3, #1
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074a8:	f7fa fb36 	bl	8001b18 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b6:	d102      	bne.n	80074be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074bc:	e058      	b.n	8007570 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c4:	f240 532a 	movw	r3, #1322	; 0x52a
 80074c8:	4013      	ands	r3, r2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0d1      	beq.n	8007472 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2208      	movs	r2, #8
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074e4:	2308      	movs	r3, #8
 80074e6:	e043      	b.n	8007570 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2202      	movs	r2, #2
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074fe:	2302      	movs	r3, #2
 8007500:	e036      	b.n	8007570 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2220      	movs	r2, #32
 8007516:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007518:	2320      	movs	r3, #32
 800751a:	e029      	b.n	8007570 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a15      	ldr	r2, [pc, #84]	; (8007578 <SD_FindSCR+0x19c>)
 8007522:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	061a      	lsls	r2, r3, #24
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	021b      	lsls	r3, r3, #8
 800752c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007530:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800753a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	0e1b      	lsrs	r3, r3, #24
 8007540:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	601a      	str	r2, [r3, #0]
    scr++;
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	3304      	adds	r3, #4
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	061a      	lsls	r2, r3, #24
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007558:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	0a1b      	lsrs	r3, r3, #8
 800755e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007562:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	0e1b      	lsrs	r3, r3, #24
 8007568:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3738      	adds	r7, #56	; 0x38
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	18000f3a 	.word	0x18000f3a

0800757c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0fb      	b.n	8007786 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a7f      	ldr	r2, [pc, #508]	; (8007790 <HAL_SPI_Init+0x214>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_SPI_Init+0x26>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a7d      	ldr	r2, [pc, #500]	; (8007794 <HAL_SPI_Init+0x218>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	e000      	b.n	80075a4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80075a2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a78      	ldr	r2, [pc, #480]	; (8007790 <HAL_SPI_Init+0x214>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d004      	beq.n	80075be <HAL_SPI_Init+0x42>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a76      	ldr	r2, [pc, #472]	; (8007794 <HAL_SPI_Init+0x218>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d105      	bne.n	80075ca <HAL_SPI_Init+0x4e>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	2b0f      	cmp	r3, #15
 80075c4:	d901      	bls.n	80075ca <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e0dd      	b.n	8007786 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fbd8 	bl	8007d80 <SPI_GetPacketSize>
 80075d0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a6e      	ldr	r2, [pc, #440]	; (8007790 <HAL_SPI_Init+0x214>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_SPI_Init+0x6a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a6c      	ldr	r2, [pc, #432]	; (8007794 <HAL_SPI_Init+0x218>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d102      	bne.n	80075ec <HAL_SPI_Init+0x70>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d816      	bhi.n	800761a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075f0:	4a69      	ldr	r2, [pc, #420]	; (8007798 <HAL_SPI_Init+0x21c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00e      	beq.n	8007614 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a68      	ldr	r2, [pc, #416]	; (800779c <HAL_SPI_Init+0x220>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d009      	beq.n	8007614 <HAL_SPI_Init+0x98>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a66      	ldr	r2, [pc, #408]	; (80077a0 <HAL_SPI_Init+0x224>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <HAL_SPI_Init+0x98>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a65      	ldr	r2, [pc, #404]	; (80077a4 <HAL_SPI_Init+0x228>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d104      	bne.n	800761e <HAL_SPI_Init+0xa2>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b10      	cmp	r3, #16
 8007618:	d901      	bls.n	800761e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e0b3      	b.n	8007786 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7f9 ff28 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0201 	bic.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800765a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007664:	d119      	bne.n	800769a <HAL_SPI_Init+0x11e>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800766e:	d103      	bne.n	8007678 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10c      	bne.n	800769a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007688:	d107      	bne.n	800769a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007698:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00f      	beq.n	80076c6 <HAL_SPI_Init+0x14a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d90b      	bls.n	80076c6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e007      	b.n	80076d6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	69da      	ldr	r2, [r3, #28]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	431a      	orrs	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	ea42 0103 	orr.w	r1, r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007736:	431a      	orrs	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	ea42 0103 	orr.w	r1, r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	46002000 	.word	0x46002000
 8007794:	56002000 	.word	0x56002000
 8007798:	40013000 	.word	0x40013000
 800779c:	50013000 	.word	0x50013000
 80077a0:	40003800 	.word	0x40003800
 80077a4:	50003800 	.word	0x50003800

080077a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3320      	adds	r3, #32
 80077be:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_SPI_Transmit+0x2a>
 80077ce:	2302      	movs	r3, #2
 80077d0:	e203      	b.n	8007bda <HAL_SPI_Transmit+0x432>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077da:	f7fa f99d 	bl	8001b18 <HAL_GetTick>
 80077de:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d007      	beq.n	80077fc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
 80077ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80077f8:	7efb      	ldrb	r3, [r7, #27]
 80077fa:	e1ee      	b.n	8007bda <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_SPI_Transmit+0x60>
 8007802:	88fb      	ldrh	r3, [r7, #6]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007814:	7efb      	ldrb	r3, [r7, #27]
 8007816:	e1e0      	b.n	8007bda <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2203      	movs	r2, #3
 800781c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	88fa      	ldrh	r2, [r7, #6]
 800783a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007868:	d108      	bne.n	800787c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	e009      	b.n	8007890 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800788e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	0c1b      	lsrs	r3, r3, #16
 8007898:	041b      	lsls	r3, r3, #16
 800789a:	88f9      	ldrh	r1, [r7, #6]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	430b      	orrs	r3, r1
 80078a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0201 	orr.w	r2, r2, #1
 80078b2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10c      	bne.n	80078dc <HAL_SPI_Transmit+0x134>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ca:	d107      	bne.n	80078dc <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b0f      	cmp	r3, #15
 80078e2:	d95b      	bls.n	800799c <HAL_SPI_Transmit+0x1f4>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a8f      	ldr	r2, [pc, #572]	; (8007b28 <HAL_SPI_Transmit+0x380>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d04f      	beq.n	800798e <HAL_SPI_Transmit+0x1e6>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a8e      	ldr	r2, [pc, #568]	; (8007b2c <HAL_SPI_Transmit+0x384>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d04a      	beq.n	800798e <HAL_SPI_Transmit+0x1e6>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a8c      	ldr	r2, [pc, #560]	; (8007b30 <HAL_SPI_Transmit+0x388>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d045      	beq.n	800798e <HAL_SPI_Transmit+0x1e6>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a8b      	ldr	r2, [pc, #556]	; (8007b34 <HAL_SPI_Transmit+0x38c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d147      	bne.n	800799c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800790c:	e03f      	b.n	800798e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d114      	bne.n	8007946 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800792c:	1d1a      	adds	r2, r3, #4
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007944:	e023      	b.n	800798e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007946:	f7fa f8e7 	bl	8001b18 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d803      	bhi.n	800795e <HAL_SPI_Transmit+0x1b6>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800795c:	d102      	bne.n	8007964 <HAL_SPI_Transmit+0x1bc>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d114      	bne.n	800798e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f93d 	bl	8007be4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e125      	b.n	8007bda <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1b9      	bne.n	800790e <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800799a:	e0f8      	b.n	8007b8e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	2b07      	cmp	r3, #7
 80079a2:	f240 80ed 	bls.w	8007b80 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80079a6:	e05d      	b.n	8007a64 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d132      	bne.n	8007a1c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d918      	bls.n	80079f4 <HAL_SPI_Transmit+0x24c>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d014      	beq.n	80079f4 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6812      	ldr	r2, [r2, #0]
 80079d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3b02      	subs	r3, #2
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80079f2:	e037      	b.n	8007a64 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f8:	881a      	ldrh	r2, [r3, #0]
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a02:	1c9a      	adds	r2, r3, #2
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007a1a:	e023      	b.n	8007a64 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a1c:	f7fa f87c 	bl	8001b18 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d803      	bhi.n	8007a34 <HAL_SPI_Transmit+0x28c>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a32:	d102      	bne.n	8007a3a <HAL_SPI_Transmit+0x292>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d114      	bne.n	8007a64 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f8d2 	bl	8007be4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e0ba      	b.n	8007bda <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d19b      	bne.n	80079a8 <HAL_SPI_Transmit+0x200>
 8007a70:	e08d      	b.n	8007b8e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d15b      	bne.n	8007b38 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d918      	bls.n	8007abe <HAL_SPI_Transmit+0x316>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d914      	bls.n	8007abe <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aa4:	1d1a      	adds	r2, r3, #4
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b04      	subs	r3, #4
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007abc:	e060      	b.n	8007b80 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d917      	bls.n	8007afa <HAL_SPI_Transmit+0x352>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d013      	beq.n	8007afa <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad6:	881a      	ldrh	r2, [r3, #0]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae0:	1c9a      	adds	r2, r3, #2
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b02      	subs	r3, #2
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007af8:	e042      	b.n	8007b80 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3320      	adds	r3, #32
 8007b04:	7812      	ldrb	r2, [r2, #0]
 8007b06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007b24:	e02c      	b.n	8007b80 <HAL_SPI_Transmit+0x3d8>
 8007b26:	bf00      	nop
 8007b28:	40013000 	.word	0x40013000
 8007b2c:	50013000 	.word	0x50013000
 8007b30:	40003800 	.word	0x40003800
 8007b34:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b38:	f7f9 ffee 	bl	8001b18 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d803      	bhi.n	8007b50 <HAL_SPI_Transmit+0x3a8>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b4e:	d102      	bne.n	8007b56 <HAL_SPI_Transmit+0x3ae>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d114      	bne.n	8007b80 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f844 	bl	8007be4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e02c      	b.n	8007bda <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f af72 	bne.w	8007a72 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	2108      	movs	r1, #8
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f8c3 	bl	8007d24 <SPI_WaitOnFlagUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007baa:	f043 0220 	orr.w	r2, r3, #32
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f815 	bl	8007be4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e000      	b.n	8007bda <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8007bd8:	7efb      	ldrb	r3, [r7, #27]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3720      	adds	r7, #32
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop

08007be4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0208 	orr.w	r2, r2, #8
 8007c02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0210 	orr.w	r2, r2, #16
 8007c12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d014      	beq.n	8007c7e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00f      	beq.n	8007c7e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0220 	orr.w	r2, r2, #32
 8007c7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d014      	beq.n	8007cb4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00f      	beq.n	8007cb4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c9a:	f043 0204 	orr.w	r2, r3, #4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00f      	beq.n	8007cde <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc4:	f043 0201 	orr.w	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cdc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00f      	beq.n	8007d08 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cee:	f043 0208 	orr.w	r2, r3, #8
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8007d18:	bf00      	nop
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	4613      	mov	r3, r2
 8007d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d34:	e010      	b.n	8007d58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d36:	f7f9 feef 	bl	8001b18 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d803      	bhi.n	8007d4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d4c:	d102      	bne.n	8007d54 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e00f      	b.n	8007d78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4013      	ands	r3, r2
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d0df      	beq.n	8007d36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	3307      	adds	r3, #7
 8007d9e:	08db      	lsrs	r3, r3, #3
 8007da0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d12e      	bne.n	8007e2a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e028      	b.n	8007e2c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0201 	bic.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007e06:	ea42 0103 	orr.w	r1, r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e000      	b.n	8007e2c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
  }
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e049      	b.n	8007ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7f9 fc0a 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f000 f8d6 	bl	8008028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d001      	beq.n	8007f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e072      	b.n	8007fe6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0201 	orr.w	r2, r2, #1
 8007f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a35      	ldr	r2, [pc, #212]	; (8007ff4 <HAL_TIM_Base_Start_IT+0x10c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d040      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a34      	ldr	r2, [pc, #208]	; (8007ff8 <HAL_TIM_Base_Start_IT+0x110>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d03b      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f34:	d036      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f3e:	d031      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a2d      	ldr	r2, [pc, #180]	; (8007ffc <HAL_TIM_Base_Start_IT+0x114>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d02c      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a2c      	ldr	r2, [pc, #176]	; (8008000 <HAL_TIM_Base_Start_IT+0x118>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d027      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <HAL_TIM_Base_Start_IT+0x11c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d022      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a29      	ldr	r2, [pc, #164]	; (8008008 <HAL_TIM_Base_Start_IT+0x120>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d01d      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a27      	ldr	r2, [pc, #156]	; (800800c <HAL_TIM_Base_Start_IT+0x124>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d018      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a26      	ldr	r2, [pc, #152]	; (8008010 <HAL_TIM_Base_Start_IT+0x128>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d013      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a24      	ldr	r2, [pc, #144]	; (8008014 <HAL_TIM_Base_Start_IT+0x12c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00e      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a23      	ldr	r2, [pc, #140]	; (8008018 <HAL_TIM_Base_Start_IT+0x130>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d009      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a21      	ldr	r2, [pc, #132]	; (800801c <HAL_TIM_Base_Start_IT+0x134>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d004      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0xbc>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a20      	ldr	r2, [pc, #128]	; (8008020 <HAL_TIM_Base_Start_IT+0x138>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d115      	bne.n	8007fd0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <HAL_TIM_Base_Start_IT+0x13c>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b06      	cmp	r3, #6
 8007fb4:	d015      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0xfa>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fbc:	d011      	beq.n	8007fe2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fce:	e008      	b.n	8007fe2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0201 	orr.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e000      	b.n	8007fe4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	50012c00 	.word	0x50012c00
 8007ffc:	40000400 	.word	0x40000400
 8008000:	50000400 	.word	0x50000400
 8008004:	40000800 	.word	0x40000800
 8008008:	50000800 	.word	0x50000800
 800800c:	40000c00 	.word	0x40000c00
 8008010:	50000c00 	.word	0x50000c00
 8008014:	40013400 	.word	0x40013400
 8008018:	50013400 	.word	0x50013400
 800801c:	40014000 	.word	0x40014000
 8008020:	50014000 	.word	0x50014000
 8008024:	00010007 	.word	0x00010007

08008028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a68      	ldr	r2, [pc, #416]	; (80081dc <TIM_Base_SetConfig+0x1b4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d02b      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a67      	ldr	r2, [pc, #412]	; (80081e0 <TIM_Base_SetConfig+0x1b8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d027      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804e:	d023      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008056:	d01f      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a62      	ldr	r2, [pc, #392]	; (80081e4 <TIM_Base_SetConfig+0x1bc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d01b      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a61      	ldr	r2, [pc, #388]	; (80081e8 <TIM_Base_SetConfig+0x1c0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d017      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a60      	ldr	r2, [pc, #384]	; (80081ec <TIM_Base_SetConfig+0x1c4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d013      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a5f      	ldr	r2, [pc, #380]	; (80081f0 <TIM_Base_SetConfig+0x1c8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00f      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a5e      	ldr	r2, [pc, #376]	; (80081f4 <TIM_Base_SetConfig+0x1cc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00b      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a5d      	ldr	r2, [pc, #372]	; (80081f8 <TIM_Base_SetConfig+0x1d0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d007      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a5c      	ldr	r2, [pc, #368]	; (80081fc <TIM_Base_SetConfig+0x1d4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_Base_SetConfig+0x70>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a5b      	ldr	r2, [pc, #364]	; (8008200 <TIM_Base_SetConfig+0x1d8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d108      	bne.n	80080aa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a4b      	ldr	r2, [pc, #300]	; (80081dc <TIM_Base_SetConfig+0x1b4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d043      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a4a      	ldr	r2, [pc, #296]	; (80081e0 <TIM_Base_SetConfig+0x1b8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d03f      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c0:	d03b      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080c8:	d037      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a45      	ldr	r2, [pc, #276]	; (80081e4 <TIM_Base_SetConfig+0x1bc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d033      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a44      	ldr	r2, [pc, #272]	; (80081e8 <TIM_Base_SetConfig+0x1c0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d02f      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a43      	ldr	r2, [pc, #268]	; (80081ec <TIM_Base_SetConfig+0x1c4>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d02b      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a42      	ldr	r2, [pc, #264]	; (80081f0 <TIM_Base_SetConfig+0x1c8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d027      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a41      	ldr	r2, [pc, #260]	; (80081f4 <TIM_Base_SetConfig+0x1cc>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d023      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a40      	ldr	r2, [pc, #256]	; (80081f8 <TIM_Base_SetConfig+0x1d0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d01f      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a3f      	ldr	r2, [pc, #252]	; (80081fc <TIM_Base_SetConfig+0x1d4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01b      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a3e      	ldr	r2, [pc, #248]	; (8008200 <TIM_Base_SetConfig+0x1d8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d017      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a3d      	ldr	r2, [pc, #244]	; (8008204 <TIM_Base_SetConfig+0x1dc>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d013      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a3c      	ldr	r2, [pc, #240]	; (8008208 <TIM_Base_SetConfig+0x1e0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00f      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a3b      	ldr	r2, [pc, #236]	; (800820c <TIM_Base_SetConfig+0x1e4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00b      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a3a      	ldr	r2, [pc, #232]	; (8008210 <TIM_Base_SetConfig+0x1e8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d007      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a39      	ldr	r2, [pc, #228]	; (8008214 <TIM_Base_SetConfig+0x1ec>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d003      	beq.n	800813a <TIM_Base_SetConfig+0x112>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a38      	ldr	r2, [pc, #224]	; (8008218 <TIM_Base_SetConfig+0x1f0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d108      	bne.n	800814c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a1a      	ldr	r2, [pc, #104]	; (80081dc <TIM_Base_SetConfig+0x1b4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d023      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a19      	ldr	r2, [pc, #100]	; (80081e0 <TIM_Base_SetConfig+0x1b8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d01f      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <TIM_Base_SetConfig+0x1d4>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d01b      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a1d      	ldr	r2, [pc, #116]	; (8008200 <TIM_Base_SetConfig+0x1d8>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d017      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <TIM_Base_SetConfig+0x1dc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <TIM_Base_SetConfig+0x1e0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00f      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a1a      	ldr	r2, [pc, #104]	; (800820c <TIM_Base_SetConfig+0x1e4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00b      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a19      	ldr	r2, [pc, #100]	; (8008210 <TIM_Base_SetConfig+0x1e8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d007      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a18      	ldr	r2, [pc, #96]	; (8008214 <TIM_Base_SetConfig+0x1ec>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d003      	beq.n	80081c0 <TIM_Base_SetConfig+0x198>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <TIM_Base_SetConfig+0x1f0>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d103      	bne.n	80081c8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	615a      	str	r2, [r3, #20]
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40012c00 	.word	0x40012c00
 80081e0:	50012c00 	.word	0x50012c00
 80081e4:	40000400 	.word	0x40000400
 80081e8:	50000400 	.word	0x50000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	50000800 	.word	0x50000800
 80081f4:	40000c00 	.word	0x40000c00
 80081f8:	50000c00 	.word	0x50000c00
 80081fc:	40013400 	.word	0x40013400
 8008200:	50013400 	.word	0x50013400
 8008204:	40014000 	.word	0x40014000
 8008208:	50014000 	.word	0x50014000
 800820c:	40014400 	.word	0x40014400
 8008210:	50014400 	.word	0x50014400
 8008214:	40014800 	.word	0x40014800
 8008218:	50014800 	.word	0x50014800

0800821c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e042      	b.n	80082b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7f9 fa3b 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2224      	movs	r2, #36	; 0x24
 800824a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0201 	bic.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f8ba 	bl	80083d8 <UART_SetConfig>
 8008264:	4603      	mov	r3, r0
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e022      	b.n	80082b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa46 	bl	8008708 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800828a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800829a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0201 	orr.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 facd 	bl	800884c <UART_CheckIdleState>
 80082b2:	4603      	mov	r3, r0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08a      	sub	sp, #40	; 0x28
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	4613      	mov	r3, r2
 80082ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d17b      	bne.n	80083ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <HAL_UART_Transmit+0x26>
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e074      	b.n	80083d0 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2221      	movs	r2, #33	; 0x21
 80082f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082f6:	f7f9 fc0f 	bl	8001b18 <HAL_GetTick>
 80082fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	88fa      	ldrh	r2, [r7, #6]
 8008308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008314:	d108      	bne.n	8008328 <HAL_UART_Transmit+0x6c>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d104      	bne.n	8008328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	61bb      	str	r3, [r7, #24]
 8008326:	e003      	b.n	8008330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008330:	e030      	b.n	8008394 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2200      	movs	r2, #0
 800833a:	2180      	movs	r1, #128	; 0x80
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fb2f 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e03d      	b.n	80083d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	3302      	adds	r3, #2
 800836e:	61bb      	str	r3, [r7, #24]
 8008370:	e007      	b.n	8008382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	3301      	adds	r3, #1
 8008380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008388:	b29b      	uxth	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1c8      	bne.n	8008332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2200      	movs	r2, #0
 80083a8:	2140      	movs	r1, #64	; 0x40
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 faf8 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e006      	b.n	80083d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e000      	b.n	80083d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80083ce:	2302      	movs	r3, #2
  }
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3720      	adds	r7, #32
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083dc:	b094      	sub	sp, #80	; 0x50
 80083de:	af00      	add	r7, sp, #0
 80083e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	4b9b      	ldr	r3, [pc, #620]	; (800865c <UART_SetConfig+0x284>)
 80083ee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	431a      	orrs	r2, r3
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	4313      	orrs	r3, r2
 8008406:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4994      	ldr	r1, [pc, #592]	; (8008660 <UART_SetConfig+0x288>)
 8008410:	4019      	ands	r1, r3
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008418:	430b      	orrs	r3, r1
 800841a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	68d9      	ldr	r1, [r3, #12]
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	ea40 0301 	orr.w	r3, r0, r1
 8008432:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b87      	ldr	r3, [pc, #540]	; (800865c <UART_SetConfig+0x284>)
 8008440:	429a      	cmp	r2, r3
 8008442:	d009      	beq.n	8008458 <UART_SetConfig+0x80>
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	4b86      	ldr	r3, [pc, #536]	; (8008664 <UART_SetConfig+0x28c>)
 800844a:	429a      	cmp	r2, r3
 800844c:	d004      	beq.n	8008458 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008450:	6a1a      	ldr	r2, [r3, #32]
 8008452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008454:	4313      	orrs	r3, r2
 8008456:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008462:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846c:	430b      	orrs	r3, r1
 800846e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008476:	f023 000f 	bic.w	r0, r3, #15
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	ea40 0301 	orr.w	r3, r0, r1
 8008486:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	4b76      	ldr	r3, [pc, #472]	; (8008668 <UART_SetConfig+0x290>)
 800848e:	429a      	cmp	r2, r3
 8008490:	d102      	bne.n	8008498 <UART_SetConfig+0xc0>
 8008492:	2301      	movs	r3, #1
 8008494:	64bb      	str	r3, [r7, #72]	; 0x48
 8008496:	e021      	b.n	80084dc <UART_SetConfig+0x104>
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4b73      	ldr	r3, [pc, #460]	; (800866c <UART_SetConfig+0x294>)
 800849e:	429a      	cmp	r2, r3
 80084a0:	d102      	bne.n	80084a8 <UART_SetConfig+0xd0>
 80084a2:	2304      	movs	r3, #4
 80084a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a6:	e019      	b.n	80084dc <UART_SetConfig+0x104>
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	4b70      	ldr	r3, [pc, #448]	; (8008670 <UART_SetConfig+0x298>)
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d102      	bne.n	80084b8 <UART_SetConfig+0xe0>
 80084b2:	2308      	movs	r3, #8
 80084b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b6:	e011      	b.n	80084dc <UART_SetConfig+0x104>
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	4b6d      	ldr	r3, [pc, #436]	; (8008674 <UART_SetConfig+0x29c>)
 80084be:	429a      	cmp	r2, r3
 80084c0:	d102      	bne.n	80084c8 <UART_SetConfig+0xf0>
 80084c2:	2310      	movs	r3, #16
 80084c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084c6:	e009      	b.n	80084dc <UART_SetConfig+0x104>
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	4b63      	ldr	r3, [pc, #396]	; (800865c <UART_SetConfig+0x284>)
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d102      	bne.n	80084d8 <UART_SetConfig+0x100>
 80084d2:	2320      	movs	r3, #32
 80084d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084d6:	e001      	b.n	80084dc <UART_SetConfig+0x104>
 80084d8:	2300      	movs	r3, #0
 80084da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	4b5e      	ldr	r3, [pc, #376]	; (800865c <UART_SetConfig+0x284>)
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d004      	beq.n	80084f0 <UART_SetConfig+0x118>
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b5e      	ldr	r3, [pc, #376]	; (8008664 <UART_SetConfig+0x28c>)
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d172      	bne.n	80085d6 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80084f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f2:	2200      	movs	r2, #0
 80084f4:	623b      	str	r3, [r7, #32]
 80084f6:	627a      	str	r2, [r7, #36]	; 0x24
 80084f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80084fc:	f7fc fc02 	bl	8004d04 <HAL_RCCEx_GetPeriphCLKFreq>
 8008500:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 80e7 	beq.w	80086d8 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	4a5a      	ldr	r2, [pc, #360]	; (8008678 <UART_SetConfig+0x2a0>)
 8008510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008514:	461a      	mov	r2, r3
 8008516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008518:	fbb3 f3f2 	udiv	r3, r3, r2
 800851c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	4413      	add	r3, r2
 8008528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800852a:	429a      	cmp	r2, r3
 800852c:	d305      	bcc.n	800853a <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008536:	429a      	cmp	r2, r3
 8008538:	d903      	bls.n	8008542 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008540:	e048      	b.n	80085d4 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008544:	2200      	movs	r2, #0
 8008546:	61bb      	str	r3, [r7, #24]
 8008548:	61fa      	str	r2, [r7, #28]
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	4a4a      	ldr	r2, [pc, #296]	; (8008678 <UART_SetConfig+0x2a0>)
 8008550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008554:	b29b      	uxth	r3, r3
 8008556:	2200      	movs	r2, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	617a      	str	r2, [r7, #20]
 800855c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008560:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008564:	f7f7 fe88 	bl	8000278 <__aeabi_uldivmod>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4610      	mov	r0, r2
 800856e:	4619      	mov	r1, r3
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	020b      	lsls	r3, r1, #8
 800857a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800857e:	0202      	lsls	r2, r0, #8
 8008580:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008582:	6849      	ldr	r1, [r1, #4]
 8008584:	0849      	lsrs	r1, r1, #1
 8008586:	2000      	movs	r0, #0
 8008588:	460c      	mov	r4, r1
 800858a:	4605      	mov	r5, r0
 800858c:	eb12 0804 	adds.w	r8, r2, r4
 8008590:	eb43 0905 	adc.w	r9, r3, r5
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	60bb      	str	r3, [r7, #8]
 800859c:	60fa      	str	r2, [r7, #12]
 800859e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f7f7 fe67 	bl	8000278 <__aeabi_uldivmod>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4613      	mov	r3, r2
 80085b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085b8:	d308      	bcc.n	80085cc <UART_SetConfig+0x1f4>
 80085ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c0:	d204      	bcs.n	80085cc <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085c8:	60da      	str	r2, [r3, #12]
 80085ca:	e003      	b.n	80085d4 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80085d2:	e081      	b.n	80086d8 <UART_SetConfig+0x300>
 80085d4:	e080      	b.n	80086d8 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085de:	d14d      	bne.n	800867c <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80085e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e2:	2200      	movs	r2, #0
 80085e4:	603b      	str	r3, [r7, #0]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085ec:	f7fc fb8a 	bl	8004d04 <HAL_RCCEx_GetPeriphCLKFreq>
 80085f0:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d06f      	beq.n	80086d8 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <UART_SetConfig+0x2a0>)
 80085fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008602:	461a      	mov	r2, r3
 8008604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008606:	fbb3 f3f2 	udiv	r3, r3, r2
 800860a:	005a      	lsls	r2, r3, #1
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	441a      	add	r2, r3
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	fbb2 f3f3 	udiv	r3, r2, r3
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	2b0f      	cmp	r3, #15
 8008622:	d916      	bls.n	8008652 <UART_SetConfig+0x27a>
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800862a:	d212      	bcs.n	8008652 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800862c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862e:	b29b      	uxth	r3, r3
 8008630:	f023 030f 	bic.w	r3, r3, #15
 8008634:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	085b      	lsrs	r3, r3, #1
 800863a:	b29b      	uxth	r3, r3
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	b29a      	uxth	r2, r3
 8008642:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008644:	4313      	orrs	r3, r2
 8008646:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800864e:	60da      	str	r2, [r3, #12]
 8008650:	e042      	b.n	80086d8 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008658:	e03e      	b.n	80086d8 <UART_SetConfig+0x300>
 800865a:	bf00      	nop
 800865c:	46002400 	.word	0x46002400
 8008660:	cfff69f3 	.word	0xcfff69f3
 8008664:	56002400 	.word	0x56002400
 8008668:	40013800 	.word	0x40013800
 800866c:	40004800 	.word	0x40004800
 8008670:	40004c00 	.word	0x40004c00
 8008674:	40005000 	.word	0x40005000
 8008678:	0800a2c8 	.word	0x0800a2c8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800867c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867e:	2200      	movs	r2, #0
 8008680:	469a      	mov	sl, r3
 8008682:	4693      	mov	fp, r2
 8008684:	4650      	mov	r0, sl
 8008686:	4659      	mov	r1, fp
 8008688:	f7fc fb3c 	bl	8004d04 <HAL_RCCEx_GetPeriphCLKFreq>
 800868c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800868e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d021      	beq.n	80086d8 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <UART_SetConfig+0x32c>)
 800869a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869e:	461a      	mov	r2, r3
 80086a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	441a      	add	r2, r3
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ba:	2b0f      	cmp	r3, #15
 80086bc:	d909      	bls.n	80086d2 <UART_SetConfig+0x2fa>
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c4:	d205      	bcs.n	80086d2 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60da      	str	r2, [r3, #12]
 80086d0:	e002      	b.n	80086d8 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2201      	movs	r2, #1
 80086dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	2201      	movs	r2, #1
 80086e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	2200      	movs	r2, #0
 80086ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	2200      	movs	r2, #0
 80086f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3750      	adds	r7, #80	; 0x50
 80086fc:	46bd      	mov	sp, r7
 80086fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008702:	bf00      	nop
 8008704:	0800a2c8 	.word	0x0800a2c8

08008708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01a      	beq.n	800881e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008806:	d10a      	bne.n	800881e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b098      	sub	sp, #96	; 0x60
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800885c:	f7f9 f95c 	bl	8001b18 <HAL_GetTick>
 8008860:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b08      	cmp	r3, #8
 800886e:	d12f      	bne.n	80088d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008878:	2200      	movs	r2, #0
 800887a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f88e 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d022      	beq.n	80088d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800889e:	653b      	str	r3, [r7, #80]	; 0x50
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a8:	647b      	str	r3, [r7, #68]	; 0x44
 80088aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e063      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d149      	bne.n	8008972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e6:	2200      	movs	r2, #0
 80088e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f857 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d03c      	beq.n	8008972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	623b      	str	r3, [r7, #32]
   return(result);
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800890c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008916:	633b      	str	r3, [r7, #48]	; 0x30
 8008918:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800891c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e6      	bne.n	80088f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	60fb      	str	r3, [r7, #12]
   return(result);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	64bb      	str	r3, [r7, #72]	; 0x48
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800894a:	61fa      	str	r2, [r7, #28]
 800894c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	69b9      	ldr	r1, [r7, #24]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	617b      	str	r3, [r7, #20]
   return(result);
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e5      	bne.n	800892a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e012      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3758      	adds	r7, #88	; 0x58
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b0:	e049      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089b8:	d045      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ba:	f7f9 f8ad 	bl	8001b18 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e048      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d031      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d110      	bne.n	8008a12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2208      	movs	r2, #8
 80089f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f838 	bl	8008a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2208      	movs	r2, #8
 8008a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e029      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a20:	d111      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f81e 	bl	8008a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e00f      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d0a6      	beq.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b095      	sub	sp, #84	; 0x54
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a94:	643b      	str	r3, [r7, #64]	; 0x40
 8008a96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e6      	bne.n	8008a76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3308      	adds	r3, #8
 8008aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e3      	bne.n	8008aa8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d118      	bne.n	8008b1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f023 0310 	bic.w	r3, r3, #16
 8008afc:	647b      	str	r3, [r7, #68]	; 0x44
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6979      	ldr	r1, [r7, #20]
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	613b      	str	r3, [r7, #16]
   return(result);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e6      	bne.n	8008ae8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b2e:	bf00      	nop
 8008b30:	3754      	adds	r7, #84	; 0x54
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e027      	b.n	8008ba0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2224      	movs	r2, #36	; 0x24
 8008b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e02d      	b.n	8008c20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2224      	movs	r2, #36	; 0x24
 8008bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0201 	bic.w	r2, r2, #1
 8008bea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f84f 	bl	8008ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e02d      	b.n	8008c9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2224      	movs	r2, #36	; 0x24
 8008c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0201 	bic.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f811 	bl	8008ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d108      	bne.n	8008cc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cc4:	e031      	b.n	8008d2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cca:	2308      	movs	r3, #8
 8008ccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	0e5b      	lsrs	r3, r3, #25
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 0307 	and.w	r3, r3, #7
 8008cdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	0f5b      	lsrs	r3, r3, #29
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	7b3a      	ldrb	r2, [r7, #12]
 8008cf2:	4911      	ldr	r1, [pc, #68]	; (8008d38 <UARTEx_SetNbDataToProcess+0x94>)
 8008cf4:	5c8a      	ldrb	r2, [r1, r2]
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cfa:	7b3a      	ldrb	r2, [r7, #12]
 8008cfc:	490f      	ldr	r1, [pc, #60]	; (8008d3c <UARTEx_SetNbDataToProcess+0x98>)
 8008cfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	7b7a      	ldrb	r2, [r7, #13]
 8008d10:	4909      	ldr	r1, [pc, #36]	; (8008d38 <UARTEx_SetNbDataToProcess+0x94>)
 8008d12:	5c8a      	ldrb	r2, [r1, r2]
 8008d14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d18:	7b7a      	ldrb	r2, [r7, #13]
 8008d1a:	4908      	ldr	r1, [pc, #32]	; (8008d3c <UARTEx_SetNbDataToProcess+0x98>)
 8008d1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d2a:	bf00      	nop
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	0800a2e0 	.word	0x0800a2e0
 8008d3c:	0800a2e8 	.word	0x0800a2e8

08008d40 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008d40:	b084      	sub	sp, #16
 8008d42:	b480      	push	{r7}
 8008d44:	b085      	sub	sp, #20
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	f107 001c 	add.w	r0, r7, #28
 8008d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008d56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008d58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008d5a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008d5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008d62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008d66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <SDMMC_Init+0x50>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	b004      	add	sp, #16
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	ffc02c00 	.word	0xffc02c00

08008d94 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f043 0203 	orr.w	r2, r3, #3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0303 	and.w	r3, r3, #3
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008e0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008e10:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008e16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <SDMMC_SendCommand+0x50>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	fffee0c0 	.word	0xfffee0c0

08008e40 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	b2db      	uxtb	r3, r3
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3314      	adds	r3, #20
 8008e68:	461a      	mov	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008ea6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008eac:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008eb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0

}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008ee6:	2310      	movs	r3, #16
 8008ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff73 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f0a:	2110      	movs	r1, #16
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f995 	bl	800923c <SDMMC_GetCmdResp1>
 8008f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f14:	69fb      	ldr	r3, [r7, #28]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3720      	adds	r7, #32
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b088      	sub	sp, #32
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f2c:	2307      	movs	r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff ff50 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f50:	2107      	movs	r1, #7
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f972 	bl	800923c <SDMMC_GetCmdResp1>
 8008f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff ff2f 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fb96 	bl	80096c0 <SDMMC_GetCmdError>
 8008f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f96:	69fb      	ldr	r3, [r7, #28]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3720      	adds	r7, #32
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fa8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fae:	2308      	movs	r3, #8
 8008fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc2:	f107 0308 	add.w	r3, r7, #8
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ff0f 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fb28 	bl	8009624 <SDMMC_GetCmdResp7>
 8008fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b088      	sub	sp, #32
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fee:	2337      	movs	r3, #55	; 0x37
 8008ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009002:	f107 0308 	add.w	r3, r7, #8
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff feef 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800900e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009012:	2137      	movs	r1, #55	; 0x37
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f911 	bl	800923c <SDMMC_GetCmdResp1>
 800901a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901c:	69fb      	ldr	r3, [r7, #28]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3720      	adds	r7, #32
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b088      	sub	sp, #32
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009034:	2329      	movs	r3, #41	; 0x29
 8009036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800903c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fecc 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa2d 	bl	80094b4 <SDMMC_GetCmdResp3>
 800905a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800905c:	69fb      	ldr	r3, [r7, #28]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3720      	adds	r7, #32
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b088      	sub	sp, #32
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009074:	2306      	movs	r3, #6
 8009076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800907c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009088:	f107 0308 	add.w	r3, r7, #8
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff feac 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009094:	f241 3288 	movw	r2, #5000	; 0x1388
 8009098:	2106      	movs	r1, #6
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f8ce 	bl	800923c <SDMMC_GetCmdResp1>
 80090a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a2:	69fb      	ldr	r3, [r7, #28]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090b8:	2333      	movs	r3, #51	; 0x33
 80090ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090c2:	2300      	movs	r3, #0
 80090c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7ff fe8a 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80090d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090dc:	2133      	movs	r1, #51	; 0x33
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f8ac 	bl	800923c <SDMMC_GetCmdResp1>
 80090e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090e6:	69fb      	ldr	r3, [r7, #28]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090fc:	2302      	movs	r3, #2
 80090fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009100:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009106:	2300      	movs	r3, #0
 8009108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800910a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800910e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009110:	f107 0308 	add.w	r3, r7, #8
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff fe68 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f97f 	bl	8009420 <SDMMC_GetCmdResp2>
 8009122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009124:	69fb      	ldr	r3, [r7, #28]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3720      	adds	r7, #32
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b088      	sub	sp, #32
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800913c:	2309      	movs	r3, #9
 800913e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009140:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800914a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800914e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009150:	f107 0308 	add.w	r3, r7, #8
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff fe48 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f95f 	bl	8009420 <SDMMC_GetCmdResp2>
 8009162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009164:	69fb      	ldr	r3, [r7, #28]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b088      	sub	sp, #32
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800917c:	2303      	movs	r3, #3
 800917e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800918a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800918e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009190:	f107 0308 	add.w	r3, r7, #8
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff fe28 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	2103      	movs	r1, #3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f9c7 	bl	8009534 <SDMMC_GetCmdResp6>
 80091a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a8:	69fb      	ldr	r3, [r7, #28]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3720      	adds	r7, #32
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091c0:	230d      	movs	r3, #13
 80091c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091d4:	f107 0308 	add.w	r3, r7, #8
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff fe06 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	210d      	movs	r1, #13
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f828 	bl	800923c <SDMMC_GetCmdResp1>
 80091ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ee:	69fb      	ldr	r3, [r7, #28]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3720      	adds	r7, #32
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009204:	230d      	movs	r3, #13
 8009206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800920c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fde4 	bl	8008dec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009224:	f241 3288 	movw	r2, #5000	; 0x1388
 8009228:	210d      	movs	r1, #13
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f806 	bl	800923c <SDMMC_GetCmdResp1>
 8009230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009232:	69fb      	ldr	r3, [r7, #28]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	460b      	mov	r3, r1
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800924a:	4b70      	ldr	r3, [pc, #448]	; (800940c <SDMMC_GetCmdResp1+0x1d0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a70      	ldr	r2, [pc, #448]	; (8009410 <SDMMC_GetCmdResp1+0x1d4>)
 8009250:	fba2 2303 	umull	r2, r3, r2, r3
 8009254:	0a5a      	lsrs	r2, r3, #9
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	fb02 f303 	mul.w	r3, r2, r3
 800925c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	1e5a      	subs	r2, r3, #1
 8009262:	61fa      	str	r2, [r7, #28]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800926c:	e0c9      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009272:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	4b67      	ldr	r3, [pc, #412]	; (8009414 <SDMMC_GetCmdResp1+0x1d8>)
 8009278:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0ef      	beq.n	800925e <SDMMC_GetCmdResp1+0x22>
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1ea      	bne.n	800925e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2204      	movs	r2, #4
 8009298:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800929a:	2304      	movs	r3, #4
 800929c:	e0b1      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0a6      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4a58      	ldr	r2, [pc, #352]	; (8009418 <SDMMC_GetCmdResp1+0x1dc>)
 80092b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7ff fdc0 	bl	8008e40 <SDMMC_GetCommandResponse>
 80092c0:	4603      	mov	r3, r0
 80092c2:	461a      	mov	r2, r3
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d001      	beq.n	80092ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e099      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092ce:	2100      	movs	r1, #0
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fdc2 	bl	8008e5a <SDMMC_GetResponse>
 80092d6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	4b50      	ldr	r3, [pc, #320]	; (800941c <SDMMC_GetCmdResp1+0x1e0>)
 80092dc:	4013      	ands	r3, r2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e08d      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da02      	bge.n	80092f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092f0:	e087      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	e080      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800930a:	2380      	movs	r3, #128	; 0x80
 800930c:	e079      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800931c:	e071      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800932c:	e069      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933c:	e061      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800934c:	e059      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800935c:	e051      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800936c:	e049      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800937c:	e041      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800938c:	e039      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800939c:	e031      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80093a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093ac:	e029      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80093b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093bc:	e021      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093cc:	e019      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80093d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093dc:	e011      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093ec:	e009      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093fc:	e001      	b.n	8009402 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009402:	4618      	mov	r0, r3
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000000 	.word	0x20000000
 8009410:	10624dd3 	.word	0x10624dd3
 8009414:	00200045 	.word	0x00200045
 8009418:	002000c5 	.word	0x002000c5
 800941c:	fdffe008 	.word	0xfdffe008

08009420 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009428:	4b1f      	ldr	r3, [pc, #124]	; (80094a8 <SDMMC_GetCmdResp2+0x88>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a1f      	ldr	r2, [pc, #124]	; (80094ac <SDMMC_GetCmdResp2+0x8c>)
 800942e:	fba2 2303 	umull	r2, r3, r2, r3
 8009432:	0a5b      	lsrs	r3, r3, #9
 8009434:	f241 3288 	movw	r2, #5000	; 0x1388
 8009438:	fb02 f303 	mul.w	r3, r2, r3
 800943c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1e5a      	subs	r2, r3, #1
 8009442:	60fa      	str	r2, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800944c:	e026      	b.n	800949c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009452:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0ef      	beq.n	800943e <SDMMC_GetCmdResp2+0x1e>
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1ea      	bne.n	800943e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2204      	movs	r2, #4
 8009478:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800947a:	2304      	movs	r3, #4
 800947c:	e00e      	b.n	800949c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d004      	beq.n	8009494 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009490:	2301      	movs	r3, #1
 8009492:	e003      	b.n	800949c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a06      	ldr	r2, [pc, #24]	; (80094b0 <SDMMC_GetCmdResp2+0x90>)
 8009498:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	20000000 	.word	0x20000000
 80094ac:	10624dd3 	.word	0x10624dd3
 80094b0:	002000c5 	.word	0x002000c5

080094b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80094bc:	4b1a      	ldr	r3, [pc, #104]	; (8009528 <SDMMC_GetCmdResp3+0x74>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a1a      	ldr	r2, [pc, #104]	; (800952c <SDMMC_GetCmdResp3+0x78>)
 80094c2:	fba2 2303 	umull	r2, r3, r2, r3
 80094c6:	0a5b      	lsrs	r3, r3, #9
 80094c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094cc:	fb02 f303 	mul.w	r3, r2, r3
 80094d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	60fa      	str	r2, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094e0:	e01b      	b.n	800951a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0ef      	beq.n	80094d2 <SDMMC_GetCmdResp3+0x1e>
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1ea      	bne.n	80094d2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2204      	movs	r2, #4
 800950c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800950e:	2304      	movs	r3, #4
 8009510:	e003      	b.n	800951a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a06      	ldr	r2, [pc, #24]	; (8009530 <SDMMC_GetCmdResp3+0x7c>)
 8009516:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	20000000 	.word	0x20000000
 800952c:	10624dd3 	.word	0x10624dd3
 8009530:	002000c5 	.word	0x002000c5

08009534 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	460b      	mov	r3, r1
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009542:	4b35      	ldr	r3, [pc, #212]	; (8009618 <SDMMC_GetCmdResp6+0xe4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a35      	ldr	r2, [pc, #212]	; (800961c <SDMMC_GetCmdResp6+0xe8>)
 8009548:	fba2 2303 	umull	r2, r3, r2, r3
 800954c:	0a5b      	lsrs	r3, r3, #9
 800954e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009552:	fb02 f303 	mul.w	r3, r2, r3
 8009556:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	1e5a      	subs	r2, r3, #1
 800955c:	61fa      	str	r2, [r7, #28]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009562:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009566:	e052      	b.n	800960e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0ef      	beq.n	8009558 <SDMMC_GetCmdResp6+0x24>
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1ea      	bne.n	8009558 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d004      	beq.n	8009598 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2204      	movs	r2, #4
 8009592:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009594:	2304      	movs	r3, #4
 8009596:	e03a      	b.n	800960e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e02f      	b.n	800960e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff fc46 	bl	8008e40 <SDMMC_GetCommandResponse>
 80095b4:	4603      	mov	r3, r0
 80095b6:	461a      	mov	r2, r3
 80095b8:	7afb      	ldrb	r3, [r7, #11]
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d001      	beq.n	80095c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095be:	2301      	movs	r3, #1
 80095c0:	e025      	b.n	800960e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4a16      	ldr	r2, [pc, #88]	; (8009620 <SDMMC_GetCmdResp6+0xec>)
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80095c8:	2100      	movs	r1, #0
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff fc45 	bl	8008e5a <SDMMC_GetResponse>
 80095d0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d106      	bne.n	80095ea <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	0c1b      	lsrs	r3, r3, #16
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e011      	b.n	800960e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095f8:	e009      	b.n	800960e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009608:	e001      	b.n	800960e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800960a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800960e:	4618      	mov	r0, r3
 8009610:	3720      	adds	r7, #32
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20000000 	.word	0x20000000
 800961c:	10624dd3 	.word	0x10624dd3
 8009620:	002000c5 	.word	0x002000c5

08009624 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800962c:	4b22      	ldr	r3, [pc, #136]	; (80096b8 <SDMMC_GetCmdResp7+0x94>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a22      	ldr	r2, [pc, #136]	; (80096bc <SDMMC_GetCmdResp7+0x98>)
 8009632:	fba2 2303 	umull	r2, r3, r2, r3
 8009636:	0a5b      	lsrs	r3, r3, #9
 8009638:	f241 3288 	movw	r2, #5000	; 0x1388
 800963c:	fb02 f303 	mul.w	r3, r2, r3
 8009640:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	1e5a      	subs	r2, r3, #1
 8009646:	60fa      	str	r2, [r7, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d102      	bne.n	8009652 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800964c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009650:	e02c      	b.n	80096ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009656:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0ef      	beq.n	8009642 <SDMMC_GetCmdResp7+0x1e>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1ea      	bne.n	8009642 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2204      	movs	r2, #4
 800967c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800967e:	2304      	movs	r3, #4
 8009680:	e014      	b.n	80096ac <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009694:	2301      	movs	r3, #1
 8009696:	e009      	b.n	80096ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2240      	movs	r2, #64	; 0x40
 80096a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80096aa:	2300      	movs	r3, #0

}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20000000 	.word	0x20000000
 80096bc:	10624dd3 	.word	0x10624dd3

080096c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80096c8:	4b11      	ldr	r3, [pc, #68]	; (8009710 <SDMMC_GetCmdError+0x50>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a11      	ldr	r2, [pc, #68]	; (8009714 <SDMMC_GetCmdError+0x54>)
 80096ce:	fba2 2303 	umull	r2, r3, r2, r3
 80096d2:	0a5b      	lsrs	r3, r3, #9
 80096d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d8:	fb02 f303 	mul.w	r3, r2, r3
 80096dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1e5a      	subs	r2, r3, #1
 80096e2:	60fa      	str	r2, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096ec:	e009      	b.n	8009702 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0f1      	beq.n	80096de <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a06      	ldr	r2, [pc, #24]	; (8009718 <SDMMC_GetCmdError+0x58>)
 80096fe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000000 	.word	0x20000000
 8009714:	10624dd3 	.word	0x10624dd3
 8009718:	002000c5 	.word	0x002000c5

0800971c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009728:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009734:	f043 0201 	orr.w	r2, r3, #1
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800974a:	b084      	sub	sp, #16
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	f107 001c 	add.w	r0, r7, #28
 8009758:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e008      	b.n	8009778 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff ffd8 	bl	800971c <USB_CoreReset>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009782:	b004      	add	sp, #16
 8009784:	4770      	bx	lr

08009786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800978e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009792:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	43db      	mvns	r3, r3
 800979c:	401a      	ands	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	641a      	str	r2, [r3, #64]	; 0x40
 80097ce:	e00b      	b.n	80097e8 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d106      	bne.n	80097e4 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	641a      	str	r2, [r3, #64]	; 0x40
 80097e2:	e001      	b.n	80097e8 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80097f6:	b084      	sub	sp, #16
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	f107 001c 	add.w	r0, r7, #28
 8009804:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	f023 0201 	bic.w	r2, r3, #1
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff ffc7 	bl	80097b0 <USB_SetCurrentMode>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009838:	b004      	add	sp, #16
 800983a:	4770      	bx	lr

0800983c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009848:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
	...

08009860 <__errno>:
 8009860:	4b01      	ldr	r3, [pc, #4]	; (8009868 <__errno+0x8>)
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	2000000c 	.word	0x2000000c

0800986c <__libc_init_array>:
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	4d0d      	ldr	r5, [pc, #52]	; (80098a4 <__libc_init_array+0x38>)
 8009870:	2600      	movs	r6, #0
 8009872:	4c0d      	ldr	r4, [pc, #52]	; (80098a8 <__libc_init_array+0x3c>)
 8009874:	1b64      	subs	r4, r4, r5
 8009876:	10a4      	asrs	r4, r4, #2
 8009878:	42a6      	cmp	r6, r4
 800987a:	d109      	bne.n	8009890 <__libc_init_array+0x24>
 800987c:	4d0b      	ldr	r5, [pc, #44]	; (80098ac <__libc_init_array+0x40>)
 800987e:	2600      	movs	r6, #0
 8009880:	4c0b      	ldr	r4, [pc, #44]	; (80098b0 <__libc_init_array+0x44>)
 8009882:	f000 fc9d 	bl	800a1c0 <_init>
 8009886:	1b64      	subs	r4, r4, r5
 8009888:	10a4      	asrs	r4, r4, #2
 800988a:	42a6      	cmp	r6, r4
 800988c:	d105      	bne.n	800989a <__libc_init_array+0x2e>
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	f855 3b04 	ldr.w	r3, [r5], #4
 8009894:	3601      	adds	r6, #1
 8009896:	4798      	blx	r3
 8009898:	e7ee      	b.n	8009878 <__libc_init_array+0xc>
 800989a:	f855 3b04 	ldr.w	r3, [r5], #4
 800989e:	3601      	adds	r6, #1
 80098a0:	4798      	blx	r3
 80098a2:	e7f2      	b.n	800988a <__libc_init_array+0x1e>
 80098a4:	0800a32c 	.word	0x0800a32c
 80098a8:	0800a32c 	.word	0x0800a32c
 80098ac:	0800a32c 	.word	0x0800a32c
 80098b0:	0800a330 	.word	0x0800a330

080098b4 <memset>:
 80098b4:	4402      	add	r2, r0
 80098b6:	4603      	mov	r3, r0
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d100      	bne.n	80098be <memset+0xa>
 80098bc:	4770      	bx	lr
 80098be:	f803 1b01 	strb.w	r1, [r3], #1
 80098c2:	e7f9      	b.n	80098b8 <memset+0x4>

080098c4 <siprintf>:
 80098c4:	b40e      	push	{r1, r2, r3}
 80098c6:	b500      	push	{lr}
 80098c8:	b09c      	sub	sp, #112	; 0x70
 80098ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098ce:	ab1d      	add	r3, sp, #116	; 0x74
 80098d0:	9002      	str	r0, [sp, #8]
 80098d2:	9006      	str	r0, [sp, #24]
 80098d4:	9107      	str	r1, [sp, #28]
 80098d6:	9104      	str	r1, [sp, #16]
 80098d8:	4808      	ldr	r0, [pc, #32]	; (80098fc <siprintf+0x38>)
 80098da:	4909      	ldr	r1, [pc, #36]	; (8009900 <siprintf+0x3c>)
 80098dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e0:	9105      	str	r1, [sp, #20]
 80098e2:	a902      	add	r1, sp, #8
 80098e4:	6800      	ldr	r0, [r0, #0]
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	f000 f868 	bl	80099bc <_svfiprintf_r>
 80098ec:	9b02      	ldr	r3, [sp, #8]
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	b01c      	add	sp, #112	; 0x70
 80098f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f8:	b003      	add	sp, #12
 80098fa:	4770      	bx	lr
 80098fc:	2000000c 	.word	0x2000000c
 8009900:	ffff0208 	.word	0xffff0208

08009904 <__ssputs_r>:
 8009904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	688e      	ldr	r6, [r1, #8]
 800990a:	4682      	mov	sl, r0
 800990c:	460c      	mov	r4, r1
 800990e:	4690      	mov	r8, r2
 8009910:	429e      	cmp	r6, r3
 8009912:	461f      	mov	r7, r3
 8009914:	d838      	bhi.n	8009988 <__ssputs_r+0x84>
 8009916:	898a      	ldrh	r2, [r1, #12]
 8009918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800991c:	d032      	beq.n	8009984 <__ssputs_r+0x80>
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	6909      	ldr	r1, [r1, #16]
 8009924:	eba5 0901 	sub.w	r9, r5, r1
 8009928:	6965      	ldr	r5, [r4, #20]
 800992a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800992e:	444b      	add	r3, r9
 8009930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009934:	106d      	asrs	r5, r5, #1
 8009936:	429d      	cmp	r5, r3
 8009938:	bf38      	it	cc
 800993a:	461d      	movcc	r5, r3
 800993c:	0553      	lsls	r3, r2, #21
 800993e:	d531      	bpl.n	80099a4 <__ssputs_r+0xa0>
 8009940:	4629      	mov	r1, r5
 8009942:	f000 fb73 	bl	800a02c <_malloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	b950      	cbnz	r0, 8009960 <__ssputs_r+0x5c>
 800994a:	230c      	movs	r3, #12
 800994c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009950:	f8ca 3000 	str.w	r3, [sl]
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009960:	464a      	mov	r2, r9
 8009962:	6921      	ldr	r1, [r4, #16]
 8009964:	f000 face 	bl	8009f04 <memcpy>
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800996e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	6126      	str	r6, [r4, #16]
 8009976:	444e      	add	r6, r9
 8009978:	6165      	str	r5, [r4, #20]
 800997a:	eba5 0509 	sub.w	r5, r5, r9
 800997e:	6026      	str	r6, [r4, #0]
 8009980:	463e      	mov	r6, r7
 8009982:	60a5      	str	r5, [r4, #8]
 8009984:	42be      	cmp	r6, r7
 8009986:	d900      	bls.n	800998a <__ssputs_r+0x86>
 8009988:	463e      	mov	r6, r7
 800998a:	4632      	mov	r2, r6
 800998c:	4641      	mov	r1, r8
 800998e:	6820      	ldr	r0, [r4, #0]
 8009990:	f000 fac5 	bl	8009f1e <memmove>
 8009994:	68a3      	ldr	r3, [r4, #8]
 8009996:	2000      	movs	r0, #0
 8009998:	1b9b      	subs	r3, r3, r6
 800999a:	60a3      	str	r3, [r4, #8]
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	4433      	add	r3, r6
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	e7db      	b.n	800995c <__ssputs_r+0x58>
 80099a4:	462a      	mov	r2, r5
 80099a6:	f000 fbb5 	bl	800a114 <_realloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d1e1      	bne.n	8009974 <__ssputs_r+0x70>
 80099b0:	6921      	ldr	r1, [r4, #16]
 80099b2:	4650      	mov	r0, sl
 80099b4:	f000 face 	bl	8009f54 <_free_r>
 80099b8:	e7c7      	b.n	800994a <__ssputs_r+0x46>
	...

080099bc <_svfiprintf_r>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	4698      	mov	r8, r3
 80099c2:	898b      	ldrh	r3, [r1, #12]
 80099c4:	b09d      	sub	sp, #116	; 0x74
 80099c6:	4607      	mov	r7, r0
 80099c8:	061b      	lsls	r3, r3, #24
 80099ca:	460d      	mov	r5, r1
 80099cc:	4614      	mov	r4, r2
 80099ce:	d50e      	bpl.n	80099ee <_svfiprintf_r+0x32>
 80099d0:	690b      	ldr	r3, [r1, #16]
 80099d2:	b963      	cbnz	r3, 80099ee <_svfiprintf_r+0x32>
 80099d4:	2140      	movs	r1, #64	; 0x40
 80099d6:	f000 fb29 	bl	800a02c <_malloc_r>
 80099da:	6028      	str	r0, [r5, #0]
 80099dc:	6128      	str	r0, [r5, #16]
 80099de:	b920      	cbnz	r0, 80099ea <_svfiprintf_r+0x2e>
 80099e0:	230c      	movs	r3, #12
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e8:	e0d1      	b.n	8009b8e <_svfiprintf_r+0x1d2>
 80099ea:	2340      	movs	r3, #64	; 0x40
 80099ec:	616b      	str	r3, [r5, #20]
 80099ee:	2300      	movs	r3, #0
 80099f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f4:	f04f 0901 	mov.w	r9, #1
 80099f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009ba8 <_svfiprintf_r+0x1ec>
 80099fc:	9309      	str	r3, [sp, #36]	; 0x24
 80099fe:	2320      	movs	r3, #32
 8009a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a04:	2330      	movs	r3, #48	; 0x30
 8009a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a0a:	4623      	mov	r3, r4
 8009a0c:	469a      	mov	sl, r3
 8009a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a12:	b10a      	cbz	r2, 8009a18 <_svfiprintf_r+0x5c>
 8009a14:	2a25      	cmp	r2, #37	; 0x25
 8009a16:	d1f9      	bne.n	8009a0c <_svfiprintf_r+0x50>
 8009a18:	ebba 0b04 	subs.w	fp, sl, r4
 8009a1c:	d00b      	beq.n	8009a36 <_svfiprintf_r+0x7a>
 8009a1e:	465b      	mov	r3, fp
 8009a20:	4622      	mov	r2, r4
 8009a22:	4629      	mov	r1, r5
 8009a24:	4638      	mov	r0, r7
 8009a26:	f7ff ff6d 	bl	8009904 <__ssputs_r>
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f000 80aa 	beq.w	8009b84 <_svfiprintf_r+0x1c8>
 8009a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a32:	445a      	add	r2, fp
 8009a34:	9209      	str	r2, [sp, #36]	; 0x24
 8009a36:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 80a2 	beq.w	8009b84 <_svfiprintf_r+0x1c8>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a46:	f10a 0a01 	add.w	sl, sl, #1
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	9307      	str	r3, [sp, #28]
 8009a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a52:	931a      	str	r3, [sp, #104]	; 0x68
 8009a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a58:	4654      	mov	r4, sl
 8009a5a:	2205      	movs	r2, #5
 8009a5c:	4852      	ldr	r0, [pc, #328]	; (8009ba8 <_svfiprintf_r+0x1ec>)
 8009a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a62:	f000 fa41 	bl	8009ee8 <memchr>
 8009a66:	9a04      	ldr	r2, [sp, #16]
 8009a68:	b9d8      	cbnz	r0, 8009aa2 <_svfiprintf_r+0xe6>
 8009a6a:	06d0      	lsls	r0, r2, #27
 8009a6c:	bf44      	itt	mi
 8009a6e:	2320      	movmi	r3, #32
 8009a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a74:	0711      	lsls	r1, r2, #28
 8009a76:	bf44      	itt	mi
 8009a78:	232b      	movmi	r3, #43	; 0x2b
 8009a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a82:	2b2a      	cmp	r3, #42	; 0x2a
 8009a84:	d015      	beq.n	8009ab2 <_svfiprintf_r+0xf6>
 8009a86:	9a07      	ldr	r2, [sp, #28]
 8009a88:	4654      	mov	r4, sl
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	f04f 0c0a 	mov.w	ip, #10
 8009a90:	4621      	mov	r1, r4
 8009a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a96:	3b30      	subs	r3, #48	; 0x30
 8009a98:	2b09      	cmp	r3, #9
 8009a9a:	d94e      	bls.n	8009b3a <_svfiprintf_r+0x17e>
 8009a9c:	b1b0      	cbz	r0, 8009acc <_svfiprintf_r+0x110>
 8009a9e:	9207      	str	r2, [sp, #28]
 8009aa0:	e014      	b.n	8009acc <_svfiprintf_r+0x110>
 8009aa2:	eba0 0308 	sub.w	r3, r0, r8
 8009aa6:	46a2      	mov	sl, r4
 8009aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8009aac:	4313      	orrs	r3, r2
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	e7d2      	b.n	8009a58 <_svfiprintf_r+0x9c>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	1d19      	adds	r1, r3, #4
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	9103      	str	r1, [sp, #12]
 8009abc:	bfbb      	ittet	lt
 8009abe:	425b      	neglt	r3, r3
 8009ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac4:	9307      	strge	r3, [sp, #28]
 8009ac6:	9307      	strlt	r3, [sp, #28]
 8009ac8:	bfb8      	it	lt
 8009aca:	9204      	strlt	r2, [sp, #16]
 8009acc:	7823      	ldrb	r3, [r4, #0]
 8009ace:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad0:	d10c      	bne.n	8009aec <_svfiprintf_r+0x130>
 8009ad2:	7863      	ldrb	r3, [r4, #1]
 8009ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad6:	d135      	bne.n	8009b44 <_svfiprintf_r+0x188>
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	3402      	adds	r4, #2
 8009adc:	1d1a      	adds	r2, r3, #4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	9203      	str	r2, [sp, #12]
 8009ae4:	bfb8      	it	lt
 8009ae6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bb8 <_svfiprintf_r+0x1fc>
 8009af0:	2203      	movs	r2, #3
 8009af2:	7821      	ldrb	r1, [r4, #0]
 8009af4:	4650      	mov	r0, sl
 8009af6:	f000 f9f7 	bl	8009ee8 <memchr>
 8009afa:	b140      	cbz	r0, 8009b0e <_svfiprintf_r+0x152>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	eba0 000a 	sub.w	r0, r0, sl
 8009b02:	3401      	adds	r4, #1
 8009b04:	fa03 f000 	lsl.w	r0, r3, r0
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	4303      	orrs	r3, r0
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	2206      	movs	r2, #6
 8009b14:	4825      	ldr	r0, [pc, #148]	; (8009bac <_svfiprintf_r+0x1f0>)
 8009b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b1a:	f000 f9e5 	bl	8009ee8 <memchr>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d038      	beq.n	8009b94 <_svfiprintf_r+0x1d8>
 8009b22:	4b23      	ldr	r3, [pc, #140]	; (8009bb0 <_svfiprintf_r+0x1f4>)
 8009b24:	bb1b      	cbnz	r3, 8009b6e <_svfiprintf_r+0x1b2>
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	3307      	adds	r3, #7
 8009b2a:	f023 0307 	bic.w	r3, r3, #7
 8009b2e:	3308      	adds	r3, #8
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b34:	4433      	add	r3, r6
 8009b36:	9309      	str	r3, [sp, #36]	; 0x24
 8009b38:	e767      	b.n	8009a0a <_svfiprintf_r+0x4e>
 8009b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b3e:	460c      	mov	r4, r1
 8009b40:	2001      	movs	r0, #1
 8009b42:	e7a5      	b.n	8009a90 <_svfiprintf_r+0xd4>
 8009b44:	2300      	movs	r3, #0
 8009b46:	3401      	adds	r4, #1
 8009b48:	f04f 0c0a 	mov.w	ip, #10
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b56:	3a30      	subs	r2, #48	; 0x30
 8009b58:	2a09      	cmp	r2, #9
 8009b5a:	d903      	bls.n	8009b64 <_svfiprintf_r+0x1a8>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0c5      	beq.n	8009aec <_svfiprintf_r+0x130>
 8009b60:	9105      	str	r1, [sp, #20]
 8009b62:	e7c3      	b.n	8009aec <_svfiprintf_r+0x130>
 8009b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b68:	4604      	mov	r4, r0
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e7f0      	b.n	8009b50 <_svfiprintf_r+0x194>
 8009b6e:	ab03      	add	r3, sp, #12
 8009b70:	462a      	mov	r2, r5
 8009b72:	a904      	add	r1, sp, #16
 8009b74:	4638      	mov	r0, r7
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <_svfiprintf_r+0x1f8>)
 8009b7a:	e000      	b.n	8009b7e <_svfiprintf_r+0x1c2>
 8009b7c:	bf00      	nop
 8009b7e:	1c42      	adds	r2, r0, #1
 8009b80:	4606      	mov	r6, r0
 8009b82:	d1d6      	bne.n	8009b32 <_svfiprintf_r+0x176>
 8009b84:	89ab      	ldrh	r3, [r5, #12]
 8009b86:	065b      	lsls	r3, r3, #25
 8009b88:	f53f af2c 	bmi.w	80099e4 <_svfiprintf_r+0x28>
 8009b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b8e:	b01d      	add	sp, #116	; 0x74
 8009b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	462a      	mov	r2, r5
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <_svfiprintf_r+0x1f8>)
 8009ba0:	f000 f87c 	bl	8009c9c <_printf_i>
 8009ba4:	e7eb      	b.n	8009b7e <_svfiprintf_r+0x1c2>
 8009ba6:	bf00      	nop
 8009ba8:	0800a2f0 	.word	0x0800a2f0
 8009bac:	0800a2fa 	.word	0x0800a2fa
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	08009905 	.word	0x08009905
 8009bb8:	0800a2f6 	.word	0x0800a2f6

08009bbc <_printf_common>:
 8009bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	4616      	mov	r6, r2
 8009bc2:	4699      	mov	r9, r3
 8009bc4:	688a      	ldr	r2, [r1, #8]
 8009bc6:	4607      	mov	r7, r0
 8009bc8:	690b      	ldr	r3, [r1, #16]
 8009bca:	460c      	mov	r4, r1
 8009bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	bfb8      	it	lt
 8009bd4:	4613      	movlt	r3, r2
 8009bd6:	6033      	str	r3, [r6, #0]
 8009bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bdc:	b10a      	cbz	r2, 8009be2 <_printf_common+0x26>
 8009bde:	3301      	adds	r3, #1
 8009be0:	6033      	str	r3, [r6, #0]
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	0699      	lsls	r1, r3, #26
 8009be6:	bf42      	ittt	mi
 8009be8:	6833      	ldrmi	r3, [r6, #0]
 8009bea:	3302      	addmi	r3, #2
 8009bec:	6033      	strmi	r3, [r6, #0]
 8009bee:	6825      	ldr	r5, [r4, #0]
 8009bf0:	f015 0506 	ands.w	r5, r5, #6
 8009bf4:	d106      	bne.n	8009c04 <_printf_common+0x48>
 8009bf6:	f104 0a19 	add.w	sl, r4, #25
 8009bfa:	68e3      	ldr	r3, [r4, #12]
 8009bfc:	6832      	ldr	r2, [r6, #0]
 8009bfe:	1a9b      	subs	r3, r3, r2
 8009c00:	42ab      	cmp	r3, r5
 8009c02:	dc29      	bgt.n	8009c58 <_printf_common+0x9c>
 8009c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c08:	1e13      	subs	r3, r2, #0
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	bf18      	it	ne
 8009c0e:	2301      	movne	r3, #1
 8009c10:	0692      	lsls	r2, r2, #26
 8009c12:	d42e      	bmi.n	8009c72 <_printf_common+0xb6>
 8009c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c18:	4649      	mov	r1, r9
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	47c0      	blx	r8
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d021      	beq.n	8009c66 <_printf_common+0xaa>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	341a      	adds	r4, #26
 8009c26:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8009c2a:	f003 0306 	and.w	r3, r3, #6
 8009c2e:	6832      	ldr	r2, [r6, #0]
 8009c30:	2600      	movs	r6, #0
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c38:	bf08      	it	eq
 8009c3a:	1aad      	subeq	r5, r5, r2
 8009c3c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009c40:	bf14      	ite	ne
 8009c42:	2500      	movne	r5, #0
 8009c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bfc4      	itt	gt
 8009c4c:	1a9b      	subgt	r3, r3, r2
 8009c4e:	18ed      	addgt	r5, r5, r3
 8009c50:	42b5      	cmp	r5, r6
 8009c52:	d11a      	bne.n	8009c8a <_printf_common+0xce>
 8009c54:	2000      	movs	r0, #0
 8009c56:	e008      	b.n	8009c6a <_printf_common+0xae>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d103      	bne.n	8009c6e <_printf_common+0xb2>
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6e:	3501      	adds	r5, #1
 8009c70:	e7c3      	b.n	8009bfa <_printf_common+0x3e>
 8009c72:	18e1      	adds	r1, r4, r3
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	2030      	movs	r0, #48	; 0x30
 8009c78:	3302      	adds	r3, #2
 8009c7a:	4422      	add	r2, r4
 8009c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c88:	e7c4      	b.n	8009c14 <_printf_common+0x58>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	4649      	mov	r1, r9
 8009c90:	4638      	mov	r0, r7
 8009c92:	47c0      	blx	r8
 8009c94:	3001      	adds	r0, #1
 8009c96:	d0e6      	beq.n	8009c66 <_printf_common+0xaa>
 8009c98:	3601      	adds	r6, #1
 8009c9a:	e7d9      	b.n	8009c50 <_printf_common+0x94>

08009c9c <_printf_i>:
 8009c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	7e0f      	ldrb	r7, [r1, #24]
 8009ca2:	4691      	mov	r9, r2
 8009ca4:	4680      	mov	r8, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	2f78      	cmp	r7, #120	; 0x78
 8009caa:	469a      	mov	sl, r3
 8009cac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cb2:	d807      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cb4:	2f62      	cmp	r7, #98	; 0x62
 8009cb6:	d80a      	bhi.n	8009cce <_printf_i+0x32>
 8009cb8:	2f00      	cmp	r7, #0
 8009cba:	f000 80d8 	beq.w	8009e6e <_printf_i+0x1d2>
 8009cbe:	2f58      	cmp	r7, #88	; 0x58
 8009cc0:	f000 80a3 	beq.w	8009e0a <_printf_i+0x16e>
 8009cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ccc:	e03a      	b.n	8009d44 <_printf_i+0xa8>
 8009cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cd2:	2b15      	cmp	r3, #21
 8009cd4:	d8f6      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cd6:	a101      	add	r1, pc, #4	; (adr r1, 8009cdc <_printf_i+0x40>)
 8009cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cdc:	08009d35 	.word	0x08009d35
 8009ce0:	08009d49 	.word	0x08009d49
 8009ce4:	08009cc5 	.word	0x08009cc5
 8009ce8:	08009cc5 	.word	0x08009cc5
 8009cec:	08009cc5 	.word	0x08009cc5
 8009cf0:	08009cc5 	.word	0x08009cc5
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009cc5 	.word	0x08009cc5
 8009cfc:	08009cc5 	.word	0x08009cc5
 8009d00:	08009cc5 	.word	0x08009cc5
 8009d04:	08009cc5 	.word	0x08009cc5
 8009d08:	08009e55 	.word	0x08009e55
 8009d0c:	08009d79 	.word	0x08009d79
 8009d10:	08009e37 	.word	0x08009e37
 8009d14:	08009cc5 	.word	0x08009cc5
 8009d18:	08009cc5 	.word	0x08009cc5
 8009d1c:	08009e77 	.word	0x08009e77
 8009d20:	08009cc5 	.word	0x08009cc5
 8009d24:	08009d79 	.word	0x08009d79
 8009d28:	08009cc5 	.word	0x08009cc5
 8009d2c:	08009cc5 	.word	0x08009cc5
 8009d30:	08009e3f 	.word	0x08009e3f
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	1d1a      	adds	r2, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d44:	2301      	movs	r3, #1
 8009d46:	e0a3      	b.n	8009e90 <_printf_i+0x1f4>
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	6829      	ldr	r1, [r5, #0]
 8009d4c:	0606      	lsls	r6, r0, #24
 8009d4e:	f101 0304 	add.w	r3, r1, #4
 8009d52:	d50a      	bpl.n	8009d6a <_printf_i+0xce>
 8009d54:	680e      	ldr	r6, [r1, #0]
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	da03      	bge.n	8009d64 <_printf_i+0xc8>
 8009d5c:	232d      	movs	r3, #45	; 0x2d
 8009d5e:	4276      	negs	r6, r6
 8009d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d64:	485e      	ldr	r0, [pc, #376]	; (8009ee0 <_printf_i+0x244>)
 8009d66:	230a      	movs	r3, #10
 8009d68:	e019      	b.n	8009d9e <_printf_i+0x102>
 8009d6a:	680e      	ldr	r6, [r1, #0]
 8009d6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d70:	602b      	str	r3, [r5, #0]
 8009d72:	bf18      	it	ne
 8009d74:	b236      	sxthne	r6, r6
 8009d76:	e7ef      	b.n	8009d58 <_printf_i+0xbc>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	6820      	ldr	r0, [r4, #0]
 8009d7c:	1d19      	adds	r1, r3, #4
 8009d7e:	6029      	str	r1, [r5, #0]
 8009d80:	0601      	lsls	r1, r0, #24
 8009d82:	d501      	bpl.n	8009d88 <_printf_i+0xec>
 8009d84:	681e      	ldr	r6, [r3, #0]
 8009d86:	e002      	b.n	8009d8e <_printf_i+0xf2>
 8009d88:	0646      	lsls	r6, r0, #25
 8009d8a:	d5fb      	bpl.n	8009d84 <_printf_i+0xe8>
 8009d8c:	881e      	ldrh	r6, [r3, #0]
 8009d8e:	2f6f      	cmp	r7, #111	; 0x6f
 8009d90:	4853      	ldr	r0, [pc, #332]	; (8009ee0 <_printf_i+0x244>)
 8009d92:	bf0c      	ite	eq
 8009d94:	2308      	moveq	r3, #8
 8009d96:	230a      	movne	r3, #10
 8009d98:	2100      	movs	r1, #0
 8009d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d9e:	6865      	ldr	r5, [r4, #4]
 8009da0:	2d00      	cmp	r5, #0
 8009da2:	60a5      	str	r5, [r4, #8]
 8009da4:	bfa2      	ittt	ge
 8009da6:	6821      	ldrge	r1, [r4, #0]
 8009da8:	f021 0104 	bicge.w	r1, r1, #4
 8009dac:	6021      	strge	r1, [r4, #0]
 8009dae:	b90e      	cbnz	r6, 8009db4 <_printf_i+0x118>
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	d04d      	beq.n	8009e50 <_printf_i+0x1b4>
 8009db4:	4615      	mov	r5, r2
 8009db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dba:	fb03 6711 	mls	r7, r3, r1, r6
 8009dbe:	5dc7      	ldrb	r7, [r0, r7]
 8009dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dc4:	4637      	mov	r7, r6
 8009dc6:	460e      	mov	r6, r1
 8009dc8:	42bb      	cmp	r3, r7
 8009dca:	d9f4      	bls.n	8009db6 <_printf_i+0x11a>
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d10b      	bne.n	8009de8 <_printf_i+0x14c>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	07de      	lsls	r6, r3, #31
 8009dd4:	d508      	bpl.n	8009de8 <_printf_i+0x14c>
 8009dd6:	6923      	ldr	r3, [r4, #16]
 8009dd8:	6861      	ldr	r1, [r4, #4]
 8009dda:	4299      	cmp	r1, r3
 8009ddc:	bfde      	ittt	le
 8009dde:	2330      	movle	r3, #48	; 0x30
 8009de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009de4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009de8:	1b52      	subs	r2, r2, r5
 8009dea:	6122      	str	r2, [r4, #16]
 8009dec:	464b      	mov	r3, r9
 8009dee:	aa03      	add	r2, sp, #12
 8009df0:	4621      	mov	r1, r4
 8009df2:	4640      	mov	r0, r8
 8009df4:	f8cd a000 	str.w	sl, [sp]
 8009df8:	f7ff fee0 	bl	8009bbc <_printf_common>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d14c      	bne.n	8009e9a <_printf_i+0x1fe>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e04:	b004      	add	sp, #16
 8009e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0a:	4835      	ldr	r0, [pc, #212]	; (8009ee0 <_printf_i+0x244>)
 8009e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e10:	6829      	ldr	r1, [r5, #0]
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e18:	6029      	str	r1, [r5, #0]
 8009e1a:	061d      	lsls	r5, r3, #24
 8009e1c:	d514      	bpl.n	8009e48 <_printf_i+0x1ac>
 8009e1e:	07df      	lsls	r7, r3, #31
 8009e20:	bf44      	itt	mi
 8009e22:	f043 0320 	orrmi.w	r3, r3, #32
 8009e26:	6023      	strmi	r3, [r4, #0]
 8009e28:	b91e      	cbnz	r6, 8009e32 <_printf_i+0x196>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f023 0320 	bic.w	r3, r3, #32
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	2310      	movs	r3, #16
 8009e34:	e7b0      	b.n	8009d98 <_printf_i+0xfc>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	f043 0320 	orr.w	r3, r3, #32
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	2378      	movs	r3, #120	; 0x78
 8009e40:	4828      	ldr	r0, [pc, #160]	; (8009ee4 <_printf_i+0x248>)
 8009e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e46:	e7e3      	b.n	8009e10 <_printf_i+0x174>
 8009e48:	0659      	lsls	r1, r3, #25
 8009e4a:	bf48      	it	mi
 8009e4c:	b2b6      	uxthmi	r6, r6
 8009e4e:	e7e6      	b.n	8009e1e <_printf_i+0x182>
 8009e50:	4615      	mov	r5, r2
 8009e52:	e7bb      	b.n	8009dcc <_printf_i+0x130>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	6826      	ldr	r6, [r4, #0]
 8009e58:	1d18      	adds	r0, r3, #4
 8009e5a:	6961      	ldr	r1, [r4, #20]
 8009e5c:	6028      	str	r0, [r5, #0]
 8009e5e:	0635      	lsls	r5, r6, #24
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	d501      	bpl.n	8009e68 <_printf_i+0x1cc>
 8009e64:	6019      	str	r1, [r3, #0]
 8009e66:	e002      	b.n	8009e6e <_printf_i+0x1d2>
 8009e68:	0670      	lsls	r0, r6, #25
 8009e6a:	d5fb      	bpl.n	8009e64 <_printf_i+0x1c8>
 8009e6c:	8019      	strh	r1, [r3, #0]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	4615      	mov	r5, r2
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	e7ba      	b.n	8009dec <_printf_i+0x150>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	2100      	movs	r1, #0
 8009e7a:	1d1a      	adds	r2, r3, #4
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	681d      	ldr	r5, [r3, #0]
 8009e80:	6862      	ldr	r2, [r4, #4]
 8009e82:	4628      	mov	r0, r5
 8009e84:	f000 f830 	bl	8009ee8 <memchr>
 8009e88:	b108      	cbz	r0, 8009e8e <_printf_i+0x1f2>
 8009e8a:	1b40      	subs	r0, r0, r5
 8009e8c:	6060      	str	r0, [r4, #4]
 8009e8e:	6863      	ldr	r3, [r4, #4]
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	2300      	movs	r3, #0
 8009e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e98:	e7a8      	b.n	8009dec <_printf_i+0x150>
 8009e9a:	6923      	ldr	r3, [r4, #16]
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	47d0      	blx	sl
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d0ab      	beq.n	8009e00 <_printf_i+0x164>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	079b      	lsls	r3, r3, #30
 8009eac:	d413      	bmi.n	8009ed6 <_printf_i+0x23a>
 8009eae:	68e0      	ldr	r0, [r4, #12]
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	4298      	cmp	r0, r3
 8009eb4:	bfb8      	it	lt
 8009eb6:	4618      	movlt	r0, r3
 8009eb8:	e7a4      	b.n	8009e04 <_printf_i+0x168>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	47d0      	blx	sl
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d09b      	beq.n	8009e00 <_printf_i+0x164>
 8009ec8:	3501      	adds	r5, #1
 8009eca:	68e3      	ldr	r3, [r4, #12]
 8009ecc:	9903      	ldr	r1, [sp, #12]
 8009ece:	1a5b      	subs	r3, r3, r1
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	dcf2      	bgt.n	8009eba <_printf_i+0x21e>
 8009ed4:	e7eb      	b.n	8009eae <_printf_i+0x212>
 8009ed6:	2500      	movs	r5, #0
 8009ed8:	f104 0619 	add.w	r6, r4, #25
 8009edc:	e7f5      	b.n	8009eca <_printf_i+0x22e>
 8009ede:	bf00      	nop
 8009ee0:	0800a301 	.word	0x0800a301
 8009ee4:	0800a312 	.word	0x0800a312

08009ee8 <memchr>:
 8009ee8:	b2c9      	uxtb	r1, r1
 8009eea:	4402      	add	r2, r0
 8009eec:	b510      	push	{r4, lr}
 8009eee:	4290      	cmp	r0, r2
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	d101      	bne.n	8009ef8 <memchr+0x10>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e003      	b.n	8009f00 <memchr+0x18>
 8009ef8:	781c      	ldrb	r4, [r3, #0]
 8009efa:	3001      	adds	r0, #1
 8009efc:	428c      	cmp	r4, r1
 8009efe:	d1f6      	bne.n	8009eee <memchr+0x6>
 8009f00:	4618      	mov	r0, r3
 8009f02:	bd10      	pop	{r4, pc}

08009f04 <memcpy>:
 8009f04:	440a      	add	r2, r1
 8009f06:	1e43      	subs	r3, r0, #1
 8009f08:	4291      	cmp	r1, r2
 8009f0a:	d100      	bne.n	8009f0e <memcpy+0xa>
 8009f0c:	4770      	bx	lr
 8009f0e:	b510      	push	{r4, lr}
 8009f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f14:	4291      	cmp	r1, r2
 8009f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f1a:	d1f9      	bne.n	8009f10 <memcpy+0xc>
 8009f1c:	bd10      	pop	{r4, pc}

08009f1e <memmove>:
 8009f1e:	4288      	cmp	r0, r1
 8009f20:	b510      	push	{r4, lr}
 8009f22:	eb01 0402 	add.w	r4, r1, r2
 8009f26:	d902      	bls.n	8009f2e <memmove+0x10>
 8009f28:	4284      	cmp	r4, r0
 8009f2a:	4623      	mov	r3, r4
 8009f2c:	d807      	bhi.n	8009f3e <memmove+0x20>
 8009f2e:	1e43      	subs	r3, r0, #1
 8009f30:	42a1      	cmp	r1, r4
 8009f32:	d008      	beq.n	8009f46 <memmove+0x28>
 8009f34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f3c:	e7f8      	b.n	8009f30 <memmove+0x12>
 8009f3e:	4402      	add	r2, r0
 8009f40:	4601      	mov	r1, r0
 8009f42:	428a      	cmp	r2, r1
 8009f44:	d100      	bne.n	8009f48 <memmove+0x2a>
 8009f46:	bd10      	pop	{r4, pc}
 8009f48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f50:	e7f7      	b.n	8009f42 <memmove+0x24>
	...

08009f54 <_free_r>:
 8009f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d043      	beq.n	8009fe2 <_free_r+0x8e>
 8009f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5e:	1f0c      	subs	r4, r1, #4
 8009f60:	9001      	str	r0, [sp, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bfb8      	it	lt
 8009f66:	18e4      	addlt	r4, r4, r3
 8009f68:	f000 f914 	bl	800a194 <__malloc_lock>
 8009f6c:	4a1e      	ldr	r2, [pc, #120]	; (8009fe8 <_free_r+0x94>)
 8009f6e:	9801      	ldr	r0, [sp, #4]
 8009f70:	6813      	ldr	r3, [r2, #0]
 8009f72:	b933      	cbnz	r3, 8009f82 <_free_r+0x2e>
 8009f74:	6063      	str	r3, [r4, #4]
 8009f76:	6014      	str	r4, [r2, #0]
 8009f78:	b003      	add	sp, #12
 8009f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f7e:	f000 b90f 	b.w	800a1a0 <__malloc_unlock>
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	d908      	bls.n	8009f98 <_free_r+0x44>
 8009f86:	6825      	ldr	r5, [r4, #0]
 8009f88:	1961      	adds	r1, r4, r5
 8009f8a:	428b      	cmp	r3, r1
 8009f8c:	bf01      	itttt	eq
 8009f8e:	6819      	ldreq	r1, [r3, #0]
 8009f90:	685b      	ldreq	r3, [r3, #4]
 8009f92:	1949      	addeq	r1, r1, r5
 8009f94:	6021      	streq	r1, [r4, #0]
 8009f96:	e7ed      	b.n	8009f74 <_free_r+0x20>
 8009f98:	461a      	mov	r2, r3
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	b10b      	cbz	r3, 8009fa2 <_free_r+0x4e>
 8009f9e:	42a3      	cmp	r3, r4
 8009fa0:	d9fa      	bls.n	8009f98 <_free_r+0x44>
 8009fa2:	6811      	ldr	r1, [r2, #0]
 8009fa4:	1855      	adds	r5, r2, r1
 8009fa6:	42a5      	cmp	r5, r4
 8009fa8:	d10b      	bne.n	8009fc2 <_free_r+0x6e>
 8009faa:	6824      	ldr	r4, [r4, #0]
 8009fac:	4421      	add	r1, r4
 8009fae:	1854      	adds	r4, r2, r1
 8009fb0:	6011      	str	r1, [r2, #0]
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	d1e0      	bne.n	8009f78 <_free_r+0x24>
 8009fb6:	681c      	ldr	r4, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4421      	add	r1, r4
 8009fbc:	6053      	str	r3, [r2, #4]
 8009fbe:	6011      	str	r1, [r2, #0]
 8009fc0:	e7da      	b.n	8009f78 <_free_r+0x24>
 8009fc2:	d902      	bls.n	8009fca <_free_r+0x76>
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	6003      	str	r3, [r0, #0]
 8009fc8:	e7d6      	b.n	8009f78 <_free_r+0x24>
 8009fca:	6825      	ldr	r5, [r4, #0]
 8009fcc:	1961      	adds	r1, r4, r5
 8009fce:	428b      	cmp	r3, r1
 8009fd0:	bf02      	ittt	eq
 8009fd2:	6819      	ldreq	r1, [r3, #0]
 8009fd4:	685b      	ldreq	r3, [r3, #4]
 8009fd6:	1949      	addeq	r1, r1, r5
 8009fd8:	6063      	str	r3, [r4, #4]
 8009fda:	bf08      	it	eq
 8009fdc:	6021      	streq	r1, [r4, #0]
 8009fde:	6054      	str	r4, [r2, #4]
 8009fe0:	e7ca      	b.n	8009f78 <_free_r+0x24>
 8009fe2:	b003      	add	sp, #12
 8009fe4:	bd30      	pop	{r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	2000066c 	.word	0x2000066c

08009fec <sbrk_aligned>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	4e0e      	ldr	r6, [pc, #56]	; (800a028 <sbrk_aligned+0x3c>)
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	6831      	ldr	r1, [r6, #0]
 8009ff6:	b911      	cbnz	r1, 8009ffe <sbrk_aligned+0x12>
 8009ff8:	f000 f8bc 	bl	800a174 <_sbrk_r>
 8009ffc:	6030      	str	r0, [r6, #0]
 8009ffe:	4621      	mov	r1, r4
 800a000:	4628      	mov	r0, r5
 800a002:	f000 f8b7 	bl	800a174 <_sbrk_r>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d00a      	beq.n	800a020 <sbrk_aligned+0x34>
 800a00a:	1cc4      	adds	r4, r0, #3
 800a00c:	f024 0403 	bic.w	r4, r4, #3
 800a010:	42a0      	cmp	r0, r4
 800a012:	d007      	beq.n	800a024 <sbrk_aligned+0x38>
 800a014:	1a21      	subs	r1, r4, r0
 800a016:	4628      	mov	r0, r5
 800a018:	f000 f8ac 	bl	800a174 <_sbrk_r>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d101      	bne.n	800a024 <sbrk_aligned+0x38>
 800a020:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a024:	4620      	mov	r0, r4
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	20000670 	.word	0x20000670

0800a02c <_malloc_r>:
 800a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a030:	1ccd      	adds	r5, r1, #3
 800a032:	4607      	mov	r7, r0
 800a034:	f025 0503 	bic.w	r5, r5, #3
 800a038:	3508      	adds	r5, #8
 800a03a:	2d0c      	cmp	r5, #12
 800a03c:	bf38      	it	cc
 800a03e:	250c      	movcc	r5, #12
 800a040:	2d00      	cmp	r5, #0
 800a042:	db01      	blt.n	800a048 <_malloc_r+0x1c>
 800a044:	42a9      	cmp	r1, r5
 800a046:	d905      	bls.n	800a054 <_malloc_r+0x28>
 800a048:	230c      	movs	r3, #12
 800a04a:	2600      	movs	r6, #0
 800a04c:	603b      	str	r3, [r7, #0]
 800a04e:	4630      	mov	r0, r6
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	4e2e      	ldr	r6, [pc, #184]	; (800a110 <_malloc_r+0xe4>)
 800a056:	f000 f89d 	bl	800a194 <__malloc_lock>
 800a05a:	6833      	ldr	r3, [r6, #0]
 800a05c:	461c      	mov	r4, r3
 800a05e:	bb34      	cbnz	r4, 800a0ae <_malloc_r+0x82>
 800a060:	4629      	mov	r1, r5
 800a062:	4638      	mov	r0, r7
 800a064:	f7ff ffc2 	bl	8009fec <sbrk_aligned>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	4604      	mov	r4, r0
 800a06c:	d14d      	bne.n	800a10a <_malloc_r+0xde>
 800a06e:	6834      	ldr	r4, [r6, #0]
 800a070:	4626      	mov	r6, r4
 800a072:	2e00      	cmp	r6, #0
 800a074:	d140      	bne.n	800a0f8 <_malloc_r+0xcc>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	4631      	mov	r1, r6
 800a07a:	4638      	mov	r0, r7
 800a07c:	eb04 0803 	add.w	r8, r4, r3
 800a080:	f000 f878 	bl	800a174 <_sbrk_r>
 800a084:	4580      	cmp	r8, r0
 800a086:	d13a      	bne.n	800a0fe <_malloc_r+0xd2>
 800a088:	6821      	ldr	r1, [r4, #0]
 800a08a:	3503      	adds	r5, #3
 800a08c:	4638      	mov	r0, r7
 800a08e:	1a6d      	subs	r5, r5, r1
 800a090:	f025 0503 	bic.w	r5, r5, #3
 800a094:	3508      	adds	r5, #8
 800a096:	2d0c      	cmp	r5, #12
 800a098:	bf38      	it	cc
 800a09a:	250c      	movcc	r5, #12
 800a09c:	4629      	mov	r1, r5
 800a09e:	f7ff ffa5 	bl	8009fec <sbrk_aligned>
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	d02b      	beq.n	800a0fe <_malloc_r+0xd2>
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	442b      	add	r3, r5
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	e00e      	b.n	800a0cc <_malloc_r+0xa0>
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	1b52      	subs	r2, r2, r5
 800a0b2:	d41e      	bmi.n	800a0f2 <_malloc_r+0xc6>
 800a0b4:	2a0b      	cmp	r2, #11
 800a0b6:	d916      	bls.n	800a0e6 <_malloc_r+0xba>
 800a0b8:	1961      	adds	r1, r4, r5
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	6025      	str	r5, [r4, #0]
 800a0be:	bf18      	it	ne
 800a0c0:	6059      	strne	r1, [r3, #4]
 800a0c2:	6863      	ldr	r3, [r4, #4]
 800a0c4:	bf08      	it	eq
 800a0c6:	6031      	streq	r1, [r6, #0]
 800a0c8:	5162      	str	r2, [r4, r5]
 800a0ca:	604b      	str	r3, [r1, #4]
 800a0cc:	f104 060b 	add.w	r6, r4, #11
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f000 f865 	bl	800a1a0 <__malloc_unlock>
 800a0d6:	1d23      	adds	r3, r4, #4
 800a0d8:	f026 0607 	bic.w	r6, r6, #7
 800a0dc:	1af2      	subs	r2, r6, r3
 800a0de:	d0b6      	beq.n	800a04e <_malloc_r+0x22>
 800a0e0:	1b9b      	subs	r3, r3, r6
 800a0e2:	50a3      	str	r3, [r4, r2]
 800a0e4:	e7b3      	b.n	800a04e <_malloc_r+0x22>
 800a0e6:	6862      	ldr	r2, [r4, #4]
 800a0e8:	42a3      	cmp	r3, r4
 800a0ea:	bf0c      	ite	eq
 800a0ec:	6032      	streq	r2, [r6, #0]
 800a0ee:	605a      	strne	r2, [r3, #4]
 800a0f0:	e7ec      	b.n	800a0cc <_malloc_r+0xa0>
 800a0f2:	4623      	mov	r3, r4
 800a0f4:	6864      	ldr	r4, [r4, #4]
 800a0f6:	e7b2      	b.n	800a05e <_malloc_r+0x32>
 800a0f8:	4634      	mov	r4, r6
 800a0fa:	6876      	ldr	r6, [r6, #4]
 800a0fc:	e7b9      	b.n	800a072 <_malloc_r+0x46>
 800a0fe:	230c      	movs	r3, #12
 800a100:	4638      	mov	r0, r7
 800a102:	603b      	str	r3, [r7, #0]
 800a104:	f000 f84c 	bl	800a1a0 <__malloc_unlock>
 800a108:	e7a1      	b.n	800a04e <_malloc_r+0x22>
 800a10a:	6025      	str	r5, [r4, #0]
 800a10c:	e7de      	b.n	800a0cc <_malloc_r+0xa0>
 800a10e:	bf00      	nop
 800a110:	2000066c 	.word	0x2000066c

0800a114 <_realloc_r>:
 800a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a118:	4680      	mov	r8, r0
 800a11a:	4614      	mov	r4, r2
 800a11c:	460e      	mov	r6, r1
 800a11e:	b921      	cbnz	r1, 800a12a <_realloc_r+0x16>
 800a120:	4611      	mov	r1, r2
 800a122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a126:	f7ff bf81 	b.w	800a02c <_malloc_r>
 800a12a:	b92a      	cbnz	r2, 800a138 <_realloc_r+0x24>
 800a12c:	4625      	mov	r5, r4
 800a12e:	f7ff ff11 	bl	8009f54 <_free_r>
 800a132:	4628      	mov	r0, r5
 800a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a138:	f000 f838 	bl	800a1ac <_malloc_usable_size_r>
 800a13c:	4284      	cmp	r4, r0
 800a13e:	4607      	mov	r7, r0
 800a140:	d802      	bhi.n	800a148 <_realloc_r+0x34>
 800a142:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a146:	d812      	bhi.n	800a16e <_realloc_r+0x5a>
 800a148:	4621      	mov	r1, r4
 800a14a:	4640      	mov	r0, r8
 800a14c:	f7ff ff6e 	bl	800a02c <_malloc_r>
 800a150:	4605      	mov	r5, r0
 800a152:	2800      	cmp	r0, #0
 800a154:	d0ed      	beq.n	800a132 <_realloc_r+0x1e>
 800a156:	42bc      	cmp	r4, r7
 800a158:	4622      	mov	r2, r4
 800a15a:	4631      	mov	r1, r6
 800a15c:	bf28      	it	cs
 800a15e:	463a      	movcs	r2, r7
 800a160:	f7ff fed0 	bl	8009f04 <memcpy>
 800a164:	4631      	mov	r1, r6
 800a166:	4640      	mov	r0, r8
 800a168:	f7ff fef4 	bl	8009f54 <_free_r>
 800a16c:	e7e1      	b.n	800a132 <_realloc_r+0x1e>
 800a16e:	4635      	mov	r5, r6
 800a170:	e7df      	b.n	800a132 <_realloc_r+0x1e>
	...

0800a174 <_sbrk_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	2300      	movs	r3, #0
 800a178:	4d05      	ldr	r5, [pc, #20]	; (800a190 <_sbrk_r+0x1c>)
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	602b      	str	r3, [r5, #0]
 800a180:	f7f7 fbba 	bl	80018f8 <_sbrk>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d102      	bne.n	800a18e <_sbrk_r+0x1a>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	b103      	cbz	r3, 800a18e <_sbrk_r+0x1a>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	20000674 	.word	0x20000674

0800a194 <__malloc_lock>:
 800a194:	4801      	ldr	r0, [pc, #4]	; (800a19c <__malloc_lock+0x8>)
 800a196:	f000 b811 	b.w	800a1bc <__retarget_lock_acquire_recursive>
 800a19a:	bf00      	nop
 800a19c:	20000678 	.word	0x20000678

0800a1a0 <__malloc_unlock>:
 800a1a0:	4801      	ldr	r0, [pc, #4]	; (800a1a8 <__malloc_unlock+0x8>)
 800a1a2:	f000 b80c 	b.w	800a1be <__retarget_lock_release_recursive>
 800a1a6:	bf00      	nop
 800a1a8:	20000678 	.word	0x20000678

0800a1ac <_malloc_usable_size_r>:
 800a1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b0:	1f18      	subs	r0, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfbc      	itt	lt
 800a1b6:	580b      	ldrlt	r3, [r1, r0]
 800a1b8:	18c0      	addlt	r0, r0, r3
 800a1ba:	4770      	bx	lr

0800a1bc <__retarget_lock_acquire_recursive>:
 800a1bc:	4770      	bx	lr

0800a1be <__retarget_lock_release_recursive>:
 800a1be:	4770      	bx	lr

0800a1c0 <_init>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr

0800a1cc <_fini>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr
