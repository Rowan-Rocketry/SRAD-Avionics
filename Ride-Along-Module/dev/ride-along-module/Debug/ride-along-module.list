
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098dc  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014f  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c64  08009c64  00019c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009c70  08009c70  00019c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08009c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c5  20000070  08009ce4  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  20000635  08009ce4  00020635  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dfcf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030c1  00000000  00000000  0003e075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017a0  00000000  00000000  00041138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001668  00000000  00000000  000428d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000475c  00000000  00000000  00043f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d22f  00000000  00000000  0004869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001355f0  00000000  00000000  000658cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0019aebb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a18  00000000  00000000  0019af0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	08009afc 	.word	0x08009afc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	08009afc 	.word	0x08009afc

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 ff2d 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f841 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 fa3b 	bl	8000a20 <MX_GPIO_Init>
  MX_TIM16_Init();
 80005aa:	f000 f99b 	bl	80008e4 <MX_TIM16_Init>
  MX_SPI1_Init();
 80005ae:	f000 f8bd 	bl	800072c <MX_SPI1_Init>
  MX_SPI2_Init();
 80005b2:	f000 f929 	bl	8000808 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f9bb 	bl	8000930 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80005ba:	f000 f893 	bl	80006e4 <MX_SDMMC1_SD_Init>
  MX_USB_PCD_Init();
 80005be:	f000 fa03 	bl	80009c8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Test UART VCP
  uart_buffer_length = sprintf(uart_buffer, "UART VCP Test!\n");
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4913      	ldr	r1, [pc, #76]	; (8000614 <main+0x7c>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f008 fe19 	bl	8009200 <siprintf>
 80005ce:	6578      	str	r0, [r7, #84]	; 0x54
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, uart_buffer_length, 100);
 80005d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	f107 0120 	add.w	r1, r7, #32
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <main+0x80>)
 80005dc:	f007 fb0c 	bl	8007bf8 <HAL_UART_Transmit>

  // Configure MS5607
  MS5607_HandleTypeDef ms5607Config = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  ms5607Config.spi = &hspi1;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <main+0x84>)
 80005ec:	603b      	str	r3, [r7, #0]
  ms5607Config.csPort = GPIOA;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <main+0x88>)
 80005f0:	607b      	str	r3, [r7, #4]
  ms5607Config.csPin = GPIO_PIN_3;
 80005f2:	2308      	movs	r3, #8
 80005f4:	813b      	strh	r3, [r7, #8]
  ms5607Config.osr = MS5607_OSR_4096;
 80005f6:	2308      	movs	r3, #8
 80005f8:	72bb      	strb	r3, [r7, #10]

  MS5607_init(&ms5607Config);
 80005fa:	463b      	mov	r3, r7
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fac5 	bl	8000b8c <MS5607_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	pressure = MS5607_readPressure();
 8000602:	f000 fb25 	bl	8000c50 <MS5607_readPressure>
 8000606:	4603      	mov	r3, r0
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <main+0x8c>)
 800060a:	6013      	str	r3, [r2, #0]
	writePressure();
 800060c:	f000 fa9c 	bl	8000b48 <writePressure>
	pressure = MS5607_readPressure();
 8000610:	e7f7      	b.n	8000602 <main+0x6a>
 8000612:	bf00      	nop
 8000614:	08009b14 	.word	0x08009b14
 8000618:	20000274 	.word	0x20000274
 800061c:	20000108 	.word	0x20000108
 8000620:	42020000 	.word	0x42020000
 8000624:	20000614 	.word	0x20000614

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09e      	sub	sp, #120	; 0x78
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2260      	movs	r2, #96	; 0x60
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f008 fdda 	bl	80091f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
 800064a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800064c:	2000      	movs	r0, #0
 800064e:	f001 fb7f 	bl	8001d50 <HAL_PWREx_ControlVoltageScaling>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000658:	f000 fa92 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800065c:	2330      	movs	r3, #48	; 0x30
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800066e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000678:	2301      	movs	r3, #1
 800067a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000684:	2381      	movs	r3, #129	; 0x81
 8000686:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000694:	2300      	movs	r3, #0
 8000696:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fbf1 	bl	8001e88 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006ac:	f000 fa68 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	231f      	movs	r3, #31
 80006b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fab7 	bl	8002c40 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d8:	f000 fa52 	bl	8000b80 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3778      	adds	r7, #120	; 0x78
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_SDMMC1_SD_Init+0x40>)
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_SDMMC1_SD_Init+0x44>)
 80006ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_SDMMC1_SD_Init+0x40>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_SDMMC1_SD_Init+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_SDMMC1_SD_Init+0x40>)
 80006fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000700:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_SDMMC1_SD_Init+0x40>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_SDMMC1_SD_Init+0x40>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_SDMMC1_SD_Init+0x40>)
 8000710:	f005 fa54 	bl	8005bbc <HAL_SD_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800071a:	f000 fa31 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000008c 	.word	0x2000008c
 8000728:	420c8000 	.word	0x420c8000

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <MX_SPI1_Init+0xd4>)
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <MX_SPI1_Init+0xd8>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000744:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_SPI1_Init+0xd4>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000752:	2207      	movs	r2, #7
 8000754:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_SPI1_Init+0xd4>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000764:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000768:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_SPI1_Init+0xd4>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_SPI1_Init+0xd4>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000784:	2207      	movs	r2, #7
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_SPI1_Init+0xd4>)
 800078a:	2200      	movs	r2, #0
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000790:	2200      	movs	r2, #0
 8000792:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_SPI1_Init+0xd4>)
 8000796:	2200      	movs	r2, #0
 8000798:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_SPI1_Init+0xd4>)
 800079c:	2200      	movs	r2, #0
 800079e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007c6:	f006 fa67 	bl	8006c98 <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 80007d0:	f000 f9d6 	bl	8000b80 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80007d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007dc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_SPI1_Init+0xd4>)
 80007e8:	f007 f823 	bl	8007832 <HAL_SPIEx_SetConfigAutonomousMode>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 80007f2:	f000 f9c5 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000108 	.word	0x20000108
 8000804:	40013000 	.word	0x40013000

08000808 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000818:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_SPI2_Init+0xd4>)
 800081a:	4a31      	ldr	r2, [pc, #196]	; (80008e0 <MX_SPI2_Init+0xd8>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000820:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_SPI2_Init+0xd4>)
 800082e:	2203      	movs	r2, #3
 8000830:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_SPI2_Init+0xd4>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000840:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000844:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_SPI2_Init+0xd4>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_SPI2_Init+0xd4>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000860:	2207      	movs	r2, #7
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_SPI2_Init+0xd4>)
 800086e:	2200      	movs	r2, #0
 8000870:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000874:	2200      	movs	r2, #0
 8000876:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_SPI2_Init+0xd4>)
 800087a:	2200      	movs	r2, #0
 800087c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000880:	2200      	movs	r2, #0
 8000882:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000886:	2200      	movs	r2, #0
 8000888:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_SPI2_Init+0xd4>)
 800088c:	2200      	movs	r2, #0
 800088e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000892:	2200      	movs	r2, #0
 8000894:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI2_Init+0xd4>)
 8000898:	2200      	movs	r2, #0
 800089a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_SPI2_Init+0xd4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_SPI2_Init+0xd4>)
 80008a4:	f006 f9f8 	bl	8006c98 <HAL_SPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 80008ae:	f000 f967 	bl	8000b80 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80008b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ba:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_SPI2_Init+0xd4>)
 80008c6:	f006 ffb4 	bl	8007832 <HAL_SPIEx_SetConfigAutonomousMode>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80008d0:	f000 f956 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000198 	.word	0x20000198
 80008e0:	40003800 	.word	0x40003800

080008e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_TIM16_Init+0x44>)
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_TIM16_Init+0x48>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_TIM16_Init+0x44>)
 80008f0:	2203      	movs	r2, #3
 80008f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_TIM16_Init+0x44>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8219;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_TIM16_Init+0x44>)
 80008fc:	f242 021b 	movw	r2, #8219	; 0x201b
 8000900:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_TIM16_Init+0x44>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_TIM16_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_TIM16_Init+0x44>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_TIM16_Init+0x44>)
 8000916:	f006 ffcd 	bl	80078b4 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000920:	f000 f92e 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000228 	.word	0x20000228
 800092c:	40014400 	.word	0x40014400

08000930 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_USART1_UART_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800093c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800097a:	f007 f8ed 	bl	8007b58 <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f8fc 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800098c:	f007 fdac 	bl	80084e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f8f3 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 800099e:	f007 fde1 	bl	8008564 <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f8ea 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_USART1_UART_Init+0x90>)
 80009ae:	f007 fd62 	bl	8008476 <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f8e2 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000274 	.word	0x20000274
 80009c4:	40013800 	.word	0x40013800

080009c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <MX_USB_PCD_Init+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009d4:	2208      	movs	r2, #8
 80009d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009da:	2202      	movs	r2, #2
 80009dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USB_PCD_Init+0x50>)
 8000a04:	f001 f876 	bl	8001af4 <HAL_PCD_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USB_PCD_Init+0x4a>
  {
    Error_Handler();
 8000a0e:	f000 f8b7 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000308 	.word	0x20000308
 8000a1c:	40016000 	.word	0x40016000

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b40      	ldr	r3, [pc, #256]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a46:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a5a:	4a37      	ldr	r2, [pc, #220]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a64:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a78:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_GPIO_Init+0x118>)
 8000ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	481a      	ldr	r0, [pc, #104]	; (8000b3c <MX_GPIO_Init+0x11c>)
 8000ad2:	f000 fff7 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2108      	movs	r1, #8
 8000ada:	4819      	ldr	r0, [pc, #100]	; (8000b40 <MX_GPIO_Init+0x120>)
 8000adc:	f000 fff2 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x11c>)
 8000af8:	f000 fe0c 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000afc:	2309      	movs	r3, #9
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_GPIO_Init+0x124>)
 8000b10:	f000 fe00 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b14:	2308      	movs	r3, #8
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_GPIO_Init+0x120>)
 8000b2c:	f000 fdf2 	bl	8001714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	46020c00 	.word	0x46020c00
 8000b3c:	42021c00 	.word	0x42021c00
 8000b40:	42020000 	.word	0x42020000
 8000b44:	42020800 	.word	0x42020800

08000b48 <writePressure>:
		//writePressure();
	}
}

void writePressure()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
	char uart_buffer[50];
	int uart_buffer_length;

	uart_buffer_length = sprintf(uart_buffer, "%d\n", pressure);
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <writePressure+0x2c>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	463b      	mov	r3, r7
 8000b54:	4908      	ldr	r1, [pc, #32]	; (8000b78 <writePressure+0x30>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f008 fb52 	bl	8009200 <siprintf>
 8000b5c:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, uart_buffer_length, 100);
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4639      	mov	r1, r7
 8000b64:	2364      	movs	r3, #100	; 0x64
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <writePressure+0x34>)
 8000b68:	f007 f846 	bl	8007bf8 <HAL_UART_Transmit>
}
 8000b6c:	bf00      	nop
 8000b6e:	3738      	adds	r7, #56	; 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000614 	.word	0x20000614
 8000b78:	08009b24 	.word	0x08009b24
 8000b7c:	20000274 	.word	0x20000274

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <MS5607_init>:
static uint8_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_init(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	MS5607_disable();
 8000b94:	f000 f8ba 	bl	8000d0c <MS5607_disable>

	config = MS5607_initStruct;
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <MS5607_init+0xb0>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <MS5607_init+0xb0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	7a9b      	ldrb	r3, [r3, #10]
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <MS5607_init+0xb4>)
 8000bac:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MS5607_init+0xb0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	7a9b      	ldrb	r3, [r3, #10]
 8000bb4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MS5607_init+0xb8>)
 8000bbc:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MS5607_init+0xb0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	7a9b      	ldrb	r3, [r3, #10]
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d828      	bhi.n	8000c1a <MS5607_init+0x8e>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <MS5607_init+0x44>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000bf5 	.word	0x08000bf5
 8000bd4:	08000c1b 	.word	0x08000c1b
 8000bd8:	08000bfd 	.word	0x08000bfd
 8000bdc:	08000c1b 	.word	0x08000c1b
 8000be0:	08000c05 	.word	0x08000c05
 8000be4:	08000c1b 	.word	0x08000c1b
 8000be8:	08000c0d 	.word	0x08000c0d
 8000bec:	08000c1b 	.word	0x08000c1b
 8000bf0:	08000c15 	.word	0x08000c15
	{
		case MS5607_OSR_256:
			measurementDelay = 1;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MS5607_init+0xbc>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
			break;
 8000bfa:	e00e      	b.n	8000c1a <MS5607_init+0x8e>
		case MS5607_OSR_512:
			measurementDelay = 2;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MS5607_init+0xbc>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	701a      	strb	r2, [r3, #0]
			break;
 8000c02:	e00a      	b.n	8000c1a <MS5607_init+0x8e>
		case MS5607_OSR_1024:
			measurementDelay = 3;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MS5607_init+0xbc>)
 8000c06:	2203      	movs	r2, #3
 8000c08:	701a      	strb	r2, [r3, #0]
			break;
 8000c0a:	e006      	b.n	8000c1a <MS5607_init+0x8e>
		case MS5607_OSR_2048:
			measurementDelay = 5;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MS5607_init+0xbc>)
 8000c0e:	2205      	movs	r2, #5
 8000c10:	701a      	strb	r2, [r3, #0]
			break;
 8000c12:	e002      	b.n	8000c1a <MS5607_init+0x8e>
		case MS5607_OSR_4096:
			measurementDelay = 9;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MS5607_init+0xbc>)
 8000c16:	2209      	movs	r2, #9
 8000c18:	701a      	strb	r2, [r3, #0]
	}

	MS5607_enable();
 8000c1a:	f000 f867 	bl	8000cec <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_RESET, 1, 100);
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MS5607_init+0xb0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2201      	movs	r2, #1
 8000c28:	4908      	ldr	r1, [pc, #32]	; (8000c4c <MS5607_init+0xc0>)
 8000c2a:	f006 f94b 	bl	8006ec4 <HAL_SPI_Transmit>
	MS5607_disable();
 8000c2e:	f000 f86d 	bl	8000d0c <MS5607_disable>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000618 	.word	0x20000618
 8000c40:	2000061d 	.word	0x2000061d
 8000c44:	2000061e 	.word	0x2000061e
 8000c48:	2000061c 	.word	0x2000061c
 8000c4c:	08009b2c 	.word	0x08009b2c

08000c50 <MS5607_readPressure>:

uint32_t MS5607_readPressure()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	// Send convert command over SPI1
	MS5607_enable();
 8000c54:	f000 f84a 	bl	8000cec <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MS5607_readPressure+0x30>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	2364      	movs	r3, #100	; 0x64
 8000c60:	2201      	movs	r2, #1
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <MS5607_readPressure+0x34>)
 8000c64:	f006 f92e 	bl	8006ec4 <HAL_SPI_Transmit>
	MS5607_disable();
 8000c68:	f000 f850 	bl	8000d0c <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_Delay(measurementDelay);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MS5607_readPressure+0x38>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fc47 	bl	8001504 <HAL_Delay>

	// Read ADC result
	return MS5607_readADC();
 8000c76:	f000 f809 	bl	8000c8c <MS5607_readADC>
 8000c7a:	4603      	mov	r3, r0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000618 	.word	0x20000618
 8000c84:	2000061d 	.word	0x2000061d
 8000c88:	2000061c 	.word	0x2000061c

08000c8c <MS5607_readADC>:
	// Read ADC result
	return MS5607_readADC();
}

uint32_t MS5607_readADC()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	// 3-byte SPI response buffer for 24-bit ADC read
	uint8_t responseBuffer[] = {0,0,0};
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MS5607_readADC+0x54>)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	8019      	strh	r1, [r3, #0]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	0c12      	lsrs	r2, r2, #16
 8000ca0:	701a      	strb	r2, [r3, #0]
	
	MS5607_enable();
 8000ca2:	f000 f823 	bl	8000cec <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_READ_ADC, 1, 100);
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MS5607_readADC+0x58>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	2201      	movs	r2, #1
 8000cb0:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <MS5607_readADC+0x5c>)
 8000cb2:	f006 f907 	bl	8006ec4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(config->spi, (uint8_t *)responseBuffer, 3, 100);
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MS5607_readADC+0x58>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	1d39      	adds	r1, r7, #4
 8000cbe:	2364      	movs	r3, #100	; 0x64
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	f006 fb1d 	bl	8007300 <HAL_SPI_Receive>
	MS5607_disable();
 8000cc6:	f000 f821 	bl	8000d0c <MS5607_disable>

	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
 8000cca:	793b      	ldrb	r3, [r7, #4]
 8000ccc:	041a      	lsls	r2, r3, #16
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	79ba      	ldrb	r2, [r7, #6]
 8000cd6:	4313      	orrs	r3, r2
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	08009b28 	.word	0x08009b28
 8000ce4:	20000618 	.word	0x20000618
 8000ce8:	08009b2b 	.word	0x08009b2b

08000cec <MS5607_enable>:

void MS5607_enable()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <MS5607_enable+0x1c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6858      	ldr	r0, [r3, #4]
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <MS5607_enable+0x1c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	891b      	ldrh	r3, [r3, #8]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f000 fee0 	bl	8001ac4 <HAL_GPIO_WritePin>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000618 	.word	0x20000618

08000d0c <MS5607_disable>:

void MS5607_disable()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <MS5607_disable+0x1c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6858      	ldr	r0, [r3, #4]
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <MS5607_disable+0x1c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	891b      	ldrh	r3, [r3, #8]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f000 fed0 	bl	8001ac4 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000618 	.word	0x20000618

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0bc      	sub	sp, #240	; 0xf0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	22c0      	movs	r2, #192	; 0xc0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 fa47 	bl	80091f0 <memset>
  if(hsd->Instance==SDMMC1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a39      	ldr	r2, [pc, #228]	; (8000e4c <HAL_SD_MspInit+0x110>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d16b      	bne.n	8000e44 <HAL_SD_MspInit+0x108>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000d6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 8000d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fb31 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000d90:	f7ff fef6 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d94:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000d9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000da0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000dd8:	f043 0308 	orr.w	r3, r3, #8
 8000ddc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_SD_MspInit+0x114>)
 8000de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000dee:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e12:	4619      	mov	r1, r3
 8000e14:	480f      	ldr	r0, [pc, #60]	; (8000e54 <HAL_SD_MspInit+0x118>)
 8000e16:	f000 fc7d 	bl	8001714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e32:	230c      	movs	r3, #12
 8000e34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <HAL_SD_MspInit+0x11c>)
 8000e40:	f000 fc68 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	37f0      	adds	r7, #240	; 0xf0
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	420c8000 	.word	0x420c8000
 8000e50:	46020c00 	.word	0x46020c00
 8000e54:	42020800 	.word	0x42020800
 8000e58:	42020c00 	.word	0x42020c00

08000e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0be      	sub	sp, #248	; 0xf8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	22c0      	movs	r2, #192	; 0xc0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f008 f9b7 	bl	80091f0 <memset>
  if(hspi->Instance==SPI1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a6b      	ldr	r2, [pc, #428]	; (8001034 <HAL_SPI_MspInit+0x1d8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d147      	bne.n	8000f1c <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000e98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 faa1 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000eb0:	f7ff fe66 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eb4:	4b60      	ldr	r3, [pc, #384]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000eba:	4a5f      	ldr	r2, [pc, #380]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000ec4:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b59      	ldr	r3, [pc, #356]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ed8:	4a57      	ldr	r2, [pc, #348]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ee2:	4b55      	ldr	r3, [pc, #340]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ef0:	23c2      	movs	r3, #194	; 0xc2
 8000ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4849      	ldr	r0, [pc, #292]	; (800103c <HAL_SPI_MspInit+0x1e0>)
 8000f16:	f000 fbfd 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f1a:	e086      	b.n	800102a <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a47      	ldr	r2, [pc, #284]	; (8001040 <HAL_SPI_MspInit+0x1e4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 8081 	bne.w	800102a <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 fa53 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 8000f4c:	f7ff fe18 	bl	8000b80 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f50:	4b39      	ldr	r3, [pc, #228]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f56:	4a38      	ldr	r2, [pc, #224]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f74:	4a30      	ldr	r2, [pc, #192]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f92:	4a29      	ldr	r2, [pc, #164]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_SPI_MspInit+0x1dc>)
 8000f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481d      	ldr	r0, [pc, #116]	; (8001044 <HAL_SPI_MspInit+0x1e8>)
 8000fd0:	f000 fba0 	bl	8001714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fec:	2305      	movs	r3, #5
 8000fee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <HAL_SPI_MspInit+0x1e8>)
 8000ffa:	f000 fb8b 	bl	8001714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001018:	2305      	movs	r3, #5
 800101a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001022:	4619      	mov	r1, r3
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <HAL_SPI_MspInit+0x1ec>)
 8001026:	f000 fb75 	bl	8001714 <HAL_GPIO_Init>
}
 800102a:	bf00      	nop
 800102c:	37f8      	adds	r7, #248	; 0xf8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40013000 	.word	0x40013000
 8001038:	46020c00 	.word	0x46020c00
 800103c:	42020000 	.word	0x42020000
 8001040:	40003800 	.word	0x40003800
 8001044:	42020800 	.word	0x42020800
 8001048:	42020400 	.word	0x42020400

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10e      	bne.n	800107c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_TIM_Base_MspInit+0x40>)
 8001060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001064:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_TIM_Base_MspInit+0x40>)
 8001066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_TIM_Base_MspInit+0x40>)
 8001070:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40014400 	.word	0x40014400
 800108c:	46020c00 	.word	0x46020c00

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ba      	sub	sp, #232	; 0xe8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	22c0      	movs	r2, #192	; 0xc0
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f008 f89d 	bl	80091f0 <memset>
  if(huart->Instance==USART1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_UART_MspInit+0xc4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d145      	bne.n	800114c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010c0:	f04f 0201 	mov.w	r2, #1
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010cc:	2300      	movs	r3, #0
 80010ce:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 f989 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80010e0:	f7ff fd4e 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_UART_MspInit+0xc8>)
 80010e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010ea:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_UART_MspInit+0xc8>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_UART_MspInit+0xc8>)
 80010f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UART_MspInit+0xc8>)
 8001104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <HAL_UART_MspInit+0xc8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_UART_MspInit+0xc8>)
 8001114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001120:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113a:	2307      	movs	r3, #7
 800113c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_UART_MspInit+0xcc>)
 8001148:	f000 fae4 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	37e8      	adds	r7, #232	; 0xe8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40013800 	.word	0x40013800
 8001158:	46020c00 	.word	0x46020c00
 800115c:	42020000 	.word	0x42020000

08001160 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0bc      	sub	sp, #240	; 0xf0
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	22c0      	movs	r2, #192	; 0xc0
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f008 f835 	bl	80091f0 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a38      	ldr	r2, [pc, #224]	; (800126c <HAL_PCD_MspInit+0x10c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d169      	bne.n	8001264 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001190:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 f920 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80011b2:	f7ff fce5 	bl	8000b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <HAL_PCD_MspInit+0x110>)
 80011b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011bc:	4a2c      	ldr	r2, [pc, #176]	; (8001270 <HAL_PCD_MspInit+0x110>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_PCD_MspInit+0x110>)
 80011c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011ee:	230a      	movs	r3, #10
 80011f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011f8:	4619      	mov	r1, r3
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <HAL_PCD_MspInit+0x114>)
 80011fc:	f000 fa8a 	bl	8001714 <HAL_GPIO_Init>

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b00      	cmp	r3, #0
 800120c:	d119      	bne.n	8001242 <HAL_PCD_MspInit+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001214:	4a16      	ldr	r2, [pc, #88]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
      HAL_PWREx_EnableVddUSB();
 800122c:	f000 fe1c 	bl	8001e68 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001238:	f023 0304 	bic.w	r3, r3, #4
 800123c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001240:	e001      	b.n	8001246 <HAL_PCD_MspInit+0xe6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001242:	f000 fe11 	bl	8001e68 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001248:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_PCD_MspInit+0x110>)
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001252:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_PCD_MspInit+0x110>)
 8001258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800125c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	37f0      	adds	r7, #240	; 0xf0
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40016000 	.word	0x40016000
 8001270:	46020c00 	.word	0x46020c00
 8001274:	42020000 	.word	0x42020000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 f8fe 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f007 ff4e 	bl	800919c <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20040000 	.word	0x20040000
 800132c:	00000400 	.word	0x00000400
 8001330:	20000620 	.word	0x20000620
 8001334:	20000638 	.word	0x20000638

08001338 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <SystemInit+0x68>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <SystemInit+0x68>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <SystemInit+0x6c>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <SystemInit+0x6c>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <SystemInit+0x6c>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <SystemInit+0x6c>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <SystemInit+0x6c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <SystemInit+0x6c>)
 800136a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800136e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001372:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <SystemInit+0x6c>)
 8001376:	2200      	movs	r2, #0
 8001378:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <SystemInit+0x6c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <SystemInit+0x6c>)
 8001380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <SystemInit+0x6c>)
 8001388:	2200      	movs	r2, #0
 800138a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SystemInit+0x68>)
 800138e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001392:	609a      	str	r2, [r3, #8]
  #endif
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	46020c00 	.word	0x46020c00

080013a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013ac:	f7ff ffc4 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013d6:	f007 fee7 	bl	80091a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff f8dd 	bl	8000598 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013ec:	08009c74 	.word	0x08009c74
  ldr r2, =_sbss
 80013f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013f4:	20000635 	.word	0x20000635

080013f8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_IRQHandler>
	...

080013fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_Init+0x4c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_Init+0x4c>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f94f 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001412:	f001 fe07 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8001416:	4602      	mov	r2, r0
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_Init+0x50>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	490b      	ldr	r1, [pc, #44]	; (8001450 <HAL_Init+0x54>)
 8001422:	5ccb      	ldrb	r3, [r1, r3]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_Init+0x58>)
 800142a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142c:	200f      	movs	r0, #15
 800142e:	f000 f813 	bl	8001458 <HAL_InitTick>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e002      	b.n	8001442 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fc76 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000
 800144c:	46020c00 	.word	0x46020c00
 8001450:	08009b30 	.word	0x08009b30
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_InitTick+0x60>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e021      	b.n	80014b0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_InitTick+0x64>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_InitTick+0x60>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f939 	bl	80016fa <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f000 f911 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x68>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000624 	.word	0x20000624

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000624 	.word	0x20000624

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff47 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff5e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff90 	bl	8001604 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5f 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffb2 	bl	800166c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001726:	e1ba      	b.n	8001a9e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 81aa 	beq.w	8001a98 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a55      	ldr	r2, [pc, #340]	; (800189c <HAL_GPIO_Init+0x188>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d15d      	bne.n	8001808 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001752:	2201      	movs	r2, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	4013      	ands	r3, r2
 8001760:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	4313      	orrs	r3, r2
 8001774:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800177c:	4a48      	ldr	r2, [pc, #288]	; (80018a0 <HAL_GPIO_Init+0x18c>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001784:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001786:	4a46      	ldr	r2, [pc, #280]	; (80018a0 <HAL_GPIO_Init+0x18c>)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3208      	adds	r2, #8
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220b      	movs	r2, #11
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3208      	adds	r2, #8
 80017d2:	69f9      	ldr	r1, [r7, #28]
 80017d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2202      	movs	r2, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e067      	b.n	80018d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x104>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d145      	bne.n	80018a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4013      	ands	r3, r2
 800183a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f003 020f 	and.w	r2, r3, #15
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	4313      	orrs	r3, r2
 8001854:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69f9      	ldr	r1, [r7, #28]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4013      	ands	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	4313      	orrs	r3, r2
 8001890:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e01e      	b.n	80018d8 <HAL_GPIO_Init+0x1c4>
 800189a:	bf00      	nop
 800189c:	46020000 	.word	0x46020000
 80018a0:	08009b88 	.word	0x08009b88
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d00b      	beq.n	80018f8 <HAL_GPIO_Init+0x1e4>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d007      	beq.n	80018f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ec:	2b11      	cmp	r3, #17
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	d130      	bne.n	800195a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	4313      	orrs	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800192e:	2201      	movs	r2, #1
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	4013      	ands	r3, r2
 800193c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	f003 0201 	and.w	r2, r3, #1
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	4313      	orrs	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d017      	beq.n	8001992 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	4013      	ands	r3, r2
 8001978:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4313      	orrs	r3, r2
 800198a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d07c      	beq.n	8001a98 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800199e:	4a47      	ldr	r2, [pc, #284]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3318      	adds	r3, #24
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	4013      	ands	r3, r2
 80019c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0a9a      	lsrs	r2, r3, #10
 80019c6:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <HAL_GPIO_Init+0x3ac>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	4093      	lsls	r3, r2
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80019da:	4938      	ldr	r1, [pc, #224]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3318      	adds	r3, #24
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001a36:	4a21      	ldr	r2, [pc, #132]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 8001a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a42:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 8001a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a70:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_GPIO_Init+0x3a8>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f ae3d 	bne.w	8001728 <HAL_GPIO_Init+0x14>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3724      	adds	r7, #36	; 0x24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	46022000 	.word	0x46022000
 8001ac0:	002f7f7f 	.word	0x002f7f7f

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b08f      	sub	sp, #60	; 0x3c
 8001af8:	af0a      	add	r7, sp, #40	; 0x28
 8001afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0fe      	b.n	8001d04 <HAL_PCD_Init+0x210>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fb20 	bl	8001160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2203      	movs	r2, #3
 8001b24:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f007 fac8 	bl	80090c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	687e      	ldr	r6, [r7, #4]
 8001b3a:	466d      	mov	r5, sp
 8001b3c:	f106 0410 	add.w	r4, r6, #16
 8001b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b50:	1d33      	adds	r3, r6, #4
 8001b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f007 fa96 	bl	8009086 <USB_CoreInit>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0cb      	b.n	8001d04 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 faba 	bl	80090ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e03e      	b.n	8001bfc <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	333d      	adds	r3, #61	; 0x3d
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	333c      	adds	r3, #60	; 0x3c
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	333f      	adds	r3, #63	; 0x3f
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	334c      	adds	r3, #76	; 0x4c
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3350      	adds	r3, #80	; 0x50
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3354      	adds	r3, #84	; 0x54
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3bb      	bcc.n	8001b7e <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e044      	b.n	8001c96 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3301      	adds	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3b5      	bcc.n	8001c0c <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	687e      	ldr	r6, [r7, #4]
 8001ca8:	466d      	mov	r5, sp
 8001caa:	f106 0410 	add.w	r4, r6, #16
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cbe:	1d33      	adds	r3, r6, #4
 8001cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc2:	6838      	ldr	r0, [r7, #0]
 8001cc4:	f007 fa35 	bl	8009132 <USB_DevInit>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_PCD_Init+0x1e6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e014      	b.n	8001d04 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f80a 	bl	8001d0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f007 fa3b 	bl	8009178 <USB_DevDisconnect>

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  hpcd->LPM_State = LPM_L0;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f043 0202 	orr.w	r2, r3, #2
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d60:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d10b      	bne.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d905      	bls.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d72:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e057      	b.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d90a      	bls.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	60d3      	str	r3, [r2, #12]
 8001d9e:	e007      	b.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001da8:	4925      	ldr	r1, [pc, #148]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	2232      	movs	r2, #50	; 0x32
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001dce:	e002      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f3      	bne.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01b      	beq.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	2232      	movs	r2, #50	; 0x32
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001e0c:	e002      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f3      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	46020800 	.word	0x46020800
 8001e44:	20000000 	.word	0x20000000
 8001e48:	10624dd3 	.word	0x10624dd3

08001e4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	46020800 	.word	0x46020800

08001e68 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6113      	str	r3, [r2, #16]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	46020800 	.word	0x46020800

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	; 0x38
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f000 bec8 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea2:	4b99      	ldr	r3, [pc, #612]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eac:	4b96      	ldr	r3, [pc, #600]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 816c 	beq.w	800219c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_RCC_OscConfig+0x52>
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	f040 80de 	bne.w	800208e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	f040 80da 	bne.w	800208e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f000 bea5 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eec:	4b86      	ldr	r3, [pc, #536]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_RCC_OscConfig+0x7a>
 8001ef8:	4b83      	ldr	r3, [pc, #524]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f00:	e005      	b.n	8001f0e <HAL_RCC_OscConfig+0x86>
 8001f02:	4b81      	ldr	r3, [pc, #516]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d255      	bcs.n	8001fbe <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 f9df 	bl	80032e0 <RCC_SetFlashLatencyFromMSIRange>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f000 be82 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001f2e:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a75      	ldr	r2, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f38:	6093      	str	r3, [r2, #8]
 8001f3a:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	4970      	ldr	r1, [pc, #448]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001f54:	d309      	bcc.n	8001f6a <HAL_RCC_OscConfig+0xe2>
 8001f56:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f023 021f 	bic.w	r2, r3, #31
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4969      	ldr	r1, [pc, #420]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e07e      	b.n	8002068 <HAL_RCC_OscConfig+0x1e0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da0a      	bge.n	8001f88 <HAL_RCC_OscConfig+0x100>
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	015b      	lsls	r3, r3, #5
 8001f80:	4961      	ldr	r1, [pc, #388]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
 8001f86:	e06f      	b.n	8002068 <HAL_RCC_OscConfig+0x1e0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d30a      	bcc.n	8001fa8 <HAL_RCC_OscConfig+0x120>
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4959      	ldr	r1, [pc, #356]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60cb      	str	r3, [r1, #12]
 8001fa6:	e05f      	b.n	8002068 <HAL_RCC_OscConfig+0x1e0>
 8001fa8:	4b57      	ldr	r3, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	03db      	lsls	r3, r3, #15
 8001fb6:	4954      	ldr	r1, [pc, #336]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e054      	b.n	8002068 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001fbe:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4a51      	ldr	r2, [pc, #324]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fc8:	6093      	str	r3, [r2, #8]
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	494c      	ldr	r1, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001fe4:	d309      	bcc.n	8001ffa <HAL_RCC_OscConfig+0x172>
 8001fe6:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f023 021f 	bic.w	r2, r3, #31
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4945      	ldr	r1, [pc, #276]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
 8001ff8:	e028      	b.n	800204c <HAL_RCC_OscConfig+0x1c4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da0a      	bge.n	8002018 <HAL_RCC_OscConfig+0x190>
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	493d      	ldr	r1, [pc, #244]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002012:	4313      	orrs	r3, r2
 8002014:	60cb      	str	r3, [r1, #12]
 8002016:	e019      	b.n	800204c <HAL_RCC_OscConfig+0x1c4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d30a      	bcc.n	8002038 <HAL_RCC_OscConfig+0x1b0>
 8002022:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	4935      	ldr	r1, [pc, #212]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002032:	4313      	orrs	r3, r2
 8002034:	60cb      	str	r3, [r1, #12]
 8002036:	e009      	b.n	800204c <HAL_RCC_OscConfig+0x1c4>
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	03db      	lsls	r3, r3, #15
 8002046:	4930      	ldr	r1, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	4618      	mov	r0, r3
 8002058:	f001 f942 	bl	80032e0 <RCC_SetFlashLatencyFromMSIRange>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 bde5 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002068:	f001 f8e4 	bl	8003234 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x284>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f9f1 	bl	8001458 <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 808a 	beq.w	800219a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800208a:	f000 bdd2 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d066      	beq.n	8002164 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80020a2:	f7ff fa23 	bl	80014ec <HAL_GetTick>
 80020a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80020a8:	e009      	b.n	80020be <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020aa:	f7ff fa1f 	bl	80014ec <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d902      	bls.n	80020be <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	f000 bdba 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ef      	beq.n	80020aa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020d4:	6093      	str	r3, [r2, #8]
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	4909      	ldr	r1, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80020f0:	d30e      	bcc.n	8002110 <HAL_RCC_OscConfig+0x288>
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f023 021f 	bic.w	r2, r3, #31
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4902      	ldr	r1, [pc, #8]	; (8002108 <HAL_RCC_OscConfig+0x280>)
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e04a      	b.n	800219c <HAL_RCC_OscConfig+0x314>
 8002106:	bf00      	nop
 8002108:	46020c00 	.word	0x46020c00
 800210c:	20000004 	.word	0x20000004
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	da0a      	bge.n	800212e <HAL_RCC_OscConfig+0x2a6>
 8002118:	4b98      	ldr	r3, [pc, #608]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	4995      	ldr	r1, [pc, #596]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
 800212c:	e036      	b.n	800219c <HAL_RCC_OscConfig+0x314>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002136:	d30a      	bcc.n	800214e <HAL_RCC_OscConfig+0x2c6>
 8002138:	4b90      	ldr	r3, [pc, #576]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	498d      	ldr	r1, [pc, #564]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
 800214c:	e026      	b.n	800219c <HAL_RCC_OscConfig+0x314>
 800214e:	4b8b      	ldr	r3, [pc, #556]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	03db      	lsls	r3, r3, #15
 800215c:	4987      	ldr	r1, [pc, #540]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	60cb      	str	r3, [r1, #12]
 8002162:	e01b      	b.n	800219c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002164:	4b85      	ldr	r3, [pc, #532]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a84      	ldr	r2, [pc, #528]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002170:	f7ff f9bc 	bl	80014ec <HAL_GetTick>
 8002174:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002178:	f7ff f9b8 	bl	80014ec <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d902      	bls.n	800218c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	f000 bd53 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800218c:	4b7b      	ldr	r3, [pc, #492]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ef      	bne.n	8002178 <HAL_RCC_OscConfig+0x2f0>
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800219a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 808b 	beq.w	80022c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_OscConfig+0x334>
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d17d      	bne.n	80022c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f000 bd34 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x35a>
 80021d4:	4b69      	ldr	r3, [pc, #420]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a68      	ldr	r2, [pc, #416]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e041      	b.n	8002266 <HAL_RCC_OscConfig+0x3de>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ea:	d112      	bne.n	8002212 <HAL_RCC_OscConfig+0x38a>
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a62      	ldr	r2, [pc, #392]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b60      	ldr	r3, [pc, #384]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a5f      	ldr	r2, [pc, #380]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b5d      	ldr	r3, [pc, #372]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5c      	ldr	r2, [pc, #368]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e029      	b.n	8002266 <HAL_RCC_OscConfig+0x3de>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800221a:	d112      	bne.n	8002242 <HAL_RCC_OscConfig+0x3ba>
 800221c:	4b57      	ldr	r3, [pc, #348]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a53      	ldr	r2, [pc, #332]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800222e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b51      	ldr	r3, [pc, #324]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e011      	b.n	8002266 <HAL_RCC_OscConfig+0x3de>
 8002242:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a4d      	ldr	r2, [pc, #308]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4a      	ldr	r2, [pc, #296]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a47      	ldr	r2, [pc, #284]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002264:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d014      	beq.n	8002298 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800226e:	f7ff f93d 	bl	80014ec <HAL_GetTick>
 8002272:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002274:	e009      	b.n	800228a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002276:	f7ff f939 	bl	80014ec <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d902      	bls.n	800228a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	f000 bcd4 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b3c      	ldr	r3, [pc, #240]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0ef      	beq.n	8002276 <HAL_RCC_OscConfig+0x3ee>
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002298:	f7ff f928 	bl	80014ec <HAL_GetTick>
 800229c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	e009      	b.n	80022b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f924 	bl	80014ec <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d902      	bls.n	80022b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	f000 bcbf 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ef      	bne.n	80022a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d05f      	beq.n	800238c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x456>
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d114      	bne.n	8002302 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d111      	bne.n	8002302 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f000 bca3 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	4920      	ldr	r1, [pc, #128]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002300:	e044      	b.n	800238c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d024      	beq.n	8002354 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002316:	f7ff f8e9 	bl	80014ec <HAL_GetTick>
 800231a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231c:	e009      	b.n	8002332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff f8e5 	bl	80014ec <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d902      	bls.n	8002332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	f000 bc80 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ef      	beq.n	800231e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	490b      	ldr	r1, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	610b      	str	r3, [r1, #16]
 8002352:	e01b      	b.n	800238c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a08      	ldr	r2, [pc, #32]	; (800237c <HAL_RCC_OscConfig+0x4f4>)
 800235a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002360:	f7ff f8c4 	bl	80014ec <HAL_GetTick>
 8002364:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7ff f8c0 	bl	80014ec <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d904      	bls.n	8002380 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	f000 bc5b 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
 800237c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002380:	4baf      	ldr	r3, [pc, #700]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ed      	bne.n	8002368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80c8 	beq.w	800252a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a0:	4ba7      	ldr	r3, [pc, #668]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d111      	bne.n	80023d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	4ba4      	ldr	r3, [pc, #656]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80023b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b4:	4aa2      	ldr	r2, [pc, #648]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80023be:	4ba0      	ldr	r3, [pc, #640]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80023c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80023d2:	4b9c      	ldr	r3, [pc, #624]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80023de:	4b99      	ldr	r3, [pc, #612]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	4a98      	ldr	r2, [pc, #608]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7ff f87f 	bl	80014ec <HAL_GetTick>
 80023ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80023f0:	e009      	b.n	8002406 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7ff f87b 	bl	80014ec <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d902      	bls.n	8002406 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	f000 bc16 	b.w	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002406:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ef      	beq.n	80023f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d05f      	beq.n	80024da <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800241c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002420:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	429a      	cmp	r2, r3
 800242e:	d037      	beq.n	80024a0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e3f4      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01b      	beq.n	800248a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002452:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002458:	4a79      	ldr	r2, [pc, #484]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800245a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800245e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002462:	f7ff f843 	bl	80014ec <HAL_GetTick>
 8002466:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7ff f83f 	bl	80014ec <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b05      	cmp	r3, #5
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e3da      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800247e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800248c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002490:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4969      	ldr	r1, [pc, #420]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80024a0:	4b67      	ldr	r3, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80024a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a6:	4a66      	ldr	r2, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80024a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80024b0:	f7ff f81c 	bl	80014ec <HAL_GetTick>
 80024b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b8:	f7ff f818 	bl	80014ec <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e3b3      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80024cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCC_OscConfig+0x630>
 80024d8:	e01b      	b.n	8002512 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80024da:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80024dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e0:	4a57      	ldr	r2, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80024e2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80024e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80024ea:	f7fe ffff 	bl	80014ec <HAL_GetTick>
 80024ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fffb 	bl	80014ec <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e396      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002504:	4b4e      	ldr	r3, [pc, #312]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800250a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002512:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800251c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002520:	4a47      	ldr	r2, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002522:	f023 0304 	bic.w	r3, r3, #4
 8002526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8111 	beq.w	800275a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d111      	bne.n	8002570 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254c:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800254e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d118      	bne.n	80025ae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002588:	f7fe ffb0 	bl	80014ec <HAL_GetTick>
 800258c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002590:	f7fe ffac 	bl	80014ec <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e347      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_RCC_OscConfig+0x7bc>)
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01f      	beq.n	80025fa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80025c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025cc:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80025d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025e6:	e018      	b.n	800261a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80025ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ee:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025f8:	e00f      	b.n	800261a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 80025fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002600:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 800260c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x7b8>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d057      	beq.n	80026d2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002622:	f7fe ff63 	bl	80014ec <HAL_GetTick>
 8002626:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002628:	e00e      	b.n	8002648 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe ff5f 	bl	80014ec <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d905      	bls.n	8002648 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e2f8      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
 8002640:	46020c00 	.word	0x46020c00
 8002644:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002648:	4b9c      	ldr	r3, [pc, #624]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800264a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0e9      	beq.n	800262a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01b      	beq.n	800269a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002662:	4b96      	ldr	r3, [pc, #600]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002668:	4a94      	ldr	r2, [pc, #592]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7fe ff3a 	bl	80014ec <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e2d3      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800268a:	4b8c      	ldr	r3, [pc, #560]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800268c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ed      	beq.n	8002674 <HAL_RCC_OscConfig+0x7ec>
 8002698:	e053      	b.n	8002742 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800269c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a0:	4a86      	ldr	r2, [pc, #536]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80026a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe ff1e 	bl	80014ec <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e2b7      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026c2:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80026c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ed      	bne.n	80026ac <HAL_RCC_OscConfig+0x824>
 80026d0:	e037      	b.n	8002742 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80026d2:	f7fe ff0b 	bl	80014ec <HAL_GetTick>
 80026d6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe ff07 	bl	80014ec <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2a0      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	4b72      	ldr	r3, [pc, #456]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80026f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ed      	bne.n	80026da <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80026fe:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01a      	beq.n	8002742 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800270c:	4b6b      	ldr	r3, [pc, #428]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800270e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002712:	4a6a      	ldr	r2, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002718:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7fe fee5 	bl	80014ec <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e27e      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002734:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800273a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ed      	bne.n	800271e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002742:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800274c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002750:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d036      	beq.n	80027d4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002778:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800277a:	f7fe feb7 	bl	80014ec <HAL_GetTick>
 800277e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002782:	f7fe feb3 	bl	80014ec <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e24e      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002794:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x8fa>
 80027a0:	e018      	b.n	80027d4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80027a2:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a45      	ldr	r2, [pc, #276]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80027a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80027ae:	f7fe fe9d 	bl	80014ec <HAL_GetTick>
 80027b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b6:	f7fe fe99 	bl	80014ec <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e234      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80027c8:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d036      	beq.n	800284e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d019      	beq.n	800281c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80027ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80027f4:	f7fe fe7a 	bl	80014ec <HAL_GetTick>
 80027f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80027fc:	f7fe fe76 	bl	80014ec <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e211      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x974>
 800281a:	e018      	b.n	800284e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002826:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002828:	f7fe fe60 	bl	80014ec <HAL_GetTick>
 800282c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002830:	f7fe fe5c 	bl	80014ec <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1f7      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d07f      	beq.n	800295a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	2b00      	cmp	r3, #0
 8002860:	d062      	beq.n	8002928 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286c:	6093      	str	r3, [r2, #8]
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	4910      	ldr	r1, [pc, #64]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002888:	d309      	bcc.n	800289e <HAL_RCC_OscConfig+0xa16>
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f023 021f 	bic.w	r2, r3, #31
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4909      	ldr	r1, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 8002898:	4313      	orrs	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
 800289c:	e02a      	b.n	80028f4 <HAL_RCC_OscConfig+0xa6c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	da0c      	bge.n	80028c0 <HAL_RCC_OscConfig+0xa38>
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	015b      	lsls	r3, r3, #5
 80028b4:	4901      	ldr	r1, [pc, #4]	; (80028bc <HAL_RCC_OscConfig+0xa34>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60cb      	str	r3, [r1, #12]
 80028ba:	e01b      	b.n	80028f4 <HAL_RCC_OscConfig+0xa6c>
 80028bc:	46020c00 	.word	0x46020c00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d30a      	bcc.n	80028e0 <HAL_RCC_OscConfig+0xa58>
 80028ca:	4ba1      	ldr	r3, [pc, #644]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	029b      	lsls	r3, r3, #10
 80028d8:	499d      	ldr	r1, [pc, #628]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]
 80028de:	e009      	b.n	80028f4 <HAL_RCC_OscConfig+0xa6c>
 80028e0:	4b9b      	ldr	r3, [pc, #620]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	03db      	lsls	r3, r3, #15
 80028ee:	4998      	ldr	r1, [pc, #608]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80028f4:	4b96      	ldr	r3, [pc, #600]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a95      	ldr	r2, [pc, #596]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80028fa:	f043 0310 	orr.w	r3, r3, #16
 80028fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002900:	f7fe fdf4 	bl	80014ec <HAL_GetTick>
 8002904:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002908:	f7fe fdf0 	bl	80014ec <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e18b      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800291a:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xa80>
 8002926:	e018      	b.n	800295a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002928:	4b89      	ldr	r3, [pc, #548]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a88      	ldr	r2, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 800292e:	f023 0310 	bic.w	r3, r3, #16
 8002932:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002934:	f7fe fdda 	bl	80014ec <HAL_GetTick>
 8002938:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800293c:	f7fe fdd6 	bl	80014ec <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e171      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800294e:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8166 	beq.w	8002c30 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296a:	4b79      	ldr	r3, [pc, #484]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b0c      	cmp	r3, #12
 8002974:	f000 80f2 	beq.w	8002b5c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 80c5 	bne.w	8002b0c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a72      	ldr	r2, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800298e:	f7fe fdad 	bl	80014ec <HAL_GetTick>
 8002992:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fda9 	bl	80014ec <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e144      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b4:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80029b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d111      	bne.n	80029e6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c8:	4a61      	ldr	r2, [pc, #388]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 80029d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80029e6:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <HAL_RCC_OscConfig+0xccc>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80029fa:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <HAL_RCC_OscConfig+0xccc>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a55      	ldr	r2, [pc, #340]	; (8002b54 <HAL_RCC_OscConfig+0xccc>)
 8002a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a04:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002a06:	4b52      	ldr	r3, [pc, #328]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a1a:	3a01      	subs	r2, #1
 8002a1c:	0212      	lsls	r2, r2, #8
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a24:	430a      	orrs	r2, r1
 8002a26:	494a      	ldr	r1, [pc, #296]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8002a2c:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <HAL_RCC_OscConfig+0xcd0>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a42:	3a01      	subs	r2, #1
 8002a44:	0252      	lsls	r2, r2, #9
 8002a46:	b292      	uxth	r2, r2
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0412      	lsls	r2, r2, #16
 8002a52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0612      	lsls	r2, r2, #24
 8002a60:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002a64:	430a      	orrs	r2, r1
 8002a66:	493a      	ldr	r1, [pc, #232]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002a6c:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	4a37      	ldr	r2, [pc, #220]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a72:	f023 0310 	bic.w	r3, r3, #16
 8002a76:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7c:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a88:	f043 0310 	orr.w	r3, r3, #16
 8002a8c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f023 020c 	bic.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	492d      	ldr	r1, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_RCC_OscConfig+0xccc>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_RCC_OscConfig+0xccc>)
 8002aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002ab4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac2:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd02 	bl	80014ec <HAL_GetTick>
 8002ae8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fcfe 	bl	80014ec <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e099      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xc64>
 8002b0a:	e091      	b.n	8002c30 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002b18:	f7fe fce8 	bl	80014ec <HAL_GetTick>
 8002b1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fce4 	bl	80014ec <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e07f      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_RCC_OscConfig+0xcc8>)
 8002b44:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002b48:	f023 0303 	bic.w	r3, r3, #3
 8002b4c:	6293      	str	r3, [r2, #40]	; 0x28
 8002b4e:	e06f      	b.n	8002c30 <HAL_RCC_OscConfig+0xda8>
 8002b50:	46020c00 	.word	0x46020c00
 8002b54:	46020800 	.word	0x46020800
 8002b58:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b5c:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d039      	beq.n	8002be4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d132      	bne.n	8002be4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d129      	bne.n	8002be4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d122      	bne.n	8002be4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d11a      	bne.n	8002be4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	0a5b      	lsrs	r3, r3, #9
 8002bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d111      	bne.n	8002be4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	0e1b      	lsrs	r3, r3, #24
 8002bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e024      	b.n	8002c32 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d01a      	beq.n	8002c30 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002c00:	f023 0310 	bic.w	r3, r3, #16
 8002c04:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fc71 	bl	80014ec <HAL_GetTick>
 8002c0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002c0c:	bf00      	nop
 8002c0e:	f7fe fc6d 	bl	80014ec <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d0f9      	beq.n	8002c0e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_RCC_OscConfig+0xdb4>)
 8002c2a:	f043 0310 	orr.w	r3, r3, #16
 8002c2e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3738      	adds	r7, #56	; 0x38
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	46020c00 	.word	0x46020c00

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e1d9      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b9b      	ldr	r3, [pc, #620]	; (8002ec4 <HAL_RCC_ClockConfig+0x284>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d910      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b98      	ldr	r3, [pc, #608]	; (8002ec4 <HAL_RCC_ClockConfig+0x284>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 020f 	bic.w	r2, r3, #15
 8002c6a:	4996      	ldr	r1, [pc, #600]	; (8002ec4 <HAL_RCC_ClockConfig+0x284>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b94      	ldr	r3, [pc, #592]	; (8002ec4 <HAL_RCC_ClockConfig+0x284>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e1c1      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d010      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d908      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002ca0:	4b89      	ldr	r3, [pc, #548]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	4986      	ldr	r1, [pc, #536]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d012      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	4b81      	ldr	r3, [pc, #516]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d909      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002cd0:	4b7d      	ldr	r3, [pc, #500]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	497a      	ldr	r1, [pc, #488]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4b74      	ldr	r3, [pc, #464]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	496e      	ldr	r1, [pc, #440]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d908      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002d2e:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 020f 	bic.w	r2, r3, #15
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4963      	ldr	r1, [pc, #396]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80d2 	beq.w	8002ef2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d143      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d110      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6e:	4a56      	ldr	r2, [pc, #344]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fbaf 	bl	80014ec <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002d90:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <HAL_RCC_ClockConfig+0x28c>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00f      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002d9e:	f7fe fba5 	bl	80014ec <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e12b      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_RCC_ClockConfig+0x28c>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc8:	4a3f      	ldr	r2, [pc, #252]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d121      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e112      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dea:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d115      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e106      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0fa      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0f2      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4926      	ldr	r1, [pc, #152]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002e34:	f7fe fb5a 	bl	80014ec <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d112      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fe fb52 	bl	80014ec <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0d6      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d1ee      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x204>
 8002e66:	e044      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d112      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e72:	f7fe fb3b 	bl	80014ec <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0bf      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x232>
 8002e94:	e02d      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d123      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe fb24 	bl	80014ec <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0a8      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_RCC_ClockConfig+0x288>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x260>
 8002ec2:	e016      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x2b2>
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	46020c00 	.word	0x46020c00
 8002ecc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7fe fb0c 	bl	80014ec <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e090      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d1ee      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d208      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002f0e:	4b40      	ldr	r3, [pc, #256]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	493d      	ldr	r1, [pc, #244]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCC_ClockConfig+0x3d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d210      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCC_ClockConfig+0x3d4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 020f 	bic.w	r2, r3, #15
 8002f36:	4937      	ldr	r1, [pc, #220]	; (8003014 <HAL_RCC_ClockConfig+0x3d4>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_RCC_ClockConfig+0x3d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e05b      	b.n	8003008 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d208      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4925      	ldr	r1, [pc, #148]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d209      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	4919      	ldr	r1, [pc, #100]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d208      	bcs.n	8002fde <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	490d      	ldr	r1, [pc, #52]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_RCC_ClockConfig+0x3d0>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x3d8>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x3dc>)
 8002ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x3e0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe fa2b 	bl	8001458 <HAL_InitTick>
 8003002:	4603      	mov	r3, r0
 8003004:	73fb      	strb	r3, [r7, #15]

  return status;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	46020c00 	.word	0x46020c00
 8003014:	40022000 	.word	0x40022000
 8003018:	08009b30 	.word	0x08009b30
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b08b      	sub	sp, #44	; 0x2c
 8003028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003032:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303c:	4b78      	ldr	r3, [pc, #480]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d121      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d11e      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003058:	4b71      	ldr	r3, [pc, #452]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003064:	4b6e      	ldr	r3, [pc, #440]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800306a:	0b1b      	lsrs	r3, r3, #12
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	e005      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003074:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	0f1b      	lsrs	r3, r3, #28
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003080:	4a68      	ldr	r2, [pc, #416]	; (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d110      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003094:	e00d      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030a2:	4b61      	ldr	r3, [pc, #388]	; (8003228 <HAL_RCC_GetSysClockFreq+0x204>)
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	e004      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030ae:	4b5e      	ldr	r3, [pc, #376]	; (8003228 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	f040 80ac 	bne.w	8003212 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80030ba:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80030c4:	4b56      	ldr	r3, [pc, #344]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80030d2:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80030de:	4b50      	ldr	r3, [pc, #320]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	08db      	lsrs	r3, r3, #3
 80030e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8086 	beq.w	800320e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d003      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0xec>
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d022      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x130>
 800310e:	e043      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800322c <HAL_RCC_GetSysClockFreq+0x208>
 800311e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003122:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003132:	ed97 6a01 	vldr	s12, [r7, #4]
 8003136:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003230 <HAL_RCC_GetSysClockFreq+0x20c>
 800313a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800313e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003146:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800314a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003152:	e046      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800322c <HAL_RCC_GetSysClockFreq+0x208>
 8003162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003176:	ed97 6a01 	vldr	s12, [r7, #4]
 800317a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003230 <HAL_RCC_GetSysClockFreq+0x20c>
 800317e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003182:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800318a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003196:	e024      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80031c0:	ed97 6a01 	vldr	s12, [r7, #4]
 80031c4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003230 <HAL_RCC_GetSysClockFreq+0x20c>
 80031c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80031d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031dc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80031e0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	0e1b      	lsrs	r3, r3, #24
 80031e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ec:	3301      	adds	r3, #1
 80031ee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80031fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003206:	ee17 3a90 	vmov	r3, s15
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	e001      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003212:	6a3b      	ldr	r3, [r7, #32]
}
 8003214:	4618      	mov	r0, r3
 8003216:	372c      	adds	r7, #44	; 0x2c
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	46020c00 	.word	0x46020c00
 8003224:	08009b48 	.word	0x08009b48
 8003228:	00f42400 	.word	0x00f42400
 800322c:	4b742400 	.word	0x4b742400
 8003230:	46000000 	.word	0x46000000

08003234 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003238:	f7ff fef4 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_RCC_GetHCLKFreq+0x28>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	4906      	ldr	r1, [pc, #24]	; (8003260 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <HAL_RCC_GetHCLKFreq+0x30>)
 8003250:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_GetHCLKFreq+0x30>)
 8003254:	681b      	ldr	r3, [r3, #0]
}
 8003256:	4618      	mov	r0, r3
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	46020c00 	.word	0x46020c00
 8003260:	08009b30 	.word	0x08009b30
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800326c:	f7ff ffe2 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	46020c00 	.word	0x46020c00
 800328c:	08009b40 	.word	0x08009b40

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003294:	f7ff ffce 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	46020c00 	.word	0x46020c00
 80032b4:	08009b40 	.word	0x08009b40

080032b8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80032bc:	f7ff ffba 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4903      	ldr	r1, [pc, #12]	; (80032dc <HAL_RCC_GetPCLK3Freq+0x24>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	46020c00 	.word	0x46020c00
 80032dc:	08009b40 	.word	0x08009b40

080032e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032e8:	4b3e      	ldr	r3, [pc, #248]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80032ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032f6:	f7fe fda9 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 80032fa:	6178      	str	r0, [r7, #20]
 80032fc:	e019      	b.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003304:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003306:	f043 0304 	orr.w	r3, r3, #4
 800330a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800330e:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800331c:	f7fe fd96 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 8003320:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003328:	4a2e      	ldr	r2, [pc, #184]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003338:	d003      	beq.n	8003342 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003340:	d109      	bne.n	8003356 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003348:	d202      	bcs.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800334a:	2301      	movs	r3, #1
 800334c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800334e:	e033      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003354:	e030      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800335c:	d208      	bcs.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d102      	bne.n	800336c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003366:	2303      	movs	r3, #3
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	e025      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e035      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003376:	d90f      	bls.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003384:	d902      	bls.n	800338c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	e015      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800338c:	2301      	movs	r3, #1
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e012      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	e00f      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800339e:	d109      	bne.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d102      	bne.n	80033ae <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80033a8:	2301      	movs	r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	e004      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80033ae:	2302      	movs	r3, #2
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e001      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80033b4:	2301      	movs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 020f 	bic.w	r2, r3, #15
 80033c0:	4909      	ldr	r1, [pc, #36]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	46020c00 	.word	0x46020c00
 80033e8:	40022000 	.word	0x40022000

080033ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b0b6      	sub	sp, #216	; 0xd8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033fe:	2300      	movs	r3, #0
 8003400:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f002 0401 	and.w	r4, r2, #1
 8003410:	2500      	movs	r5, #0
 8003412:	ea54 0305 	orrs.w	r3, r4, r5
 8003416:	d00b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003418:	4bc5      	ldr	r3, [pc, #788]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800341a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341e:	f023 0103 	bic.w	r1, r3, #3
 8003422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003428:	4ac1      	ldr	r2, [pc, #772]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800342a:	430b      	orrs	r3, r1
 800342c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f002 0804 	and.w	r8, r2, #4
 800343c:	f04f 0900 	mov.w	r9, #0
 8003440:	ea58 0309 	orrs.w	r3, r8, r9
 8003444:	d00b      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003446:	4bba      	ldr	r3, [pc, #744]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	4ab6      	ldr	r2, [pc, #728]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003458:	430b      	orrs	r3, r1
 800345a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800345e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f002 0a08 	and.w	sl, r2, #8
 800346a:	f04f 0b00 	mov.w	fp, #0
 800346e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003472:	d00b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003474:	4bae      	ldr	r3, [pc, #696]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4aaa      	ldr	r2, [pc, #680]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003486:	430b      	orrs	r3, r1
 8003488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800348c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f002 0310 	and.w	r3, r2, #16
 8003498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80034a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	d00b      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80034ac:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	4a9c      	ldr	r2, [pc, #624]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f002 0320 	and.w	r3, r2, #32
 80034d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d00b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80034e4:	4b92      	ldr	r3, [pc, #584]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80034e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ea:	f023 0107 	bic.w	r1, r3, #7
 80034ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	4a8e      	ldr	r2, [pc, #568]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80034f6:	430b      	orrs	r3, r1
 80034f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800350c:	2300      	movs	r3, #0
 800350e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003512:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003516:	460b      	mov	r3, r1
 8003518:	4313      	orrs	r3, r2
 800351a:	d00b      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800351c:	4b84      	ldr	r3, [pc, #528]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800351e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003522:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800352a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800352c:	4a80      	ldr	r2, [pc, #512]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800352e:	430b      	orrs	r3, r1
 8003530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800354a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800354e:	460b      	mov	r3, r1
 8003550:	4313      	orrs	r3, r2
 8003552:	d00b      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003554:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800355e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003564:	4a72      	ldr	r2, [pc, #456]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003566:	430b      	orrs	r3, r1
 8003568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800356c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003582:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003586:	460b      	mov	r3, r1
 8003588:	4313      	orrs	r3, r2
 800358a:	d00b      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800358e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800359a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359c:	4a64      	ldr	r2, [pc, #400]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800359e:	430b      	orrs	r3, r1
 80035a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80035b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80035be:	460b      	mov	r3, r1
 80035c0:	4313      	orrs	r3, r2
 80035c2:	d00b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80035c4:	4b5a      	ldr	r3, [pc, #360]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80035c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ca:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80035ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a56      	ldr	r2, [pc, #344]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035f2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d00b      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80035fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003602:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	4a48      	ldr	r2, [pc, #288]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800360e:	430b      	orrs	r3, r1
 8003610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800362a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800362e:	460b      	mov	r3, r1
 8003630:	4313      	orrs	r3, r2
 8003632:	d00b      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003634:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800363e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003646:	430b      	orrs	r3, r1
 8003648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800364c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003658:	67bb      	str	r3, [r7, #120]	; 0x78
 800365a:	2300      	movs	r3, #0
 800365c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800365e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d00b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800366a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800366e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003678:	4a2d      	ldr	r2, [pc, #180]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800367a:	430b      	orrs	r3, r1
 800367c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800368c:	673b      	str	r3, [r7, #112]	; 0x70
 800368e:	2300      	movs	r3, #0
 8003690:	677b      	str	r3, [r7, #116]	; 0x74
 8003692:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003696:	460b      	mov	r3, r1
 8003698:	4313      	orrs	r3, r2
 800369a:	d04f      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800369c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d02d      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d827      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036ac:	2b60      	cmp	r3, #96	; 0x60
 80036ae:	d02b      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80036b0:	2b60      	cmp	r3, #96	; 0x60
 80036b2:	d823      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d006      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d81f      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d011      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80036c4:	e01a      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036d2:	e01a      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d8:	3308      	adds	r3, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 f93e 	bl	800595c <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036e6:	e010      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ec:	332c      	adds	r3, #44	; 0x2c
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 f9cc 	bl	8005a8c <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80036fa:	e006      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003702:	e002      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8003708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d110      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003718:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800371c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003724:	4a02      	ldr	r2, [pc, #8]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003726:	430b      	orrs	r3, r1
 8003728:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800372e:	bf00      	nop
 8003730:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003738:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800373c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003748:	66bb      	str	r3, [r7, #104]	; 0x68
 800374a:	2300      	movs	r3, #0
 800374c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800374e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d046      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800375c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003760:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003764:	d028      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003766:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800376a:	d821      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800376c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003770:	d022      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003776:	d81b      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800377c:	d01c      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800377e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003782:	d815      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003788:	d008      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378e:	d80f      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d011      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003798:	d00e      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800379c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a0:	3308      	adds	r3, #8
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 f8da 	bl	800595c <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80037ae:	e004      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80037b6:	e000      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 80037b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ba:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80037c2:	4bb6      	ldr	r3, [pc, #728]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80037c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037d4:	4ab1      	ldr	r2, [pc, #708]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037dc:	e003      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037de:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80037e2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80037e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80037f2:	663b      	str	r3, [r7, #96]	; 0x60
 80037f4:	2300      	movs	r3, #0
 80037f6:	667b      	str	r3, [r7, #100]	; 0x64
 80037f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80037fc:	460b      	mov	r3, r1
 80037fe:	4313      	orrs	r3, r2
 8003800:	d03e      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380a:	2b04      	cmp	r3, #4
 800380c:	d81d      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003853 	.word	0x08003853
 8003818:	08003829 	.word	0x08003829
 800381c:	08003837 	.word	0x08003837
 8003820:	08003853 	.word	0x08003853
 8003824:	08003853 	.word	0x08003853
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003828:	4b9c      	ldr	r3, [pc, #624]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	4a9b      	ldr	r2, [pc, #620]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800382e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003832:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003834:	e00e      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800383a:	332c      	adds	r3, #44	; 0x2c
 800383c:	4618      	mov	r0, r3
 800383e:	f002 f925 	bl	8005a8c <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8003852:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003854:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800385c:	4b8f      	ldr	r3, [pc, #572]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800385e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003862:	f023 0107 	bic.w	r1, r3, #7
 8003866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386e:	4a8b      	ldr	r2, [pc, #556]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003870:	430b      	orrs	r3, r1
 8003872:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003876:	e003      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800387c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800388c:	65bb      	str	r3, [r7, #88]	; 0x58
 800388e:	2300      	movs	r3, #0
 8003890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003892:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d04a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800389c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a8:	d028      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80038aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ae:	d821      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80038b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b4:	d024      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ba:	d81b      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80038bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c0:	d00e      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80038c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c6:	d815      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d0:	d110      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038d2:	4b72      	ldr	r3, [pc, #456]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	4a71      	ldr	r2, [pc, #452]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80038de:	e012      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038e4:	332c      	adds	r3, #44	; 0x2c
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 f8d0 	bl	8005a8c <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80038fa:	e004      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80038fc:	bf00      	nop
 80038fe:	e002      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8003904:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003906:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10d      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800390e:	4b63      	ldr	r3, [pc, #396]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003914:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	4a5e      	ldr	r2, [pc, #376]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003922:	430b      	orrs	r3, r1
 8003924:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003928:	e003      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800392e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800393e:	653b      	str	r3, [r7, #80]	; 0x50
 8003940:	2300      	movs	r3, #0
 8003942:	657b      	str	r3, [r7, #84]	; 0x54
 8003944:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003948:	460b      	mov	r3, r1
 800394a:	4313      	orrs	r3, r2
 800394c:	f000 80ba 	beq.w	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003956:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d113      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b4d      	ldr	r3, [pc, #308]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	4a4c      	ldr	r2, [pc, #304]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003974:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800398c:	4b44      	ldr	r3, [pc, #272]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	4a43      	ldr	r2, [pc, #268]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003998:	f7fd fda8 	bl	80014ec <HAL_GetTick>
 800399c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039a0:	e00b      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a2:	f7fd fda3 	bl	80014ec <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d903      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80039b8:	e005      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0ed      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 80039c6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d16a      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ce:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80039d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80039dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x640>
 80039e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039e8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80039ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d01b      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80039f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a08:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a18:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d019      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fd58 	bl	80014ec <HAL_GetTick>
 8003a3c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a40:	e00d      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a42:	f7fd fd53 	bl	80014ec <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a4c:	1ad2      	subs	r2, r2, r3
 8003a4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d903      	bls.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 8003a5c:	e006      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ea      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8003a6c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a8e:	e00d      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a90:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003a94:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8003a98:	e008      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003a9a:	bf00      	nop
 8003a9c:	46020c00 	.word	0x46020c00
 8003aa0:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003aa8:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aac:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4bb2      	ldr	r3, [pc, #712]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aba:	4ab1      	ldr	r2, [pc, #708]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d042      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003ae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003aec:	d022      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003aee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003af2:	d81b      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af8:	d011      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x732>
 8003afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003afe:	d815      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d019      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b08:	d110      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b0e:	3308      	adds	r3, #8
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 ff23 	bl	800595c <RCCEx_PLL2_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003b1c:	e00d      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1e:	4b98      	ldr	r3, [pc, #608]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	4a97      	ldr	r2, [pc, #604]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003b2a:	e006      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003b34:	bf00      	nop
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8003b38:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b3a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003b42:	4b8f      	ldr	r3, [pc, #572]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b48:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b54:	4a8a      	ldr	r2, [pc, #552]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003b56:	430b      	orrs	r3, r1
 8003b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003b62:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
 8003b74:	2300      	movs	r3, #0
 8003b76:	647b      	str	r3, [r7, #68]	; 0x44
 8003b78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d02d      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b94:	d804      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d007      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8003bb0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003bb2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003bba:	4b71      	ldr	r3, [pc, #452]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003bbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	4a6c      	ldr	r2, [pc, #432]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003bd4:	e003      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003bda:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bec:	2300      	movs	r3, #0
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003bfa:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c00:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003c04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0c:	4a5c      	ldr	r2, [pc, #368]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
 8003c22:	2300      	movs	r3, #0
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
 8003c26:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	d019      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003c30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	4a4f      	ldr	r2, [pc, #316]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003c4a:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c50:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c5c:	4a48      	ldr	r2, [pc, #288]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c72:	2300      	movs	r3, #0
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c76:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d00c      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003c80:	4b3f      	ldr	r3, [pc, #252]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c92:	493b      	ldr	r1, [pc, #236]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003ca6:	623b      	str	r3, [r7, #32]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc8:	492d      	ldr	r1, [pc, #180]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d00c      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cf2:	f023 0218 	bic.w	r2, r3, #24
 8003cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cfe:	4920      	ldr	r1, [pc, #128]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	d034      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d48:	d108      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d4e:	3308      	adds	r3, #8
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fe03 	bl	800595c <RCCEx_PLL2_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 8003d5c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d76:	4902      	ldr	r1, [pc, #8]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003d7e:	e005      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8003d80:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003d88:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003da2:	460b      	mov	r3, r1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	d03a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db4:	d00e      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003db6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dba:	d815      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc4:	d110      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc6:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003dd2:	e00e      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dd8:	3308      	adds	r3, #8
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 fdbe 	bl	800595c <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003de6:	e004      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8003df0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003df2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0c:	4915      	ldr	r1, [pc, #84]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003e1a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e34:	460b      	mov	r3, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d00c      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e40:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e4c:	4905      	ldr	r1, [pc, #20]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003e54:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	37d8      	adds	r7, #216	; 0xd8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	46020c00 	.word	0x46020c00

08003e68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003e70:	4bad      	ldr	r3, [pc, #692]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e78:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e7a:	4bab      	ldr	r3, [pc, #684]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003e84:	4ba8      	ldr	r3, [pc, #672]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3301      	adds	r3, #1
 8003e90:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003e92:	4ba5      	ldr	r3, [pc, #660]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003e9e:	4ba2      	ldr	r3, [pc, #648]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	08db      	lsrs	r3, r3, #3
 8003ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8123 	beq.w	8004108 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d062      	beq.n	8003f8e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	f200 8081 	bhi.w	8003fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d024      	beq.n	8003f20 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d17a      	bne.n	8003fd2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800412c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eee:	4b8e      	ldr	r3, [pc, #568]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f02:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f1e:	e08f      	b.n	8004040 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003f20:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003f2c:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	0f1b      	lsrs	r3, r3, #28
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	e006      	b.n	8003f46 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003f38:	4b7b      	ldr	r3, [pc, #492]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	0f1b      	lsrs	r3, r3, #28
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	4a7b      	ldr	r2, [pc, #492]	; (8004134 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f70:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f8c:	e058      	b.n	8004040 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f98:	eddf 6a64 	vldr	s13, [pc, #400]	; 800412c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fb4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003fb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fd0:	e036      	b.n	8004040 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003fd2:	4b55      	ldr	r3, [pc, #340]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003fde:	4b52      	ldr	r3, [pc, #328]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0f1b      	lsrs	r3, r3, #28
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	e006      	b.n	8003ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003fea:	4b4f      	ldr	r3, [pc, #316]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	0f1b      	lsrs	r3, r3, #28
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	4a4e      	ldr	r2, [pc, #312]	; (8004134 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004022:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004130 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004032:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800403e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004040:	4b39      	ldr	r3, [pc, #228]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d017      	beq.n	800407c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	0a5b      	lsrs	r3, r3, #9
 8004052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800405e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004062:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004066:	edd7 6a07 	vldr	s13, [r7, #28]
 800406a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004072:	ee17 2a90 	vmov	r2, s15
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d017      	beq.n	80040be <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80040a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040a4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b4:	ee17 2a90 	vmov	r2, s15
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d017      	beq.n	8004100 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80040e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040e6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f6:	ee17 2a90 	vmov	r2, s15
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80040fe:	e00c      	b.n	800411a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	e008      	b.n	800411a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
}
 800411a:	bf00      	nop
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	46020c00 	.word	0x46020c00
 800412c:	4b742400 	.word	0x4b742400
 8004130:	46000000 	.word	0x46000000
 8004134:	08009b48 	.word	0x08009b48

08004138 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004140:	4bad      	ldr	r3, [pc, #692]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004148:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800414a:	4bab      	ldr	r3, [pc, #684]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004154:	4ba8      	ldr	r3, [pc, #672]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	3301      	adds	r3, #1
 8004160:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004162:	4ba5      	ldr	r3, [pc, #660]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800416e:	4ba2      	ldr	r3, [pc, #648]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	08db      	lsrs	r3, r3, #3
 8004174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8123 	beq.w	80043d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d062      	beq.n	800425e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b03      	cmp	r3, #3
 800419c:	f200 8081 	bhi.w	80042a2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d024      	beq.n	80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d17a      	bne.n	80042a2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b6:	eddf 6a91 	vldr	s13, [pc, #580]	; 80043fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80041ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041be:	4b8e      	ldr	r3, [pc, #568]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80041ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80041d2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80041d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80041da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80041de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80041e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ee:	e08f      	b.n	8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80041f0:	4b81      	ldr	r3, [pc, #516]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 80041fc:	4b7e      	ldr	r3, [pc, #504]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	0f1b      	lsrs	r3, r3, #28
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	e006      	b.n	8004216 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8004208:	4b7b      	ldr	r3, [pc, #492]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800420a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	0f1b      	lsrs	r3, r3, #28
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	4a7b      	ldr	r2, [pc, #492]	; (8004404 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004240:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004250:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425c:	e058      	b.n	8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004268:	eddf 6a64 	vldr	s13, [pc, #400]	; 80043fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800426c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004270:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004280:	ed97 6a02 	vldr	s12, [r7, #8]
 8004284:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004288:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800428c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004294:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a0:	e036      	b.n	8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80042a2:	4b55      	ldr	r3, [pc, #340]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 80042ae:	4b52      	ldr	r3, [pc, #328]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0f1b      	lsrs	r3, r3, #28
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 80042ba:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80042bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	0f1b      	lsrs	r3, r3, #28
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80042f2:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80042f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004302:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800430e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004310:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d017      	beq.n	800434c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800431c:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	0a5b      	lsrs	r3, r3, #9
 8004322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800432e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004332:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004336:	edd7 6a07 	vldr	s13, [r7, #28]
 800433a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800433e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004342:	ee17 2a90 	vmov	r2, s15
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e002      	b.n	8004352 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d017      	beq.n	800438e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004374:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004378:	edd7 6a07 	vldr	s13, [r7, #28]
 800437c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004384:	ee17 2a90 	vmov	r2, s15
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004394:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d017      	beq.n	80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	0e1b      	lsrs	r3, r3, #24
 80043a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80043b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043b6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80043be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c6:	ee17 2a90 	vmov	r2, s15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80043ce:	e00c      	b.n	80043ea <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
}
 80043d6:	e008      	b.n	80043ea <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
}
 80043ea:	bf00      	nop
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	46020c00 	.word	0x46020c00
 80043fc:	4b742400 	.word	0x4b742400
 8004400:	46000000 	.word	0x46000000
 8004404:	08009b48 	.word	0x08009b48

08004408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004410:	4bad      	ldr	r3, [pc, #692]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004418:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800441a:	4bab      	ldr	r3, [pc, #684]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004424:	4ba8      	ldr	r3, [pc, #672]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	3301      	adds	r3, #1
 8004430:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004432:	4ba5      	ldr	r3, [pc, #660]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800443e:	4ba2      	ldr	r3, [pc, #648]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	08db      	lsrs	r3, r3, #3
 8004444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8123 	beq.w	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d062      	beq.n	800452e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b03      	cmp	r3, #3
 800446c:	f200 8081 	bhi.w	8004572 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d024      	beq.n	80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d17a      	bne.n	8004572 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eddf 6a91 	vldr	s13, [pc, #580]	; 80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b8e      	ldr	r3, [pc, #568]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800449e:	ed97 6a02 	vldr	s12, [r7, #8]
 80044a2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80044be:	e08f      	b.n	80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80044c0:	4b81      	ldr	r3, [pc, #516]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80044cc:	4b7e      	ldr	r3, [pc, #504]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	0f1b      	lsrs	r3, r3, #28
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	e006      	b.n	80044e6 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80044d8:	4b7b      	ldr	r3, [pc, #492]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	0f1b      	lsrs	r3, r3, #28
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	4a7b      	ldr	r2, [pc, #492]	; (80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80044e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004510:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004520:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004528:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800452c:	e058      	b.n	80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004538:	eddf 6a64 	vldr	s13, [pc, #400]	; 80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800453c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004540:	4b61      	ldr	r3, [pc, #388]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004550:	ed97 6a02 	vldr	s12, [r7, #8]
 8004554:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004558:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800455c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004564:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004570:	e036      	b.n	80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004572:	4b55      	ldr	r3, [pc, #340]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800457e:	4b52      	ldr	r3, [pc, #328]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0f1b      	lsrs	r3, r3, #28
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800458a:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800458c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	4a4e      	ldr	r2, [pc, #312]	; (80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045be:	ed97 6a02 	vldr	s12, [r7, #8]
 80045c2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80045c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80045d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045de:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80045e0:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d017      	beq.n	800461c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045ec:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	0a5b      	lsrs	r3, r3, #9
 80045f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80045fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004602:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004606:	edd7 6a07 	vldr	s13, [r7, #28]
 800460a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004612:	ee17 2a90 	vmov	r2, s15
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e002      	b.n	8004622 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d017      	beq.n	800465e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004644:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004648:	edd7 6a07 	vldr	s13, [r7, #28]
 800464c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004654:	ee17 2a90 	vmov	r2, s15
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d017      	beq.n	80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004686:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800468a:	edd7 6a07 	vldr	s13, [r7, #28]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 2a90 	vmov	r2, s15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800469e:	e00c      	b.n	80046ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
}
 80046a6:	e008      	b.n	80046ba <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]
}
 80046ba:	bf00      	nop
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	46020c00 	.word	0x46020c00
 80046cc:	4b742400 	.word	0x4b742400
 80046d0:	46000000 	.word	0x46000000
 80046d4:	08009b48 	.word	0x08009b48

080046d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08e      	sub	sp, #56	; 0x38
 80046dc:	af00      	add	r7, sp, #0
 80046de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80046e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80046ea:	430b      	orrs	r3, r1
 80046ec:	d145      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80046ee:	4b9b      	ldr	r3, [pc, #620]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80046f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80046fa:	4b98      	ldr	r3, [pc, #608]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80046fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d108      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470e:	d104      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	f001 b912 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800471a:	4b90      	ldr	r3, [pc, #576]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800471c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004728:	d114      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004730:	d110      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004732:	4b8a      	ldr	r3, [pc, #552]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004740:	d103      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004742:	23fa      	movs	r3, #250	; 0xfa
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004746:	f001 b8fa 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 800474a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004750:	f001 b8f5 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004754:	4b81      	ldr	r3, [pc, #516]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004760:	d107      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004768:	d103      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800476a:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	f001 b8e6 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
 8004776:	f001 b8e2 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800477a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004782:	430b      	orrs	r3, r1
 8004784:	d151      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004786:	4b75      	ldr	r3, [pc, #468]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800478c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004790:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d035      	beq.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d841      	bhi.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2b60      	cmp	r3, #96	; 0x60
 80047a2:	d02a      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	2b60      	cmp	r3, #96	; 0x60
 80047a8:	d83b      	bhi.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d009      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d835      	bhi.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00c      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d012      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80047c2:	e02e      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fb4d 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047d2:	f001 b8b4 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047d6:	f107 0318 	add.w	r3, r7, #24
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fcac 	bl	8004138 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047e4:	f001 b8ab 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047e8:	f107 030c 	add.w	r3, r7, #12
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fe0b 	bl	8004408 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047f6:	f001 b8a2 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80047fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004800:	f001 b89d 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004810:	d103      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004812:	4b54      	ldr	r3, [pc, #336]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004816:	f001 b892 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800481e:	f001 b88e 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004826:	f001 b88a 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800482a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800482e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004832:	430b      	orrs	r3, r1
 8004834:	d126      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004836:	4b49      	ldr	r3, [pc, #292]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004838:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800483c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004840:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004842:	4b46      	ldr	r3, [pc, #280]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d106      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8004856:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
 800485a:	f001 b870 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800485e:	4b3f      	ldr	r3, [pc, #252]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d107      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004872:	d103      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8004874:	4b3c      	ldr	r3, [pc, #240]	; (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
 8004878:	f001 b861 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
 8004880:	f001 b85d 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004888:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800488c:	430b      	orrs	r3, r1
 800488e:	d171      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004890:	4b32      	ldr	r3, [pc, #200]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004896:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800489a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048a2:	d034      	beq.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048aa:	d853      	bhi.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b2:	d00b      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ba:	d84b      	bhi.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048c8:	d009      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80048ca:	e043      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fac9 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048da:	f001 b830 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048de:	f107 0318 	add.w	r3, r7, #24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fc28 	bl	8004138 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048ec:	f001 b827 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d103      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004902:	f001 b81c 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800490a:	f001 b818 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b20      	cmp	r3, #32
 8004918:	d118      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0e1b      	lsrs	r3, r3, #24
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	0e1b      	lsrs	r3, r3, #24
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004948:	f000 bff9 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004950:	f000 bff5 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004958:	f000 bff1 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800495c:	46020c00 	.word	0x46020c00
 8004960:	0007a120 	.word	0x0007a120
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200
 800496c:	02dc6c00 	.word	0x02dc6c00
 8004970:	08009b48 	.word	0x08009b48
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004978:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800497c:	430b      	orrs	r3, r1
 800497e:	d17f      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004980:	4ba8      	ldr	r3, [pc, #672]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	2b00      	cmp	r3, #0
 8004990:	d165      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004992:	4ba4      	ldr	r3, [pc, #656]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004998:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800499c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049a4:	d034      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049ac:	d853      	bhi.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b4:	d00b      	beq.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049bc:	d84b      	bhi.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d016      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ca:	d009      	beq.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80049cc:	e043      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fa48 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80049dc:	f000 bfaf 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049e0:	f107 0318 	add.w	r3, r7, #24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fba7 	bl	8004138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80049ee:	f000 bfa6 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80049f2:	4b8c      	ldr	r3, [pc, #560]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fe:	d103      	bne.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8004a00:	4b89      	ldr	r3, [pc, #548]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004a04:	f000 bf9b 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004a0c:	f000 bf97 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a10:	4b84      	ldr	r3, [pc, #528]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d118      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a1c:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8004a28:	4b7e      	ldr	r3, [pc, #504]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	e006      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8004a34:	4b7b      	ldr	r3, [pc, #492]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	0e1b      	lsrs	r3, r3, #24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	4a7a      	ldr	r2, [pc, #488]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004a4a:	f000 bf78 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004a52:	f000 bf74 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004a5a:	f000 bf70 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a64:	d108      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f9fc 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
 8004a74:	f000 bf63 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7c:	f000 bf5f 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a84:	1e51      	subs	r1, r2, #1
 8004a86:	430b      	orrs	r3, r1
 8004a88:	d136      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004a8a:	4b66      	ldr	r3, [pc, #408]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004a9c:	f7fe fbf8 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	6378      	str	r0, [r7, #52]	; 0x34
 8004aa2:	f000 bf4c 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d104      	bne.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004aac:	f7fe faba 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004ab0:	6378      	str	r0, [r7, #52]	; 0x34
 8004ab2:	f000 bf44 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004ab6:	4b5b      	ldr	r3, [pc, #364]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d103      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8004aca:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ace:	f000 bf36 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004ad2:	4b54      	ldr	r3, [pc, #336]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d107      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d104      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34
 8004aec:	f000 bf27 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
 8004af4:	f000 bf23 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004afc:	1f11      	subs	r1, r2, #4
 8004afe:	430b      	orrs	r3, r1
 8004b00:	d136      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004b02:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7fe fba8 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004b18:	6378      	str	r0, [r7, #52]	; 0x34
 8004b1a:	f000 bf10 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d104      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b24:	f7fe fa7e 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004b28:	6378      	str	r0, [r7, #52]	; 0x34
 8004b2a:	f000 bf08 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d103      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8004b42:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
 8004b46:	f000 befa 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004b4a:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d107      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	2b30      	cmp	r3, #48	; 0x30
 8004b5c:	d104      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8004b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
 8004b64:	f000 beeb 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6c:	f000 bee7 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b74:	f1a2 0108 	sub.w	r1, r2, #8
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	d136      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004b7c:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b8e:	f7fe fb6b 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004b92:	6378      	str	r0, [r7, #52]	; 0x34
 8004b94:	f000 bed3 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d104      	bne.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b9e:	f7fe fa41 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004ba2:	6378      	str	r0, [r7, #52]	; 0x34
 8004ba4:	f000 becb 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004ba8:	4b1e      	ldr	r3, [pc, #120]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d103      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8004bbc:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc0:	f000 bebd 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2bc0      	cmp	r3, #192	; 0xc0
 8004bd6:	d104      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8004bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bde:	f000 beae 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
 8004be6:	f000 beaa 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bee:	f1a2 0110 	sub.w	r1, r2, #16
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	d141      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8004bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe fb2e 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	6378      	str	r0, [r7, #52]	; 0x34
 8004c0e:	f000 be96 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7fe fa03 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8004c20:	f000 be8d 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004c24:	46020c00 	.word	0x46020c00
 8004c28:	02dc6c00 	.word	0x02dc6c00
 8004c2c:	08009b48 	.word	0x08009b48
 8004c30:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004c34:	4baa      	ldr	r3, [pc, #680]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c40:	d107      	bne.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c48:	d103      	bne.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8004c4a:	4ba6      	ldr	r3, [pc, #664]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4e:	f000 be76 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004c52:	4ba3      	ldr	r3, [pc, #652]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d108      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c66:	d104      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8004c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6e:	f000 be66 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
 8004c76:	f000 be62 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7e:	f1a2 0120 	sub.w	r1, r2, #32
 8004c82:	430b      	orrs	r3, r1
 8004c84:	d158      	bne.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004c86:	4b96      	ldr	r3, [pc, #600]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004c98:	f7fe fb0e 	bl	80032b8 <HAL_RCC_GetPCLK3Freq>
 8004c9c:	6378      	str	r0, [r7, #52]	; 0x34
 8004c9e:	f000 be4e 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d104      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ca8:	f7fe f9bc 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004cac:	6378      	str	r0, [r7, #52]	; 0x34
 8004cae:	f000 be46 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004cb2:	4b8b      	ldr	r3, [pc, #556]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d106      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d103      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8004cc6:	4b87      	ldr	r3, [pc, #540]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cca:	f000 be38 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004cce:	4b84      	ldr	r3, [pc, #528]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d107      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d104      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce8:	f000 be29 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004cec:	4b7c      	ldr	r3, [pc, #496]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d11b      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d118      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004cfe:	4b78      	ldr	r3, [pc, #480]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8004d0a:	4b75      	ldr	r3, [pc, #468]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0e1b      	lsrs	r3, r3, #24
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	e006      	b.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004d16:	4b72      	ldr	r3, [pc, #456]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	0e1b      	lsrs	r3, r3, #24
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	4a70      	ldr	r2, [pc, #448]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2c:	f000 be07 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
 8004d34:	f000 be03 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d3c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004d40:	430b      	orrs	r3, r1
 8004d42:	d16c      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004d44:	4b66      	ldr	r3, [pc, #408]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d4a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d56:	d104      	bne.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d58:	f7fe f964 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004d5c:	6378      	str	r0, [r7, #52]	; 0x34
 8004d5e:	f000 bdee 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d68:	d108      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d6a:	f107 0318 	add.w	r3, r7, #24
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff f9e2 	bl	8004138 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
 8004d78:	f000 bde1 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004d82:	f7fe fa57 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8004d86:	6378      	str	r0, [r7, #52]	; 0x34
 8004d88:	f000 bdd9 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004d92:	d122      	bne.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d94:	4b52      	ldr	r3, [pc, #328]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d118      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004da0:	4b4f      	ldr	r3, [pc, #316]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004dac:	4b4c      	ldr	r3, [pc, #304]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	0e1b      	lsrs	r3, r3, #24
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	e006      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004db8:	4b49      	ldr	r3, [pc, #292]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	0e1b      	lsrs	r3, r3, #24
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	4a48      	ldr	r2, [pc, #288]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dce:	f000 bdb6 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd6:	f000 bdb2 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004dda:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de6:	d107      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dee:	d103      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8004df0:	4b3c      	ldr	r3, [pc, #240]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
 8004df4:	f000 bda3 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e04:	d107      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0c:	d103      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8004e0e:	4b35      	ldr	r3, [pc, #212]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
 8004e12:	f000 bd94 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1a:	f000 bd90 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e22:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004e26:	430b      	orrs	r3, r1
 8004e28:	d160      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004e2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d84c      	bhi.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e7d 	.word	0x08004e7d
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e6b 	.word	0x08004e6b
 8004e50:	08004e87 	.word	0x08004e87
 8004e54:	08004e91 	.word	0x08004e91
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff f803 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e66:	f000 bd6a 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff faca 	bl	8004408 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e78:	f000 bd61 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004e7c:	f7fe f9da 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8004e80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e82:	f000 bd5c 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e8c:	f000 bd57 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d118      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e9c:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	e006      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	0e1b      	lsrs	r3, r3, #24
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004eca:	f000 bd38 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ed2:	f000 bd34 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004eda:	f000 bd30 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8004ede:	bf00      	nop
 8004ee0:	46020c00 	.word	0x46020c00
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	08009b48 	.word	0x08009b48
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef0:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	d167      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004ef8:	4ba0      	ldr	r3, [pc, #640]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004efe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f0a:	d036      	beq.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f12:	d855      	bhi.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f1a:	d029      	beq.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f22:	d84d      	bhi.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f2a:	d013      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f32:	d845      	bhi.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d015      	beq.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d13e      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe ff8e 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f50:	f000 bcf5 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fa55 	bl	8004408 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f62:	f000 bcec 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004f66:	f7fe f965 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8004f6a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004f6c:	f000 bce7 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f70:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f76:	f000 bce2 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f7a:	4b80      	ldr	r3, [pc, #512]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d118      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f86:	4b7d      	ldr	r3, [pc, #500]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004f92:	4b7a      	ldr	r3, [pc, #488]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0e1b      	lsrs	r3, r3, #24
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	e006      	b.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8004f9e:	4b77      	ldr	r3, [pc, #476]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	0e1b      	lsrs	r3, r3, #24
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	4a74      	ldr	r2, [pc, #464]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8004fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fb4:	f000 bcc3 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fbc:	f000 bcbf 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fc4:	f000 bcbb 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fcc:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	d14c      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004fd4:	4b69      	ldr	r3, [pc, #420]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8004fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fde:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fe f93f 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004fea:	6378      	str	r0, [r7, #52]	; 0x34
 8004fec:	f000 bca7 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d104      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ff8:	f7fe f814 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004ffc:	6378      	str	r0, [r7, #52]	; 0x34
 8004ffe:	f000 bc9e 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005002:	4b5e      	ldr	r3, [pc, #376]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d107      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d103      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8005018:	4b5a      	ldr	r3, [pc, #360]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
 800501c:	f000 bc8f 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005020:	4b56      	ldr	r3, [pc, #344]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b20      	cmp	r3, #32
 800502a:	d11c      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005032:	d118      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005034:	4b51      	ldr	r3, [pc, #324]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005040:	4b4e      	ldr	r3, [pc, #312]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	0e1b      	lsrs	r3, r3, #24
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	e006      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 800504c:	4b4b      	ldr	r3, [pc, #300]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800504e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	0e1b      	lsrs	r3, r3, #24
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	4a49      	ldr	r2, [pc, #292]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800505c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
 8005062:	f000 bc6c 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
 800506a:	f000 bc68 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800506e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005072:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005076:	430b      	orrs	r3, r1
 8005078:	d14c      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800507a:	4b40      	ldr	r3, [pc, #256]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800507c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005080:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005084:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe f8ec 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8005090:	6378      	str	r0, [r7, #52]	; 0x34
 8005092:	f000 bc54 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d104      	bne.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800509e:	f7fd ffc1 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 80050a2:	6378      	str	r0, [r7, #52]	; 0x34
 80050a4:	f000 bc4b 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80050a8:	4b34      	ldr	r3, [pc, #208]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d107      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050bc:	d103      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	f000 bc3c 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80050c6:	4b2d      	ldr	r3, [pc, #180]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d11c      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050d8:	d118      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050da:	4b28      	ldr	r3, [pc, #160]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80050e6:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0e1b      	lsrs	r3, r3, #24
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 80050f2:	4b22      	ldr	r3, [pc, #136]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80050f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	0e1b      	lsrs	r3, r3, #24
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005106:	637b      	str	r3, [r7, #52]	; 0x34
 8005108:	f000 bc19 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
 8005110:	f000 bc15 	b.w	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005118:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800511c:	430b      	orrs	r3, r1
 800511e:	d157      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005120:	4b16      	ldr	r3, [pc, #88]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800512a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	2bc0      	cmp	r3, #192	; 0xc0
 8005130:	d02a      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	2bc0      	cmp	r3, #192	; 0xc0
 8005136:	d848      	bhi.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d00d      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	2b80      	cmp	r3, #128	; 0x80
 8005142:	d842      	bhi.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d011      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005150:	e03b      	b.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005152:	f7fe f8b1 	bl	80032b8 <HAL_RCC_GetPCLK3Freq>
 8005156:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005158:	e3f1      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800515a:	4b08      	ldr	r3, [pc, #32]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005166:	d102      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800516c:	e3e7      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005172:	e3e4      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005174:	f7fd ff56 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8005178:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800517a:	e3e0      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800517c:	46020c00 	.word	0x46020c00
 8005180:	08009b48 	.word	0x08009b48
 8005184:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005188:	4ba3      	ldr	r3, [pc, #652]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b20      	cmp	r3, #32
 8005192:	d117      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005194:	4ba0      	ldr	r3, [pc, #640]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80051a0:	4b9d      	ldr	r3, [pc, #628]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	0e1b      	lsrs	r3, r3, #24
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	e006      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80051ac:	4b9a      	ldr	r3, [pc, #616]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80051ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	4a98      	ldr	r2, [pc, #608]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051c2:	e3bc      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051c8:	e3b9      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051ce:	e3b6      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80051d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d4:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80051d8:	430b      	orrs	r3, r1
 80051da:	d147      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80051dc:	4b8e      	ldr	r3, [pc, #568]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80051de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051ee:	f7fe f83b 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80051f2:	6378      	str	r0, [r7, #52]	; 0x34
 80051f4:	e3a3      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051fc:	d103      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fd ff11 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8005202:	6378      	str	r0, [r7, #52]	; 0x34
 8005204:	e39b      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005206:	4b84      	ldr	r3, [pc, #528]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005212:	d106      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521a:	d102      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 800521c:	4b80      	ldr	r3, [pc, #512]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
 8005220:	e38d      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005222:	4b7d      	ldr	r3, [pc, #500]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b20      	cmp	r3, #32
 800522c:	d11b      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005234:	d117      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005236:	4b78      	ldr	r3, [pc, #480]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8005242:	4b75      	ldr	r3, [pc, #468]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	0e1b      	lsrs	r3, r3, #24
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	e006      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800524e:	4b72      	ldr	r3, [pc, #456]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	0e1b      	lsrs	r3, r3, #24
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	4a6f      	ldr	r2, [pc, #444]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
 8005264:	e36b      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
 800526a:	e368      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800526c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005270:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005274:	430b      	orrs	r3, r1
 8005276:	d164      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005278:	4b67      	ldr	r3, [pc, #412]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800527a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2b00      	cmp	r3, #0
 8005288:	d120      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800528a:	4b63      	ldr	r3, [pc, #396]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b20      	cmp	r3, #32
 8005294:	d117      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005296:	4b60      	ldr	r3, [pc, #384]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 80052a2:	4b5d      	ldr	r3, [pc, #372]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0e1b      	lsrs	r3, r3, #24
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 80052ae:	4b5a      	ldr	r3, [pc, #360]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80052b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	0e1b      	lsrs	r3, r3, #24
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	4a57      	ldr	r2, [pc, #348]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80052be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34
 80052c4:	e33b      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ca:	e338      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80052cc:	4b52      	ldr	r3, [pc, #328]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80052ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052da:	d112      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e2:	d10e      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052e4:	4b4c      	ldr	r3, [pc, #304]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80052e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f2:	d102      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 80052f4:	23fa      	movs	r3, #250	; 0xfa
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052f8:	e321      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80052fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005300:	e31d      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005302:	4b45      	ldr	r3, [pc, #276]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530e:	d106      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005316:	d102      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8005318:	4b41      	ldr	r3, [pc, #260]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	e30f      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800531e:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d107      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005332:	d103      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8005334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
 800533a:	e300      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
 8005340:	e2fd      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800534a:	430b      	orrs	r3, r1
 800534c:	d16a      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800534e:	4b32      	ldr	r3, [pc, #200]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005354:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005358:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d120      	bne.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005360:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b20      	cmp	r3, #32
 800536a:	d117      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800536c:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005378:	4b27      	ldr	r3, [pc, #156]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	0e1b      	lsrs	r3, r3, #24
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	e006      	b.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	0e1b      	lsrs	r3, r3, #24
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4a22      	ldr	r2, [pc, #136]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
 800539a:	e2d0      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	e2cd      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80053a2:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80053a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b0:	d112      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b8:	d10e      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053c8:	d102      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80053ca:	23fa      	movs	r3, #250	; 0xfa
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053ce:	e2b6      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80053d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053d6:	e2b2      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80053d8:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e4:	d106      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ec:	d102      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	e2a4      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80053f4:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80053f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d107      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005408:	d103      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
 8005410:	e295      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
 8005416:	e292      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005418:	46020c00 	.word	0x46020c00
 800541c:	08009b48 	.word	0x08009b48
 8005420:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005428:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800542c:	430b      	orrs	r3, r1
 800542e:	d147      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005430:	4b9a      	ldr	r3, [pc, #616]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005436:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800543a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005442:	f7fd ff11 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8005446:	6378      	str	r0, [r7, #52]	; 0x34
 8005448:	e279      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800544a:	4b94      	ldr	r3, [pc, #592]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800544c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005458:	d112      	bne.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005460:	d10e      	bne.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005462:	4b8e      	ldr	r3, [pc, #568]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005470:	d102      	bne.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005472:	23fa      	movs	r3, #250	; 0xfa
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005476:	e262      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005478:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800547e:	e25e      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005480:	4b86      	ldr	r3, [pc, #536]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d106      	bne.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005494:	d102      	bne.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005496:	4b82      	ldr	r3, [pc, #520]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
 800549a:	e250      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800549c:	4b7f      	ldr	r3, [pc, #508]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800549e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d107      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054b0:	d103      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 80054b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
 80054b8:	e241      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
 80054be:	e23e      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80054c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80054c8:	430b      	orrs	r3, r1
 80054ca:	d12d      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80054cc:	4b73      	ldr	r3, [pc, #460]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80054ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80054d6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80054d8:	4b70      	ldr	r3, [pc, #448]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e4:	d105      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 80054ec:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
 80054f0:	e225      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f8:	d107      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fcb2 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
 8005508:	e219      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005512:	f107 0318 	add.w	r3, r7, #24
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fe0e 	bl	8004138 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
 8005520:	e20d      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
 8005526:	e20a      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800552c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005530:	430b      	orrs	r3, r1
 8005532:	d156      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005534:	4b59      	ldr	r3, [pc, #356]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005546:	d028      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800554e:	d845      	bhi.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005556:	d013      	beq.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800555e:	d83d      	bhi.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556c:	d004      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800556e:	e035      	b.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005570:	f7fd fe8e 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8005574:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005576:	e1e2      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005578:	f7fd fd54 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800557c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800557e:	e1de      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005580:	4b46      	ldr	r3, [pc, #280]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558c:	d102      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 800558e:	4b44      	ldr	r3, [pc, #272]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005592:	e1d4      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005598:	e1d1      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800559a:	4b40      	ldr	r3, [pc, #256]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d117      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055a6:	4b3d      	ldr	r3, [pc, #244]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 80055b2:	4b3a      	ldr	r3, [pc, #232]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	0e1b      	lsrs	r3, r3, #24
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	e006      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80055be:	4b37      	ldr	r3, [pc, #220]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80055c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	0e1b      	lsrs	r3, r3, #24
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	4a35      	ldr	r2, [pc, #212]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80055ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055d4:	e1b3      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055da:	e1b0      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055e0:	e1ad      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80055e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e6:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80055ea:	430b      	orrs	r3, r1
 80055ec:	d15c      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80055ee:	4b2b      	ldr	r3, [pc, #172]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 80055f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005600:	d028      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005608:	d845      	bhi.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005610:	d013      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005618:	d83d      	bhi.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005626:	d004      	beq.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8005628:	e035      	b.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800562a:	f7fd fe1d 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 800562e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005630:	e185      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005632:	f7fd fcf7 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8005636:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005638:	e181      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d102      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8005648:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800564c:	e177      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005652:	e174      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b20      	cmp	r3, #32
 800565e:	d117      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	0e1b      	lsrs	r3, r3, #24
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	e006      	b.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800567a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800568e:	e156      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005694:	e153      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800569a:	e150      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800569c:	46020c00 	.word	0x46020c00
 80056a0:	00f42400 	.word	0x00f42400
 80056a4:	08009b48 	.word	0x08009b48
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80056a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ac:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80056b0:	430b      	orrs	r3, r1
 80056b2:	d176      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80056b4:	4ba4      	ldr	r3, [pc, #656]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80056b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056ba:	f003 0318 	and.w	r3, r3, #24
 80056be:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	2b18      	cmp	r3, #24
 80056c4:	d86a      	bhi.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	08005731 	.word	0x08005731
 80056d0:	0800579d 	.word	0x0800579d
 80056d4:	0800579d 	.word	0x0800579d
 80056d8:	0800579d 	.word	0x0800579d
 80056dc:	0800579d 	.word	0x0800579d
 80056e0:	0800579d 	.word	0x0800579d
 80056e4:	0800579d 	.word	0x0800579d
 80056e8:	0800579d 	.word	0x0800579d
 80056ec:	08005739 	.word	0x08005739
 80056f0:	0800579d 	.word	0x0800579d
 80056f4:	0800579d 	.word	0x0800579d
 80056f8:	0800579d 	.word	0x0800579d
 80056fc:	0800579d 	.word	0x0800579d
 8005700:	0800579d 	.word	0x0800579d
 8005704:	0800579d 	.word	0x0800579d
 8005708:	0800579d 	.word	0x0800579d
 800570c:	08005741 	.word	0x08005741
 8005710:	0800579d 	.word	0x0800579d
 8005714:	0800579d 	.word	0x0800579d
 8005718:	0800579d 	.word	0x0800579d
 800571c:	0800579d 	.word	0x0800579d
 8005720:	0800579d 	.word	0x0800579d
 8005724:	0800579d 	.word	0x0800579d
 8005728:	0800579d 	.word	0x0800579d
 800572c:	0800575b 	.word	0x0800575b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005730:	f7fd fdc2 	bl	80032b8 <HAL_RCC_GetPCLK3Freq>
 8005734:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005736:	e102      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005738:	f7fd fc74 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800573c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800573e:	e0fe      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005740:	4b81      	ldr	r3, [pc, #516]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574c:	d102      	bne.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 800574e:	4b7f      	ldr	r3, [pc, #508]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005752:	e0f4      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005758:	e0f1      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800575a:	4b7b      	ldr	r3, [pc, #492]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b20      	cmp	r3, #32
 8005764:	d117      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005766:	4b78      	ldr	r3, [pc, #480]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005772:	4b75      	ldr	r3, [pc, #468]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0e1b      	lsrs	r3, r3, #24
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	e006      	b.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 800577e:	4b72      	ldr	r3, [pc, #456]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	0e1b      	lsrs	r3, r3, #24
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	4a70      	ldr	r2, [pc, #448]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800578e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005794:	e0d3      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800579a:	e0d0      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057a0:	e0cd      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80057a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a6:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80057aa:	430b      	orrs	r3, r1
 80057ac:	d155      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80057ae:	4b66      	ldr	r3, [pc, #408]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80057b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80057b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057c0:	d013      	beq.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057c8:	d844      	bhi.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d0:	d013      	beq.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d8:	d83c      	bhi.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d014      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e6:	d014      	beq.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80057e8:	e034      	b.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ea:	f107 0318 	add.w	r3, r7, #24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fca2 	bl	8004138 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057f8:	e0a1      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fb32 	bl	8003e68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005808:	e099      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800580a:	f7fd fc0b 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800580e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005810:	e095      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005812:	4b4d      	ldr	r3, [pc, #308]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b20      	cmp	r3, #32
 800581c:	d117      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800581e:	4b4a      	ldr	r3, [pc, #296]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800582a:	4b47      	ldr	r3, [pc, #284]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	0e1b      	lsrs	r3, r3, #24
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	e006      	b.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8005836:	4b44      	ldr	r3, [pc, #272]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	0e1b      	lsrs	r3, r3, #24
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	4a42      	ldr	r2, [pc, #264]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800584c:	e077      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005852:	e074      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005858:	e071      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800585a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800585e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005862:	430b      	orrs	r3, r1
 8005864:	d131      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005866:	4b38      	ldr	r3, [pc, #224]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800586c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005870:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005872:	4b35      	ldr	r3, [pc, #212]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d106      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
 800588c:	e057      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800588e:	4b2e      	ldr	r3, [pc, #184]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8005890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589c:	d112      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a4:	d10e      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80058a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b4:	d102      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 80058b6:	23fa      	movs	r3, #250	; 0xfa
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058ba:	e040      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80058bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058c2:	e03c      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
 80058c8:	e039      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80058ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ce:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80058d2:	430b      	orrs	r3, r1
 80058d4:	d131      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80058d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80058e2:	4b19      	ldr	r3, [pc, #100]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ee:	d105      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 80058f6:	4b17      	ldr	r3, [pc, #92]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
 80058fa:	e020      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005908:	d106      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005910:	d102      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
 8005916:	e012      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005924:	d106      	bne.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592c:	d102      	bne.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
 8005932:	e004      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
 8005938:	e001      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005940:	4618      	mov	r0, r3
 8005942:	3738      	adds	r7, #56	; 0x38
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	46020c00 	.word	0x46020c00
 800594c:	00f42400 	.word	0x00f42400
 8005950:	08009b48 	.word	0x08009b48
 8005954:	02dc6c00 	.word	0x02dc6c00
 8005958:	016e3600 	.word	0x016e3600

0800595c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005964:	4b47      	ldr	r3, [pc, #284]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a46      	ldr	r2, [pc, #280]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 800596a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800596e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005970:	f7fb fdbc 	bl	80014ec <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005976:	e008      	b.n	800598a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005978:	f7fb fdb8 	bl	80014ec <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e077      	b.n	8005a7a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800598a:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f0      	bne.n	8005978 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005996:	4b3b      	ldr	r3, [pc, #236]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6811      	ldr	r1, [r2, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6852      	ldr	r2, [r2, #4]
 80059aa:	3a01      	subs	r2, #1
 80059ac:	0212      	lsls	r2, r2, #8
 80059ae:	430a      	orrs	r2, r1
 80059b0:	4934      	ldr	r1, [pc, #208]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80059b6:	4b33      	ldr	r3, [pc, #204]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 80059b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ba:	4b33      	ldr	r3, [pc, #204]	; (8005a88 <RCCEx_PLL2_Config+0x12c>)
 80059bc:	4013      	ands	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	3a01      	subs	r2, #1
 80059c4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	68d2      	ldr	r2, [r2, #12]
 80059cc:	3a01      	subs	r2, #1
 80059ce:	0252      	lsls	r2, r2, #9
 80059d0:	b292      	uxth	r2, r2
 80059d2:	4311      	orrs	r1, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6912      	ldr	r2, [r2, #16]
 80059d8:	3a01      	subs	r2, #1
 80059da:	0412      	lsls	r2, r2, #16
 80059dc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80059e0:	4311      	orrs	r1, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6952      	ldr	r2, [r2, #20]
 80059e6:	3a01      	subs	r2, #1
 80059e8:	0612      	lsls	r2, r2, #24
 80059ea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80059ee:	430a      	orrs	r2, r1
 80059f0:	4924      	ldr	r1, [pc, #144]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80059f6:	4b23      	ldr	r3, [pc, #140]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	f023 020c 	bic.w	r2, r3, #12
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	4920      	ldr	r1, [pc, #128]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005a08:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	491c      	ldr	r1, [pc, #112]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a22:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	69d2      	ldr	r2, [r2, #28]
 8005a32:	00d2      	lsls	r2, r2, #3
 8005a34:	4913      	ldr	r1, [pc, #76]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	4a11      	ldr	r2, [pc, #68]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a40:	f043 0310 	orr.w	r3, r3, #16
 8005a44:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a50:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a52:	f7fb fd4b 	bl	80014ec <HAL_GetTick>
 8005a56:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a58:	e008      	b.n	8005a6c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a5a:	f7fb fd47 	bl	80014ec <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e006      	b.n	8005a7a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <RCCEx_PLL2_Config+0x128>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0f0      	beq.n	8005a5a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0

}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	46020c00 	.word	0x46020c00
 8005a88:	80800000 	.word	0x80800000

08005a8c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005a94:	4b47      	ldr	r3, [pc, #284]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a46      	ldr	r2, [pc, #280]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aa0:	f7fb fd24 	bl	80014ec <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aa6:	e008      	b.n	8005aba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aa8:	f7fb fd20 	bl	80014ec <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e077      	b.n	8005baa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aba:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005ac6:	4b3b      	ldr	r3, [pc, #236]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6811      	ldr	r1, [r2, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6852      	ldr	r2, [r2, #4]
 8005ada:	3a01      	subs	r2, #1
 8005adc:	0212      	lsls	r2, r2, #8
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	4934      	ldr	r1, [pc, #208]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	630b      	str	r3, [r1, #48]	; 0x30
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aea:	4b33      	ldr	r3, [pc, #204]	; (8005bb8 <RCCEx_PLL3_Config+0x12c>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6892      	ldr	r2, [r2, #8]
 8005af2:	3a01      	subs	r2, #1
 8005af4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	68d2      	ldr	r2, [r2, #12]
 8005afc:	3a01      	subs	r2, #1
 8005afe:	0252      	lsls	r2, r2, #9
 8005b00:	b292      	uxth	r2, r2
 8005b02:	4311      	orrs	r1, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6912      	ldr	r2, [r2, #16]
 8005b08:	3a01      	subs	r2, #1
 8005b0a:	0412      	lsls	r2, r2, #16
 8005b0c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005b10:	4311      	orrs	r1, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6952      	ldr	r2, [r2, #20]
 8005b16:	3a01      	subs	r2, #1
 8005b18:	0612      	lsls	r2, r2, #24
 8005b1a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	4924      	ldr	r1, [pc, #144]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005b26:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f023 020c 	bic.w	r2, r3, #12
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	4920      	ldr	r1, [pc, #128]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	491c      	ldr	r1, [pc, #112]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005b46:	4b1b      	ldr	r3, [pc, #108]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b4c:	f023 0310 	bic.w	r3, r3, #16
 8005b50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b52:	4b18      	ldr	r3, [pc, #96]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	69d2      	ldr	r2, [r2, #28]
 8005b62:	00d2      	lsls	r2, r2, #3
 8005b64:	4913      	ldr	r1, [pc, #76]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005b6a:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b70:	f043 0310 	orr.w	r3, r3, #16
 8005b74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a0e      	ldr	r2, [pc, #56]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b80:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b82:	f7fb fcb3 	bl	80014ec <HAL_GetTick>
 8005b86:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b88:	e008      	b.n	8005b9c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b8a:	f7fb fcaf 	bl	80014ec <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <RCCEx_PLL3_Config+0x128>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	46020c00 	.word	0x46020c00
 8005bb8:	80800000 	.word	0x80800000

08005bbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	; 0x28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e075      	b.n	8005cba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d105      	bne.n	8005be6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fb f8ab 	bl	8000d3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2204      	movs	r2, #4
 8005bea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f868 	bl	8005cc4 <HAL_SD_InitCard>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e05d      	b.n	8005cba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005bfe:	f107 0308 	add.w	r3, r7, #8
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa9d 	bl	8006144 <HAL_SD_GetCardStatus>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e052      	b.n	8005cba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005c14:	7e3b      	ldrb	r3, [r7, #24]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005c1a:	7e7b      	ldrb	r3, [r7, #25]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10a      	bne.n	8005c3e <HAL_SD_Init+0x82>
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <HAL_SD_Init+0x78>
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3a:	659a      	str	r2, [r3, #88]	; 0x58
 8005c3c:	e00b      	b.n	8005c56 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d104      	bne.n	8005c50 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c4c:	659a      	str	r2, [r3, #88]	; 0x58
 8005c4e:	e002      	b.n	8005c56 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fb2f 	bl	80062c0 <HAL_SD_ConfigWideBusOperation>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e026      	b.n	8005cba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005c6c:	f7fb fc3e 	bl	80014ec <HAL_GetTick>
 8005c70:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c72:	e011      	b.n	8005c98 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c74:	f7fb fc3a 	bl	80014ec <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c82:	d109      	bne.n	8005c98 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c8a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e010      	b.n	8005cba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fc23 	bl	80064e4 <HAL_SD_GetCardState>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d1e7      	bne.n	8005c74 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3728      	adds	r7, #40	; 0x28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b08d      	sub	sp, #52	; 0x34
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005cdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005ce0:	f04f 0100 	mov.w	r1, #0
 8005ce4:	f7fe fcf8 	bl	80046d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ce8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d109      	bne.n	8005d04 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e070      	b.n	8005de6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	4a39      	ldr	r2, [pc, #228]	; (8005df0 <HAL_SD_InitCard+0x12c>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681c      	ldr	r4, [r3, #0]
 8005d16:	466a      	mov	r2, sp
 8005d18:	f107 0318 	add.w	r3, r7, #24
 8005d1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d20:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d24:	f107 030c 	add.w	r3, r7, #12
 8005d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f002 fca6 	bl	800867c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f002 fcd8 	bl	80086ea <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005d52:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <HAL_SD_InitCard+0x130>)
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fb fbd1 	bl	8001504 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fcac 	bl	80066c0 <SD_PowerON>
 8005d68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e02e      	b.n	8005de6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fbcb 	bl	8006524 <SD_InitCard>
 8005d8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e01b      	b.n	8005de6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005db6:	4618      	mov	r0, r3
 8005db8:	f002 fd2c 	bl	8008814 <SDMMC_CmdBlockLength>
 8005dbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00f      	beq.n	8005de4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a0b      	ldr	r2, [pc, #44]	; (8005df8 <HAL_SD_InitCard+0x134>)
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	372c      	adds	r7, #44	; 0x2c
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	014f8b59 	.word	0x014f8b59
 8005df4:	00012110 	.word	0x00012110
 8005df8:	1fe00fff 	.word	0x1fe00fff

08005dfc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0a:	0f9b      	lsrs	r3, r3, #30
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e16:	0e9b      	lsrs	r3, r3, #26
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	0e1b      	lsrs	r3, r3, #24
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3a:	0c1b      	lsrs	r3, r3, #16
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e46:	0a1b      	lsrs	r3, r3, #8
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	0d1b      	lsrs	r3, r3, #20
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	0bdb      	lsrs	r3, r3, #15
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8c:	0b9b      	lsrs	r3, r3, #14
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9e:	0b5b      	lsrs	r3, r3, #13
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb0:	0b1b      	lsrs	r3, r3, #12
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d163      	bne.n	8005f94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	009a      	lsls	r2, r3, #2
 8005ed2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005edc:	0f92      	lsrs	r2, r2, #30
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee8:	0edb      	lsrs	r3, r3, #27
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efa:	0e1b      	lsrs	r3, r3, #24
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0c:	0d5b      	lsrs	r3, r3, #21
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1e:	0c9b      	lsrs	r3, r3, #18
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f30:	0bdb      	lsrs	r3, r3, #15
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	7e1b      	ldrb	r3, [r3, #24]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	3302      	adds	r3, #2
 8005f54:	2201      	movs	r2, #1
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f5e:	fb03 f202 	mul.w	r2, r3, r2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	7a1b      	ldrb	r3, [r3, #8]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	2201      	movs	r2, #1
 8005f72:	409a      	lsls	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f80:	0a52      	lsrs	r2, r2, #9
 8005f82:	fb03 f202 	mul.w	r2, r3, r2
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f90:	655a      	str	r2, [r3, #84]	; 0x54
 8005f92:	e031      	b.n	8005ff8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d11d      	bne.n	8005fd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	431a      	orrs	r2, r3
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	029a      	lsls	r2, r3, #10
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
 8005fd6:	e00f      	b.n	8005ff8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a58      	ldr	r2, [pc, #352]	; (8006140 <HAL_SD_GetCardCSD+0x344>)
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e09d      	b.n	8006134 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffc:	0b9b      	lsrs	r3, r3, #14
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600e:	09db      	lsrs	r3, r3, #7
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006016:	b2da      	uxtb	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006026:	b2da      	uxtb	r2, r3
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006030:	0fdb      	lsrs	r3, r3, #31
 8006032:	b2da      	uxtb	r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603c:	0f5b      	lsrs	r3, r3, #29
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	b2da      	uxtb	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800604e:	0e9b      	lsrs	r3, r3, #26
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	b2da      	uxtb	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	0d9b      	lsrs	r3, r3, #22
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	b2da      	uxtb	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006072:	0d5b      	lsrs	r3, r3, #21
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800608e:	0c1b      	lsrs	r3, r3, #16
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060a2:	0bdb      	lsrs	r3, r3, #15
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b6:	0b9b      	lsrs	r3, r3, #14
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ca:	0b5b      	lsrs	r3, r3, #13
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060de:	0b1b      	lsrs	r3, r3, #12
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f2:	0a9b      	lsrs	r3, r3, #10
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006106:	0a1b      	lsrs	r3, r3, #8
 8006108:	b2db      	uxtb	r3, r3
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	b2da      	uxtb	r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006122:	b2da      	uxtb	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	1fe00fff 	.word	0x1fe00fff

08006144 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b094      	sub	sp, #80	; 0x50
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b03      	cmp	r3, #3
 800615e:	d101      	bne.n	8006164 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0a7      	b.n	80062b4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006164:	f107 0308 	add.w	r3, r7, #8
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fb36 	bl	80067dc <SD_SendSDStatus>
 8006170:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	2b00      	cmp	r3, #0
 8006176:	d011      	beq.n	800619c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a4f      	ldr	r2, [pc, #316]	; (80062bc <HAL_SD_GetCardStatus+0x178>)
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800619a:	e070      	b.n	800627e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	099b      	lsrs	r3, r3, #6
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	f003 0303 	and.w	r3, r3, #3
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0e1b      	lsrs	r3, r3, #24
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	061a      	lsls	r2, r3, #24
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061e2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061ec:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b2da      	uxtb	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	0d1b      	lsrs	r3, r3, #20
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	b2da      	uxtb	r2, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	0c1b      	lsrs	r3, r3, #16
 800621e:	b29b      	uxth	r3, r3
 8006220:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006224:	b29a      	uxth	r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	b29b      	uxth	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	b29b      	uxth	r3, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	0a9b      	lsrs	r3, r3, #10
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006240:	b2da      	uxtb	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	b2da      	uxtb	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	b2da      	uxtb	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	b2da      	uxtb	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	0e1b      	lsrs	r3, r3, #24
 8006278:	b2da      	uxtb	r2, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006286:	4618      	mov	r0, r3
 8006288:	f002 fac4 	bl	8008814 <SDMMC_CmdBlockLength>
 800628c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800628e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a08      	ldr	r2, [pc, #32]	; (80062bc <HAL_SD_GetCardStatus+0x178>)
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80062b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3750      	adds	r7, #80	; 0x50
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	1fe00fff 	.word	0x1fe00fff

080062c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b08d      	sub	sp, #52	; 0x34
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2203      	movs	r2, #3
 80062d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d02e      	beq.n	800633e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e6:	d106      	bne.n	80062f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	635a      	str	r2, [r3, #52]	; 0x34
 80062f4:	e029      	b.n	800634a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062fc:	d10a      	bne.n	8006314 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fb64 	bl	80069cc <SD_WideBus_Enable>
 8006304:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	635a      	str	r2, [r3, #52]	; 0x34
 8006312:	e01a      	b.n	800634a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fba1 	bl	8006a62 <SD_WideBus_Disable>
 8006320:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	635a      	str	r2, [r3, #52]	; 0x34
 800632e:	e00c      	b.n	800634a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	635a      	str	r2, [r3, #52]	; 0x34
 800633c:	e005      	b.n	800634a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a5f      	ldr	r2, [pc, #380]	; (80064d4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006360:	e096      	b.n	8006490 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006362:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006366:	f04f 0100 	mov.w	r1, #0
 800636a:	f7fe f9b5 	bl	80046d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800636e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8083 	beq.w	800647e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4950      	ldr	r1, [pc, #320]	; (80064d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006396:	fba1 1303 	umull	r1, r3, r1, r3
 800639a:	0e1b      	lsrs	r3, r3, #24
 800639c:	429a      	cmp	r2, r3
 800639e:	d303      	bcc.n	80063a8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	e05a      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b0:	d103      	bne.n	80063ba <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	e051      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c2:	d126      	bne.n	8006412 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10e      	bne.n	80063ea <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4a43      	ldr	r2, [pc, #268]	; (80064dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d906      	bls.n	80063e2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4a40      	ldr	r2, [pc, #256]	; (80064d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	0e5b      	lsrs	r3, r3, #25
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e03d      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e039      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f6:	4a39      	ldr	r2, [pc, #228]	; (80064dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d906      	bls.n	800640a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4a36      	ldr	r2, [pc, #216]	; (80064d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	0e5b      	lsrs	r3, r3, #25
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e029      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e025      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10e      	bne.n	8006438 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4a30      	ldr	r2, [pc, #192]	; (80064e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d906      	bls.n	8006430 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4a2c      	ldr	r2, [pc, #176]	; (80064d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	0e1b      	lsrs	r3, r3, #24
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	e016      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e012      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	4a26      	ldr	r2, [pc, #152]	; (80064e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d906      	bls.n	8006458 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	0e1b      	lsrs	r3, r3, #24
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e002      	b.n	800645e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681c      	ldr	r4, [r3, #0]
 8006462:	466a      	mov	r2, sp
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	e893 0003 	ldmia.w	r3, {r0, r1}
 800646c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006470:	f107 0308 	add.w	r3, r7, #8
 8006474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006476:	4620      	mov	r0, r4
 8006478:	f002 f900 	bl	800867c <SDMMC_Init>
 800647c:	e008      	b.n	8006490 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006498:	4618      	mov	r0, r3
 800649a:	f002 f9bb 	bl	8008814 <SDMMC_CmdBlockLength>
 800649e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00c      	beq.n	80064c0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80064c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	372c      	adds	r7, #44	; 0x2c
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd90      	pop	{r4, r7, pc}
 80064d4:	1fe00fff 	.word	0x1fe00fff
 80064d8:	55e63b89 	.word	0x55e63b89
 80064dc:	02faf080 	.word	0x02faf080
 80064e0:	017d7840 	.word	0x017d7840

080064e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa40 	bl	800697c <SD_SendStatus>
 80064fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	0a5b      	lsrs	r3, r3, #9
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800651a:	693b      	ldr	r3, [r7, #16]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b090      	sub	sp, #64	; 0x40
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006530:	f7fa ffdc 	bl	80014ec <HAL_GetTick>
 8006534:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f002 f8e6 	bl	800870c <SDMMC_GetPowerState>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006546:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800654a:	e0b5      	b.n	80066b8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	2b03      	cmp	r3, #3
 8006552:	d02e      	beq.n	80065b2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f002 fa67 	bl	8008a2c <SDMMC_CmdSendCID>
 800655e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <SD_InitCard+0x46>
    {
      return errorstate;
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	e0a6      	b.n	80066b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f002 f910 	bl	8008796 <SDMMC_GetResponse>
 8006576:	4602      	mov	r2, r0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2104      	movs	r1, #4
 8006582:	4618      	mov	r0, r3
 8006584:	f002 f907 	bl	8008796 <SDMMC_GetResponse>
 8006588:	4602      	mov	r2, r0
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2108      	movs	r1, #8
 8006594:	4618      	mov	r0, r3
 8006596:	f002 f8fe 	bl	8008796 <SDMMC_GetResponse>
 800659a:	4602      	mov	r2, r0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	210c      	movs	r1, #12
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 f8f5 	bl	8008796 <SDMMC_GetResponse>
 80065ac:	4602      	mov	r2, r0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d01d      	beq.n	80065f6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80065ba:	e019      	b.n	80065f0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f107 020a 	add.w	r2, r7, #10
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f002 fa6f 	bl	8008aaa <SDMMC_CmdSetRelAdd>
 80065cc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	e06f      	b.n	80066b8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80065d8:	f7fa ff88 	bl	80014ec <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d902      	bls.n	80065f0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80065ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065ee:	e063      	b.n	80066b8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80065f0:	897b      	ldrh	r3, [r7, #10]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0e2      	beq.n	80065bc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d036      	beq.n	800666c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80065fe:	897b      	ldrh	r3, [r7, #10]
 8006600:	461a      	mov	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f002 fa29 	bl	8008a6a <SDMMC_CmdSendCSD>
 8006618:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <SD_InitCard+0x100>
    {
      return errorstate;
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	e049      	b.n	80066b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f002 f8b3 	bl	8008796 <SDMMC_GetResponse>
 8006630:	4602      	mov	r2, r0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2104      	movs	r1, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f002 f8aa 	bl	8008796 <SDMMC_GetResponse>
 8006642:	4602      	mov	r2, r0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2108      	movs	r1, #8
 800664e:	4618      	mov	r0, r3
 8006650:	f002 f8a1 	bl	8008796 <SDMMC_GetResponse>
 8006654:	4602      	mov	r2, r0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	210c      	movs	r1, #12
 8006660:	4618      	mov	r0, r3
 8006662:	f002 f898 	bl	8008796 <SDMMC_GetResponse>
 8006666:	4602      	mov	r2, r0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2104      	movs	r1, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f002 f88f 	bl	8008796 <SDMMC_GetResponse>
 8006678:	4603      	mov	r3, r0
 800667a:	0d1a      	lsrs	r2, r3, #20
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fbb8 	bl	8005dfc <HAL_SD_GetCardCSD>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006692:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006696:	e00f      	b.n	80066b8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f002 f8d8 	bl	800885a <SDMMC_CmdSelDesel>
 80066aa:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <SD_InitCard+0x192>
  {
    return errorstate;
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	e000      	b.n	80066b8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3740      	adds	r7, #64	; 0x40
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f002 f8e1 	bl	80088a0 <SDMMC_CmdGoIdleState>
 80066de:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <SD_PowerON+0x2a>
  {
    return errorstate;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	e072      	b.n	80067d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f002 f8f4 	bl	80088dc <SDMMC_CmdOperCond>
 80066f4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fc:	d10d      	bne.n	800671a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f002 f8c9 	bl	80088a0 <SDMMC_CmdGoIdleState>
 800670e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <SD_PowerON+0x60>
    {
      return errorstate;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e05a      	b.n	80067d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d137      	bne.n	8006798 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f002 f8f4 	bl	800891c <SDMMC_CmdAppCommand>
 8006734:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d02d      	beq.n	8006798 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800673c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006740:	e046      	b.n	80067d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2100      	movs	r1, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f002 f8e7 	bl	800891c <SDMMC_CmdAppCommand>
 800674e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <SD_PowerON+0x9a>
    {
      return errorstate;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	e03a      	b.n	80067d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	491e      	ldr	r1, [pc, #120]	; (80067d8 <SD_PowerON+0x118>)
 8006760:	4618      	mov	r0, r3
 8006762:	f002 f8fe 	bl	8008962 <SDMMC_CmdAppOperCommand>
 8006766:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800676e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006772:	e02d      	b.n	80067d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2100      	movs	r1, #0
 800677a:	4618      	mov	r0, r3
 800677c:	f002 f80b 	bl	8008796 <SDMMC_GetResponse>
 8006780:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	0fdb      	lsrs	r3, r3, #31
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <SD_PowerON+0xce>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <SD_PowerON+0xd0>
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]

    count++;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	3301      	adds	r3, #1
 8006796:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800679e:	4293      	cmp	r3, r2
 80067a0:	d802      	bhi.n	80067a8 <SD_PowerON+0xe8>
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0cc      	beq.n	8006742 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d902      	bls.n	80067b8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80067b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067b6:	e00b      	b.n	80067d0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	c1100000 	.word	0xc1100000

080067dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	; 0x30
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80067e6:	f7fa fe81 	bl	80014ec <HAL_GetTick>
 80067ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 ffcd 	bl	8008796 <SDMMC_GetResponse>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006806:	d102      	bne.n	800680e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800680c:	e0b0      	b.n	8006970 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2140      	movs	r1, #64	; 0x40
 8006814:	4618      	mov	r0, r3
 8006816:	f001 fffd 	bl	8008814 <SDMMC_CmdBlockLength>
 800681a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	e0a0      	b.n	8006970 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f002 f86e 	bl	800891c <SDMMC_CmdAppCommand>
 8006840:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	e08d      	b.n	8006970 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006858:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800685e:	2360      	movs	r3, #96	; 0x60
 8006860:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006862:	2302      	movs	r3, #2
 8006864:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006866:	2300      	movs	r3, #0
 8006868:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800686a:	2301      	movs	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f107 0208 	add.w	r2, r7, #8
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f001 ff9f 	bl	80087bc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f002 f956 	bl	8008b34 <SDMMC_CmdStatusRegister>
 8006888:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d02b      	beq.n	80068e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	e069      	b.n	8006970 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d013      	beq.n	80068d2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80068aa:	2300      	movs	r3, #0
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ae:	e00d      	b.n	80068cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 ff0b 	bl	80086d0 <SDMMC_ReadFIFO>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	601a      	str	r2, [r3, #0]
        pData++;
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	3304      	adds	r3, #4
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	3301      	adds	r3, #1
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	2b07      	cmp	r3, #7
 80068d0:	d9ee      	bls.n	80068b0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80068d2:	f7fa fe0b 	bl	80014ec <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e0:	d102      	bne.n	80068e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80068e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068e6:	e043      	b.n	8006970 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0d2      	beq.n	800689c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006904:	2308      	movs	r3, #8
 8006906:	e033      	b.n	8006970 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006916:	2302      	movs	r3, #2
 8006918:	e02a      	b.n	8006970 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d017      	beq.n	8006958 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006928:	2320      	movs	r3, #32
 800692a:	e021      	b.n	8006970 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f001 fecd 	bl	80086d0 <SDMMC_ReadFIFO>
 8006936:	4602      	mov	r2, r0
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	601a      	str	r2, [r3, #0]
    pData++;
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	3304      	adds	r3, #4
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006942:	f7fa fdd3 	bl	80014ec <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006950:	d102      	bne.n	8006958 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006952:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006956:	e00b      	b.n	8006970 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e2      	bne.n	800692c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a03      	ldr	r2, [pc, #12]	; (8006978 <SD_SendSDStatus+0x19c>)
 800696c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3730      	adds	r7, #48	; 0x30
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	18000f3a 	.word	0x18000f3a

0800697c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800698c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006990:	e018      	b.n	80069c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	041b      	lsls	r3, r3, #16
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f002 f8a5 	bl	8008aee <SDMMC_CmdSendStatus>
 80069a4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	e009      	b.n	80069c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2100      	movs	r1, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 feed 	bl	8008796 <SDMMC_GetResponse>
 80069bc:	4602      	mov	r2, r0
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2100      	movs	r1, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	f001 fed7 	bl	8008796 <SDMMC_GetResponse>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f2:	d102      	bne.n	80069fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f8:	e02f      	b.n	8006a5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80069fa:	f107 030c 	add.w	r3, r7, #12
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f879 	bl	8006af8 <SD_FindSCR>
 8006a06:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	e023      	b.n	8006a5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01c      	beq.n	8006a56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f001 ff77 	bl	800891c <SDMMC_CmdAppCommand>
 8006a2e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	e00f      	b.n	8006a5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2102      	movs	r1, #2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 ffae 	bl	80089a2 <SDMMC_CmdBusWidth>
 8006a46:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	e003      	b.n	8006a5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e001      	b.n	8006a5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b086      	sub	sp, #24
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 fe8c 	bl	8008796 <SDMMC_GetResponse>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a88:	d102      	bne.n	8006a90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a8e:	e02f      	b.n	8006af0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a90:	f107 030c 	add.w	r3, r7, #12
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f82e 	bl	8006af8 <SD_FindSCR>
 8006a9c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	e023      	b.n	8006af0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01c      	beq.n	8006aec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	4619      	mov	r1, r3
 8006abe:	4610      	mov	r0, r2
 8006ac0:	f001 ff2c 	bl	800891c <SDMMC_CmdAppCommand>
 8006ac4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	e00f      	b.n	8006af0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 ff63 	bl	80089a2 <SDMMC_CmdBusWidth>
 8006adc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	e003      	b.n	8006af0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e001      	b.n	8006af0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006aec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b02:	f7fa fcf3 	bl	80014ec <HAL_GetTick>
 8006b06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	2300      	movs	r3, #0
 8006b12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2108      	movs	r1, #8
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 fe78 	bl	8008814 <SDMMC_CmdBlockLength>
 8006b24:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	e0ad      	b.n	8006c8c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	041b      	lsls	r3, r3, #16
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f001 feed 	bl	800891c <SDMMC_CmdAppCommand>
 8006b42:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	e09e      	b.n	8006c8c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006b54:	2308      	movs	r3, #8
 8006b56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b58:	2330      	movs	r3, #48	; 0x30
 8006b5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b64:	2301      	movs	r3, #1
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f107 0210 	add.w	r2, r7, #16
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 fe22 	bl	80087bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 ff33 	bl	80089e8 <SDMMC_CmdSendSCR>
 8006b82:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d027      	beq.n	8006bda <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	e07e      	b.n	8006c8c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d113      	bne.n	8006bc4 <SD_FindSCR+0xcc>
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d110      	bne.n	8006bc4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 fd92 	bl	80086d0 <SDMMC_ReadFIFO>
 8006bac:	4603      	mov	r3, r0
 8006bae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fd8b 	bl	80086d0 <SDMMC_ReadFIFO>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	60fb      	str	r3, [r7, #12]
      index++;
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bc4:	f7fa fc92 	bl	80014ec <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd2:	d102      	bne.n	8006bda <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bd8:	e058      	b.n	8006c8c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be0:	f240 532a 	movw	r3, #1322	; 0x52a
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0d1      	beq.n	8006b8e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c00:	2308      	movs	r3, #8
 8006c02:	e043      	b.n	8006c8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2202      	movs	r2, #2
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e036      	b.n	8006c8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2220      	movs	r2, #32
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c34:	2320      	movs	r3, #32
 8006c36:	e029      	b.n	8006c8c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <SD_FindSCR+0x19c>)
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	061a      	lsls	r2, r3, #24
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	0e1b      	lsrs	r3, r3, #24
 8006c5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	601a      	str	r2, [r3, #0]
    scr++;
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	3304      	adds	r3, #4
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	061a      	lsls	r2, r3, #24
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	0e1b      	lsrs	r3, r3, #24
 8006c84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3738      	adds	r7, #56	; 0x38
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	18000f3a 	.word	0x18000f3a

08006c98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0fb      	b.n	8006ea2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a7f      	ldr	r2, [pc, #508]	; (8006eac <HAL_SPI_Init+0x214>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_SPI_Init+0x26>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a7d      	ldr	r2, [pc, #500]	; (8006eb0 <HAL_SPI_Init+0x218>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	e000      	b.n	8006cc0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006cbe:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a78      	ldr	r2, [pc, #480]	; (8006eac <HAL_SPI_Init+0x214>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_SPI_Init+0x42>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a76      	ldr	r2, [pc, #472]	; (8006eb0 <HAL_SPI_Init+0x218>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d105      	bne.n	8006ce6 <HAL_SPI_Init+0x4e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b0f      	cmp	r3, #15
 8006ce0:	d901      	bls.n	8006ce6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e0dd      	b.n	8006ea2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fd88 	bl	80077fc <SPI_GetPacketSize>
 8006cec:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a6e      	ldr	r2, [pc, #440]	; (8006eac <HAL_SPI_Init+0x214>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_SPI_Init+0x6a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a6c      	ldr	r2, [pc, #432]	; (8006eb0 <HAL_SPI_Init+0x218>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d102      	bne.n	8006d08 <HAL_SPI_Init+0x70>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d816      	bhi.n	8006d36 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006d0c:	4a69      	ldr	r2, [pc, #420]	; (8006eb4 <HAL_SPI_Init+0x21c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a68      	ldr	r2, [pc, #416]	; (8006eb8 <HAL_SPI_Init+0x220>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_SPI_Init+0x98>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a66      	ldr	r2, [pc, #408]	; (8006ebc <HAL_SPI_Init+0x224>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_SPI_Init+0x98>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a65      	ldr	r2, [pc, #404]	; (8006ec0 <HAL_SPI_Init+0x228>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d104      	bne.n	8006d3a <HAL_SPI_Init+0xa2>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b10      	cmp	r3, #16
 8006d34:	d901      	bls.n	8006d3a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e0b3      	b.n	8006ea2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fa f884 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006d76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d80:	d119      	bne.n	8006db6 <HAL_SPI_Init+0x11e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d8a:	d103      	bne.n	8006d94 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10c      	bne.n	8006db6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da4:	d107      	bne.n	8006db6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006db4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00f      	beq.n	8006de2 <HAL_SPI_Init+0x14a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b06      	cmp	r3, #6
 8006dc8:	d90b      	bls.n	8006de2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e007      	b.n	8006df2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e04:	ea42 0103 	orr.w	r1, r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5e:	ea42 0103 	orr.w	r1, r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	46002000 	.word	0x46002000
 8006eb0:	56002000 	.word	0x56002000
 8006eb4:	40013000 	.word	0x40013000
 8006eb8:	50013000 	.word	0x50013000
 8006ebc:	40003800 	.word	0x40003800
 8006ec0:	50003800 	.word	0x50003800

08006ec4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3320      	adds	r3, #32
 8006eda:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_SPI_Transmit+0x2a>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e203      	b.n	80072f6 <HAL_SPI_Transmit+0x432>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ef6:	f7fa faf9 	bl	80014ec <HAL_GetTick>
 8006efa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d007      	beq.n	8006f18 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8006f14:	7efb      	ldrb	r3, [r7, #27]
 8006f16:	e1ee      	b.n	80072f6 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_SPI_Transmit+0x60>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d107      	bne.n	8006f34 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8006f30:	7efb      	ldrb	r3, [r7, #27]
 8006f32:	e1e0      	b.n	80072f6 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2203      	movs	r2, #3
 8006f38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	88fa      	ldrh	r2, [r7, #6]
 8006f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006f84:	d108      	bne.n	8006f98 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e009      	b.n	8006fac <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006faa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	0c1b      	lsrs	r3, r3, #16
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	88f9      	ldrh	r1, [r7, #6]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_SPI_Transmit+0x134>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe6:	d107      	bne.n	8006ff8 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b0f      	cmp	r3, #15
 8006ffe:	d95b      	bls.n	80070b8 <HAL_SPI_Transmit+0x1f4>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a8f      	ldr	r2, [pc, #572]	; (8007244 <HAL_SPI_Transmit+0x380>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d04f      	beq.n	80070aa <HAL_SPI_Transmit+0x1e6>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a8e      	ldr	r2, [pc, #568]	; (8007248 <HAL_SPI_Transmit+0x384>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d04a      	beq.n	80070aa <HAL_SPI_Transmit+0x1e6>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a8c      	ldr	r2, [pc, #560]	; (800724c <HAL_SPI_Transmit+0x388>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d045      	beq.n	80070aa <HAL_SPI_Transmit+0x1e6>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a8b      	ldr	r2, [pc, #556]	; (8007250 <HAL_SPI_Transmit+0x38c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d147      	bne.n	80070b8 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007028:	e03f      	b.n	80070aa <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b02      	cmp	r3, #2
 8007036:	d114      	bne.n	8007062 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007060:	e023      	b.n	80070aa <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007062:	f7fa fa43 	bl	80014ec <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d803      	bhi.n	800707a <HAL_SPI_Transmit+0x1b6>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007078:	d102      	bne.n	8007080 <HAL_SPI_Transmit+0x1bc>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d114      	bne.n	80070aa <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 faed 	bl	8007660 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e125      	b.n	80072f6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1b9      	bne.n	800702a <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80070b6:	e0f8      	b.n	80072aa <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b07      	cmp	r3, #7
 80070be:	f240 80ed 	bls.w	800729c <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80070c2:	e05d      	b.n	8007180 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d132      	bne.n	8007138 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d918      	bls.n	8007110 <HAL_SPI_Transmit+0x24c>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d014      	beq.n	8007110 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b02      	subs	r3, #2
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800710e:	e037      	b.n	8007180 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007114:	881a      	ldrh	r2, [r3, #0]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800711e:	1c9a      	adds	r2, r3, #2
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007136:	e023      	b.n	8007180 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007138:	f7fa f9d8 	bl	80014ec <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d803      	bhi.n	8007150 <HAL_SPI_Transmit+0x28c>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714e:	d102      	bne.n	8007156 <HAL_SPI_Transmit+0x292>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d114      	bne.n	8007180 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fa82 	bl	8007660 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e0ba      	b.n	80072f6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d19b      	bne.n	80070c4 <HAL_SPI_Transmit+0x200>
 800718c:	e08d      	b.n	80072aa <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d15b      	bne.n	8007254 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d918      	bls.n	80071da <HAL_SPI_Transmit+0x316>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	d914      	bls.n	80071da <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c0:	1d1a      	adds	r2, r3, #4
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b04      	subs	r3, #4
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80071d8:	e060      	b.n	800729c <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d917      	bls.n	8007216 <HAL_SPI_Transmit+0x352>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d013      	beq.n	8007216 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071fc:	1c9a      	adds	r2, r3, #2
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b02      	subs	r3, #2
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007214:	e042      	b.n	800729c <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3320      	adds	r3, #32
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007240:	e02c      	b.n	800729c <HAL_SPI_Transmit+0x3d8>
 8007242:	bf00      	nop
 8007244:	40013000 	.word	0x40013000
 8007248:	50013000 	.word	0x50013000
 800724c:	40003800 	.word	0x40003800
 8007250:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007254:	f7fa f94a 	bl	80014ec <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d803      	bhi.n	800726c <HAL_SPI_Transmit+0x3a8>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726a:	d102      	bne.n	8007272 <HAL_SPI_Transmit+0x3ae>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d114      	bne.n	800729c <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f9f4 	bl	8007660 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007286:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e02c      	b.n	80072f6 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f47f af72 	bne.w	800718e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2200      	movs	r2, #0
 80072b2:	2108      	movs	r1, #8
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fa73 	bl	80077a0 <SPI_WaitOnFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c6:	f043 0220 	orr.w	r2, r3, #32
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f9c5 	bl	8007660 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 80072f4:	7efb      	ldrb	r3, [r7, #27]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop

08007300 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3330      	adds	r3, #48	; 0x30
 800731a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_SPI_Receive+0x2a>
 8007326:	2302      	movs	r3, #2
 8007328:	e18e      	b.n	8007648 <HAL_SPI_Receive+0x348>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007332:	f7fa f8db 	bl	80014ec <HAL_GetTick>
 8007336:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d007      	beq.n	8007354 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8007344:	2302      	movs	r3, #2
 8007346:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007350:	7ffb      	ldrb	r3, [r7, #31]
 8007352:	e179      	b.n	8007648 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_Receive+0x60>
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d107      	bne.n	8007370 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800736c:	7ffb      	ldrb	r3, [r7, #31]
 800736e:	e16b      	b.n	8007648 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2204      	movs	r2, #4
 8007374:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	88fa      	ldrh	r2, [r7, #6]
 8007392:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80073c0:	d108      	bne.n	80073d4 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e009      	b.n	80073e8 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80073e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	0c1b      	lsrs	r3, r3, #16
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	88f9      	ldrh	r1, [r7, #6]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	6812      	ldr	r2, [r2, #0]
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10c      	bne.n	8007434 <HAL_SPI_Receive+0x134>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007422:	d107      	bne.n	8007434 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007432:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b0f      	cmp	r3, #15
 800743a:	d95c      	bls.n	80074f6 <HAL_SPI_Receive+0x1f6>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a83      	ldr	r2, [pc, #524]	; (8007650 <HAL_SPI_Receive+0x350>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d050      	beq.n	80074e8 <HAL_SPI_Receive+0x1e8>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a82      	ldr	r2, [pc, #520]	; (8007654 <HAL_SPI_Receive+0x354>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d04b      	beq.n	80074e8 <HAL_SPI_Receive+0x1e8>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a80      	ldr	r2, [pc, #512]	; (8007658 <HAL_SPI_Receive+0x358>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d046      	beq.n	80074e8 <HAL_SPI_Receive+0x1e8>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a7f      	ldr	r2, [pc, #508]	; (800765c <HAL_SPI_Receive+0x35c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d148      	bne.n	80074f6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007464:	e040      	b.n	80074e8 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	f248 0308 	movw	r3, #32776	; 0x8008
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d014      	beq.n	80074a0 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800747e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007480:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800749e:	e023      	b.n	80074e8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074a0:	f7fa f824 	bl	80014ec <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d803      	bhi.n	80074b8 <HAL_SPI_Receive+0x1b8>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b6:	d102      	bne.n	80074be <HAL_SPI_Receive+0x1be>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d114      	bne.n	80074e8 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f8ce 	bl	8007660 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e0af      	b.n	8007648 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1b8      	bne.n	8007466 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80074f4:	e095      	b.n	8007622 <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	2b07      	cmp	r3, #7
 80074fc:	f240 808b 	bls.w	8007616 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007500:	e03f      	b.n	8007582 <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d114      	bne.n	800753a <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	8812      	ldrh	r2, [r2, #0]
 8007518:	b292      	uxth	r2, r2
 800751a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007520:	1c9a      	adds	r2, r3, #2
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8007538:	e023      	b.n	8007582 <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753a:	f7f9 ffd7 	bl	80014ec <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d803      	bhi.n	8007552 <HAL_SPI_Receive+0x252>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007550:	d102      	bne.n	8007558 <HAL_SPI_Receive+0x258>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d114      	bne.n	8007582 <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 f881 	bl	8007660 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800756c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e062      	b.n	8007648 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1b9      	bne.n	8007502 <HAL_SPI_Receive+0x202>
 800758e:	e048      	b.n	8007622 <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b01      	cmp	r3, #1
 800759c:	d117      	bne.n	80075ce <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80075cc:	e023      	b.n	8007616 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ce:	f7f9 ff8d 	bl	80014ec <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d803      	bhi.n	80075e6 <HAL_SPI_Receive+0x2e6>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e4:	d102      	bne.n	80075ec <HAL_SPI_Receive+0x2ec>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d114      	bne.n	8007616 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f837 	bl	8007660 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007600:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e018      	b.n	8007648 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1b6      	bne.n	8007590 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f81c 	bl	8007660 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 8007646:	7ffb      	ldrb	r3, [r7, #31]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40013000 	.word	0x40013000
 8007654:	50013000 	.word	0x50013000
 8007658:	40003800 	.word	0x40003800
 800765c:	50003800 	.word	0x50003800

08007660 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0208 	orr.w	r2, r2, #8
 800767e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0210 	orr.w	r2, r2, #16
 800768e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0201 	bic.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80076c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d014      	beq.n	80076fa <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00f      	beq.n	80076fa <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0220 	orr.w	r2, r2, #32
 80076f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d014      	beq.n	8007730 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00f      	beq.n	8007730 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007716:	f043 0204 	orr.w	r2, r3, #4
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800772e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00f      	beq.n	800775a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007740:	f043 0201 	orr.w	r2, r3, #1
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	699a      	ldr	r2, [r3, #24]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007758:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00f      	beq.n	8007784 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800776a:	f043 0208 	orr.w	r2, r3, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007782:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80077b0:	e010      	b.n	80077d4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077b2:	f7f9 fe9b 	bl	80014ec <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d803      	bhi.n	80077ca <SPI_WaitOnFlagUntilTimeout+0x2a>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c8:	d102      	bne.n	80077d0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e00f      	b.n	80077f4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	695a      	ldr	r2, [r3, #20]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	4013      	ands	r3, r2
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d0df      	beq.n	80077b2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3307      	adds	r3, #7
 800781a:	08db      	lsrs	r3, r3, #3
 800781c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	fb02 f303 	mul.w	r3, r2, r3
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b01      	cmp	r3, #1
 8007846:	d12e      	bne.n	80078a6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007852:	2302      	movs	r3, #2
 8007854:	e028      	b.n	80078a8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007882:	ea42 0103 	orr.w	r1, r2, r3
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e000      	b.n	80078a8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
  }
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e049      	b.n	800795a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7f9 fbb6 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f000 f836 	bl	8007964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a68      	ldr	r2, [pc, #416]	; (8007b18 <TIM_Base_SetConfig+0x1b4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d02b      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a67      	ldr	r2, [pc, #412]	; (8007b1c <TIM_Base_SetConfig+0x1b8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d027      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798a:	d023      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007992:	d01f      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a62      	ldr	r2, [pc, #392]	; (8007b20 <TIM_Base_SetConfig+0x1bc>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d01b      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a61      	ldr	r2, [pc, #388]	; (8007b24 <TIM_Base_SetConfig+0x1c0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d017      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a60      	ldr	r2, [pc, #384]	; (8007b28 <TIM_Base_SetConfig+0x1c4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a5f      	ldr	r2, [pc, #380]	; (8007b2c <TIM_Base_SetConfig+0x1c8>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00f      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a5e      	ldr	r2, [pc, #376]	; (8007b30 <TIM_Base_SetConfig+0x1cc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a5d      	ldr	r2, [pc, #372]	; (8007b34 <TIM_Base_SetConfig+0x1d0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a5c      	ldr	r2, [pc, #368]	; (8007b38 <TIM_Base_SetConfig+0x1d4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_Base_SetConfig+0x70>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a5b      	ldr	r2, [pc, #364]	; (8007b3c <TIM_Base_SetConfig+0x1d8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d108      	bne.n	80079e6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a4b      	ldr	r2, [pc, #300]	; (8007b18 <TIM_Base_SetConfig+0x1b4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d043      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a4a      	ldr	r2, [pc, #296]	; (8007b1c <TIM_Base_SetConfig+0x1b8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d03f      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fc:	d03b      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a04:	d037      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a45      	ldr	r2, [pc, #276]	; (8007b20 <TIM_Base_SetConfig+0x1bc>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d033      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a44      	ldr	r2, [pc, #272]	; (8007b24 <TIM_Base_SetConfig+0x1c0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d02f      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a43      	ldr	r2, [pc, #268]	; (8007b28 <TIM_Base_SetConfig+0x1c4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d02b      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a42      	ldr	r2, [pc, #264]	; (8007b2c <TIM_Base_SetConfig+0x1c8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d027      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a41      	ldr	r2, [pc, #260]	; (8007b30 <TIM_Base_SetConfig+0x1cc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d023      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a40      	ldr	r2, [pc, #256]	; (8007b34 <TIM_Base_SetConfig+0x1d0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01f      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a3f      	ldr	r2, [pc, #252]	; (8007b38 <TIM_Base_SetConfig+0x1d4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01b      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a3e      	ldr	r2, [pc, #248]	; (8007b3c <TIM_Base_SetConfig+0x1d8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d017      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a3d      	ldr	r2, [pc, #244]	; (8007b40 <TIM_Base_SetConfig+0x1dc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a3c      	ldr	r2, [pc, #240]	; (8007b44 <TIM_Base_SetConfig+0x1e0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a3b      	ldr	r2, [pc, #236]	; (8007b48 <TIM_Base_SetConfig+0x1e4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a3a      	ldr	r2, [pc, #232]	; (8007b4c <TIM_Base_SetConfig+0x1e8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a39      	ldr	r2, [pc, #228]	; (8007b50 <TIM_Base_SetConfig+0x1ec>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_Base_SetConfig+0x112>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a38      	ldr	r2, [pc, #224]	; (8007b54 <TIM_Base_SetConfig+0x1f0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d108      	bne.n	8007a88 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a1a      	ldr	r2, [pc, #104]	; (8007b18 <TIM_Base_SetConfig+0x1b4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d023      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <TIM_Base_SetConfig+0x1b8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d01f      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a1e      	ldr	r2, [pc, #120]	; (8007b38 <TIM_Base_SetConfig+0x1d4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d01b      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a1d      	ldr	r2, [pc, #116]	; (8007b3c <TIM_Base_SetConfig+0x1d8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d017      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a1c      	ldr	r2, [pc, #112]	; (8007b40 <TIM_Base_SetConfig+0x1dc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d013      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a1b      	ldr	r2, [pc, #108]	; (8007b44 <TIM_Base_SetConfig+0x1e0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00f      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a1a      	ldr	r2, [pc, #104]	; (8007b48 <TIM_Base_SetConfig+0x1e4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00b      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <TIM_Base_SetConfig+0x1e8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d007      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <TIM_Base_SetConfig+0x1ec>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_Base_SetConfig+0x198>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <TIM_Base_SetConfig+0x1f0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d103      	bne.n	8007b04 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	615a      	str	r2, [r3, #20]
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40012c00 	.word	0x40012c00
 8007b1c:	50012c00 	.word	0x50012c00
 8007b20:	40000400 	.word	0x40000400
 8007b24:	50000400 	.word	0x50000400
 8007b28:	40000800 	.word	0x40000800
 8007b2c:	50000800 	.word	0x50000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	50000c00 	.word	0x50000c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	50013400 	.word	0x50013400
 8007b40:	40014000 	.word	0x40014000
 8007b44:	50014000 	.word	0x50014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	50014400 	.word	0x50014400
 8007b50:	40014800 	.word	0x40014800
 8007b54:	50014800 	.word	0x50014800

08007b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e042      	b.n	8007bf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7f9 fa87 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2224      	movs	r2, #36	; 0x24
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0201 	bic.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f8ba 	bl	8007d14 <UART_SetConfig>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e022      	b.n	8007bf0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa46 	bl	8008044 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 facd 	bl	8008188 <UART_CheckIdleState>
 8007bee:	4603      	mov	r3, r0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d17b      	bne.n	8007d0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_UART_Transmit+0x26>
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e074      	b.n	8007d0c <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2221      	movs	r2, #33	; 0x21
 8007c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c32:	f7f9 fc5b 	bl	80014ec <HAL_GetTick>
 8007c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	88fa      	ldrh	r2, [r7, #6]
 8007c3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	88fa      	ldrh	r2, [r7, #6]
 8007c44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c50:	d108      	bne.n	8007c64 <HAL_UART_Transmit+0x6c>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d104      	bne.n	8007c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	e003      	b.n	8007c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c6c:	e030      	b.n	8007cd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2200      	movs	r2, #0
 8007c76:	2180      	movs	r1, #128	; 0x80
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 fb2f 	bl	80082dc <UART_WaitOnFlagUntilTimeout>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e03d      	b.n	8007d0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ca4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	3302      	adds	r3, #2
 8007caa:	61bb      	str	r3, [r7, #24]
 8007cac:	e007      	b.n	8007cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	781a      	ldrb	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1c8      	bne.n	8007c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2140      	movs	r1, #64	; 0x40
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 faf8 	bl	80082dc <UART_WaitOnFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e006      	b.n	8007d0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e000      	b.n	8007d0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007d0a:	2302      	movs	r3, #2
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3720      	adds	r7, #32
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d18:	b094      	sub	sp, #80	; 0x50
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4b9b      	ldr	r3, [pc, #620]	; (8007f98 <UART_SetConfig+0x284>)
 8007d2a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4994      	ldr	r1, [pc, #592]	; (8007f9c <UART_SetConfig+0x288>)
 8007d4c:	4019      	ands	r1, r3
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d54:	430b      	orrs	r3, r1
 8007d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	68d9      	ldr	r1, [r3, #12]
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	ea40 0301 	orr.w	r3, r0, r1
 8007d6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b87      	ldr	r3, [pc, #540]	; (8007f98 <UART_SetConfig+0x284>)
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d009      	beq.n	8007d94 <UART_SetConfig+0x80>
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4b86      	ldr	r3, [pc, #536]	; (8007fa0 <UART_SetConfig+0x28c>)
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d004      	beq.n	8007d94 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	6a1a      	ldr	r2, [r3, #32]
 8007d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d90:	4313      	orrs	r3, r2
 8007d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007d9e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da8:	430b      	orrs	r3, r1
 8007daa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	f023 000f 	bic.w	r0, r3, #15
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	ea40 0301 	orr.w	r3, r0, r1
 8007dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	4b76      	ldr	r3, [pc, #472]	; (8007fa4 <UART_SetConfig+0x290>)
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d102      	bne.n	8007dd4 <UART_SetConfig+0xc0>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd2:	e021      	b.n	8007e18 <UART_SetConfig+0x104>
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4b73      	ldr	r3, [pc, #460]	; (8007fa8 <UART_SetConfig+0x294>)
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d102      	bne.n	8007de4 <UART_SetConfig+0xd0>
 8007dde:	2304      	movs	r3, #4
 8007de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de2:	e019      	b.n	8007e18 <UART_SetConfig+0x104>
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	4b70      	ldr	r3, [pc, #448]	; (8007fac <UART_SetConfig+0x298>)
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d102      	bne.n	8007df4 <UART_SetConfig+0xe0>
 8007dee:	2308      	movs	r3, #8
 8007df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df2:	e011      	b.n	8007e18 <UART_SetConfig+0x104>
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4b6d      	ldr	r3, [pc, #436]	; (8007fb0 <UART_SetConfig+0x29c>)
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d102      	bne.n	8007e04 <UART_SetConfig+0xf0>
 8007dfe:	2310      	movs	r3, #16
 8007e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e02:	e009      	b.n	8007e18 <UART_SetConfig+0x104>
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4b63      	ldr	r3, [pc, #396]	; (8007f98 <UART_SetConfig+0x284>)
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d102      	bne.n	8007e14 <UART_SetConfig+0x100>
 8007e0e:	2320      	movs	r3, #32
 8007e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e12:	e001      	b.n	8007e18 <UART_SetConfig+0x104>
 8007e14:	2300      	movs	r3, #0
 8007e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4b5e      	ldr	r3, [pc, #376]	; (8007f98 <UART_SetConfig+0x284>)
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d004      	beq.n	8007e2c <UART_SetConfig+0x118>
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4b5e      	ldr	r3, [pc, #376]	; (8007fa0 <UART_SetConfig+0x28c>)
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d172      	bne.n	8007f12 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e2e:	2200      	movs	r2, #0
 8007e30:	623b      	str	r3, [r7, #32]
 8007e32:	627a      	str	r2, [r7, #36]	; 0x24
 8007e34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e38:	f7fc fc4e 	bl	80046d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e3c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 80e7 	beq.w	8008014 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	4a5a      	ldr	r2, [pc, #360]	; (8007fb4 <UART_SetConfig+0x2a0>)
 8007e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	4413      	add	r3, r2
 8007e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d305      	bcc.n	8007e76 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d903      	bls.n	8007e7e <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007e7c:	e048      	b.n	8007f10 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e80:	2200      	movs	r2, #0
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	61fa      	str	r2, [r7, #28]
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	4a4a      	ldr	r2, [pc, #296]	; (8007fb4 <UART_SetConfig+0x2a0>)
 8007e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2200      	movs	r2, #0
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	617a      	str	r2, [r7, #20]
 8007e98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ea0:	f7f8 f9ea 	bl	8000278 <__aeabi_uldivmod>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	020b      	lsls	r3, r1, #8
 8007eb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eba:	0202      	lsls	r2, r0, #8
 8007ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ebe:	6849      	ldr	r1, [r1, #4]
 8007ec0:	0849      	lsrs	r1, r1, #1
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	eb12 0804 	adds.w	r8, r2, r4
 8007ecc:	eb43 0905 	adc.w	r9, r3, r5
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	60bb      	str	r3, [r7, #8]
 8007ed8:	60fa      	str	r2, [r7, #12]
 8007eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ede:	4640      	mov	r0, r8
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	f7f8 f9c9 	bl	8000278 <__aeabi_uldivmod>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4613      	mov	r3, r2
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef4:	d308      	bcc.n	8007f08 <UART_SetConfig+0x1f4>
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007efc:	d204      	bcs.n	8007f08 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f04:	60da      	str	r2, [r3, #12]
 8007f06:	e003      	b.n	8007f10 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007f0e:	e081      	b.n	8008014 <UART_SetConfig+0x300>
 8007f10:	e080      	b.n	8008014 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f1a:	d14d      	bne.n	8007fb8 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f1e:	2200      	movs	r2, #0
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f28:	f7fc fbd6 	bl	80046d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f2c:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d06f      	beq.n	8008014 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <UART_SetConfig+0x2a0>)
 8007f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f46:	005a      	lsls	r2, r3, #1
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	441a      	add	r2, r3
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	2b0f      	cmp	r3, #15
 8007f5e:	d916      	bls.n	8007f8e <UART_SetConfig+0x27a>
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f66:	d212      	bcs.n	8007f8e <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f023 030f 	bic.w	r3, r3, #15
 8007f70:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007f80:	4313      	orrs	r3, r2
 8007f82:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007f8a:	60da      	str	r2, [r3, #12]
 8007f8c:	e042      	b.n	8008014 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f94:	e03e      	b.n	8008014 <UART_SetConfig+0x300>
 8007f96:	bf00      	nop
 8007f98:	46002400 	.word	0x46002400
 8007f9c:	cfff69f3 	.word	0xcfff69f3
 8007fa0:	56002400 	.word	0x56002400
 8007fa4:	40013800 	.word	0x40013800
 8007fa8:	40004800 	.word	0x40004800
 8007fac:	40004c00 	.word	0x40004c00
 8007fb0:	40005000 	.word	0x40005000
 8007fb4:	08009c08 	.word	0x08009c08
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fba:	2200      	movs	r2, #0
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	4693      	mov	fp, r2
 8007fc0:	4650      	mov	r0, sl
 8007fc2:	4659      	mov	r1, fp
 8007fc4:	f7fc fb88 	bl	80046d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007fc8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d021      	beq.n	8008014 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	4a1a      	ldr	r2, [pc, #104]	; (8008040 <UART_SetConfig+0x32c>)
 8007fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fde:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	085b      	lsrs	r3, r3, #1
 8007fe8:	441a      	add	r2, r3
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff6:	2b0f      	cmp	r3, #15
 8007ff8:	d909      	bls.n	800800e <UART_SetConfig+0x2fa>
 8007ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008000:	d205      	bcs.n	800800e <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008004:	b29a      	uxth	r2, r3
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60da      	str	r2, [r3, #12]
 800800c:	e002      	b.n	8008014 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	2201      	movs	r2, #1
 8008018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	2201      	movs	r2, #1
 8008020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	2200      	movs	r2, #0
 8008028:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	2200      	movs	r2, #0
 800802e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008030:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008034:	4618      	mov	r0, r3
 8008036:	3750      	adds	r7, #80	; 0x50
 8008038:	46bd      	mov	sp, r7
 800803a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800803e:	bf00      	nop
 8008040:	08009c08 	.word	0x08009c08

08008044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fa:	f003 0320 	and.w	r3, r3, #32
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01a      	beq.n	800815a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008142:	d10a      	bne.n	800815a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b098      	sub	sp, #96	; 0x60
 800818c:	af02      	add	r7, sp, #8
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008198:	f7f9 f9a8 	bl	80014ec <HAL_GetTick>
 800819c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0308 	and.w	r3, r3, #8
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d12f      	bne.n	800820c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081b4:	2200      	movs	r2, #0
 80081b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f88e 	bl	80082dc <UART_WaitOnFlagUntilTimeout>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d022      	beq.n	800820c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081da:	653b      	str	r3, [r7, #80]	; 0x50
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e4:	647b      	str	r3, [r7, #68]	; 0x44
 80081e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e6      	bne.n	80081c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e063      	b.n	80082d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b04      	cmp	r3, #4
 8008218:	d149      	bne.n	80082ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800821a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008222:	2200      	movs	r2, #0
 8008224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f857 	bl	80082dc <UART_WaitOnFlagUntilTimeout>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d03c      	beq.n	80082ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	623b      	str	r3, [r7, #32]
   return(result);
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	633b      	str	r3, [r7, #48]	; 0x30
 8008254:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e6      	bne.n	8008234 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3308      	adds	r3, #8
 800826c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	60fb      	str	r3, [r7, #12]
   return(result);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f023 0301 	bic.w	r3, r3, #1
 800827c:	64bb      	str	r3, [r7, #72]	; 0x48
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3308      	adds	r3, #8
 8008284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008286:	61fa      	str	r2, [r7, #28]
 8008288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	69b9      	ldr	r1, [r7, #24]
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	617b      	str	r3, [r7, #20]
   return(result);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e5      	bne.n	8008266 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e012      	b.n	80082d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3758      	adds	r7, #88	; 0x58
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	4613      	mov	r3, r2
 80082ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ec:	e049      	b.n	8008382 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f4:	d045      	beq.n	8008382 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f6:	f7f9 f8f9 	bl	80014ec <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	429a      	cmp	r2, r3
 8008304:	d302      	bcc.n	800830c <UART_WaitOnFlagUntilTimeout+0x30>
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e048      	b.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0304 	and.w	r3, r3, #4
 800831a:	2b00      	cmp	r3, #0
 800831c:	d031      	beq.n	8008382 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	2b08      	cmp	r3, #8
 800832a:	d110      	bne.n	800834e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2208      	movs	r2, #8
 8008332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f838 	bl	80083aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2208      	movs	r2, #8
 800833e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e029      	b.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800835c:	d111      	bne.n	8008382 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 f81e 	bl	80083aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e00f      	b.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4013      	ands	r3, r2
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	bf0c      	ite	eq
 8008392:	2301      	moveq	r3, #1
 8008394:	2300      	movne	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	429a      	cmp	r2, r3
 800839e:	d0a6      	beq.n	80082ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b095      	sub	sp, #84	; 0x54
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	461a      	mov	r2, r3
 80083ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d0:	643b      	str	r3, [r7, #64]	; 0x40
 80083d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e6      	bne.n	80083b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3308      	adds	r3, #8
 80083ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e3      	bne.n	80083e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008420:	2b01      	cmp	r3, #1
 8008422:	d118      	bne.n	8008456 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	60bb      	str	r3, [r7, #8]
   return(result);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f023 0310 	bic.w	r3, r3, #16
 8008438:	647b      	str	r3, [r7, #68]	; 0x44
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008442:	61bb      	str	r3, [r7, #24]
 8008444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6979      	ldr	r1, [r7, #20]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	613b      	str	r3, [r7, #16]
   return(result);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	675a      	str	r2, [r3, #116]	; 0x74
}
 800846a:	bf00      	nop
 800846c:	3754      	adds	r7, #84	; 0x54
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008476:	b480      	push	{r7}
 8008478:	b085      	sub	sp, #20
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_UARTEx_DisableFifoMode+0x16>
 8008488:	2302      	movs	r3, #2
 800848a:	e027      	b.n	80084dc <HAL_UARTEx_DisableFifoMode+0x66>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2224      	movs	r2, #36	; 0x24
 8008498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0201 	bic.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e02d      	b.n	800855c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2224      	movs	r2, #36	; 0x24
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0201 	bic.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f84f 	bl	80085e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008574:	2b01      	cmp	r3, #1
 8008576:	d101      	bne.n	800857c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008578:	2302      	movs	r3, #2
 800857a:	e02d      	b.n	80085d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2224      	movs	r2, #36	; 0x24
 8008588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f811 	bl	80085e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d108      	bne.n	8008602 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008600:	e031      	b.n	8008666 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008602:	2308      	movs	r3, #8
 8008604:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008606:	2308      	movs	r3, #8
 8008608:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	0e5b      	lsrs	r3, r3, #25
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	0f5b      	lsrs	r3, r3, #29
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	7b3a      	ldrb	r2, [r7, #12]
 800862e:	4911      	ldr	r1, [pc, #68]	; (8008674 <UARTEx_SetNbDataToProcess+0x94>)
 8008630:	5c8a      	ldrb	r2, [r1, r2]
 8008632:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008636:	7b3a      	ldrb	r2, [r7, #12]
 8008638:	490f      	ldr	r1, [pc, #60]	; (8008678 <UARTEx_SetNbDataToProcess+0x98>)
 800863a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800863c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	7b7a      	ldrb	r2, [r7, #13]
 800864c:	4909      	ldr	r1, [pc, #36]	; (8008674 <UARTEx_SetNbDataToProcess+0x94>)
 800864e:	5c8a      	ldrb	r2, [r1, r2]
 8008650:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008654:	7b7a      	ldrb	r2, [r7, #13]
 8008656:	4908      	ldr	r1, [pc, #32]	; (8008678 <UARTEx_SetNbDataToProcess+0x98>)
 8008658:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800865a:	fb93 f3f2 	sdiv	r3, r3, r2
 800865e:	b29a      	uxth	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	08009c20 	.word	0x08009c20
 8008678:	08009c28 	.word	0x08009c28

0800867c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800867c:	b084      	sub	sp, #16
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	f107 001c 	add.w	r0, r7, #28
 800868a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008692:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008694:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008696:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800869a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800869e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80086a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	4b07      	ldr	r3, [pc, #28]	; (80086cc <SDMMC_Init+0x50>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	b004      	add	sp, #16
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	ffc02c00 	.word	0xffc02c00

080086d0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f043 0203 	orr.w	r2, r3, #3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0303 	and.w	r3, r3, #3
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008746:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800874c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008752:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <SDMMC_SendCommand+0x50>)
 8008760:	4013      	ands	r3, r2
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	fffee0c0 	.word	0xfffee0c0

0800877c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	b2db      	uxtb	r3, r3
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3314      	adds	r3, #20
 80087a4:	461a      	mov	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	4413      	add	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80087e2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80087e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80087ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008806:	2300      	movs	r3, #0

}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008822:	2310      	movs	r3, #16
 8008824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800882a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008834:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff73 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008842:	f241 3288 	movw	r2, #5000	; 0x1388
 8008846:	2110      	movs	r1, #16
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f995 	bl	8008b78 <SDMMC_GetCmdResp1>
 800884e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008850:	69fb      	ldr	r3, [r7, #28]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b088      	sub	sp, #32
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008868:	2307      	movs	r3, #7
 800886a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800886c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800887a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800887c:	f107 0308 	add.w	r3, r7, #8
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff ff50 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008888:	f241 3288 	movw	r2, #5000	; 0x1388
 800888c:	2107      	movs	r1, #7
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f972 	bl	8008b78 <SDMMC_GetCmdResp1>
 8008894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008896:	69fb      	ldr	r3, [r7, #28]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80088b0:	2300      	movs	r3, #0
 80088b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088be:	f107 0308 	add.w	r3, r7, #8
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ff2f 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fb96 	bl	8008ffc <SDMMC_GetCmdError>
 80088d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088d2:	69fb      	ldr	r3, [r7, #28]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3720      	adds	r7, #32
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80088e4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80088e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80088ea:	2308      	movs	r3, #8
 80088ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088f4:	2300      	movs	r3, #0
 80088f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088fe:	f107 0308 	add.w	r3, r7, #8
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff ff0f 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fb28 	bl	8008f60 <SDMMC_GetCmdResp7>
 8008910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008912:	69fb      	ldr	r3, [r7, #28]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800892a:	2337      	movs	r3, #55	; 0x37
 800892c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800892e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008934:	2300      	movs	r3, #0
 8008936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800893c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800893e:	f107 0308 	add.w	r3, r7, #8
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff feef 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800894a:	f241 3288 	movw	r2, #5000	; 0x1388
 800894e:	2137      	movs	r1, #55	; 0x37
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f911 	bl	8008b78 <SDMMC_GetCmdResp1>
 8008956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008958:	69fb      	ldr	r3, [r7, #28]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b088      	sub	sp, #32
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008970:	2329      	movs	r3, #41	; 0x29
 8008972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800897e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008982:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008984:	f107 0308 	add.w	r3, r7, #8
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fecc 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fa2d 	bl	8008df0 <SDMMC_GetCmdResp3>
 8008996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008998:	69fb      	ldr	r3, [r7, #28]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b088      	sub	sp, #32
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80089b0:	2306      	movs	r3, #6
 80089b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089c4:	f107 0308 	add.w	r3, r7, #8
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff feac 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80089d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d4:	2106      	movs	r1, #6
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f8ce 	bl	8008b78 <SDMMC_GetCmdResp1>
 80089dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089de:	69fb      	ldr	r3, [r7, #28]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3720      	adds	r7, #32
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80089f4:	2333      	movs	r3, #51	; 0x33
 80089f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a08:	f107 0308 	add.w	r3, r7, #8
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff fe8a 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a18:	2133      	movs	r1, #51	; 0x33
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f8ac 	bl	8008b78 <SDMMC_GetCmdResp1>
 8008a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a22:	69fb      	ldr	r3, [r7, #28]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3720      	adds	r7, #32
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008a3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a42:	2300      	movs	r3, #0
 8008a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a4c:	f107 0308 	add.w	r3, r7, #8
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff fe68 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f97f 	bl	8008d5c <SDMMC_GetCmdResp2>
 8008a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a60:	69fb      	ldr	r3, [r7, #28]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3720      	adds	r7, #32
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b088      	sub	sp, #32
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008a78:	2309      	movs	r3, #9
 8008a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008a7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a8c:	f107 0308 	add.w	r3, r7, #8
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fe48 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f95f 	bl	8008d5c <SDMMC_GetCmdResp2>
 8008a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3720      	adds	r7, #32
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b088      	sub	sp, #32
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008acc:	f107 0308 	add.w	r3, r7, #8
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fe28 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	2103      	movs	r1, #3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f9c7 	bl	8008e70 <SDMMC_GetCmdResp6>
 8008ae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b088      	sub	sp, #32
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008afc:	230d      	movs	r3, #13
 8008afe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b10:	f107 0308 	add.w	r3, r7, #8
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff fe06 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b20:	210d      	movs	r1, #13
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f828 	bl	8008b78 <SDMMC_GetCmdResp1>
 8008b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3720      	adds	r7, #32
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008b40:	230d      	movs	r3, #13
 8008b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b54:	f107 0308 	add.w	r3, r7, #8
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff fde4 	bl	8008728 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b64:	210d      	movs	r1, #13
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f806 	bl	8008b78 <SDMMC_GetCmdResp1>
 8008b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	460b      	mov	r3, r1
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b86:	4b70      	ldr	r3, [pc, #448]	; (8008d48 <SDMMC_GetCmdResp1+0x1d0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a70      	ldr	r2, [pc, #448]	; (8008d4c <SDMMC_GetCmdResp1+0x1d4>)
 8008b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b90:	0a5a      	lsrs	r2, r3, #9
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
 8008b98:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	1e5a      	subs	r2, r3, #1
 8008b9e:	61fa      	str	r2, [r7, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d102      	bne.n	8008baa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ba8:	e0c9      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	4b67      	ldr	r3, [pc, #412]	; (8008d50 <SDMMC_GetCmdResp1+0x1d8>)
 8008bb4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0ef      	beq.n	8008b9a <SDMMC_GetCmdResp1+0x22>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1ea      	bne.n	8008b9a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bd6:	2304      	movs	r3, #4
 8008bd8:	e0b1      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2201      	movs	r2, #1
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0a6      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a58      	ldr	r2, [pc, #352]	; (8008d54 <SDMMC_GetCmdResp1+0x1dc>)
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff fdc0 	bl	800877c <SDMMC_GetCommandResponse>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	7afb      	ldrb	r3, [r7, #11]
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d001      	beq.n	8008c0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e099      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f7ff fdc2 	bl	8008796 <SDMMC_GetResponse>
 8008c12:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	4b50      	ldr	r3, [pc, #320]	; (8008d58 <SDMMC_GetCmdResp1+0x1e0>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e08d      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	da02      	bge.n	8008c2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c2c:	e087      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	e080      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	e079      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c58:	e071      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c68:	e069      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c78:	e061      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008c84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c88:	e059      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c98:	e051      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ca8:	e049      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cb8:	e041      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cc8:	e039      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008cd8:	e031      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008ce4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ce8:	e029      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008cf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cf8:	e021      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d08:	e019      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d18:	e011      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008d24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d28:	e009      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008d34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d38:	e001      	b.n	8008d3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000000 	.word	0x20000000
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	00200045 	.word	0x00200045
 8008d54:	002000c5 	.word	0x002000c5
 8008d58:	fdffe008 	.word	0xfdffe008

08008d5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008d64:	4b1f      	ldr	r3, [pc, #124]	; (8008de4 <SDMMC_GetCmdResp2+0x88>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1f      	ldr	r2, [pc, #124]	; (8008de8 <SDMMC_GetCmdResp2+0x8c>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	0a5b      	lsrs	r3, r3, #9
 8008d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	1e5a      	subs	r2, r3, #1
 8008d7e:	60fa      	str	r2, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d88:	e026      	b.n	8008dd8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0ef      	beq.n	8008d7a <SDMMC_GetCmdResp2+0x1e>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1ea      	bne.n	8008d7a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2204      	movs	r2, #4
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008db6:	2304      	movs	r3, #4
 8008db8:	e00e      	b.n	8008dd8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e003      	b.n	8008dd8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a06      	ldr	r2, [pc, #24]	; (8008dec <SDMMC_GetCmdResp2+0x90>)
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	20000000 	.word	0x20000000
 8008de8:	10624dd3 	.word	0x10624dd3
 8008dec:	002000c5 	.word	0x002000c5

08008df0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008df8:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <SDMMC_GetCmdResp3+0x74>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a1a      	ldr	r2, [pc, #104]	; (8008e68 <SDMMC_GetCmdResp3+0x78>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	0a5b      	lsrs	r3, r3, #9
 8008e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e08:	fb02 f303 	mul.w	r3, r2, r3
 8008e0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1e5a      	subs	r2, r3, #1
 8008e12:	60fa      	str	r2, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e1c:	e01b      	b.n	8008e56 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e22:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0ef      	beq.n	8008e0e <SDMMC_GetCmdResp3+0x1e>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1ea      	bne.n	8008e0e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2204      	movs	r2, #4
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e4a:	2304      	movs	r3, #4
 8008e4c:	e003      	b.n	8008e56 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a06      	ldr	r2, [pc, #24]	; (8008e6c <SDMMC_GetCmdResp3+0x7c>)
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20000000 	.word	0x20000000
 8008e68:	10624dd3 	.word	0x10624dd3
 8008e6c:	002000c5 	.word	0x002000c5

08008e70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008e7e:	4b35      	ldr	r3, [pc, #212]	; (8008f54 <SDMMC_GetCmdResp6+0xe4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a35      	ldr	r2, [pc, #212]	; (8008f58 <SDMMC_GetCmdResp6+0xe8>)
 8008e84:	fba2 2303 	umull	r2, r3, r2, r3
 8008e88:	0a5b      	lsrs	r3, r3, #9
 8008e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e8e:	fb02 f303 	mul.w	r3, r2, r3
 8008e92:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	1e5a      	subs	r2, r3, #1
 8008e98:	61fa      	str	r2, [r7, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d102      	bne.n	8008ea4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ea2:	e052      	b.n	8008f4a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d0ef      	beq.n	8008e94 <SDMMC_GetCmdResp6+0x24>
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1ea      	bne.n	8008e94 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2204      	movs	r2, #4
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ed0:	2304      	movs	r3, #4
 8008ed2:	e03a      	b.n	8008f4a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e02f      	b.n	8008f4a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff fc46 	bl	800877c <SDMMC_GetCommandResponse>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d001      	beq.n	8008efe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e025      	b.n	8008f4a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4a16      	ldr	r2, [pc, #88]	; (8008f5c <SDMMC_GetCmdResp6+0xec>)
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008f04:	2100      	movs	r1, #0
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fc45 	bl	8008796 <SDMMC_GetResponse>
 8008f0c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	0c1b      	lsrs	r3, r3, #16
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e011      	b.n	8008f4a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f34:	e009      	b.n	8008f4a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f44:	e001      	b.n	8008f4a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000000 	.word	0x20000000
 8008f58:	10624dd3 	.word	0x10624dd3
 8008f5c:	002000c5 	.word	0x002000c5

08008f60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008f68:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <SDMMC_GetCmdResp7+0x94>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a22      	ldr	r2, [pc, #136]	; (8008ff8 <SDMMC_GetCmdResp7+0x98>)
 8008f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f72:	0a5b      	lsrs	r3, r3, #9
 8008f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f78:	fb02 f303 	mul.w	r3, r2, r3
 8008f7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	1e5a      	subs	r2, r3, #1
 8008f82:	60fa      	str	r2, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d102      	bne.n	8008f8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f8c:	e02c      	b.n	8008fe8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f92:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0ef      	beq.n	8008f7e <SDMMC_GetCmdResp7+0x1e>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1ea      	bne.n	8008f7e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fba:	2304      	movs	r3, #4
 8008fbc:	e014      	b.n	8008fe8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d004      	beq.n	8008fd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e009      	b.n	8008fe8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2240      	movs	r2, #64	; 0x40
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008fe6:	2300      	movs	r3, #0

}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	20000000 	.word	0x20000000
 8008ff8:	10624dd3 	.word	0x10624dd3

08008ffc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009004:	4b11      	ldr	r3, [pc, #68]	; (800904c <SDMMC_GetCmdError+0x50>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a11      	ldr	r2, [pc, #68]	; (8009050 <SDMMC_GetCmdError+0x54>)
 800900a:	fba2 2303 	umull	r2, r3, r2, r3
 800900e:	0a5b      	lsrs	r3, r3, #9
 8009010:	f241 3288 	movw	r2, #5000	; 0x1388
 8009014:	fb02 f303 	mul.w	r3, r2, r3
 8009018:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	1e5a      	subs	r2, r3, #1
 800901e:	60fa      	str	r2, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009028:	e009      	b.n	800903e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f1      	beq.n	800901a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a06      	ldr	r2, [pc, #24]	; (8009054 <SDMMC_GetCmdError+0x58>)
 800903a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20000000 	.word	0x20000000
 8009050:	10624dd3 	.word	0x10624dd3
 8009054:	002000c5 	.word	0x002000c5

08009058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009064:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	f043 0201 	orr.w	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009086:	b084      	sub	sp, #16
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	f107 001c 	add.w	r0, r7, #28
 8009094:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e008      	b.n	80090b4 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff ffd8 	bl	8009058 <USB_CoreReset>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090be:	b004      	add	sp, #16
 80090c0:	4770      	bx	lr

080090c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80090ca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80090ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	43db      	mvns	r3, r3
 80090d8:	401a      	ands	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 80090f8:	78fb      	ldrb	r3, [r7, #3]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	641a      	str	r2, [r3, #64]	; 0x40
 800910a:	e00b      	b.n	8009124 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d106      	bne.n	8009120 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	641a      	str	r2, [r3, #64]	; 0x40
 800911e:	e001      	b.n	8009124 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e000      	b.n	8009126 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009132:	b084      	sub	sp, #16
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	f107 001c 	add.w	r0, r7, #28
 8009140:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914e:	f023 0201 	bic.w	r2, r3, #1
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009156:	2100      	movs	r1, #0
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff ffc7 	bl	80090ec <USB_SetCurrentMode>
 800915e:	4603      	mov	r3, r0
 8009160:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8009168:	7bfb      	ldrb	r3, [r7, #15]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009174:	b004      	add	sp, #16
 8009176:	4770      	bx	lr

08009178 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009184:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
	...

0800919c <__errno>:
 800919c:	4b01      	ldr	r3, [pc, #4]	; (80091a4 <__errno+0x8>)
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	2000000c 	.word	0x2000000c

080091a8 <__libc_init_array>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	4d0d      	ldr	r5, [pc, #52]	; (80091e0 <__libc_init_array+0x38>)
 80091ac:	2600      	movs	r6, #0
 80091ae:	4c0d      	ldr	r4, [pc, #52]	; (80091e4 <__libc_init_array+0x3c>)
 80091b0:	1b64      	subs	r4, r4, r5
 80091b2:	10a4      	asrs	r4, r4, #2
 80091b4:	42a6      	cmp	r6, r4
 80091b6:	d109      	bne.n	80091cc <__libc_init_array+0x24>
 80091b8:	4d0b      	ldr	r5, [pc, #44]	; (80091e8 <__libc_init_array+0x40>)
 80091ba:	2600      	movs	r6, #0
 80091bc:	4c0b      	ldr	r4, [pc, #44]	; (80091ec <__libc_init_array+0x44>)
 80091be:	f000 fc9d 	bl	8009afc <_init>
 80091c2:	1b64      	subs	r4, r4, r5
 80091c4:	10a4      	asrs	r4, r4, #2
 80091c6:	42a6      	cmp	r6, r4
 80091c8:	d105      	bne.n	80091d6 <__libc_init_array+0x2e>
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d0:	3601      	adds	r6, #1
 80091d2:	4798      	blx	r3
 80091d4:	e7ee      	b.n	80091b4 <__libc_init_array+0xc>
 80091d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091da:	3601      	adds	r6, #1
 80091dc:	4798      	blx	r3
 80091de:	e7f2      	b.n	80091c6 <__libc_init_array+0x1e>
 80091e0:	08009c6c 	.word	0x08009c6c
 80091e4:	08009c6c 	.word	0x08009c6c
 80091e8:	08009c6c 	.word	0x08009c6c
 80091ec:	08009c70 	.word	0x08009c70

080091f0 <memset>:
 80091f0:	4402      	add	r2, r0
 80091f2:	4603      	mov	r3, r0
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d100      	bne.n	80091fa <memset+0xa>
 80091f8:	4770      	bx	lr
 80091fa:	f803 1b01 	strb.w	r1, [r3], #1
 80091fe:	e7f9      	b.n	80091f4 <memset+0x4>

08009200 <siprintf>:
 8009200:	b40e      	push	{r1, r2, r3}
 8009202:	b500      	push	{lr}
 8009204:	b09c      	sub	sp, #112	; 0x70
 8009206:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800920a:	ab1d      	add	r3, sp, #116	; 0x74
 800920c:	9002      	str	r0, [sp, #8]
 800920e:	9006      	str	r0, [sp, #24]
 8009210:	9107      	str	r1, [sp, #28]
 8009212:	9104      	str	r1, [sp, #16]
 8009214:	4808      	ldr	r0, [pc, #32]	; (8009238 <siprintf+0x38>)
 8009216:	4909      	ldr	r1, [pc, #36]	; (800923c <siprintf+0x3c>)
 8009218:	f853 2b04 	ldr.w	r2, [r3], #4
 800921c:	9105      	str	r1, [sp, #20]
 800921e:	a902      	add	r1, sp, #8
 8009220:	6800      	ldr	r0, [r0, #0]
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	f000 f868 	bl	80092f8 <_svfiprintf_r>
 8009228:	9b02      	ldr	r3, [sp, #8]
 800922a:	2200      	movs	r2, #0
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	b01c      	add	sp, #112	; 0x70
 8009230:	f85d eb04 	ldr.w	lr, [sp], #4
 8009234:	b003      	add	sp, #12
 8009236:	4770      	bx	lr
 8009238:	2000000c 	.word	0x2000000c
 800923c:	ffff0208 	.word	0xffff0208

08009240 <__ssputs_r>:
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	688e      	ldr	r6, [r1, #8]
 8009246:	4682      	mov	sl, r0
 8009248:	460c      	mov	r4, r1
 800924a:	4690      	mov	r8, r2
 800924c:	429e      	cmp	r6, r3
 800924e:	461f      	mov	r7, r3
 8009250:	d838      	bhi.n	80092c4 <__ssputs_r+0x84>
 8009252:	898a      	ldrh	r2, [r1, #12]
 8009254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009258:	d032      	beq.n	80092c0 <__ssputs_r+0x80>
 800925a:	6825      	ldr	r5, [r4, #0]
 800925c:	3301      	adds	r3, #1
 800925e:	6909      	ldr	r1, [r1, #16]
 8009260:	eba5 0901 	sub.w	r9, r5, r1
 8009264:	6965      	ldr	r5, [r4, #20]
 8009266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800926a:	444b      	add	r3, r9
 800926c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009270:	106d      	asrs	r5, r5, #1
 8009272:	429d      	cmp	r5, r3
 8009274:	bf38      	it	cc
 8009276:	461d      	movcc	r5, r3
 8009278:	0553      	lsls	r3, r2, #21
 800927a:	d531      	bpl.n	80092e0 <__ssputs_r+0xa0>
 800927c:	4629      	mov	r1, r5
 800927e:	f000 fb73 	bl	8009968 <_malloc_r>
 8009282:	4606      	mov	r6, r0
 8009284:	b950      	cbnz	r0, 800929c <__ssputs_r+0x5c>
 8009286:	230c      	movs	r3, #12
 8009288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800928c:	f8ca 3000 	str.w	r3, [sl]
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	464a      	mov	r2, r9
 800929e:	6921      	ldr	r1, [r4, #16]
 80092a0:	f000 face 	bl	8009840 <memcpy>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ae:	81a3      	strh	r3, [r4, #12]
 80092b0:	6126      	str	r6, [r4, #16]
 80092b2:	444e      	add	r6, r9
 80092b4:	6165      	str	r5, [r4, #20]
 80092b6:	eba5 0509 	sub.w	r5, r5, r9
 80092ba:	6026      	str	r6, [r4, #0]
 80092bc:	463e      	mov	r6, r7
 80092be:	60a5      	str	r5, [r4, #8]
 80092c0:	42be      	cmp	r6, r7
 80092c2:	d900      	bls.n	80092c6 <__ssputs_r+0x86>
 80092c4:	463e      	mov	r6, r7
 80092c6:	4632      	mov	r2, r6
 80092c8:	4641      	mov	r1, r8
 80092ca:	6820      	ldr	r0, [r4, #0]
 80092cc:	f000 fac5 	bl	800985a <memmove>
 80092d0:	68a3      	ldr	r3, [r4, #8]
 80092d2:	2000      	movs	r0, #0
 80092d4:	1b9b      	subs	r3, r3, r6
 80092d6:	60a3      	str	r3, [r4, #8]
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	4433      	add	r3, r6
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	e7db      	b.n	8009298 <__ssputs_r+0x58>
 80092e0:	462a      	mov	r2, r5
 80092e2:	f000 fbb5 	bl	8009a50 <_realloc_r>
 80092e6:	4606      	mov	r6, r0
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d1e1      	bne.n	80092b0 <__ssputs_r+0x70>
 80092ec:	6921      	ldr	r1, [r4, #16]
 80092ee:	4650      	mov	r0, sl
 80092f0:	f000 face 	bl	8009890 <_free_r>
 80092f4:	e7c7      	b.n	8009286 <__ssputs_r+0x46>
	...

080092f8 <_svfiprintf_r>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	4698      	mov	r8, r3
 80092fe:	898b      	ldrh	r3, [r1, #12]
 8009300:	b09d      	sub	sp, #116	; 0x74
 8009302:	4607      	mov	r7, r0
 8009304:	061b      	lsls	r3, r3, #24
 8009306:	460d      	mov	r5, r1
 8009308:	4614      	mov	r4, r2
 800930a:	d50e      	bpl.n	800932a <_svfiprintf_r+0x32>
 800930c:	690b      	ldr	r3, [r1, #16]
 800930e:	b963      	cbnz	r3, 800932a <_svfiprintf_r+0x32>
 8009310:	2140      	movs	r1, #64	; 0x40
 8009312:	f000 fb29 	bl	8009968 <_malloc_r>
 8009316:	6028      	str	r0, [r5, #0]
 8009318:	6128      	str	r0, [r5, #16]
 800931a:	b920      	cbnz	r0, 8009326 <_svfiprintf_r+0x2e>
 800931c:	230c      	movs	r3, #12
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009324:	e0d1      	b.n	80094ca <_svfiprintf_r+0x1d2>
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	616b      	str	r3, [r5, #20]
 800932a:	2300      	movs	r3, #0
 800932c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009330:	f04f 0901 	mov.w	r9, #1
 8009334:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80094e4 <_svfiprintf_r+0x1ec>
 8009338:	9309      	str	r3, [sp, #36]	; 0x24
 800933a:	2320      	movs	r3, #32
 800933c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009340:	2330      	movs	r3, #48	; 0x30
 8009342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009346:	4623      	mov	r3, r4
 8009348:	469a      	mov	sl, r3
 800934a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800934e:	b10a      	cbz	r2, 8009354 <_svfiprintf_r+0x5c>
 8009350:	2a25      	cmp	r2, #37	; 0x25
 8009352:	d1f9      	bne.n	8009348 <_svfiprintf_r+0x50>
 8009354:	ebba 0b04 	subs.w	fp, sl, r4
 8009358:	d00b      	beq.n	8009372 <_svfiprintf_r+0x7a>
 800935a:	465b      	mov	r3, fp
 800935c:	4622      	mov	r2, r4
 800935e:	4629      	mov	r1, r5
 8009360:	4638      	mov	r0, r7
 8009362:	f7ff ff6d 	bl	8009240 <__ssputs_r>
 8009366:	3001      	adds	r0, #1
 8009368:	f000 80aa 	beq.w	80094c0 <_svfiprintf_r+0x1c8>
 800936c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800936e:	445a      	add	r2, fp
 8009370:	9209      	str	r2, [sp, #36]	; 0x24
 8009372:	f89a 3000 	ldrb.w	r3, [sl]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 80a2 	beq.w	80094c0 <_svfiprintf_r+0x1c8>
 800937c:	2300      	movs	r3, #0
 800937e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009382:	f10a 0a01 	add.w	sl, sl, #1
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	9307      	str	r3, [sp, #28]
 800938a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800938e:	931a      	str	r3, [sp, #104]	; 0x68
 8009390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009394:	4654      	mov	r4, sl
 8009396:	2205      	movs	r2, #5
 8009398:	4852      	ldr	r0, [pc, #328]	; (80094e4 <_svfiprintf_r+0x1ec>)
 800939a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939e:	f000 fa41 	bl	8009824 <memchr>
 80093a2:	9a04      	ldr	r2, [sp, #16]
 80093a4:	b9d8      	cbnz	r0, 80093de <_svfiprintf_r+0xe6>
 80093a6:	06d0      	lsls	r0, r2, #27
 80093a8:	bf44      	itt	mi
 80093aa:	2320      	movmi	r3, #32
 80093ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b0:	0711      	lsls	r1, r2, #28
 80093b2:	bf44      	itt	mi
 80093b4:	232b      	movmi	r3, #43	; 0x2b
 80093b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ba:	f89a 3000 	ldrb.w	r3, [sl]
 80093be:	2b2a      	cmp	r3, #42	; 0x2a
 80093c0:	d015      	beq.n	80093ee <_svfiprintf_r+0xf6>
 80093c2:	9a07      	ldr	r2, [sp, #28]
 80093c4:	4654      	mov	r4, sl
 80093c6:	2000      	movs	r0, #0
 80093c8:	f04f 0c0a 	mov.w	ip, #10
 80093cc:	4621      	mov	r1, r4
 80093ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d2:	3b30      	subs	r3, #48	; 0x30
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	d94e      	bls.n	8009476 <_svfiprintf_r+0x17e>
 80093d8:	b1b0      	cbz	r0, 8009408 <_svfiprintf_r+0x110>
 80093da:	9207      	str	r2, [sp, #28]
 80093dc:	e014      	b.n	8009408 <_svfiprintf_r+0x110>
 80093de:	eba0 0308 	sub.w	r3, r0, r8
 80093e2:	46a2      	mov	sl, r4
 80093e4:	fa09 f303 	lsl.w	r3, r9, r3
 80093e8:	4313      	orrs	r3, r2
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	e7d2      	b.n	8009394 <_svfiprintf_r+0x9c>
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	1d19      	adds	r1, r3, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	9103      	str	r1, [sp, #12]
 80093f8:	bfbb      	ittet	lt
 80093fa:	425b      	neglt	r3, r3
 80093fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009400:	9307      	strge	r3, [sp, #28]
 8009402:	9307      	strlt	r3, [sp, #28]
 8009404:	bfb8      	it	lt
 8009406:	9204      	strlt	r2, [sp, #16]
 8009408:	7823      	ldrb	r3, [r4, #0]
 800940a:	2b2e      	cmp	r3, #46	; 0x2e
 800940c:	d10c      	bne.n	8009428 <_svfiprintf_r+0x130>
 800940e:	7863      	ldrb	r3, [r4, #1]
 8009410:	2b2a      	cmp	r3, #42	; 0x2a
 8009412:	d135      	bne.n	8009480 <_svfiprintf_r+0x188>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	3402      	adds	r4, #2
 8009418:	1d1a      	adds	r2, r3, #4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	9203      	str	r2, [sp, #12]
 8009420:	bfb8      	it	lt
 8009422:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009426:	9305      	str	r3, [sp, #20]
 8009428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094f4 <_svfiprintf_r+0x1fc>
 800942c:	2203      	movs	r2, #3
 800942e:	7821      	ldrb	r1, [r4, #0]
 8009430:	4650      	mov	r0, sl
 8009432:	f000 f9f7 	bl	8009824 <memchr>
 8009436:	b140      	cbz	r0, 800944a <_svfiprintf_r+0x152>
 8009438:	2340      	movs	r3, #64	; 0x40
 800943a:	eba0 000a 	sub.w	r0, r0, sl
 800943e:	3401      	adds	r4, #1
 8009440:	fa03 f000 	lsl.w	r0, r3, r0
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	4303      	orrs	r3, r0
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944e:	2206      	movs	r2, #6
 8009450:	4825      	ldr	r0, [pc, #148]	; (80094e8 <_svfiprintf_r+0x1f0>)
 8009452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009456:	f000 f9e5 	bl	8009824 <memchr>
 800945a:	2800      	cmp	r0, #0
 800945c:	d038      	beq.n	80094d0 <_svfiprintf_r+0x1d8>
 800945e:	4b23      	ldr	r3, [pc, #140]	; (80094ec <_svfiprintf_r+0x1f4>)
 8009460:	bb1b      	cbnz	r3, 80094aa <_svfiprintf_r+0x1b2>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	3307      	adds	r3, #7
 8009466:	f023 0307 	bic.w	r3, r3, #7
 800946a:	3308      	adds	r3, #8
 800946c:	9303      	str	r3, [sp, #12]
 800946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009470:	4433      	add	r3, r6
 8009472:	9309      	str	r3, [sp, #36]	; 0x24
 8009474:	e767      	b.n	8009346 <_svfiprintf_r+0x4e>
 8009476:	fb0c 3202 	mla	r2, ip, r2, r3
 800947a:	460c      	mov	r4, r1
 800947c:	2001      	movs	r0, #1
 800947e:	e7a5      	b.n	80093cc <_svfiprintf_r+0xd4>
 8009480:	2300      	movs	r3, #0
 8009482:	3401      	adds	r4, #1
 8009484:	f04f 0c0a 	mov.w	ip, #10
 8009488:	4619      	mov	r1, r3
 800948a:	9305      	str	r3, [sp, #20]
 800948c:	4620      	mov	r0, r4
 800948e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009492:	3a30      	subs	r2, #48	; 0x30
 8009494:	2a09      	cmp	r2, #9
 8009496:	d903      	bls.n	80094a0 <_svfiprintf_r+0x1a8>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0c5      	beq.n	8009428 <_svfiprintf_r+0x130>
 800949c:	9105      	str	r1, [sp, #20]
 800949e:	e7c3      	b.n	8009428 <_svfiprintf_r+0x130>
 80094a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a4:	4604      	mov	r4, r0
 80094a6:	2301      	movs	r3, #1
 80094a8:	e7f0      	b.n	800948c <_svfiprintf_r+0x194>
 80094aa:	ab03      	add	r3, sp, #12
 80094ac:	462a      	mov	r2, r5
 80094ae:	a904      	add	r1, sp, #16
 80094b0:	4638      	mov	r0, r7
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4b0e      	ldr	r3, [pc, #56]	; (80094f0 <_svfiprintf_r+0x1f8>)
 80094b6:	e000      	b.n	80094ba <_svfiprintf_r+0x1c2>
 80094b8:	bf00      	nop
 80094ba:	1c42      	adds	r2, r0, #1
 80094bc:	4606      	mov	r6, r0
 80094be:	d1d6      	bne.n	800946e <_svfiprintf_r+0x176>
 80094c0:	89ab      	ldrh	r3, [r5, #12]
 80094c2:	065b      	lsls	r3, r3, #25
 80094c4:	f53f af2c 	bmi.w	8009320 <_svfiprintf_r+0x28>
 80094c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ca:	b01d      	add	sp, #116	; 0x74
 80094cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d0:	ab03      	add	r3, sp, #12
 80094d2:	462a      	mov	r2, r5
 80094d4:	a904      	add	r1, sp, #16
 80094d6:	4638      	mov	r0, r7
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <_svfiprintf_r+0x1f8>)
 80094dc:	f000 f87c 	bl	80095d8 <_printf_i>
 80094e0:	e7eb      	b.n	80094ba <_svfiprintf_r+0x1c2>
 80094e2:	bf00      	nop
 80094e4:	08009c30 	.word	0x08009c30
 80094e8:	08009c3a 	.word	0x08009c3a
 80094ec:	00000000 	.word	0x00000000
 80094f0:	08009241 	.word	0x08009241
 80094f4:	08009c36 	.word	0x08009c36

080094f8 <_printf_common>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	4616      	mov	r6, r2
 80094fe:	4699      	mov	r9, r3
 8009500:	688a      	ldr	r2, [r1, #8]
 8009502:	4607      	mov	r7, r0
 8009504:	690b      	ldr	r3, [r1, #16]
 8009506:	460c      	mov	r4, r1
 8009508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800950c:	4293      	cmp	r3, r2
 800950e:	bfb8      	it	lt
 8009510:	4613      	movlt	r3, r2
 8009512:	6033      	str	r3, [r6, #0]
 8009514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009518:	b10a      	cbz	r2, 800951e <_printf_common+0x26>
 800951a:	3301      	adds	r3, #1
 800951c:	6033      	str	r3, [r6, #0]
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	0699      	lsls	r1, r3, #26
 8009522:	bf42      	ittt	mi
 8009524:	6833      	ldrmi	r3, [r6, #0]
 8009526:	3302      	addmi	r3, #2
 8009528:	6033      	strmi	r3, [r6, #0]
 800952a:	6825      	ldr	r5, [r4, #0]
 800952c:	f015 0506 	ands.w	r5, r5, #6
 8009530:	d106      	bne.n	8009540 <_printf_common+0x48>
 8009532:	f104 0a19 	add.w	sl, r4, #25
 8009536:	68e3      	ldr	r3, [r4, #12]
 8009538:	6832      	ldr	r2, [r6, #0]
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	42ab      	cmp	r3, r5
 800953e:	dc29      	bgt.n	8009594 <_printf_common+0x9c>
 8009540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009544:	1e13      	subs	r3, r2, #0
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	bf18      	it	ne
 800954a:	2301      	movne	r3, #1
 800954c:	0692      	lsls	r2, r2, #26
 800954e:	d42e      	bmi.n	80095ae <_printf_common+0xb6>
 8009550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009554:	4649      	mov	r1, r9
 8009556:	4638      	mov	r0, r7
 8009558:	47c0      	blx	r8
 800955a:	3001      	adds	r0, #1
 800955c:	d021      	beq.n	80095a2 <_printf_common+0xaa>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	341a      	adds	r4, #26
 8009562:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8009566:	f003 0306 	and.w	r3, r3, #6
 800956a:	6832      	ldr	r2, [r6, #0]
 800956c:	2600      	movs	r6, #0
 800956e:	2b04      	cmp	r3, #4
 8009570:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009574:	bf08      	it	eq
 8009576:	1aad      	subeq	r5, r5, r2
 8009578:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800957c:	bf14      	ite	ne
 800957e:	2500      	movne	r5, #0
 8009580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009584:	4293      	cmp	r3, r2
 8009586:	bfc4      	itt	gt
 8009588:	1a9b      	subgt	r3, r3, r2
 800958a:	18ed      	addgt	r5, r5, r3
 800958c:	42b5      	cmp	r5, r6
 800958e:	d11a      	bne.n	80095c6 <_printf_common+0xce>
 8009590:	2000      	movs	r0, #0
 8009592:	e008      	b.n	80095a6 <_printf_common+0xae>
 8009594:	2301      	movs	r3, #1
 8009596:	4652      	mov	r2, sl
 8009598:	4649      	mov	r1, r9
 800959a:	4638      	mov	r0, r7
 800959c:	47c0      	blx	r8
 800959e:	3001      	adds	r0, #1
 80095a0:	d103      	bne.n	80095aa <_printf_common+0xb2>
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095aa:	3501      	adds	r5, #1
 80095ac:	e7c3      	b.n	8009536 <_printf_common+0x3e>
 80095ae:	18e1      	adds	r1, r4, r3
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	2030      	movs	r0, #48	; 0x30
 80095b4:	3302      	adds	r3, #2
 80095b6:	4422      	add	r2, r4
 80095b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095c4:	e7c4      	b.n	8009550 <_printf_common+0x58>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4622      	mov	r2, r4
 80095ca:	4649      	mov	r1, r9
 80095cc:	4638      	mov	r0, r7
 80095ce:	47c0      	blx	r8
 80095d0:	3001      	adds	r0, #1
 80095d2:	d0e6      	beq.n	80095a2 <_printf_common+0xaa>
 80095d4:	3601      	adds	r6, #1
 80095d6:	e7d9      	b.n	800958c <_printf_common+0x94>

080095d8 <_printf_i>:
 80095d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	7e0f      	ldrb	r7, [r1, #24]
 80095de:	4691      	mov	r9, r2
 80095e0:	4680      	mov	r8, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	2f78      	cmp	r7, #120	; 0x78
 80095e6:	469a      	mov	sl, r3
 80095e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095ee:	d807      	bhi.n	8009600 <_printf_i+0x28>
 80095f0:	2f62      	cmp	r7, #98	; 0x62
 80095f2:	d80a      	bhi.n	800960a <_printf_i+0x32>
 80095f4:	2f00      	cmp	r7, #0
 80095f6:	f000 80d8 	beq.w	80097aa <_printf_i+0x1d2>
 80095fa:	2f58      	cmp	r7, #88	; 0x58
 80095fc:	f000 80a3 	beq.w	8009746 <_printf_i+0x16e>
 8009600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009608:	e03a      	b.n	8009680 <_printf_i+0xa8>
 800960a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800960e:	2b15      	cmp	r3, #21
 8009610:	d8f6      	bhi.n	8009600 <_printf_i+0x28>
 8009612:	a101      	add	r1, pc, #4	; (adr r1, 8009618 <_printf_i+0x40>)
 8009614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009618:	08009671 	.word	0x08009671
 800961c:	08009685 	.word	0x08009685
 8009620:	08009601 	.word	0x08009601
 8009624:	08009601 	.word	0x08009601
 8009628:	08009601 	.word	0x08009601
 800962c:	08009601 	.word	0x08009601
 8009630:	08009685 	.word	0x08009685
 8009634:	08009601 	.word	0x08009601
 8009638:	08009601 	.word	0x08009601
 800963c:	08009601 	.word	0x08009601
 8009640:	08009601 	.word	0x08009601
 8009644:	08009791 	.word	0x08009791
 8009648:	080096b5 	.word	0x080096b5
 800964c:	08009773 	.word	0x08009773
 8009650:	08009601 	.word	0x08009601
 8009654:	08009601 	.word	0x08009601
 8009658:	080097b3 	.word	0x080097b3
 800965c:	08009601 	.word	0x08009601
 8009660:	080096b5 	.word	0x080096b5
 8009664:	08009601 	.word	0x08009601
 8009668:	08009601 	.word	0x08009601
 800966c:	0800977b 	.word	0x0800977b
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	1d1a      	adds	r2, r3, #4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	602a      	str	r2, [r5, #0]
 8009678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800967c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009680:	2301      	movs	r3, #1
 8009682:	e0a3      	b.n	80097cc <_printf_i+0x1f4>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	6829      	ldr	r1, [r5, #0]
 8009688:	0606      	lsls	r6, r0, #24
 800968a:	f101 0304 	add.w	r3, r1, #4
 800968e:	d50a      	bpl.n	80096a6 <_printf_i+0xce>
 8009690:	680e      	ldr	r6, [r1, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	2e00      	cmp	r6, #0
 8009696:	da03      	bge.n	80096a0 <_printf_i+0xc8>
 8009698:	232d      	movs	r3, #45	; 0x2d
 800969a:	4276      	negs	r6, r6
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a0:	485e      	ldr	r0, [pc, #376]	; (800981c <_printf_i+0x244>)
 80096a2:	230a      	movs	r3, #10
 80096a4:	e019      	b.n	80096da <_printf_i+0x102>
 80096a6:	680e      	ldr	r6, [r1, #0]
 80096a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	bf18      	it	ne
 80096b0:	b236      	sxthne	r6, r6
 80096b2:	e7ef      	b.n	8009694 <_printf_i+0xbc>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	1d19      	adds	r1, r3, #4
 80096ba:	6029      	str	r1, [r5, #0]
 80096bc:	0601      	lsls	r1, r0, #24
 80096be:	d501      	bpl.n	80096c4 <_printf_i+0xec>
 80096c0:	681e      	ldr	r6, [r3, #0]
 80096c2:	e002      	b.n	80096ca <_printf_i+0xf2>
 80096c4:	0646      	lsls	r6, r0, #25
 80096c6:	d5fb      	bpl.n	80096c0 <_printf_i+0xe8>
 80096c8:	881e      	ldrh	r6, [r3, #0]
 80096ca:	2f6f      	cmp	r7, #111	; 0x6f
 80096cc:	4853      	ldr	r0, [pc, #332]	; (800981c <_printf_i+0x244>)
 80096ce:	bf0c      	ite	eq
 80096d0:	2308      	moveq	r3, #8
 80096d2:	230a      	movne	r3, #10
 80096d4:	2100      	movs	r1, #0
 80096d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096da:	6865      	ldr	r5, [r4, #4]
 80096dc:	2d00      	cmp	r5, #0
 80096de:	60a5      	str	r5, [r4, #8]
 80096e0:	bfa2      	ittt	ge
 80096e2:	6821      	ldrge	r1, [r4, #0]
 80096e4:	f021 0104 	bicge.w	r1, r1, #4
 80096e8:	6021      	strge	r1, [r4, #0]
 80096ea:	b90e      	cbnz	r6, 80096f0 <_printf_i+0x118>
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	d04d      	beq.n	800978c <_printf_i+0x1b4>
 80096f0:	4615      	mov	r5, r2
 80096f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80096f6:	fb03 6711 	mls	r7, r3, r1, r6
 80096fa:	5dc7      	ldrb	r7, [r0, r7]
 80096fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009700:	4637      	mov	r7, r6
 8009702:	460e      	mov	r6, r1
 8009704:	42bb      	cmp	r3, r7
 8009706:	d9f4      	bls.n	80096f2 <_printf_i+0x11a>
 8009708:	2b08      	cmp	r3, #8
 800970a:	d10b      	bne.n	8009724 <_printf_i+0x14c>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	07de      	lsls	r6, r3, #31
 8009710:	d508      	bpl.n	8009724 <_printf_i+0x14c>
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	6861      	ldr	r1, [r4, #4]
 8009716:	4299      	cmp	r1, r3
 8009718:	bfde      	ittt	le
 800971a:	2330      	movle	r3, #48	; 0x30
 800971c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009720:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009724:	1b52      	subs	r2, r2, r5
 8009726:	6122      	str	r2, [r4, #16]
 8009728:	464b      	mov	r3, r9
 800972a:	aa03      	add	r2, sp, #12
 800972c:	4621      	mov	r1, r4
 800972e:	4640      	mov	r0, r8
 8009730:	f8cd a000 	str.w	sl, [sp]
 8009734:	f7ff fee0 	bl	80094f8 <_printf_common>
 8009738:	3001      	adds	r0, #1
 800973a:	d14c      	bne.n	80097d6 <_printf_i+0x1fe>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009740:	b004      	add	sp, #16
 8009742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009746:	4835      	ldr	r0, [pc, #212]	; (800981c <_printf_i+0x244>)
 8009748:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800974c:	6829      	ldr	r1, [r5, #0]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	f851 6b04 	ldr.w	r6, [r1], #4
 8009754:	6029      	str	r1, [r5, #0]
 8009756:	061d      	lsls	r5, r3, #24
 8009758:	d514      	bpl.n	8009784 <_printf_i+0x1ac>
 800975a:	07df      	lsls	r7, r3, #31
 800975c:	bf44      	itt	mi
 800975e:	f043 0320 	orrmi.w	r3, r3, #32
 8009762:	6023      	strmi	r3, [r4, #0]
 8009764:	b91e      	cbnz	r6, 800976e <_printf_i+0x196>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	f023 0320 	bic.w	r3, r3, #32
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	2310      	movs	r3, #16
 8009770:	e7b0      	b.n	80096d4 <_printf_i+0xfc>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f043 0320 	orr.w	r3, r3, #32
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	2378      	movs	r3, #120	; 0x78
 800977c:	4828      	ldr	r0, [pc, #160]	; (8009820 <_printf_i+0x248>)
 800977e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009782:	e7e3      	b.n	800974c <_printf_i+0x174>
 8009784:	0659      	lsls	r1, r3, #25
 8009786:	bf48      	it	mi
 8009788:	b2b6      	uxthmi	r6, r6
 800978a:	e7e6      	b.n	800975a <_printf_i+0x182>
 800978c:	4615      	mov	r5, r2
 800978e:	e7bb      	b.n	8009708 <_printf_i+0x130>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	6826      	ldr	r6, [r4, #0]
 8009794:	1d18      	adds	r0, r3, #4
 8009796:	6961      	ldr	r1, [r4, #20]
 8009798:	6028      	str	r0, [r5, #0]
 800979a:	0635      	lsls	r5, r6, #24
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	d501      	bpl.n	80097a4 <_printf_i+0x1cc>
 80097a0:	6019      	str	r1, [r3, #0]
 80097a2:	e002      	b.n	80097aa <_printf_i+0x1d2>
 80097a4:	0670      	lsls	r0, r6, #25
 80097a6:	d5fb      	bpl.n	80097a0 <_printf_i+0x1c8>
 80097a8:	8019      	strh	r1, [r3, #0]
 80097aa:	2300      	movs	r3, #0
 80097ac:	4615      	mov	r5, r2
 80097ae:	6123      	str	r3, [r4, #16]
 80097b0:	e7ba      	b.n	8009728 <_printf_i+0x150>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	2100      	movs	r1, #0
 80097b6:	1d1a      	adds	r2, r3, #4
 80097b8:	602a      	str	r2, [r5, #0]
 80097ba:	681d      	ldr	r5, [r3, #0]
 80097bc:	6862      	ldr	r2, [r4, #4]
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f830 	bl	8009824 <memchr>
 80097c4:	b108      	cbz	r0, 80097ca <_printf_i+0x1f2>
 80097c6:	1b40      	subs	r0, r0, r5
 80097c8:	6060      	str	r0, [r4, #4]
 80097ca:	6863      	ldr	r3, [r4, #4]
 80097cc:	6123      	str	r3, [r4, #16]
 80097ce:	2300      	movs	r3, #0
 80097d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d4:	e7a8      	b.n	8009728 <_printf_i+0x150>
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	462a      	mov	r2, r5
 80097da:	4649      	mov	r1, r9
 80097dc:	4640      	mov	r0, r8
 80097de:	47d0      	blx	sl
 80097e0:	3001      	adds	r0, #1
 80097e2:	d0ab      	beq.n	800973c <_printf_i+0x164>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	079b      	lsls	r3, r3, #30
 80097e8:	d413      	bmi.n	8009812 <_printf_i+0x23a>
 80097ea:	68e0      	ldr	r0, [r4, #12]
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	4298      	cmp	r0, r3
 80097f0:	bfb8      	it	lt
 80097f2:	4618      	movlt	r0, r3
 80097f4:	e7a4      	b.n	8009740 <_printf_i+0x168>
 80097f6:	2301      	movs	r3, #1
 80097f8:	4632      	mov	r2, r6
 80097fa:	4649      	mov	r1, r9
 80097fc:	4640      	mov	r0, r8
 80097fe:	47d0      	blx	sl
 8009800:	3001      	adds	r0, #1
 8009802:	d09b      	beq.n	800973c <_printf_i+0x164>
 8009804:	3501      	adds	r5, #1
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	9903      	ldr	r1, [sp, #12]
 800980a:	1a5b      	subs	r3, r3, r1
 800980c:	42ab      	cmp	r3, r5
 800980e:	dcf2      	bgt.n	80097f6 <_printf_i+0x21e>
 8009810:	e7eb      	b.n	80097ea <_printf_i+0x212>
 8009812:	2500      	movs	r5, #0
 8009814:	f104 0619 	add.w	r6, r4, #25
 8009818:	e7f5      	b.n	8009806 <_printf_i+0x22e>
 800981a:	bf00      	nop
 800981c:	08009c41 	.word	0x08009c41
 8009820:	08009c52 	.word	0x08009c52

08009824 <memchr>:
 8009824:	b2c9      	uxtb	r1, r1
 8009826:	4402      	add	r2, r0
 8009828:	b510      	push	{r4, lr}
 800982a:	4290      	cmp	r0, r2
 800982c:	4603      	mov	r3, r0
 800982e:	d101      	bne.n	8009834 <memchr+0x10>
 8009830:	2300      	movs	r3, #0
 8009832:	e003      	b.n	800983c <memchr+0x18>
 8009834:	781c      	ldrb	r4, [r3, #0]
 8009836:	3001      	adds	r0, #1
 8009838:	428c      	cmp	r4, r1
 800983a:	d1f6      	bne.n	800982a <memchr+0x6>
 800983c:	4618      	mov	r0, r3
 800983e:	bd10      	pop	{r4, pc}

08009840 <memcpy>:
 8009840:	440a      	add	r2, r1
 8009842:	1e43      	subs	r3, r0, #1
 8009844:	4291      	cmp	r1, r2
 8009846:	d100      	bne.n	800984a <memcpy+0xa>
 8009848:	4770      	bx	lr
 800984a:	b510      	push	{r4, lr}
 800984c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009850:	4291      	cmp	r1, r2
 8009852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009856:	d1f9      	bne.n	800984c <memcpy+0xc>
 8009858:	bd10      	pop	{r4, pc}

0800985a <memmove>:
 800985a:	4288      	cmp	r0, r1
 800985c:	b510      	push	{r4, lr}
 800985e:	eb01 0402 	add.w	r4, r1, r2
 8009862:	d902      	bls.n	800986a <memmove+0x10>
 8009864:	4284      	cmp	r4, r0
 8009866:	4623      	mov	r3, r4
 8009868:	d807      	bhi.n	800987a <memmove+0x20>
 800986a:	1e43      	subs	r3, r0, #1
 800986c:	42a1      	cmp	r1, r4
 800986e:	d008      	beq.n	8009882 <memmove+0x28>
 8009870:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009874:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009878:	e7f8      	b.n	800986c <memmove+0x12>
 800987a:	4402      	add	r2, r0
 800987c:	4601      	mov	r1, r0
 800987e:	428a      	cmp	r2, r1
 8009880:	d100      	bne.n	8009884 <memmove+0x2a>
 8009882:	bd10      	pop	{r4, pc}
 8009884:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009888:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800988c:	e7f7      	b.n	800987e <memmove+0x24>
	...

08009890 <_free_r>:
 8009890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009892:	2900      	cmp	r1, #0
 8009894:	d043      	beq.n	800991e <_free_r+0x8e>
 8009896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989a:	1f0c      	subs	r4, r1, #4
 800989c:	9001      	str	r0, [sp, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfb8      	it	lt
 80098a2:	18e4      	addlt	r4, r4, r3
 80098a4:	f000 f914 	bl	8009ad0 <__malloc_lock>
 80098a8:	4a1e      	ldr	r2, [pc, #120]	; (8009924 <_free_r+0x94>)
 80098aa:	9801      	ldr	r0, [sp, #4]
 80098ac:	6813      	ldr	r3, [r2, #0]
 80098ae:	b933      	cbnz	r3, 80098be <_free_r+0x2e>
 80098b0:	6063      	str	r3, [r4, #4]
 80098b2:	6014      	str	r4, [r2, #0]
 80098b4:	b003      	add	sp, #12
 80098b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098ba:	f000 b90f 	b.w	8009adc <__malloc_unlock>
 80098be:	42a3      	cmp	r3, r4
 80098c0:	d908      	bls.n	80098d4 <_free_r+0x44>
 80098c2:	6825      	ldr	r5, [r4, #0]
 80098c4:	1961      	adds	r1, r4, r5
 80098c6:	428b      	cmp	r3, r1
 80098c8:	bf01      	itttt	eq
 80098ca:	6819      	ldreq	r1, [r3, #0]
 80098cc:	685b      	ldreq	r3, [r3, #4]
 80098ce:	1949      	addeq	r1, r1, r5
 80098d0:	6021      	streq	r1, [r4, #0]
 80098d2:	e7ed      	b.n	80098b0 <_free_r+0x20>
 80098d4:	461a      	mov	r2, r3
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	b10b      	cbz	r3, 80098de <_free_r+0x4e>
 80098da:	42a3      	cmp	r3, r4
 80098dc:	d9fa      	bls.n	80098d4 <_free_r+0x44>
 80098de:	6811      	ldr	r1, [r2, #0]
 80098e0:	1855      	adds	r5, r2, r1
 80098e2:	42a5      	cmp	r5, r4
 80098e4:	d10b      	bne.n	80098fe <_free_r+0x6e>
 80098e6:	6824      	ldr	r4, [r4, #0]
 80098e8:	4421      	add	r1, r4
 80098ea:	1854      	adds	r4, r2, r1
 80098ec:	6011      	str	r1, [r2, #0]
 80098ee:	42a3      	cmp	r3, r4
 80098f0:	d1e0      	bne.n	80098b4 <_free_r+0x24>
 80098f2:	681c      	ldr	r4, [r3, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	4421      	add	r1, r4
 80098f8:	6053      	str	r3, [r2, #4]
 80098fa:	6011      	str	r1, [r2, #0]
 80098fc:	e7da      	b.n	80098b4 <_free_r+0x24>
 80098fe:	d902      	bls.n	8009906 <_free_r+0x76>
 8009900:	230c      	movs	r3, #12
 8009902:	6003      	str	r3, [r0, #0]
 8009904:	e7d6      	b.n	80098b4 <_free_r+0x24>
 8009906:	6825      	ldr	r5, [r4, #0]
 8009908:	1961      	adds	r1, r4, r5
 800990a:	428b      	cmp	r3, r1
 800990c:	bf02      	ittt	eq
 800990e:	6819      	ldreq	r1, [r3, #0]
 8009910:	685b      	ldreq	r3, [r3, #4]
 8009912:	1949      	addeq	r1, r1, r5
 8009914:	6063      	str	r3, [r4, #4]
 8009916:	bf08      	it	eq
 8009918:	6021      	streq	r1, [r4, #0]
 800991a:	6054      	str	r4, [r2, #4]
 800991c:	e7ca      	b.n	80098b4 <_free_r+0x24>
 800991e:	b003      	add	sp, #12
 8009920:	bd30      	pop	{r4, r5, pc}
 8009922:	bf00      	nop
 8009924:	20000628 	.word	0x20000628

08009928 <sbrk_aligned>:
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	4e0e      	ldr	r6, [pc, #56]	; (8009964 <sbrk_aligned+0x3c>)
 800992c:	460c      	mov	r4, r1
 800992e:	4605      	mov	r5, r0
 8009930:	6831      	ldr	r1, [r6, #0]
 8009932:	b911      	cbnz	r1, 800993a <sbrk_aligned+0x12>
 8009934:	f000 f8bc 	bl	8009ab0 <_sbrk_r>
 8009938:	6030      	str	r0, [r6, #0]
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 f8b7 	bl	8009ab0 <_sbrk_r>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d00a      	beq.n	800995c <sbrk_aligned+0x34>
 8009946:	1cc4      	adds	r4, r0, #3
 8009948:	f024 0403 	bic.w	r4, r4, #3
 800994c:	42a0      	cmp	r0, r4
 800994e:	d007      	beq.n	8009960 <sbrk_aligned+0x38>
 8009950:	1a21      	subs	r1, r4, r0
 8009952:	4628      	mov	r0, r5
 8009954:	f000 f8ac 	bl	8009ab0 <_sbrk_r>
 8009958:	3001      	adds	r0, #1
 800995a:	d101      	bne.n	8009960 <sbrk_aligned+0x38>
 800995c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009960:	4620      	mov	r0, r4
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	2000062c 	.word	0x2000062c

08009968 <_malloc_r>:
 8009968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996c:	1ccd      	adds	r5, r1, #3
 800996e:	4607      	mov	r7, r0
 8009970:	f025 0503 	bic.w	r5, r5, #3
 8009974:	3508      	adds	r5, #8
 8009976:	2d0c      	cmp	r5, #12
 8009978:	bf38      	it	cc
 800997a:	250c      	movcc	r5, #12
 800997c:	2d00      	cmp	r5, #0
 800997e:	db01      	blt.n	8009984 <_malloc_r+0x1c>
 8009980:	42a9      	cmp	r1, r5
 8009982:	d905      	bls.n	8009990 <_malloc_r+0x28>
 8009984:	230c      	movs	r3, #12
 8009986:	2600      	movs	r6, #0
 8009988:	603b      	str	r3, [r7, #0]
 800998a:	4630      	mov	r0, r6
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	4e2e      	ldr	r6, [pc, #184]	; (8009a4c <_malloc_r+0xe4>)
 8009992:	f000 f89d 	bl	8009ad0 <__malloc_lock>
 8009996:	6833      	ldr	r3, [r6, #0]
 8009998:	461c      	mov	r4, r3
 800999a:	bb34      	cbnz	r4, 80099ea <_malloc_r+0x82>
 800999c:	4629      	mov	r1, r5
 800999e:	4638      	mov	r0, r7
 80099a0:	f7ff ffc2 	bl	8009928 <sbrk_aligned>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	4604      	mov	r4, r0
 80099a8:	d14d      	bne.n	8009a46 <_malloc_r+0xde>
 80099aa:	6834      	ldr	r4, [r6, #0]
 80099ac:	4626      	mov	r6, r4
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	d140      	bne.n	8009a34 <_malloc_r+0xcc>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	4631      	mov	r1, r6
 80099b6:	4638      	mov	r0, r7
 80099b8:	eb04 0803 	add.w	r8, r4, r3
 80099bc:	f000 f878 	bl	8009ab0 <_sbrk_r>
 80099c0:	4580      	cmp	r8, r0
 80099c2:	d13a      	bne.n	8009a3a <_malloc_r+0xd2>
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	3503      	adds	r5, #3
 80099c8:	4638      	mov	r0, r7
 80099ca:	1a6d      	subs	r5, r5, r1
 80099cc:	f025 0503 	bic.w	r5, r5, #3
 80099d0:	3508      	adds	r5, #8
 80099d2:	2d0c      	cmp	r5, #12
 80099d4:	bf38      	it	cc
 80099d6:	250c      	movcc	r5, #12
 80099d8:	4629      	mov	r1, r5
 80099da:	f7ff ffa5 	bl	8009928 <sbrk_aligned>
 80099de:	3001      	adds	r0, #1
 80099e0:	d02b      	beq.n	8009a3a <_malloc_r+0xd2>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	442b      	add	r3, r5
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	e00e      	b.n	8009a08 <_malloc_r+0xa0>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	1b52      	subs	r2, r2, r5
 80099ee:	d41e      	bmi.n	8009a2e <_malloc_r+0xc6>
 80099f0:	2a0b      	cmp	r2, #11
 80099f2:	d916      	bls.n	8009a22 <_malloc_r+0xba>
 80099f4:	1961      	adds	r1, r4, r5
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	6025      	str	r5, [r4, #0]
 80099fa:	bf18      	it	ne
 80099fc:	6059      	strne	r1, [r3, #4]
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	bf08      	it	eq
 8009a02:	6031      	streq	r1, [r6, #0]
 8009a04:	5162      	str	r2, [r4, r5]
 8009a06:	604b      	str	r3, [r1, #4]
 8009a08:	f104 060b 	add.w	r6, r4, #11
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f000 f865 	bl	8009adc <__malloc_unlock>
 8009a12:	1d23      	adds	r3, r4, #4
 8009a14:	f026 0607 	bic.w	r6, r6, #7
 8009a18:	1af2      	subs	r2, r6, r3
 8009a1a:	d0b6      	beq.n	800998a <_malloc_r+0x22>
 8009a1c:	1b9b      	subs	r3, r3, r6
 8009a1e:	50a3      	str	r3, [r4, r2]
 8009a20:	e7b3      	b.n	800998a <_malloc_r+0x22>
 8009a22:	6862      	ldr	r2, [r4, #4]
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	bf0c      	ite	eq
 8009a28:	6032      	streq	r2, [r6, #0]
 8009a2a:	605a      	strne	r2, [r3, #4]
 8009a2c:	e7ec      	b.n	8009a08 <_malloc_r+0xa0>
 8009a2e:	4623      	mov	r3, r4
 8009a30:	6864      	ldr	r4, [r4, #4]
 8009a32:	e7b2      	b.n	800999a <_malloc_r+0x32>
 8009a34:	4634      	mov	r4, r6
 8009a36:	6876      	ldr	r6, [r6, #4]
 8009a38:	e7b9      	b.n	80099ae <_malloc_r+0x46>
 8009a3a:	230c      	movs	r3, #12
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	f000 f84c 	bl	8009adc <__malloc_unlock>
 8009a44:	e7a1      	b.n	800998a <_malloc_r+0x22>
 8009a46:	6025      	str	r5, [r4, #0]
 8009a48:	e7de      	b.n	8009a08 <_malloc_r+0xa0>
 8009a4a:	bf00      	nop
 8009a4c:	20000628 	.word	0x20000628

08009a50 <_realloc_r>:
 8009a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a54:	4680      	mov	r8, r0
 8009a56:	4614      	mov	r4, r2
 8009a58:	460e      	mov	r6, r1
 8009a5a:	b921      	cbnz	r1, 8009a66 <_realloc_r+0x16>
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	f7ff bf81 	b.w	8009968 <_malloc_r>
 8009a66:	b92a      	cbnz	r2, 8009a74 <_realloc_r+0x24>
 8009a68:	4625      	mov	r5, r4
 8009a6a:	f7ff ff11 	bl	8009890 <_free_r>
 8009a6e:	4628      	mov	r0, r5
 8009a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a74:	f000 f838 	bl	8009ae8 <_malloc_usable_size_r>
 8009a78:	4284      	cmp	r4, r0
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	d802      	bhi.n	8009a84 <_realloc_r+0x34>
 8009a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a82:	d812      	bhi.n	8009aaa <_realloc_r+0x5a>
 8009a84:	4621      	mov	r1, r4
 8009a86:	4640      	mov	r0, r8
 8009a88:	f7ff ff6e 	bl	8009968 <_malloc_r>
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d0ed      	beq.n	8009a6e <_realloc_r+0x1e>
 8009a92:	42bc      	cmp	r4, r7
 8009a94:	4622      	mov	r2, r4
 8009a96:	4631      	mov	r1, r6
 8009a98:	bf28      	it	cs
 8009a9a:	463a      	movcs	r2, r7
 8009a9c:	f7ff fed0 	bl	8009840 <memcpy>
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	f7ff fef4 	bl	8009890 <_free_r>
 8009aa8:	e7e1      	b.n	8009a6e <_realloc_r+0x1e>
 8009aaa:	4635      	mov	r5, r6
 8009aac:	e7df      	b.n	8009a6e <_realloc_r+0x1e>
	...

08009ab0 <_sbrk_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	4d05      	ldr	r5, [pc, #20]	; (8009acc <_sbrk_r+0x1c>)
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7f7 fc06 	bl	80012cc <_sbrk>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_sbrk_r+0x1a>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_sbrk_r+0x1a>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20000630 	.word	0x20000630

08009ad0 <__malloc_lock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__malloc_lock+0x8>)
 8009ad2:	f000 b811 	b.w	8009af8 <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20000634 	.word	0x20000634

08009adc <__malloc_unlock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__malloc_unlock+0x8>)
 8009ade:	f000 b80c 	b.w	8009afa <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20000634 	.word	0x20000634

08009ae8 <_malloc_usable_size_r>:
 8009ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aec:	1f18      	subs	r0, r3, #4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	bfbc      	itt	lt
 8009af2:	580b      	ldrlt	r3, [r1, r0]
 8009af4:	18c0      	addlt	r0, r0, r3
 8009af6:	4770      	bx	lr

08009af8 <__retarget_lock_acquire_recursive>:
 8009af8:	4770      	bx	lr

08009afa <__retarget_lock_release_recursive>:
 8009afa:	4770      	bx	lr

08009afc <_init>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	bf00      	nop
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr

08009b08 <_fini>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	bf00      	nop
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr
