
ride-along-module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2f8  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026b  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d79c  0800d79c  0001d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d7a8  0800d7a8  0001d7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800d7ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000635  20000070  0800d81c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  200006a5  0800d81c  000206a5  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023ad5  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e7f  00000000  00000000  00043b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bd8  00000000  00000000  00047a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a30  00000000  00000000  000495d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032ebb  00000000  00000000  0004b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024e57  00000000  00000000  0007dec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137d4e  00000000  00000000  000a2d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001daa68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b04  00000000  00000000  001daab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800d518 	.word	0x0800d518

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800d518 	.word	0x0800d518

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000298:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800029c:	f000 b982 	b.w	80005a4 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002be:	4604      	mov	r4, r0
 80002c0:	460f      	mov	r7, r1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0xa0>
 80002c6:	428a      	cmp	r2, r1
 80002c8:	4694      	mov	ip, r2
 80002ca:	d961      	bls.n	8000390 <__udivmoddi4+0xd8>
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	b143      	cbz	r3, 80002e4 <__udivmoddi4+0x2c>
 80002d2:	f1c3 0120 	rsb	r1, r3, #32
 80002d6:	409f      	lsls	r7, r3
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	409c      	lsls	r4, r3
 80002de:	fa20 f101 	lsr.w	r1, r0, r1
 80002e2:	430f      	orrs	r7, r1
 80002e4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002e8:	fa1f fe8c 	uxth.w	lr, ip
 80002ec:	0c22      	lsrs	r2, r4, #16
 80002ee:	fbb7 f6f1 	udiv	r6, r7, r1
 80002f2:	fb01 7716 	mls	r7, r1, r6, r7
 80002f6:	fb06 f00e 	mul.w	r0, r6, lr
 80002fa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fe:	4290      	cmp	r0, r2
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x5c>
 8000302:	eb1c 0202 	adds.w	r2, ip, r2
 8000306:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x5a>
 800030c:	4290      	cmp	r0, r2
 800030e:	f200 8137 	bhi.w	8000580 <__udivmoddi4+0x2c8>
 8000312:	463e      	mov	r6, r7
 8000314:	1a12      	subs	r2, r2, r0
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb2 f0f1 	udiv	r0, r2, r1
 800031c:	fb01 2210 	mls	r2, r1, r0, r2
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000328:	45a6      	cmp	lr, r4
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x86>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x84>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f200 811c 	bhi.w	8000574 <__udivmoddi4+0x2bc>
 800033c:	4610      	mov	r0, r2
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	eba4 040e 	sub.w	r4, r4, lr
 8000346:	2600      	movs	r6, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0x9a>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c5 4300 	strd	r4, r3, [r5]
 8000352:	4631      	mov	r1, r6
 8000354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000358:	428b      	cmp	r3, r1
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0xb8>
 800035c:	2d00      	cmp	r5, #0
 800035e:	f000 80fd 	beq.w	800055c <__udivmoddi4+0x2a4>
 8000362:	2600      	movs	r6, #0
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	4630      	mov	r0, r6
 800036a:	4631      	mov	r1, r6
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f683 	clz	r6, r3
 8000374:	2e00      	cmp	r6, #0
 8000376:	d14b      	bne.n	8000410 <__udivmoddi4+0x158>
 8000378:	428b      	cmp	r3, r1
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4630      	mov	r0, r6
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0e3      	beq.n	8000352 <__udivmoddi4+0x9a>
 800038a:	e9c5 4700 	strd	r4, r7, [r5]
 800038e:	e7e0      	b.n	8000352 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xdc>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809d 	bne.w	80004d8 <__udivmoddi4+0x220>
 800039e:	1a89      	subs	r1, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b297      	uxth	r7, r2
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f2fe 	udiv	r2, r1, lr
 80003ae:	fb0e 1112 	mls	r1, lr, r2, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb07 f002 	mul.w	r0, r7, r2
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4288      	cmp	r0, r1
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80cf 	beq.w	800057a <__udivmoddi4+0x2c2>
 80003dc:	4642      	mov	r2, r8
 80003de:	1a09      	subs	r1, r1, r0
 80003e0:	b2a4      	uxth	r4, r4
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f2:	42a7      	cmp	r7, r4
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x150>
 80003f6:	eb1c 0404 	adds.w	r4, ip, r4
 80003fa:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14e>
 8000400:	42a7      	cmp	r7, r4
 8000402:	f200 80b4 	bhi.w	800056e <__udivmoddi4+0x2b6>
 8000406:	4608      	mov	r0, r1
 8000408:	1be4      	subs	r4, r4, r7
 800040a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800040e:	e79b      	b.n	8000348 <__udivmoddi4+0x90>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa01 f406 	lsl.w	r4, r1, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	40f9      	lsrs	r1, r7
 8000420:	40b2      	lsls	r2, r6
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa20 f307 	lsr.w	r3, r0, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	431c      	orrs	r4, r3
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	0c20      	lsrs	r0, r4, #16
 800043a:	fbb1 f8f9 	udiv	r8, r1, r9
 800043e:	fb09 1118 	mls	r1, r9, r8, r1
 8000442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000446:	fb08 f00e 	mul.w	r0, r8, lr
 800044a:	4288      	cmp	r0, r1
 800044c:	d90f      	bls.n	800046e <__udivmoddi4+0x1b6>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	4288      	cmp	r0, r1
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ce>
 800046c:	46d0      	mov	r8, sl
 800046e:	1a09      	subs	r1, r1, r0
 8000470:	b2a4      	uxth	r4, r4
 8000472:	fbb1 f0f9 	udiv	r0, r1, r9
 8000476:	fb09 1110 	mls	r1, r9, r0, r1
 800047a:	fb00 fe0e 	mul.w	lr, r0, lr
 800047e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000482:	458e      	cmp	lr, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1de>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800048e:	d201      	bcs.n	8000494 <__udivmoddi4+0x1dc>
 8000490:	458e      	cmp	lr, r1
 8000492:	d87f      	bhi.n	8000594 <__udivmoddi4+0x2dc>
 8000494:	4620      	mov	r0, r4
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	fba0 9802 	umull	r9, r8, r0, r2
 80004a2:	4541      	cmp	r1, r8
 80004a4:	464c      	mov	r4, r9
 80004a6:	46c6      	mov	lr, r8
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0x1f8>
 80004aa:	d106      	bne.n	80004ba <__udivmoddi4+0x202>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d204      	bcs.n	80004ba <__udivmoddi4+0x202>
 80004b0:	3801      	subs	r0, #1
 80004b2:	ebb9 0402 	subs.w	r4, r9, r2
 80004b6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	d070      	beq.n	80005a0 <__udivmoddi4+0x2e8>
 80004be:	1b1a      	subs	r2, r3, r4
 80004c0:	eb61 010e 	sbc.w	r1, r1, lr
 80004c4:	fa22 f306 	lsr.w	r3, r2, r6
 80004c8:	fa01 f707 	lsl.w	r7, r1, r7
 80004cc:	40f1      	lsrs	r1, r6
 80004ce:	2600      	movs	r6, #0
 80004d0:	431f      	orrs	r7, r3
 80004d2:	e9c5 7100 	strd	r7, r1, [r5]
 80004d6:	e73c      	b.n	8000352 <__udivmoddi4+0x9a>
 80004d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004dc:	f1c3 0020 	rsb	r0, r3, #32
 80004e0:	fa01 f203 	lsl.w	r2, r1, r3
 80004e4:	fa21 f600 	lsr.w	r6, r1, r0
 80004e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ec:	fa24 f100 	lsr.w	r1, r4, r0
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	409c      	lsls	r4, r3
 80004f6:	4311      	orrs	r1, r2
 80004f8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004fc:	0c0a      	lsrs	r2, r1, #16
 80004fe:	fb0e 6610 	mls	r6, lr, r0, r6
 8000502:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000506:	fb00 f607 	mul.w	r6, r0, r7
 800050a:	4296      	cmp	r6, r2
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x274>
 800050e:	eb1c 0202 	adds.w	r2, ip, r2
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	4296      	cmp	r6, r2
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x272>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d6>
 800052a:	4640      	mov	r0, r8
 800052c:	1b92      	subs	r2, r2, r6
 800052e:	b289      	uxth	r1, r1
 8000530:	fbb2 f6fe 	udiv	r6, r2, lr
 8000534:	fb0e 2216 	mls	r2, lr, r6, r2
 8000538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800053c:	fb06 f207 	mul.w	r2, r6, r7
 8000540:	428a      	cmp	r2, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x29c>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x29a>
 800054e:	428a      	cmp	r2, r1
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2e2>
 8000552:	4646      	mov	r6, r8
 8000554:	1a89      	subs	r1, r1, r2
 8000556:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055a:	e725      	b.n	80003a8 <__udivmoddi4+0xf0>
 800055c:	462e      	mov	r6, r5
 800055e:	4628      	mov	r0, r5
 8000560:	e6f7      	b.n	8000352 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb61 0303 	sbc.w	r3, r1, r3
 8000568:	2001      	movs	r0, #1
 800056a:	461f      	mov	r7, r3
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xce>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e749      	b.n	8000408 <__udivmoddi4+0x150>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e1      	b.n	800033e <__udivmoddi4+0x86>
 800057a:	3a02      	subs	r2, #2
 800057c:	4461      	add	r1, ip
 800057e:	e72e      	b.n	80003de <__udivmoddi4+0x126>
 8000580:	3e02      	subs	r6, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c6      	b.n	8000314 <__udivmoddi4+0x5c>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b6>
 800058e:	3802      	subs	r0, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x274>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	e77d      	b.n	8000496 <__udivmoddi4+0x1de>
 800059a:	3e02      	subs	r6, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x29c>
 80005a0:	462e      	mov	r6, r5
 80005a2:	e6d6      	b.n	8000352 <__udivmoddi4+0x9a>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <LSM6DSL_config>:

static float accelSensitivity;
static float gyroSensitivity;

void LSM6DSL_config(LSM6DSL_HandleTypeDef* LSM6DSL_initStruct)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	config = LSM6DSL_initStruct;
 80005b0:	4a36      	ldr	r2, [pc, #216]	; (800068c <LSM6DSL_config+0xe4>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]

	switch (config->accelFullScale)
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <LSM6DSL_config+0xe4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7adb      	ldrb	r3, [r3, #11]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d828      	bhi.n	8000612 <LSM6DSL_config+0x6a>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <LSM6DSL_config+0x20>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005f5 	.word	0x080005f5
 80005cc:	08000613 	.word	0x08000613
 80005d0:	08000613 	.word	0x08000613
 80005d4:	08000613 	.word	0x08000613
 80005d8:	0800060d 	.word	0x0800060d
 80005dc:	08000613 	.word	0x08000613
 80005e0:	08000613 	.word	0x08000613
 80005e4:	08000613 	.word	0x08000613
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	08000613 	.word	0x08000613
 80005f0:	08000605 	.word	0x08000605
	{
		case LSM6DSL_ACCEL_FS_PM_2:
			accelSensitivity = 0.061f;
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <LSM6DSL_config+0xe8>)
 80005f6:	4a27      	ldr	r2, [pc, #156]	; (8000694 <LSM6DSL_config+0xec>)
 80005f8:	601a      	str	r2, [r3, #0]
			break;
 80005fa:	e00a      	b.n	8000612 <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_4:
			accelSensitivity = 0.122f;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <LSM6DSL_config+0xe8>)
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <LSM6DSL_config+0xf0>)
 8000600:	601a      	str	r2, [r3, #0]
			break;
 8000602:	e006      	b.n	8000612 <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_8:
			accelSensitivity = 0.244f;
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <LSM6DSL_config+0xe8>)
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <LSM6DSL_config+0xf4>)
 8000608:	601a      	str	r2, [r3, #0]
			break;
 800060a:	e002      	b.n	8000612 <LSM6DSL_config+0x6a>
		case LSM6DSL_ACCEL_FS_PM_16:
			accelSensitivity = 0.488f;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <LSM6DSL_config+0xe8>)
 800060e:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <LSM6DSL_config+0xf8>)
 8000610:	601a      	str	r2, [r3, #0]
	}

	switch (config->gyroFullScale)
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <LSM6DSL_config+0xe4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7b1b      	ldrb	r3, [r3, #12]
 8000618:	2b0c      	cmp	r3, #12
 800061a:	d831      	bhi.n	8000680 <LSM6DSL_config+0xd8>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <LSM6DSL_config+0x7c>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000661 	.word	0x08000661
 8000628:	08000681 	.word	0x08000681
 800062c:	08000659 	.word	0x08000659
 8000630:	08000681 	.word	0x08000681
 8000634:	08000669 	.word	0x08000669
 8000638:	08000681 	.word	0x08000681
 800063c:	08000681 	.word	0x08000681
 8000640:	08000681 	.word	0x08000681
 8000644:	08000671 	.word	0x08000671
 8000648:	08000681 	.word	0x08000681
 800064c:	08000681 	.word	0x08000681
 8000650:	08000681 	.word	0x08000681
 8000654:	08000679 	.word	0x08000679
	{
		case LSM6DSL_GYRO_FS_PM_125:
			gyroSensitivity = 4.375f;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <LSM6DSL_config+0xfc>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <LSM6DSL_config+0x100>)
 800065c:	601a      	str	r2, [r3, #0]
			break;
 800065e:	e00f      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_250:	
			gyroSensitivity = 8.75f;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <LSM6DSL_config+0xfc>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <LSM6DSL_config+0x104>)
 8000664:	601a      	str	r2, [r3, #0]
			break;
 8000666:	e00b      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_500:	
			gyroSensitivity = 17.50f;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <LSM6DSL_config+0xfc>)
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <LSM6DSL_config+0x108>)
 800066c:	601a      	str	r2, [r3, #0]
			break;
 800066e:	e007      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_1000:	
			gyroSensitivity = 35.0f;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <LSM6DSL_config+0xfc>)
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <LSM6DSL_config+0x10c>)
 8000674:	601a      	str	r2, [r3, #0]
			break;
 8000676:	e003      	b.n	8000680 <LSM6DSL_config+0xd8>
		case LSM6DSL_GYRO_FS_PM_2000:	
			gyroSensitivity = 70.0f;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <LSM6DSL_config+0xfc>)
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <LSM6DSL_config+0x110>)
 800067c:	601a      	str	r2, [r3, #0]
	}
}
 800067e:	e7ff      	b.n	8000680 <LSM6DSL_config+0xd8>
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000008c 	.word	0x2000008c
 8000690:	200000a0 	.word	0x200000a0
 8000694:	3d79db23 	.word	0x3d79db23
 8000698:	3df9db23 	.word	0x3df9db23
 800069c:	3e79db23 	.word	0x3e79db23
 80006a0:	3ef9db23 	.word	0x3ef9db23
 80006a4:	200000a4 	.word	0x200000a4
 80006a8:	408c0000 	.word	0x408c0000
 80006ac:	410c0000 	.word	0x410c0000
 80006b0:	418c0000 	.word	0x418c0000
 80006b4:	420c0000 	.word	0x420c0000
 80006b8:	428c0000 	.word	0x428c0000

080006bc <LSM6DSL_init>:

void LSM6DSL_init()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	LSM6DSL_disable();
 80006c0:	f000 f896 	bl	80007f0 <LSM6DSL_disable>

	// Send software reset
	LSM6DSL_writeRegister(LSM6DSL_CTRL3_C, LSM6DSL_SW_RESET);
 80006c4:	2101      	movs	r1, #1
 80006c6:	2012      	movs	r0, #18
 80006c8:	f000 f824 	bl	8000714 <LSM6DSL_writeRegister>

	// Configure interrupts when data is ready
	LSM6DSL_writeRegister(LSM6DSL_INT1_CTRL, LSM6DSL_ACCEL_READY);
 80006cc:	2101      	movs	r1, #1
 80006ce:	200d      	movs	r0, #13
 80006d0:	f000 f820 	bl	8000714 <LSM6DSL_writeRegister>
	LSM6DSL_writeRegister(LSM6DSL_INT2_CTRL, LSM6DSL_GYRO_READY);
 80006d4:	2102      	movs	r1, #2
 80006d6:	200e      	movs	r0, #14
 80006d8:	f000 f81c 	bl	8000714 <LSM6DSL_writeRegister>

	// Configure data rate and measurement scale
	LSM6DSL_writeRegister(LSM6DSL_CTRL1_XL, config->outputDataRate | config->accelFullScale);
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <LSM6DSL_init+0x54>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	7a9a      	ldrb	r2, [r3, #10]
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <LSM6DSL_init+0x54>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	7adb      	ldrb	r3, [r3, #11]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	2010      	movs	r0, #16
 80006f0:	f000 f810 	bl	8000714 <LSM6DSL_writeRegister>
	LSM6DSL_writeRegister(LSM6DSL_CTRL2_G, config->outputDataRate | config->gyroFullScale);
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <LSM6DSL_init+0x54>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7a9a      	ldrb	r2, [r3, #10]
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <LSM6DSL_init+0x54>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	7b1b      	ldrb	r3, [r3, #12]
 8000700:	4313      	orrs	r3, r2
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	2011      	movs	r0, #17
 8000708:	f000 f804 	bl	8000714 <LSM6DSL_writeRegister>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000008c 	.word	0x2000008c

08000714 <LSM6DSL_writeRegister>:
	gyro[1] = (int16_t)(gyRaw * gyroSensitivity);
	gyro[2] = (int16_t)(gzRaw * gyroSensitivity);
}

void LSM6DSL_writeRegister(uint8_t reg, uint8_t val)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	460a      	mov	r2, r1
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[] = {
		reg & LSM6DSL_WRITE,
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800072a:	b2db      	uxtb	r3, r3
	uint8_t buffer[] = {
 800072c:	733b      	strb	r3, [r7, #12]
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	737b      	strb	r3, [r7, #13]
		val
	};

	LSM6DSL_enable();
 8000732:	f000 f84d 	bl	80007d0 <LSM6DSL_enable>
	HAL_SPI_Transmit(config->spi, &buffer, 2, 100);
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <LSM6DSL_writeRegister+0x40>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	f107 010c 	add.w	r1, r7, #12
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	2202      	movs	r2, #2
 8000744:	f007 fc08 	bl	8007f58 <HAL_SPI_Transmit>
	LSM6DSL_disable();
 8000748:	f000 f852 	bl	80007f0 <LSM6DSL_disable>
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000008c 	.word	0x2000008c

08000758 <LSM6DSL_getAccel>:

	return buffer.result;
}

void LSM6DSL_getAccel(int16_t* dest)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	dest[0] = accel[0];
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <LSM6DSL_getAccel+0x38>)
 8000762:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	801a      	strh	r2, [r3, #0]
	dest[1] = accel[1];
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3302      	adds	r3, #2
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <LSM6DSL_getAccel+0x38>)
 8000770:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000774:	801a      	strh	r2, [r3, #0]
	dest[2] = accel[2];
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3304      	adds	r3, #4
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <LSM6DSL_getAccel+0x38>)
 800077c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000780:	801a      	strh	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000090 	.word	0x20000090

08000794 <LSM6DSL_getGyro>:

void LSM6DSL_getGyro(int16_t* dest)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	dest[0] = gyro[0];
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <LSM6DSL_getGyro+0x38>)
 800079e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	801a      	strh	r2, [r3, #0]
	dest[1] = gyro[1];
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3302      	adds	r3, #2
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <LSM6DSL_getGyro+0x38>)
 80007ac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80007b0:	801a      	strh	r2, [r3, #0]
	dest[2] = gyro[2];
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3304      	adds	r3, #4
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <LSM6DSL_getGyro+0x38>)
 80007b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80007bc:	801a      	strh	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000098 	.word	0x20000098

080007d0 <LSM6DSL_enable>:

void LSM6DSL_enable()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	// Set cs low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <LSM6DSL_enable+0x1c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6858      	ldr	r0, [r3, #4]
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LSM6DSL_enable+0x1c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	891b      	ldrh	r3, [r3, #8]
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	f001 fe74 	bl	80024d0 <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000008c 	.word	0x2000008c

080007f0 <LSM6DSL_disable>:

void LSM6DSL_disable()
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	// Set cs high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <LSM6DSL_disable+0x1c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6858      	ldr	r0, [r3, #4]
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <LSM6DSL_disable+0x1c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	891b      	ldrh	r3, [r3, #8]
 8000800:	2201      	movs	r2, #1
 8000802:	4619      	mov	r1, r3
 8000804:	f001 fe64 	bl	80024d0 <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000008c 	.word	0x2000008c

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	f5ad 6d9e 	sub.w	sp, sp, #1264	; 0x4f0
 8000816:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f001 faf6 	bl	8001e08 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	4b9a      	ldr	r3, [pc, #616]	; (8000a88 <main+0x278>)
 800081e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000822:	4a99      	ldr	r2, [pc, #612]	; (8000a88 <main+0x278>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800082c:	4b96      	ldr	r3, [pc, #600]	; (8000a88 <main+0x278>)
 800082e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000832:	f003 0204 	and.w	r2, r3, #4
 8000836:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800083a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000844:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8000848:	681b      	ldr	r3, [r3, #0]

  // Configure MS5607
	MS5607_HandleTypeDef ms5607Config = {0};
 800084a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  	ms5607Config.spi = &hspi1;
 8000858:	4b8c      	ldr	r3, [pc, #560]	; (8000a8c <main+0x27c>)
 800085a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
  	ms5607Config.timer = &htim16;
 800085e:	4b8c      	ldr	r3, [pc, #560]	; (8000a90 <main+0x280>)
 8000860:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
  	ms5607Config.csPort = GPIOA;
 8000864:	4b8b      	ldr	r3, [pc, #556]	; (8000a94 <main+0x284>)
 8000866:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
  	ms5607Config.csPin = GPIO_PIN_3;
 800086a:	2308      	movs	r3, #8
 800086c:	f8a7 34a4 	strh.w	r3, [r7, #1188]	; 0x4a4
  	ms5607Config.osr = MS5607_OSR_1024;
 8000870:	2304      	movs	r3, #4
 8000872:	f887 34a6 	strb.w	r3, [r7, #1190]	; 0x4a6
	MS5607_config(&ms5607Config);
 8000876:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fbbc 	bl	8000ff8 <MS5607_config>

	LSM6DSL_HandleTypeDef lsm6dslConfig = {0};
 8000880:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
	lsm6dslConfig.spi = &hspi2;
 800088e:	4b82      	ldr	r3, [pc, #520]	; (8000a98 <main+0x288>)
 8000890:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	lsm6dslConfig.csPort = GPIOH;
 8000894:	4b81      	ldr	r3, [pc, #516]	; (8000a9c <main+0x28c>)
 8000896:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
	lsm6dslConfig.csPin = GPIO_PIN_1;
 800089a:	2302      	movs	r3, #2
 800089c:	f8a7 3490 	strh.w	r3, [r7, #1168]	; 0x490
	lsm6dslConfig.outputDataRate = LSM6DSL_ODR_104_HZ;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	f887 3492 	strb.w	r3, [r7, #1170]	; 0x492
	lsm6dslConfig.accelFullScale = LSM6DSL_ACCEL_FS_PM_16;
 80008a6:	2304      	movs	r3, #4
 80008a8:	f887 3493 	strb.w	r3, [r7, #1171]	; 0x493
	lsm6dslConfig.gyroFullScale = LSM6DSL_GYRO_FS_PM_500;
 80008ac:	2304      	movs	r3, #4
 80008ae:	f887 3494 	strb.w	r3, [r7, #1172]	; 0x494
	LSM6DSL_config(&lsm6dslConfig);
 80008b2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe76 	bl	80005a8 <LSM6DSL_config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f902 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f000 fafe 	bl	8000ec0 <MX_GPIO_Init>
  MX_TIM16_Init();
 80008c4:	f000 fa58 	bl	8000d78 <MX_TIM16_Init>
  MX_SPI1_Init();
 80008c8:	f000 f97a 	bl	8000bc0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80008cc:	f000 f9e6 	bl	8000c9c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80008d0:	f000 fa7e 	bl	8000dd0 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80008d4:	f000 f950 	bl	8000b78 <MX_SDMMC1_SD_Init>
  MX_USB_PCD_Init();
 80008d8:	f000 fac6 	bl	8000e68 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  	MS5607_init();
 80008dc:	f000 fbe2 	bl	80010a4 <MS5607_init>
	LSM6DSL_init();
 80008e0:	f7ff feec 	bl	80006bc <LSM6DSL_init>

	MS5607_readUncompPres();
 80008e4:	f000 febc 	bl	8001660 <MS5607_readUncompPres>

	int16_t accel[3];
	int16_t gyro[3];
	
	// Test MicroSD card write
	MX_FATFS_Init();
 80008e8:	f009 fe1e 	bl	800a528 <MX_FATFS_Init>
	FATFS fs;
	FIL file;
	FRESULT res;
	UINT bytesWritten;
	
	res = f_mount(&fs, "", 1);
 80008ec:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80008f0:	2201      	movs	r2, #1
 80008f2:	496b      	ldr	r1, [pc, #428]	; (8000aa0 <main+0x290>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00b fce1 	bl	800c2bc <f_mount>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res != FR_OK)
 8000900:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <main+0xfc>
	{
		Error_Handler();
 8000908:	f000 fb70 	bl	8000fec <Error_Handler>
	}

	res = f_open(&file, "hello.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	220a      	movs	r2, #10
 8000912:	4964      	ldr	r1, [pc, #400]	; (8000aa4 <main+0x294>)
 8000914:	4618      	mov	r0, r3
 8000916:	f00b fd17 	bl	800c348 <f_open>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res != FR_OK)
 8000920:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <main+0x11c>
	{
		Error_Handler();
 8000928:	f000 fb60 	bl	8000fec <Error_Handler>
	}

	const char* fileContents = "Hello world!\n";
 800092c:	4b5e      	ldr	r3, [pc, #376]	; (8000aa8 <main+0x298>)
 800092e:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
	res = f_write(&file, fileContents, strlen(fileContents), &bytesWritten);
 8000932:	f8d7 04e0 	ldr.w	r0, [r7, #1248]	; 0x4e0
 8000936:	f7ff fc9f 	bl	8000278 <strlen>
 800093a:	4602      	mov	r2, r0
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	f107 0018 	add.w	r0, r7, #24
 8000944:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8000948:	f00b febc 	bl	800c6c4 <f_write>
 800094c:	4603      	mov	r3, r0
 800094e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res != FR_OK || bytesWritten != strlen(fileContents))
 8000952:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10b      	bne.n	8000972 <main+0x162>
 800095a:	f8d7 04e0 	ldr.w	r0, [r7, #1248]	; 0x4e0
 800095e:	f7ff fc8b 	bl	8000278 <strlen>
 8000962:	4602      	mov	r2, r0
 8000964:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000968:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	429a      	cmp	r2, r3
 8000970:	d001      	beq.n	8000976 <main+0x166>
	{
		Error_Handler();
 8000972:	f000 fb3b 	bl	8000fec <Error_Handler>
	}

	f_close(&file);
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	4618      	mov	r0, r3
 800097c:	f00c f895 	bl	800caaa <f_close>
	f_mount(NULL, "", 1);
 8000980:	2201      	movs	r2, #1
 8000982:	4947      	ldr	r1, [pc, #284]	; (8000aa0 <main+0x290>)
 8000984:	2000      	movs	r0, #0
 8000986:	f00b fc99 	bl	800c2bc <f_mount>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	
	//writePressure();
	if (MS5607_getState() == MS5607_IDLE)
 800098a:	f000 fec7 	bl	800171c <MS5607_getState>
 800098e:	4603      	mov	r3, r0
 8000990:	2b03      	cmp	r3, #3
 8000992:	d1fa      	bne.n	800098a <main+0x17a>
	{
		// Get result of digital read
		MS5607_RawVal rawVals = MS5607_getRawValues();
 8000994:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000998:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fe9f 	bl	80016e0 <MS5607_getRawValues>

		// Compensate digital reading
		MS5607_CompVal compVals = MS5607_getCompValues(&rawVals);
 80009a2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80009a6:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80009aa:	f107 0208 	add.w	r2, r7, #8
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fbd9 	bl	8001168 <MS5607_getCompValues>

		LSM6DSL_getAccel(&accel);
 80009b6:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fecc 	bl	8000758 <LSM6DSL_getAccel>
		LSM6DSL_getGyro(&gyro);
 80009c0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fee5 	bl	8000794 <LSM6DSL_getGyro>

		uartBufferLen = sprintf(uartBuffer, "Time: %d\n", HAL_GetTick());
 80009ca:	f001 fa95 	bl	8001ef8 <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80009d4:	4935      	ldr	r1, [pc, #212]	; (8000aac <main+0x29c>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f00c f920 	bl	800cc1c <siprintf>
 80009dc:	f8c7 04dc 	str.w	r0, [r7, #1244]	; 0x4dc
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 80009e0:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80009ea:	2364      	movs	r3, #100	; 0x64
 80009ec:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <main+0x2a0>)
 80009ee:	f008 f9ed 	bl	8008dcc <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Pres: %d\n", pressure);
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <main+0x2a4>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80009fa:	492f      	ldr	r1, [pc, #188]	; (8000ab8 <main+0x2a8>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f00c f90d 	bl	800cc1c <siprintf>
 8000a02:	f8c7 04dc 	str.w	r0, [r7, #1244]	; 0x4dc
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000a06:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	4827      	ldr	r0, [pc, #156]	; (8000ab0 <main+0x2a0>)
 8000a14:	f008 f9da 	bl	8008dcc <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Accel: %d %d %d\n", accel[0], accel[1], accel[2]);
 8000a18:	f9b7 3480 	ldrsh.w	r3, [r7, #1152]	; 0x480
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	f9b7 3482 	ldrsh.w	r3, [r7, #1154]	; 0x482
 8000a22:	4619      	mov	r1, r3
 8000a24:	f9b7 3484 	ldrsh.w	r3, [r7, #1156]	; 0x484
 8000a28:	f507 6095 	add.w	r0, r7, #1192	; 0x4a8
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	4922      	ldr	r1, [pc, #136]	; (8000abc <main+0x2ac>)
 8000a32:	f00c f8f3 	bl	800cc1c <siprintf>
 8000a36:	f8c7 04dc 	str.w	r0, [r7, #1244]	; 0x4dc
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000a3a:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <main+0x2a0>)
 8000a48:	f008 f9c0 	bl	8008dcc <HAL_UART_Transmit>

		uartBufferLen = sprintf(uartBuffer, "Gyro: %d %d %d\n", accel[0], accel[1], accel[2]);
 8000a4c:	f9b7 3480 	ldrsh.w	r3, [r7, #1152]	; 0x480
 8000a50:	461a      	mov	r2, r3
 8000a52:	f9b7 3482 	ldrsh.w	r3, [r7, #1154]	; 0x482
 8000a56:	4619      	mov	r1, r3
 8000a58:	f9b7 3484 	ldrsh.w	r3, [r7, #1156]	; 0x484
 8000a5c:	f507 6095 	add.w	r0, r7, #1192	; 0x4a8
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	460b      	mov	r3, r1
 8000a64:	4916      	ldr	r1, [pc, #88]	; (8000ac0 <main+0x2b0>)
 8000a66:	f00c f8d9 	bl	800cc1c <siprintf>
 8000a6a:	f8c7 04dc 	str.w	r0, [r7, #1244]	; 0x4dc
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, uartBufferLen, 100);
 8000a6e:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8000a78:	2364      	movs	r3, #100	; 0x64
 8000a7a:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <main+0x2a0>)
 8000a7c:	f008 f9a6 	bl	8008dcc <HAL_UART_Transmit>

		// Measure again
		MS5607_readUncompPres();
 8000a80:	f000 fdee 	bl	8001660 <MS5607_readUncompPres>
	if (MS5607_getState() == MS5607_IDLE)
 8000a84:	e781      	b.n	800098a <main+0x17a>
 8000a86:	bf00      	nop
 8000a88:	46020c00 	.word	0x46020c00
 8000a8c:	20000124 	.word	0x20000124
 8000a90:	20000244 	.word	0x20000244
 8000a94:	42020000 	.word	0x42020000
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	42021c00 	.word	0x42021c00
 8000aa0:	0800d530 	.word	0x0800d530
 8000aa4:	0800d534 	.word	0x0800d534
 8000aa8:	0800d540 	.word	0x0800d540
 8000aac:	0800d550 	.word	0x0800d550
 8000ab0:	20000290 	.word	0x20000290
 8000ab4:	20000630 	.word	0x20000630
 8000ab8:	0800d55c 	.word	0x0800d55c
 8000abc:	0800d568 	.word	0x0800d568
 8000ac0:	0800d57c 	.word	0x0800d57c

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09e      	sub	sp, #120	; 0x78
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2260      	movs	r2, #96	; 0x60
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00c f89a 	bl	800cc0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000ae8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000aec:	f001 fe36 	bl	800275c <HAL_PWREx_ControlVoltageScaling>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000af6:	f000 fa79 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000b24:	2306      	movs	r3, #6
 8000b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fead 	bl	8002894 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b40:	f000 fa54 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	231f      	movs	r3, #31
 8000b46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000b50:	2370      	movs	r3, #112	; 0x70
 8000b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000b54:	2370      	movs	r3, #112	; 0x70
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fd73 	bl	800364c <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b6c:	f000 fa3e 	bl	8000fec <Error_Handler>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3778      	adds	r7, #120	; 0x78
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SDMMC1_SD_Init+0x40>)
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MX_SDMMC1_SD_Init+0x44>)
 8000b80:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <MX_SDMMC1_SD_Init+0x40>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SDMMC1_SD_Init+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_SDMMC1_SD_Init+0x40>)
 8000b90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b94:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SDMMC1_SD_Init+0x40>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 15;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SDMMC1_SD_Init+0x40>)
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_SDMMC1_SD_Init+0x40>)
 8000ba4:	f005 fd10 	bl	80065c8 <HAL_SD_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000bae:	f000 fa1d 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000a8 	.word	0x200000a8
 8000bbc:	420c8000 	.word	0x420c8000

08000bc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000bd2:	4a31      	ldr	r2, [pc, #196]	; (8000c98 <MX_SPI1_Init+0xd8>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000bd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000be6:	2207      	movs	r2, #7
 8000be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000bf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c58:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c5a:	f007 f867 	bl	8007d2c <HAL_SPI_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_SPI1_Init+0xa8>
  {
    Error_Handler();
 8000c64:	f000 f9c2 	bl	8000fec <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c70:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_SPI1_Init+0xd4>)
 8000c7c:	f007 fe23 	bl	80088c6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SPI1_Init+0xca>
  {
    Error_Handler();
 8000c86:	f000 f9b1 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000124 	.word	0x20000124
 8000c98:	40013000 	.word	0x40013000

08000c9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <MX_SPI2_Init+0xd8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d38:	f006 fff8 	bl	8007d2c <HAL_SPI_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000d42:	f000 f953 	bl	8000fec <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000d4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_SPI2_Init+0xd4>)
 8000d5a:	f007 fdb4 	bl	80088c6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000d64:	f000 f942 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200001b4 	.word	0x200001b4
 8000d74:	40003800 	.word	0x40003800

08000d78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */
	uint16_t ms5607MeasurementDelay = MS5607_getMeasurementDelay();
 8000d7e:	f000 fcc1 	bl	8001704 <MS5607_getMeasurementDelay>
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000d88:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <MX_TIM16_Init+0x54>)
 8000d8a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000d8e:	22ef      	movs	r2, #239	; 0xef
 8000d90:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = ms5607MeasurementDelay;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000d9c:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_TIM16_Init+0x50>)
 8000db2:	f007 fdc9 	bl	8008948 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM16_Init+0x48>
  {
    Error_Handler();
 8000dbc:	f000 f916 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000244 	.word	0x20000244
 8000dcc:	40014400 	.word	0x40014400

08000dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000dd6:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <MX_USART1_UART_Init+0x94>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000ddc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e18:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e1a:	f007 ff87 	bl	8008d2c <HAL_UART_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e24:	f000 f8e2 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e2c:	f008 fc46 	bl	80096bc <HAL_UARTEx_SetTxFifoThreshold>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e36:	f000 f8d9 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e3e:	f008 fc7b 	bl	8009738 <HAL_UARTEx_SetRxFifoThreshold>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e48:	f000 f8d0 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_USART1_UART_Init+0x90>)
 8000e4e:	f008 fbfc 	bl	800964a <HAL_UARTEx_DisableFifoMode>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e58:	f000 f8c8 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000290 	.word	0x20000290
 8000e64:	40013800 	.word	0x40013800

08000e68 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <MX_USB_PCD_Init+0x54>)
 8000e70:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USB_PCD_Init+0x50>)
 8000ea4:	f001 fb2c 	bl	8002500 <HAL_PCD_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USB_PCD_Init+0x4a>
  {
    Error_Handler();
 8000eae:	f000 f89d 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000324 	.word	0x20000324
 8000ebc:	40016000 	.word	0x40016000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000edc:	4a3e      	ldr	r2, [pc, #248]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ee6:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000efa:	4a37      	ldr	r2, [pc, #220]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f04:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f36:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <MX_GPIO_Init+0x11c>)
 8000f72:	f001 faad 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <MX_GPIO_Init+0x120>)
 8000f7c:	f001 faa8 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f80:	2302      	movs	r3, #2
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_GPIO_Init+0x11c>)
 8000f98:	f001 f8c2 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8000f9c:	2309      	movs	r3, #9
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_GPIO_Init+0x124>)
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <MX_GPIO_Init+0x128>)
 8000fb0:	f001 f8b6 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_GPIO_Init+0x120>)
 8000fcc:	f001 f8a8 	bl	8002120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	46020c00 	.word	0x46020c00
 8000fdc:	42021c00 	.word	0x42021c00
 8000fe0:	42020000 	.word	0x42020000
 8000fe4:	10110000 	.word	0x10110000
 8000fe8:	42020800 	.word	0x42020800

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <MS5607_config>:
static uint16_t measurementDelay;
static uint8_t cmdMeasurePres;
static uint8_t cmdMeasureTemp;

void MS5607_config(MS5607_HandleTypeDef* MS5607_initStruct)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

	config = MS5607_initStruct;
 8001000:	4a24      	ldr	r2, [pc, #144]	; (8001094 <MS5607_config+0x9c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
	
	// Create conversion commands based on OSR
	cmdMeasurePres = MS5607_CONV_PRES | config->osr;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MS5607_config+0x9c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	7b9b      	ldrb	r3, [r3, #14]
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MS5607_config+0xa0>)
 8001014:	701a      	strb	r2, [r3, #0]
	cmdMeasureTemp = MS5607_CONV_TEMP | config->osr;
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MS5607_config+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	7b9b      	ldrb	r3, [r3, #14]
 800101c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MS5607_config+0xa4>)
 8001024:	701a      	strb	r2, [r3, #0]

	// Set measurement delay (ms) based on OSR
	switch (config->osr) 
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MS5607_config+0x9c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	7b9b      	ldrb	r3, [r3, #14]
 800102c:	2b08      	cmp	r3, #8
 800102e:	d82b      	bhi.n	8001088 <MS5607_config+0x90>
 8001030:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <MS5607_config+0x40>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	0800105d 	.word	0x0800105d
 800103c:	08001089 	.word	0x08001089
 8001040:	08001065 	.word	0x08001065
 8001044:	08001089 	.word	0x08001089
 8001048:	0800106d 	.word	0x0800106d
 800104c:	08001089 	.word	0x08001089
 8001050:	08001075 	.word	0x08001075
 8001054:	08001089 	.word	0x08001089
 8001058:	0800107f 	.word	0x0800107f
	{
		case MS5607_OSR_256:
			measurementDelay = 50;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MS5607_config+0xa8>)
 800105e:	2232      	movs	r2, #50	; 0x32
 8001060:	801a      	strh	r2, [r3, #0]
			break;
 8001062:	e011      	b.n	8001088 <MS5607_config+0x90>
		case MS5607_OSR_512:
			measurementDelay = 110;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MS5607_config+0xa8>)
 8001066:	226e      	movs	r2, #110	; 0x6e
 8001068:	801a      	strh	r2, [r3, #0]
			break;
 800106a:	e00d      	b.n	8001088 <MS5607_config+0x90>
		case MS5607_OSR_1024:
			measurementDelay = 210;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MS5607_config+0xa8>)
 800106e:	22d2      	movs	r2, #210	; 0xd2
 8001070:	801a      	strh	r2, [r3, #0]
			break;
 8001072:	e009      	b.n	8001088 <MS5607_config+0x90>
		case MS5607_OSR_2048:
			measurementDelay = 410;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MS5607_config+0xa8>)
 8001076:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800107a:	801a      	strh	r2, [r3, #0]
			break;
 800107c:	e004      	b.n	8001088 <MS5607_config+0x90>
		case MS5607_OSR_4096:
			measurementDelay = 822;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MS5607_config+0xa8>)
 8001080:	f240 3236 	movw	r2, #822	; 0x336
 8001084:	801a      	strh	r2, [r3, #0]
	}

}
 8001086:	e7ff      	b.n	8001088 <MS5607_config+0x90>
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20000634 	.word	0x20000634
 8001098:	20000650 	.word	0x20000650
 800109c:	20000651 	.word	0x20000651
 80010a0:	2000064e 	.word	0x2000064e

080010a4 <MS5607_init>:

void MS5607_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	MS5607_disable();
 80010a8:	f000 fb0a 	bl	80016c0 <MS5607_disable>

	MS5607_enable();
 80010ac:	f000 faf8 	bl	80016a0 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &CMD_MS5607_RESET, 1, 100);
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MS5607_init+0x30>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2201      	movs	r2, #1
 80010ba:	4907      	ldr	r1, [pc, #28]	; (80010d8 <MS5607_init+0x34>)
 80010bc:	f006 ff4c 	bl	8007f58 <HAL_SPI_Transmit>
	MS5607_disable();
 80010c0:	f000 fafe 	bl	80016c0 <MS5607_disable>

	MS5607_readProm();
 80010c4:	f000 f80c 	bl	80010e0 <MS5607_readProm>

	state = MS5607_STARTUP;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <MS5607_init+0x38>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000634 	.word	0x20000634
 80010d8:	0800d5d0 	.word	0x0800d5d0
 80010dc:	2000064c 	.word	0x2000064c

080010e0 <MS5607_readProm>:

void MS5607_readProm()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	uint8_t cmdReadPromAddress;
	uint16_t* promDataPtr = (uint16_t*)&promData;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MS5607_readProm+0x80>)
 80010e8:	60bb      	str	r3, [r7, #8]
	uint8_t responseBuffer[2];

	// Loop over PROM registers C1 through C6
	for (uint8_t promAddr = 1; promAddr <= 6; ++promAddr)
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e02e      	b.n	800114e <MS5607_readProm+0x6e>
	{
		// Prom Read Sequence: 1 0 1 0 Ad2 Ad1 Ad0 0
		cmdReadPromAddress = MS5607_READ_PROM | (promAddr<<1);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	71fb      	strb	r3, [r7, #7]
		
		MS5607_enable();
 8001100:	f000 face 	bl	80016a0 <MS5607_enable>
		HAL_SPI_Transmit(config->spi, &cmdReadPromAddress, 1, 100);
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MS5607_readProm+0x84>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	1df9      	adds	r1, r7, #7
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	2201      	movs	r2, #1
 8001110:	f006 ff22 	bl	8007f58 <HAL_SPI_Transmit>
		HAL_SPI_Receive(config->spi, (uint8_t*)responseBuffer, 2, 100);
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MS5607_readProm+0x84>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	2202      	movs	r2, #2
 8001120:	f007 f938 	bl	8008394 <HAL_SPI_Receive>
		MS5607_disable();
 8001124:	f000 facc 	bl	80016c0 <MS5607_disable>
		
		// Load response into promData struct
		promDataPtr[promAddr-1] = ((uint8_t)responseBuffer[0]<<8) | (uint8_t)responseBuffer[1];
 8001128:	793b      	ldrb	r3, [r7, #4]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	797b      	ldrb	r3, [r7, #5]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b219      	sxth	r1, r3
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800113c:	3b01      	subs	r3, #1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	b28a      	uxth	r2, r1
 8001146:	801a      	strh	r2, [r3, #0]
	for (uint8_t promAddr = 1; promAddr <= 6; ++promAddr)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	3301      	adds	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b06      	cmp	r3, #6
 8001152:	d9cd      	bls.n	80010f0 <MS5607_readProm+0x10>
	}
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000638 	.word	0x20000638
 8001164:	20000634 	.word	0x20000634

08001168 <MS5607_getCompValues>:

MS5607_CompVal MS5607_getCompValues(MS5607_RawVal* rawVals)
{
 8001168:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800116c:	b0d5      	sub	sp, #340	; 0x154
 800116e:	af00      	add	r7, sp, #0
 8001170:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8001174:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
	MS5607_CompVal compVals;

	uint32_t digTemp = rawVals->temp;
 8001178:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint32_t digPres = rawVals->pres;
 8001182:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	// dT = D2 - TREF
	int32_t deltaTemp = digTemp - ((int32_t)promData.tRef << 8);
 800118c:	4baf      	ldr	r3, [pc, #700]	; (800144c <MS5607_getCompValues+0x2e4>)
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	461a      	mov	r2, r3
 8001194:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	
	// TEMP = 20°C + dT*TEMPSENS
	int32_t temp1 = 2000 + deltaTemp*((int32_t)promData.tempSens << 23);
 800119e:	4bab      	ldr	r3, [pc, #684]	; (800144c <MS5607_getCompValues+0x2e4>)
 80011a0:	895b      	ldrh	r3, [r3, #10]
 80011a2:	05da      	lsls	r2, r3, #23
 80011a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80011b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	// OFF = OFFT1 + TCO*dT
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 80011b4:	4ba5      	ldr	r3, [pc, #660]	; (800144c <MS5607_getCompValues+0x2e4>)
 80011b6:	885b      	ldrh	r3, [r3, #2]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	2200      	movs	r2, #0
 80011bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80011c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80011c4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80011c8:	460b      	mov	r3, r1
 80011ca:	0bdb      	lsrs	r3, r3, #15
 80011cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011d0:	460b      	mov	r3, r1
 80011d2:	045b      	lsls	r3, r3, #17
 80011d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				   + (((int64_t)promData.tco*deltaTemp) >> 6);
 80011d8:	4b9c      	ldr	r3, [pc, #624]	; (800144c <MS5607_getCompValues+0x2e4>)
 80011da:	88db      	ldrh	r3, [r3, #6]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80011e4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80011e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80011ec:	17da      	asrs	r2, r3, #31
 80011ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80011f2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80011f6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80011fa:	460b      	mov	r3, r1
 80011fc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001200:	fb02 f203 	mul.w	r2, r2, r3
 8001204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001208:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8
 800120c:	4601      	mov	r1, r0
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001218:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800121c:	fba2 4501 	umull	r4, r5, r2, r1
 8001220:	442b      	add	r3, r5
 8001222:	461d      	mov	r5, r3
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	09a2      	lsrs	r2, r4, #6
 800122e:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001232:	11ab      	asrs	r3, r5, #6
	int64_t offset = ((int64_t)promData.presOffset << 17) 
 8001234:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001238:	4621      	mov	r1, r4
 800123a:	1889      	adds	r1, r1, r2
 800123c:	6339      	str	r1, [r7, #48]	; 0x30
 800123e:	4629      	mov	r1, r5
 8001240:	eb43 0101 	adc.w	r1, r3, r1
 8001244:	6379      	str	r1, [r7, #52]	; 0x34
 8001246:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800124a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	
	// SENS = SENST1 + TCS* dT
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 800124e:	4b7f      	ldr	r3, [pc, #508]	; (800144c <MS5607_getCompValues+0x2e4>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	2200      	movs	r2, #0
 8001256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800125a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800125e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001262:	460b      	mov	r3, r1
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800126a:	460b      	mov	r3, r1
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						+ (((int64_t)promData.tcs*deltaTemp) >> 7);
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <MS5607_getCompValues+0x2e4>)
 8001274:	889b      	ldrh	r3, [r3, #4]
 8001276:	b29b      	uxth	r3, r3
 8001278:	2200      	movs	r2, #0
 800127a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800127e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001282:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001286:	17da      	asrs	r2, r3, #31
 8001288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800128c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001294:	460b      	mov	r3, r1
 8001296:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800129a:	4622      	mov	r2, r4
 800129c:	fb02 f203 	mul.w	r2, r2, r3
 80012a0:	e9c7 453a 	strd	r4, r5, [r7, #232]	; 0xe8
 80012a4:	462b      	mov	r3, r5
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
 80012aa:	4621      	mov	r1, r4
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	4622      	mov	r2, r4
 80012b4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80012b8:	fba2 ab01 	umull	sl, fp, r2, r1
 80012bc:	445b      	add	r3, fp
 80012be:	469b      	mov	fp, r3
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	ea4f 12da 	mov.w	r2, sl, lsr #7
 80012cc:	ea42 624b 	orr.w	r2, r2, fp, lsl #25
 80012d0:	ea4f 13eb 	mov.w	r3, fp, asr #7
	int64_t sensitivity = ((int64_t)promData.presSens << 16)
 80012d4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80012d8:	4621      	mov	r1, r4
 80012da:	1889      	adds	r1, r1, r2
 80012dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80012de:	4629      	mov	r1, r5
 80012e0:	eb43 0101 	adc.w	r1, r3, r1
 80012e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80012e6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012ea:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

	// Second order compensation
	if (temp1 < 2000)
 80012ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012f6:	f280 8159 	bge.w	80015ac <MS5607_getCompValues+0x444>
	{
		int32_t temp2 = (deltaTemp*deltaTemp) >> 31;
 80012fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012fe:	fb03 f303 	mul.w	r3, r3, r3
 8001302:	17db      	asrs	r3, r3, #31
 8001304:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		int32_t temp2000 = temp1 - 2000;
 8001308:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800130c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001310:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		int64_t offset2 = 61*((int64_t)temp2000 * (int64_t)temp2000) >> 4;
 8001314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001318:	17da      	asrs	r2, r3, #31
 800131a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800131e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001326:	17da      	asrs	r2, r3, #31
 8001328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800132c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001330:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001334:	462b      	mov	r3, r5
 8001336:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
 800133a:	4652      	mov	r2, sl
 800133c:	fb02 f203 	mul.w	r2, r2, r3
 8001340:	465b      	mov	r3, fp
 8001342:	4621      	mov	r1, r4
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	4413      	add	r3, r2
 800134a:	4622      	mov	r2, r4
 800134c:	4651      	mov	r1, sl
 800134e:	fba2 1201 	umull	r1, r2, r2, r1
 8001352:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001356:	460a      	mov	r2, r1
 8001358:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800135c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001360:	4413      	add	r3, r2
 8001362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001366:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800136a:	4622      	mov	r2, r4
 800136c:	462b      	mov	r3, r5
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	0119      	lsls	r1, r3, #4
 8001378:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800137c:	0110      	lsls	r0, r2, #4
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4621      	mov	r1, r4
 8001384:	ebb2 0801 	subs.w	r8, r2, r1
 8001388:	4629      	mov	r1, r5
 800138a:	eb63 0901 	sbc.w	r9, r3, r1
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800139a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800139e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80013a2:	4690      	mov	r8, r2
 80013a4:	4699      	mov	r9, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	eb18 0303 	adds.w	r3, r8, r3
 80013ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80013b0:	462b      	mov	r3, r5
 80013b2:	eb49 0303 	adc.w	r3, r9, r3
 80013b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80013c6:	4621      	mov	r1, r4
 80013c8:	090a      	lsrs	r2, r1, #4
 80013ca:	4629      	mov	r1, r5
 80013cc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80013d0:	4629      	mov	r1, r5
 80013d2:	110b      	asrs	r3, r1, #4
 80013d4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
		int64_t sense2 = ((int64_t)temp2000 * (int64_t)temp2000) << 1;
 80013d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013dc:	17da      	asrs	r2, r3, #31
 80013de:	67bb      	str	r3, [r7, #120]	; 0x78
 80013e0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80013e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013e6:	17da      	asrs	r2, r3, #31
 80013e8:	673b      	str	r3, [r7, #112]	; 0x70
 80013ea:	677a      	str	r2, [r7, #116]	; 0x74
 80013ec:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80013f0:	462b      	mov	r3, r5
 80013f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80013f6:	4642      	mov	r2, r8
 80013f8:	fb02 f203 	mul.w	r2, r2, r3
 80013fc:	464b      	mov	r3, r9
 80013fe:	4621      	mov	r1, r4
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	4622      	mov	r2, r4
 8001408:	4641      	mov	r1, r8
 800140a:	fba2 1201 	umull	r1, r2, r2, r1
 800140e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001412:	460a      	mov	r2, r1
 8001414:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800141c:	4413      	add	r3, r2
 800141e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001426:	460b      	mov	r3, r1
 8001428:	18db      	adds	r3, r3, r3
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	4613      	mov	r3, r2
 800142e:	eb42 0303 	adc.w	r3, r2, r3
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001438:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

		if (temp1 < -1500)
 800143c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <MS5607_getCompValues+0x2e8>)
 8001442:	429a      	cmp	r2, r3
 8001444:	f280 8091 	bge.w	800156a <MS5607_getCompValues+0x402>
 8001448:	e004      	b.n	8001454 <MS5607_getCompValues+0x2ec>
 800144a:	bf00      	nop
 800144c:	20000638 	.word	0x20000638
 8001450:	fffffa24 	.word	0xfffffa24
		{
			int32_t temp1500 = temp1 + 1500;
 8001454:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001458:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800145c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			offset2 += 15 * ((int64_t)temp1500 * (int64_t)temp1500);
 8001460:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001464:	17da      	asrs	r2, r3, #31
 8001466:	66bb      	str	r3, [r7, #104]	; 0x68
 8001468:	66fa      	str	r2, [r7, #108]	; 0x6c
 800146a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800146e:	17da      	asrs	r2, r3, #31
 8001470:	663b      	str	r3, [r7, #96]	; 0x60
 8001472:	667a      	str	r2, [r7, #100]	; 0x64
 8001474:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001478:	462b      	mov	r3, r5
 800147a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800147e:	4642      	mov	r2, r8
 8001480:	fb02 f203 	mul.w	r2, r2, r3
 8001484:	464b      	mov	r3, r9
 8001486:	4621      	mov	r1, r4
 8001488:	fb01 f303 	mul.w	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	4622      	mov	r2, r4
 8001490:	4641      	mov	r1, r8
 8001492:	fba2 1201 	umull	r1, r2, r2, r1
 8001496:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800149a:	460a      	mov	r2, r1
 800149c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80014a0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80014a4:	4413      	add	r3, r2
 80014a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80014aa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80014ae:	4622      	mov	r2, r4
 80014b0:	462b      	mov	r3, r5
 80014b2:	f04f 0000 	mov.w	r0, #0
 80014b6:	f04f 0100 	mov.w	r1, #0
 80014ba:	0119      	lsls	r1, r3, #4
 80014bc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80014c0:	0110      	lsls	r0, r2, #4
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4621      	mov	r1, r4
 80014c8:	1a51      	subs	r1, r2, r1
 80014ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80014cc:	4629      	mov	r1, r5
 80014ce:	eb63 0301 	sbc.w	r3, r3, r1
 80014d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014d4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80014d8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80014dc:	4621      	mov	r1, r4
 80014de:	1851      	adds	r1, r2, r1
 80014e0:	61b9      	str	r1, [r7, #24]
 80014e2:	4629      	mov	r1, r5
 80014e4:	eb43 0101 	adc.w	r1, r3, r1
 80014e8:	61f9      	str	r1, [r7, #28]
 80014ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ee:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			sense2 += ((int64_t)temp1500 * (int64_t)temp1500) << 3;
 80014f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014f6:	17da      	asrs	r2, r3, #31
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
 80014fa:	657a      	str	r2, [r7, #84]	; 0x54
 80014fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001500:	17da      	asrs	r2, r3, #31
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
 8001504:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001506:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800150a:	462b      	mov	r3, r5
 800150c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001510:	4642      	mov	r2, r8
 8001512:	fb02 f203 	mul.w	r2, r2, r3
 8001516:	464b      	mov	r3, r9
 8001518:	4621      	mov	r1, r4
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	4622      	mov	r2, r4
 8001522:	4641      	mov	r1, r8
 8001524:	fba2 1201 	umull	r1, r2, r2, r1
 8001528:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800152c:	460a      	mov	r2, r1
 800152e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001532:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001536:	4413      	add	r3, r2
 8001538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001548:	462b      	mov	r3, r5
 800154a:	00d9      	lsls	r1, r3, #3
 800154c:	4623      	mov	r3, r4
 800154e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001552:	4623      	mov	r3, r4
 8001554:	00d8      	lsls	r0, r3, #3
 8001556:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800155a:	1814      	adds	r4, r2, r0
 800155c:	613c      	str	r4, [r7, #16]
 800155e:	414b      	adcs	r3, r1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001566:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
		}

		temp1 -= temp2;
 800156a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800156e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		offset -= offset2;
 8001578:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800157c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001580:	1a84      	subs	r4, r0, r2
 8001582:	60bc      	str	r4, [r7, #8]
 8001584:	eb61 0303 	sbc.w	r3, r1, r3
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800158e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		sensitivity -= sense2;
 8001592:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001596:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800159a:	1a84      	subs	r4, r0, r2
 800159c:	603c      	str	r4, [r7, #0]
 800159e:	eb61 0303 	sbc.w	r3, r1, r3
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015a8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	}

	// Populate and return the compensated values
	compVals.pres = (((int64_t)(digPres*sensitivity) >> 21) - offset) >> 15;
 80015ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015b0:	2200      	movs	r2, #0
 80015b2:	643b      	str	r3, [r7, #64]	; 0x40
 80015b4:	647a      	str	r2, [r7, #68]	; 0x44
 80015b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015ba:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80015be:	462a      	mov	r2, r5
 80015c0:	fb02 f203 	mul.w	r2, r2, r3
 80015c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015c8:	4621      	mov	r1, r4
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80015d4:	4621      	mov	r1, r4
 80015d6:	fba2 1201 	umull	r1, r2, r2, r1
 80015da:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015de:	460a      	mov	r2, r1
 80015e0:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015e8:	4413      	add	r3, r2
 80015ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80015fa:	4621      	mov	r1, r4
 80015fc:	0d4a      	lsrs	r2, r1, #21
 80015fe:	4629      	mov	r1, r5
 8001600:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001604:	4629      	mov	r1, r5
 8001606:	154b      	asrs	r3, r1, #21
 8001608:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800160c:	1a14      	subs	r4, r2, r0
 800160e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001610:	eb63 0301 	sbc.w	r3, r3, r1
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001622:	4621      	mov	r1, r4
 8001624:	0bca      	lsrs	r2, r1, #15
 8001626:	4629      	mov	r1, r5
 8001628:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800162c:	4629      	mov	r1, r5
 800162e:	13cb      	asrs	r3, r1, #15
 8001630:	4613      	mov	r3, r2
 8001632:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	compVals.temp = temp1;
 8001636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800163a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	return compVals;
 800163e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001642:	461a      	mov	r2, r3
 8001644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001648:	e893 0003 	ldmia.w	r3, {r0, r1}
 800164c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001650:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001654:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8001658:	46bd      	mov	sp, r7
 800165a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800165e:	4770      	bx	lr

08001660 <MS5607_readUncompPres>:

void MS5607_readUncompPres()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	state = MS5607_PRES_READ;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MS5607_readUncompPres+0x34>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]

	// Send convert command over SPI1
	MS5607_enable();
 800166a:	f000 f819 	bl	80016a0 <MS5607_enable>
	HAL_SPI_Transmit(config->spi, &cmdMeasurePres, 1, 100);
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MS5607_readUncompPres+0x38>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	2201      	movs	r2, #1
 8001678:	4908      	ldr	r1, [pc, #32]	; (800169c <MS5607_readUncompPres+0x3c>)
 800167a:	f006 fc6d 	bl	8007f58 <HAL_SPI_Transmit>
	MS5607_disable();
 800167e:	f000 f81f 	bl	80016c0 <MS5607_disable>

	// Wait for conversion (based on OSR)
	HAL_TIM_Base_Start_IT(config->timer);
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <MS5607_readUncompPres+0x38>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	f007 f9b5 	bl	80089f8 <HAL_TIM_Base_Start_IT>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000064c 	.word	0x2000064c
 8001698:	20000634 	.word	0x20000634
 800169c:	20000650 	.word	0x20000650

080016a0 <MS5607_enable>:
	// Convert the 3-byte MSB-first response into a uint32_t
	return ((uint32_t)responseBuffer[0]<<16) | ((uint32_t)responseBuffer[1]<<8) | (uint32_t)responseBuffer[2];
}

void MS5607_enable()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 low to enable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_RESET);
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <MS5607_enable+0x1c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6898      	ldr	r0, [r3, #8]
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <MS5607_enable+0x1c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	899b      	ldrh	r3, [r3, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	f000 ff0c 	bl	80024d0 <HAL_GPIO_WritePin>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000634 	.word	0x20000634

080016c0 <MS5607_disable>:

void MS5607_disable()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	// Set the CSB pin of the MS5607 high to disable
	HAL_GPIO_WritePin(config->csPort, config->csPin, GPIO_PIN_SET);
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <MS5607_disable+0x1c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6898      	ldr	r0, [r3, #8]
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <MS5607_disable+0x1c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	899b      	ldrh	r3, [r3, #12]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	f000 fefc 	bl	80024d0 <HAL_GPIO_WritePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000634 	.word	0x20000634

080016e0 <MS5607_getRawValues>:
		state = MS5607_IDLE;
	}
}

MS5607_RawVal MS5607_getRawValues()
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	return rawValues;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <MS5607_getRawValues+0x20>)
 80016ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	20000644 	.word	0x20000644

08001704 <MS5607_getMeasurementDelay>:

uint16_t MS5607_getMeasurementDelay()
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	return measurementDelay;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <MS5607_getMeasurementDelay+0x14>)
 800170a:	881b      	ldrh	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000064e 	.word	0x2000064e

0800171c <MS5607_getState>:

MS5607_MeasureState MS5607_getState()
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
	return state;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <MS5607_getState+0x14>)
 8001722:	781b      	ldrb	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000064c 	.word	0x2000064c

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0bc      	sub	sp, #240	; 0xf0
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	22c0      	movs	r2, #192	; 0xc0
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f00b fa51 	bl	800cc0c <memset>
  if(hsd->Instance==SDMMC1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a39      	ldr	r2, [pc, #228]	; (8001854 <HAL_SD_MspInit+0x110>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d16b      	bne.n	800184c <HAL_SD_MspInit+0x108>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001774:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 8001780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fb33 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001798:	f7ff fc28 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_SD_MspInit+0x114>)
 800179e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a2:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c0:	4a25      	ldr	r2, [pc, #148]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_SD_MspInit+0x114>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017f6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001810:	230c      	movs	r3, #12
 8001812:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800181a:	4619      	mov	r1, r3
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <HAL_SD_MspInit+0x118>)
 800181e:	f000 fc7f 	bl	8002120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001822:	2304      	movs	r3, #4
 8001824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001834:	2302      	movs	r3, #2
 8001836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800183a:	230c      	movs	r3, #12
 800183c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <HAL_SD_MspInit+0x11c>)
 8001848:	f000 fc6a 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	37f0      	adds	r7, #240	; 0xf0
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	420c8000 	.word	0x420c8000
 8001858:	46020c00 	.word	0x46020c00
 800185c:	42020800 	.word	0x42020800
 8001860:	42020c00 	.word	0x42020c00

08001864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0be      	sub	sp, #248	; 0xf8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	22c0      	movs	r2, #192	; 0xc0
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f00b f9c1 	bl	800cc0c <memset>
  if(hspi->Instance==SPI1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6b      	ldr	r2, [pc, #428]	; (8001a3c <HAL_SPI_MspInit+0x1d8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d147      	bne.n	8001924 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001894:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80018a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 faa3 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80018b8:	f7ff fb98 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018bc:	4b60      	ldr	r3, [pc, #384]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 80018be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018c2:	4a5f      	ldr	r2, [pc, #380]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 80018c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80018cc:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 80018ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 80018dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e0:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 80018ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80018f8:	23c2      	movs	r3, #194	; 0xc2
 80018fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001910:	2305      	movs	r3, #5
 8001912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800191a:	4619      	mov	r1, r3
 800191c:	4849      	ldr	r0, [pc, #292]	; (8001a44 <HAL_SPI_MspInit+0x1e0>)
 800191e:	f000 fbff 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001922:	e086      	b.n	8001a32 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <HAL_SPI_MspInit+0x1e4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	f040 8081 	bne.w	8001a32 <HAL_SPI_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 800193c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	4618      	mov	r0, r3
 800194a:	f002 fa55 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_SPI_MspInit+0xf4>
      Error_Handler();
 8001954:	f7ff fb4a 	bl	8000fec <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 800195a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800195e:	4a38      	ldr	r2, [pc, #224]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 800196a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 8001978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800197c:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 8001988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 8001996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800199a:	4a29      	ldr	r2, [pc, #164]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_SPI_MspInit+0x1dc>)
 80019a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80019ca:	2303      	movs	r3, #3
 80019cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019d4:	4619      	mov	r1, r3
 80019d6:	481d      	ldr	r0, [pc, #116]	; (8001a4c <HAL_SPI_MspInit+0x1e8>)
 80019d8:	f000 fba2 	bl	8002120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019dc:	2304      	movs	r3, #4
 80019de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f4:	2305      	movs	r3, #5
 80019f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4812      	ldr	r0, [pc, #72]	; (8001a4c <HAL_SPI_MspInit+0x1e8>)
 8001a02:	f000 fb8d 	bl	8002120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a20:	2305      	movs	r3, #5
 8001a22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4808      	ldr	r0, [pc, #32]	; (8001a50 <HAL_SPI_MspInit+0x1ec>)
 8001a2e:	f000 fb77 	bl	8002120 <HAL_GPIO_Init>
}
 8001a32:	bf00      	nop
 8001a34:	37f8      	adds	r7, #248	; 0xf8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	46020c00 	.word	0x46020c00
 8001a44:	42020000 	.word	0x42020000
 8001a48:	40003800 	.word	0x40003800
 8001a4c:	42020800 	.word	0x42020800
 8001a50:	42020400 	.word	0x42020400

08001a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_TIM_Base_MspInit+0x3c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10e      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_TIM_Base_MspInit+0x40>)
 8001a68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_TIM_Base_MspInit+0x40>)
 8001a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a72:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_TIM_Base_MspInit+0x40>)
 8001a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40014400 	.word	0x40014400
 8001a94:	46020c00 	.word	0x46020c00

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0ba      	sub	sp, #232	; 0xe8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	22c0      	movs	r2, #192	; 0xc0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00b f8a7 	bl	800cc0c <memset>
  if(huart->Instance==USART1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_UART_MspInit+0xc4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d145      	bne.n	8001b54 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ac8:	f04f 0201 	mov.w	r2, #1
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 f98b 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001ae8:	f7ff fa80 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_UART_MspInit+0xc8>)
 8001aee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_UART_MspInit+0xc8>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_UART_MspInit+0xc8>)
 8001afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_UART_MspInit+0xc8>)
 8001b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_UART_MspInit+0xc8>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_UART_MspInit+0xc8>)
 8001b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b42:	2307      	movs	r3, #7
 8001b44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_UART_MspInit+0xcc>)
 8001b50:	f000 fae6 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	37e8      	adds	r7, #232	; 0xe8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	46020c00 	.word	0x46020c00
 8001b64:	42020000 	.word	0x42020000

08001b68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0bc      	sub	sp, #240	; 0xf0
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	22c0      	movs	r2, #192	; 0xc0
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00b f83f 	bl	800cc0c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a39      	ldr	r2, [pc, #228]	; (8001c78 <HAL_PCD_MspInit+0x110>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d16a      	bne.n	8001c6e <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_PLL1;
 8001ba4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 f921 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001bbc:	f7ff fa16 	bl	8000fec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c02:	4619      	mov	r1, r3
 8001c04:	481e      	ldr	r0, [pc, #120]	; (8001c80 <HAL_PCD_MspInit+0x118>)
 8001c06:	f000 fa8b 	bl	8002120 <HAL_GPIO_Init>

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d119      	bne.n	8001c4c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
      HAL_PWREx_EnableVddUSB();
 8001c36:	f000 fe1d 	bl	8002874 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c4a:	e001      	b.n	8001c50 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001c4c:	f000 fe12 	bl	8002874 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_PCD_MspInit+0x114>)
 8001c62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	37f0      	adds	r7, #240	; 0xf0
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40016000 	.word	0x40016000
 8001c7c:	46020c00 	.word	0x46020c00
 8001c80:	42020000 	.word	0x42020000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f000 f8fe 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f00a ff56 	bl	800cbb8 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20040000 	.word	0x20040000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	20000654 	.word	0x20000654
 8001d40:	200006a8 	.word	0x200006a8

08001d44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <SystemInit+0x68>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a17      	ldr	r2, [pc, #92]	; (8001dac <SystemInit+0x68>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <SystemInit+0x6c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <SystemInit+0x6c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <SystemInit+0x6c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <SystemInit+0x6c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <SystemInit+0x6c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <SystemInit+0x6c>)
 8001d76:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d7a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <SystemInit+0x6c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <SystemInit+0x6c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <SystemInit+0x6c>)
 8001d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <SystemInit+0x6c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SystemInit+0x68>)
 8001d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d9e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00
 8001db0:	46020c00 	.word	0x46020c00

08001db4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db8:	f7ff ffc4 	bl	8001d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	; (8001df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <LoopForever+0xe>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	; (8001e00 <LoopForever+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001de2:	f00a feef 	bl	800cbc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7fe fd13 	bl	8000810 <main>

08001dea <LoopForever>:

LoopForever:
    b LoopForever
 8001dea:	e7fe      	b.n	8001dea <LoopForever>
  ldr   r0, =_estack
 8001dec:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001df8:	0800d7ac 	.word	0x0800d7ac
  ldr r2, =_sbss
 8001dfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e00:	200006a5 	.word	0x200006a5

08001e04 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC1_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_Init+0x4c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_Init+0x4c>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 f94f 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e1e:	f001 fe07 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_Init+0x50>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	490b      	ldr	r1, [pc, #44]	; (8001e5c <HAL_Init+0x54>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_Init+0x58>)
 8001e36:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e38:	200f      	movs	r0, #15
 8001e3a:	f000 f813 	bl	8001e64 <HAL_InitTick>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e002      	b.n	8001e4e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e48:	f7ff fc74 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000
 8001e58:	46020c00 	.word	0x46020c00
 8001e5c:	0800d5d4 	.word	0x0800d5d4
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_InitTick+0x60>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e021      	b.n	8001ebc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_InitTick+0x64>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_InitTick+0x60>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f939 	bl	8002106 <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00e      	b.n	8001ebc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d80a      	bhi.n	8001eba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eac:	f000 f911 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <HAL_InitTick+0x68>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x20>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x24>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_IncTick+0x24>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000658 	.word	0x20000658

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000658 	.word	0x20000658

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff ffee 	bl	8001ef8 <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffde 	bl	8001ef8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff47 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff5e 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff90 	bl	8002010 <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5f 	bl	8001fbc <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffb2 	bl	8002078 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002132:	e1ba      	b.n	80024aa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 81aa 	beq.w	80024a4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_GPIO_Init+0x188>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d15d      	bne.n	8002214 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800215e:	2201      	movs	r2, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	4013      	ands	r3, r2
 800216c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	4313      	orrs	r3, r2
 8002180:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002188:	4a48      	ldr	r2, [pc, #288]	; (80022ac <HAL_GPIO_Init+0x18c>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002190:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002192:	4a46      	ldr	r2, [pc, #280]	; (80022ac <HAL_GPIO_Init+0x18c>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3208      	adds	r2, #8
 80021a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	4013      	ands	r3, r2
 80021c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220b      	movs	r2, #11
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	3208      	adds	r2, #8
 80021de:	69f9      	ldr	r1, [r7, #28]
 80021e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2202      	movs	r2, #2
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	4313      	orrs	r3, r2
 800220a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e067      	b.n	80022e4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x104>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b12      	cmp	r3, #18
 8002222:	d145      	bne.n	80022b0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002230:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	4013      	ands	r3, r2
 8002246:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f003 020f 	and.w	r2, r3, #15
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	4313      	orrs	r3, r2
 8002260:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69f9      	ldr	r1, [r7, #28]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	4013      	ands	r3, r2
 8002286:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	4313      	orrs	r3, r2
 800229c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e01e      	b.n	80022e4 <HAL_GPIO_Init+0x1c4>
 80022a6:	bf00      	nop
 80022a8:	46020000 	.word	0x46020000
 80022ac:	0800d62c 	.word	0x0800d62c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d00b      	beq.n	8002304 <HAL_GPIO_Init+0x1e4>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d007      	beq.n	8002304 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f8:	2b11      	cmp	r3, #17
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b12      	cmp	r3, #18
 8002302:	d130      	bne.n	8002366 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	4013      	ands	r3, r2
 800231a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	4313      	orrs	r3, r2
 800232c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800233a:	2201      	movs	r2, #1
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	4013      	ands	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 0201 	and.w	r2, r3, #1
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	4313      	orrs	r3, r2
 800235e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d017      	beq.n	800239e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	4013      	ands	r3, r2
 8002384:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	4313      	orrs	r3, r2
 8002396:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d07c      	beq.n	80024a4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80023aa:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3318      	adds	r3, #24
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0a9a      	lsrs	r2, r3, #10
 80023d2:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <HAL_GPIO_Init+0x3ac>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	f002 0203 	and.w	r2, r2, #3
 80023dc:	00d2      	lsls	r2, r2, #3
 80023de:	4093      	lsls	r3, r2
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80023e6:	4938      	ldr	r1, [pc, #224]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3318      	adds	r3, #24
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	4013      	ands	r3, r2
 8002402:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002418:	4a2b      	ldr	r2, [pc, #172]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	4013      	ands	r3, r2
 800242c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 800244a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	4013      	ands	r3, r2
 8002458:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 8002478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800247c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	4013      	ands	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_GPIO_Init+0x3a8>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f47f ae3d 	bne.w	8002134 <HAL_GPIO_Init+0x14>
  }
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	3724      	adds	r7, #36	; 0x24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	46022000 	.word	0x46022000
 80024cc:	002f7f7f 	.word	0x002f7f7f

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002502:	b08f      	sub	sp, #60	; 0x3c
 8002504:	af0a      	add	r7, sp, #40	; 0x28
 8002506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0fe      	b.n	8002710 <HAL_PCD_Init+0x210>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fb1e 	bl	8001b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2203      	movs	r2, #3
 8002530:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f007 ff88 	bl	800a44e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	687e      	ldr	r6, [r7, #4]
 8002546:	466d      	mov	r5, sp
 8002548:	f106 0410 	add.w	r4, r6, #16
 800254c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002554:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002558:	e885 0003 	stmia.w	r5, {r0, r1}
 800255c:	1d33      	adds	r3, r6, #4
 800255e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002560:	6838      	ldr	r0, [r7, #0]
 8002562:	f007 ff56 	bl	800a412 <USB_CoreInit>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0cb      	b.n	8002710 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f007 ff7a 	bl	800a478 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e03e      	b.n	8002608 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	333d      	adds	r3, #61	; 0x3d
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	333c      	adds	r3, #60	; 0x3c
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	333f      	adds	r3, #63	; 0x3f
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	334c      	adds	r3, #76	; 0x4c
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	3350      	adds	r3, #80	; 0x50
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	3354      	adds	r3, #84	; 0x54
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	3301      	adds	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3bb      	bcc.n	800258a <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e044      	b.n	80026a2 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	f203 137d 	addw	r3, r3, #381	; 0x17d
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3301      	adds	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3b5      	bcc.n	8002618 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	687e      	ldr	r6, [r7, #4]
 80026b4:	466d      	mov	r5, sp
 80026b6:	f106 0410 	add.w	r4, r6, #16
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ca:	1d33      	adds	r3, r6, #4
 80026cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f007 fef5 	bl	800a4be <USB_DevInit>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_PCD_Init+0x1e6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e014      	b.n	8002710 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f80a 	bl	8002718 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f007 fefb 	bl	800a504 <USB_DevDisconnect>

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002718 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  hpcd->LPM_State = LPM_L0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002764:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800276c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	d10b      	bne.n	800278e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d905      	bls.n	800278a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800277e:	4b33      	ldr	r3, [pc, #204]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a32      	ldr	r2, [pc, #200]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e057      	b.n	800283e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002794:	d90a      	bls.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	4a2a      	ldr	r2, [pc, #168]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	60d3      	str	r3, [r2, #12]
 80027aa:	e007      	b.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80027b4:	4925      	ldr	r1, [pc, #148]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	099b      	lsrs	r3, r3, #6
 80027c8:	2232      	movs	r2, #50	; 0x32
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	3301      	adds	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80027da:	e002      	b.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f3      	bne.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01b      	beq.n	8002832 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a15      	ldr	r2, [pc, #84]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	2232      	movs	r2, #50	; 0x32
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002818:	e002      	b.n	8002820 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b01      	subs	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f3      	bne.n	800281a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e000      	b.n	800283e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	46020800 	.word	0x46020800
 8002850:	20000000 	.word	0x20000000
 8002854:	10624dd3 	.word	0x10624dd3

08002858 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_PWREx_GetVoltageRange+0x18>)
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	46020800 	.word	0x46020800

08002874 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	6113      	str	r3, [r2, #16]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	46020800 	.word	0x46020800

08002894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08e      	sub	sp, #56	; 0x38
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f000 bec8 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ae:	4b99      	ldr	r3, [pc, #612]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b8:	4b96      	ldr	r3, [pc, #600]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 816c 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_RCC_OscConfig+0x52>
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	2b0c      	cmp	r3, #12
 80028da:	f040 80de 	bne.w	8002a9a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f040 80da 	bne.w	8002a9a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f000 bea5 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f8:	4b86      	ldr	r3, [pc, #536]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_RCC_OscConfig+0x7a>
 8002904:	4b83      	ldr	r3, [pc, #524]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800290c:	e005      	b.n	800291a <HAL_RCC_OscConfig+0x86>
 800290e:	4b81      	ldr	r3, [pc, #516]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800291a:	4293      	cmp	r3, r2
 800291c:	d255      	bcs.n	80029ca <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f9df 	bl	8003cec <RCC_SetFlashLatencyFromMSIRange>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f000 be82 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800293a:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4a75      	ldr	r2, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002944:	6093      	str	r3, [r2, #8]
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	4970      	ldr	r1, [pc, #448]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002960:	d309      	bcc.n	8002976 <HAL_RCC_OscConfig+0xe2>
 8002962:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 021f 	bic.w	r2, r3, #31
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4969      	ldr	r1, [pc, #420]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002970:	4313      	orrs	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
 8002974:	e07e      	b.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	da0a      	bge.n	8002994 <HAL_RCC_OscConfig+0x100>
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	015b      	lsls	r3, r3, #5
 800298c:	4961      	ldr	r1, [pc, #388]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 800298e:	4313      	orrs	r3, r2
 8002990:	60cb      	str	r3, [r1, #12]
 8002992:	e06f      	b.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d30a      	bcc.n	80029b4 <HAL_RCC_OscConfig+0x120>
 800299e:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	4959      	ldr	r1, [pc, #356]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60cb      	str	r3, [r1, #12]
 80029b2:	e05f      	b.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
 80029b4:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	03db      	lsls	r3, r3, #15
 80029c2:	4954      	ldr	r1, [pc, #336]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
 80029c8:	e054      	b.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80029ca:	4b52      	ldr	r3, [pc, #328]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d4:	6093      	str	r3, [r2, #8]
 80029d6:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	494c      	ldr	r1, [pc, #304]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80029f0:	d309      	bcc.n	8002a06 <HAL_RCC_OscConfig+0x172>
 80029f2:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f023 021f 	bic.w	r2, r3, #31
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4945      	ldr	r1, [pc, #276]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60cb      	str	r3, [r1, #12]
 8002a04:	e028      	b.n	8002a58 <HAL_RCC_OscConfig+0x1c4>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da0a      	bge.n	8002a24 <HAL_RCC_OscConfig+0x190>
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	493d      	ldr	r1, [pc, #244]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]
 8002a22:	e019      	b.n	8002a58 <HAL_RCC_OscConfig+0x1c4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d30a      	bcc.n	8002a44 <HAL_RCC_OscConfig+0x1b0>
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	4935      	ldr	r1, [pc, #212]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]
 8002a42:	e009      	b.n	8002a58 <HAL_RCC_OscConfig+0x1c4>
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	03db      	lsls	r3, r3, #15
 8002a52:	4930      	ldr	r1, [pc, #192]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 f942 	bl	8003cec <RCC_SetFlashLatencyFromMSIRange>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f000 bde5 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002a74:	f001 f8e4 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x284>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f9f1 	bl	8001e64 <HAL_InitTick>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 808a 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a96:	f000 bdd2 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d066      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002aae:	f7ff fa23 	bl	8001ef8 <HAL_GetTick>
 8002ab2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ab4:	e009      	b.n	8002aca <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab6:	f7ff fa1f 	bl	8001ef8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d902      	bls.n	8002aca <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	f000 bdba 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ef      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae0:	6093      	str	r3, [r2, #8]
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	4909      	ldr	r1, [pc, #36]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002afc:	d30e      	bcc.n	8002b1c <HAL_RCC_OscConfig+0x288>
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f023 021f 	bic.w	r2, r3, #31
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4902      	ldr	r1, [pc, #8]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
 8002b10:	e04a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x314>
 8002b12:	bf00      	nop
 8002b14:	46020c00 	.word	0x46020c00
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da0a      	bge.n	8002b3a <HAL_RCC_OscConfig+0x2a6>
 8002b24:	4b98      	ldr	r3, [pc, #608]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	015b      	lsls	r3, r3, #5
 8002b32:	4995      	ldr	r1, [pc, #596]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
 8002b38:	e036      	b.n	8002ba8 <HAL_RCC_OscConfig+0x314>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b42:	d30a      	bcc.n	8002b5a <HAL_RCC_OscConfig+0x2c6>
 8002b44:	4b90      	ldr	r3, [pc, #576]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	029b      	lsls	r3, r3, #10
 8002b52:	498d      	ldr	r1, [pc, #564]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
 8002b58:	e026      	b.n	8002ba8 <HAL_RCC_OscConfig+0x314>
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	03db      	lsls	r3, r3, #15
 8002b68:	4987      	ldr	r1, [pc, #540]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60cb      	str	r3, [r1, #12]
 8002b6e:	e01b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002b70:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a84      	ldr	r2, [pc, #528]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002b7c:	f7ff f9bc 	bl	8001ef8 <HAL_GetTick>
 8002b80:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002b82:	e009      	b.n	8002b98 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b84:	f7ff f9b8 	bl	8001ef8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d902      	bls.n	8002b98 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	f000 bd53 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002b98:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ef      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ba6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 808b 	beq.w	8002ccc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d17d      	bne.n	8002ccc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f000 bd34 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x35a>
 8002be0:	4b69      	ldr	r3, [pc, #420]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a68      	ldr	r2, [pc, #416]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e041      	b.n	8002c72 <HAL_RCC_OscConfig+0x3de>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf6:	d112      	bne.n	8002c1e <HAL_RCC_OscConfig+0x38a>
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a62      	ldr	r2, [pc, #392]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b60      	ldr	r3, [pc, #384]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a5f      	ldr	r2, [pc, #380]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5c      	ldr	r2, [pc, #368]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e029      	b.n	8002c72 <HAL_RCC_OscConfig+0x3de>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002c26:	d112      	bne.n	8002c4e <HAL_RCC_OscConfig+0x3ba>
 8002c28:	4b57      	ldr	r3, [pc, #348]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a56      	ldr	r2, [pc, #344]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b54      	ldr	r3, [pc, #336]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a53      	ldr	r2, [pc, #332]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b51      	ldr	r3, [pc, #324]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e011      	b.n	8002c72 <HAL_RCC_OscConfig+0x3de>
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a4d      	ldr	r2, [pc, #308]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d014      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002c7a:	f7ff f93d 	bl	8001ef8 <HAL_GetTick>
 8002c7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c80:	e009      	b.n	8002c96 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c82:	f7ff f939 	bl	8001ef8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d902      	bls.n	8002c96 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	f000 bcd4 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0ef      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3ee>
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002ca4:	f7ff f928 	bl	8001ef8 <HAL_GetTick>
 8002ca8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002caa:	e009      	b.n	8002cc0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7ff f924 	bl	8001ef8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d902      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	f000 bcbf 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ef      	bne.n	8002cac <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05f      	beq.n	8002d98 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x456>
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	d114      	bne.n	8002d0e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d111      	bne.n	8002d0e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f000 bca3 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	4920      	ldr	r1, [pc, #128]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d0c:	e044      	b.n	8002d98 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d024      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002d22:	f7ff f8e9 	bl	8001ef8 <HAL_GetTick>
 8002d26:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7ff f8e5 	bl	8001ef8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d902      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	f000 bc80 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ef      	beq.n	8002d2a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	490b      	ldr	r1, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]
 8002d5e:	e01b      	b.n	8002d98 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002d6c:	f7ff f8c4 	bl	8001ef8 <HAL_GetTick>
 8002d70:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7ff f8c0 	bl	8001ef8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d904      	bls.n	8002d8c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	f000 bc5b 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
 8002d88:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8c:	4baf      	ldr	r3, [pc, #700]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ed      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80c8 	beq.w	8002f36 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dac:	4ba7      	ldr	r3, [pc, #668]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d111      	bne.n	8002dde <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4ba4      	ldr	r3, [pc, #656]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	4aa2      	ldr	r2, [pc, #648]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002dca:	4ba0      	ldr	r3, [pc, #640]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002dde:	4b9c      	ldr	r3, [pc, #624]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d119      	bne.n	8002e1e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002dea:	4b99      	ldr	r3, [pc, #612]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	4a98      	ldr	r2, [pc, #608]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7ff f87f 	bl	8001ef8 <HAL_GetTick>
 8002dfa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002dfc:	e009      	b.n	8002e12 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7ff f87b 	bl	8001ef8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d902      	bls.n	8002e12 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	f000 bc16 	b.w	800363e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e12:	4b8f      	ldr	r3, [pc, #572]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0ef      	beq.n	8002dfe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d05f      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002e26:	4b89      	ldr	r3, [pc, #548]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e2c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d037      	beq.n	8002eac <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e3f4      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e5e:	4b7b      	ldr	r3, [pc, #492]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e64:	4a79      	ldr	r2, [pc, #484]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002e66:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002e6e:	f7ff f843 	bl	8001ef8 <HAL_GetTick>
 8002e72:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e76:	f7ff f83f 	bl	8001ef8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e3da      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e88:	4b70      	ldr	r3, [pc, #448]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ef      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002e96:	4b6d      	ldr	r3, [pc, #436]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e9c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4969      	ldr	r1, [pc, #420]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002eac:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb2:	4a66      	ldr	r2, [pc, #408]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002ebc:	f7ff f81c 	bl	8001ef8 <HAL_GetTick>
 8002ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7ff f818 	bl	8001ef8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e3b3      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ed6:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ef      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x630>
 8002ee4:	e01b      	b.n	8002f1e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002ee6:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eec:	4a57      	ldr	r2, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002eee:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002ef2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002ef6:	f7fe ffff 	bl	8001ef8 <HAL_GetTick>
 8002efa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efe:	f7fe fffb 	bl	8001ef8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e396      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f10:	4b4e      	ldr	r3, [pc, #312]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ef      	bne.n	8002efe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b49      	ldr	r3, [pc, #292]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	4a47      	ldr	r2, [pc, #284]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8111 	beq.w	8003166 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b3c      	ldr	r3, [pc, #240]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5e:	4a3b      	ldr	r2, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f68:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f7c:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d118      	bne.n	8002fba <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002f88:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	4a30      	ldr	r2, [pc, #192]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f94:	f7fe ffb0 	bl	8001ef8 <HAL_GetTick>
 8002f98:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe ffac 	bl	8001ef8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e347      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <HAL_RCC_OscConfig+0x7bc>)
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01f      	beq.n	8003006 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ff2:	e018      	b.n	8003026 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003004:	e00f      	b.n	8003026 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8003008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 8003018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <HAL_RCC_OscConfig+0x7b8>)
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d057      	beq.n	80030de <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800302e:	f7fe ff63 	bl	8001ef8 <HAL_GetTick>
 8003032:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003034:	e00e      	b.n	8003054 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe ff5f 	bl	8001ef8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d905      	bls.n	8003054 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e2f8      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
 800304c:	46020c00 	.word	0x46020c00
 8003050:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003054:	4b9c      	ldr	r3, [pc, #624]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0e9      	beq.n	8003036 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01b      	beq.n	80030a6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800306e:	4b96      	ldr	r3, [pc, #600]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003074:	4a94      	ldr	r2, [pc, #592]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe ff3a 	bl	8001ef8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e2d3      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003096:	4b8c      	ldr	r3, [pc, #560]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ed      	beq.n	8003080 <HAL_RCC_OscConfig+0x7ec>
 80030a4:	e053      	b.n	800314e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80030a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030ac:	4a86      	ldr	r2, [pc, #536]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80030ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe ff1e 	bl	8001ef8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e2b7      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030ce:	4b7e      	ldr	r3, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80030d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1ed      	bne.n	80030b8 <HAL_RCC_OscConfig+0x824>
 80030dc:	e037      	b.n	800314e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80030de:	f7fe ff0b 	bl	8001ef8 <HAL_GetTick>
 80030e2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe ff07 	bl	8001ef8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e2a0      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	4b72      	ldr	r3, [pc, #456]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80030fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ed      	bne.n	80030e6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800310a:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800310c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01a      	beq.n	800314e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003118:	4b6b      	ldr	r3, [pc, #428]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800311a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800311e:	4a6a      	ldr	r2, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003124:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe fee5 	bl	8001ef8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e27e      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003140:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ed      	bne.n	800312a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800314e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b5c      	ldr	r3, [pc, #368]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	4a5a      	ldr	r2, [pc, #360]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800315e:	f023 0304 	bic.w	r3, r3, #4
 8003162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d036      	beq.n	80031e0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d019      	beq.n	80031ae <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800317a:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a52      	ldr	r2, [pc, #328]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003184:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003186:	f7fe feb7 	bl	8001ef8 <HAL_GetTick>
 800318a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800318e:	f7fe feb3 	bl	8001ef8 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e24e      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80031a0:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x8fa>
 80031ac:	e018      	b.n	80031e0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80031ae:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a45      	ldr	r2, [pc, #276]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80031b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031ba:	f7fe fe9d 	bl	8001ef8 <HAL_GetTick>
 80031be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031c2:	f7fe fe99 	bl	8001ef8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e234      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80031d4:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d036      	beq.n	800325a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d019      	beq.n	8003228 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80031f4:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a33      	ldr	r2, [pc, #204]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80031fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003200:	f7fe fe7a 	bl	8001ef8 <HAL_GetTick>
 8003204:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003208:	f7fe fe76 	bl	8001ef8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e211      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x974>
 8003226:	e018      	b.n	800325a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800322e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003232:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003234:	f7fe fe60 	bl	8001ef8 <HAL_GetTick>
 8003238:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800323c:	f7fe fe5c 	bl	8001ef8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1f7      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d07f      	beq.n	8003366 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	d062      	beq.n	8003334 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003274:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003278:	6093      	str	r3, [r2, #8]
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	4910      	ldr	r1, [pc, #64]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003294:	d309      	bcc.n	80032aa <HAL_RCC_OscConfig+0xa16>
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 021f 	bic.w	r2, r3, #31
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4909      	ldr	r1, [pc, #36]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60cb      	str	r3, [r1, #12]
 80032a8:	e02a      	b.n	8003300 <HAL_RCC_OscConfig+0xa6c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	da0c      	bge.n	80032cc <HAL_RCC_OscConfig+0xa38>
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	4901      	ldr	r1, [pc, #4]	; (80032c8 <HAL_RCC_OscConfig+0xa34>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60cb      	str	r3, [r1, #12]
 80032c6:	e01b      	b.n	8003300 <HAL_RCC_OscConfig+0xa6c>
 80032c8:	46020c00 	.word	0x46020c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d30a      	bcc.n	80032ec <HAL_RCC_OscConfig+0xa58>
 80032d6:	4ba1      	ldr	r3, [pc, #644]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	499d      	ldr	r1, [pc, #628]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]
 80032ea:	e009      	b.n	8003300 <HAL_RCC_OscConfig+0xa6c>
 80032ec:	4b9b      	ldr	r3, [pc, #620]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	03db      	lsls	r3, r3, #15
 80032fa:	4998      	ldr	r1, [pc, #608]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003300:	4b96      	ldr	r3, [pc, #600]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a95      	ldr	r2, [pc, #596]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003306:	f043 0310 	orr.w	r3, r3, #16
 800330a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800330c:	f7fe fdf4 	bl	8001ef8 <HAL_GetTick>
 8003310:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003314:	f7fe fdf0 	bl	8001ef8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e18b      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003326:	4b8d      	ldr	r3, [pc, #564]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0xa80>
 8003332:	e018      	b.n	8003366 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003334:	4b89      	ldr	r3, [pc, #548]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a88      	ldr	r2, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800333a:	f023 0310 	bic.w	r3, r3, #16
 800333e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003340:	f7fe fdda 	bl	8001ef8 <HAL_GetTick>
 8003344:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003348:	f7fe fdd6 	bl	8001ef8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e171      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800335a:	4b80      	ldr	r3, [pc, #512]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8166 	beq.w	800363c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003376:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b0c      	cmp	r3, #12
 8003380:	f000 80f2 	beq.w	8003568 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	2b02      	cmp	r3, #2
 800338a:	f040 80c5 	bne.w	8003518 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a72      	ldr	r2, [pc, #456]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003398:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800339a:	f7fe fdad 	bl	8001ef8 <HAL_GetTick>
 800339e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe fda9 	bl	8001ef8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e144      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033b4:	4b69      	ldr	r3, [pc, #420]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d111      	bne.n	80033f2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80033d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d4:	4a61      	ldr	r2, [pc, #388]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80033f2:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_RCC_OscConfig+0xccc>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033fe:	d102      	bne.n	8003406 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003406:	4b56      	ldr	r3, [pc, #344]	; (8003560 <HAL_RCC_OscConfig+0xccc>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4a55      	ldr	r2, [pc, #340]	; (8003560 <HAL_RCC_OscConfig+0xccc>)
 800340c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003410:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003412:	4b52      	ldr	r3, [pc, #328]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003426:	3a01      	subs	r2, #1
 8003428:	0212      	lsls	r2, r2, #8
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003430:	430a      	orrs	r2, r1
 8003432:	494a      	ldr	r1, [pc, #296]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003434:	4313      	orrs	r3, r2
 8003436:	628b      	str	r3, [r1, #40]	; 0x28
 8003438:	4b48      	ldr	r3, [pc, #288]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800343a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343c:	4b49      	ldr	r3, [pc, #292]	; (8003564 <HAL_RCC_OscConfig+0xcd0>)
 800343e:	4013      	ands	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003444:	3a01      	subs	r2, #1
 8003446:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800344e:	3a01      	subs	r2, #1
 8003450:	0252      	lsls	r2, r2, #9
 8003452:	b292      	uxth	r2, r2
 8003454:	4311      	orrs	r1, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800345a:	3a01      	subs	r2, #1
 800345c:	0412      	lsls	r2, r2, #16
 800345e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003468:	3a01      	subs	r2, #1
 800346a:	0612      	lsls	r2, r2, #24
 800346c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003470:	430a      	orrs	r2, r1
 8003472:	493a      	ldr	r1, [pc, #232]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003474:	4313      	orrs	r3, r2
 8003476:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003478:	4b38      	ldr	r3, [pc, #224]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	4a37      	ldr	r2, [pc, #220]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800347e:	f023 0310 	bic.w	r3, r3, #16
 8003482:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	4a34      	ldr	r2, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	4a32      	ldr	r2, [pc, #200]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003494:	f043 0310 	orr.w	r3, r3, #16
 8003498:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800349a:	4b30      	ldr	r3, [pc, #192]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	f023 020c 	bic.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	492d      	ldr	r1, [pc, #180]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80034ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80034b4:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_RCC_OscConfig+0xccc>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a29      	ldr	r2, [pc, #164]	; (8003560 <HAL_RCC_OscConfig+0xccc>)
 80034ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034be:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80034c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ce:	4a23      	ldr	r2, [pc, #140]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034d8:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80034de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1c      	ldr	r2, [pc, #112]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 80034ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80034f0:	f7fe fd02 	bl	8001ef8 <HAL_GetTick>
 80034f4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fcfe 	bl	8001ef8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e099      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0xc64>
 8003516:	e091      	b.n	800363c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800351e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003522:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003524:	f7fe fce8 	bl	8001ef8 <HAL_GetTick>
 8003528:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7fe fce4 	bl	8001ef8 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e07f      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	4a03      	ldr	r2, [pc, #12]	; (800355c <HAL_RCC_OscConfig+0xcc8>)
 8003550:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003554:	f023 0303 	bic.w	r3, r3, #3
 8003558:	6293      	str	r3, [r2, #40]	; 0x28
 800355a:	e06f      	b.n	800363c <HAL_RCC_OscConfig+0xda8>
 800355c:	46020c00 	.word	0x46020c00
 8003560:	46020800 	.word	0x46020800
 8003564:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003568:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	2b01      	cmp	r3, #1
 800357a:	d039      	beq.n	80035f0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0203 	and.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d132      	bne.n	80035f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d129      	bne.n	80035f0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d122      	bne.n	80035f0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	0a5b      	lsrs	r3, r3, #9
 80035be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d111      	bne.n	80035f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	0e1b      	lsrs	r3, r3, #24
 80035e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e024      	b.n	800363e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003602:	429a      	cmp	r2, r3
 8003604:	d01a      	beq.n	800363c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 800360c:	f023 0310 	bic.w	r3, r3, #16
 8003610:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe fc71 	bl	8001ef8 <HAL_GetTick>
 8003616:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003618:	bf00      	nop
 800361a:	f7fe fc6d 	bl	8001ef8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	4293      	cmp	r3, r2
 8003624:	d0f9      	beq.n	800361a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <HAL_RCC_OscConfig+0xdb4>)
 8003636:	f043 0310 	orr.w	r3, r3, #16
 800363a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3738      	adds	r7, #56	; 0x38
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	46020c00 	.word	0x46020c00

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e1d9      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b9b      	ldr	r3, [pc, #620]	; (80038d0 <HAL_RCC_ClockConfig+0x284>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d910      	bls.n	8003690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b98      	ldr	r3, [pc, #608]	; (80038d0 <HAL_RCC_ClockConfig+0x284>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 020f 	bic.w	r2, r3, #15
 8003676:	4996      	ldr	r1, [pc, #600]	; (80038d0 <HAL_RCC_ClockConfig+0x284>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b94      	ldr	r3, [pc, #592]	; (80038d0 <HAL_RCC_ClockConfig+0x284>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e1c1      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	4b8c      	ldr	r3, [pc, #560]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d908      	bls.n	80036be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80036ac:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	4986      	ldr	r1, [pc, #536]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	4b81      	ldr	r3, [pc, #516]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d8:	429a      	cmp	r2, r3
 80036da:	d909      	bls.n	80036f0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80036dc:	4b7d      	ldr	r3, [pc, #500]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	497a      	ldr	r1, [pc, #488]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4b74      	ldr	r3, [pc, #464]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003708:	429a      	cmp	r2, r3
 800370a:	d908      	bls.n	800371e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b71      	ldr	r3, [pc, #452]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	496e      	ldr	r1, [pc, #440]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 800371a:	4313      	orrs	r3, r2
 800371c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	429a      	cmp	r2, r3
 8003738:	d908      	bls.n	800374c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800373a:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 020f 	bic.w	r2, r3, #15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4963      	ldr	r1, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003748:	4313      	orrs	r3, r2
 800374a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80d2 	beq.w	80038fe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d143      	bne.n	80037ee <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b5b      	ldr	r3, [pc, #364]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d110      	bne.n	8003796 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b57      	ldr	r3, [pc, #348]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377a:	4a56      	ldr	r2, [pc, #344]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 800377c:	f043 0304 	orr.w	r3, r3, #4
 8003780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003796:	f7fe fbaf 	bl	8001ef8 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800379c:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <HAL_RCC_ClockConfig+0x28c>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00f      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80037aa:	f7fe fba5 	bl	8001ef8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e12b      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCC_ClockConfig+0x28c>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d4:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d121      	bne.n	800382e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e112      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f6:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d115      	bne.n	800382e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e106      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0fa      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0f2      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4926      	ldr	r1, [pc, #152]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 800383c:	4313      	orrs	r3, r2
 800383e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003840:	f7fe fb5a 	bl	8001ef8 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d112      	bne.n	8003874 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003850:	f7fe fb52 	bl	8001ef8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d6      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d1ee      	bne.n	8003850 <HAL_RCC_ClockConfig+0x204>
 8003872:	e044      	b.n	80038fe <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d112      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387e:	f7fe fb3b 	bl	8001ef8 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e0bf      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_ClockConfig+0x232>
 80038a0:	e02d      	b.n	80038fe <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d123      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fe fb24 	bl	8001ef8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e0a8      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038c2:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_RCC_ClockConfig+0x288>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ee      	bne.n	80038ac <HAL_RCC_ClockConfig+0x260>
 80038ce:	e016      	b.n	80038fe <HAL_RCC_ClockConfig+0x2b2>
 80038d0:	40022000 	.word	0x40022000
 80038d4:	46020c00 	.word	0x46020c00
 80038d8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fe fb0c 	bl	8001ef8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e090      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038f2:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	429a      	cmp	r2, r3
 8003918:	d208      	bcs.n	800392c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800391a:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 020f 	bic.w	r2, r3, #15
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	493d      	ldr	r1, [pc, #244]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 8003928:	4313      	orrs	r3, r2
 800392a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <HAL_RCC_ClockConfig+0x3d4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d210      	bcs.n	800395c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <HAL_RCC_ClockConfig+0x3d4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 020f 	bic.w	r2, r3, #15
 8003942:	4937      	ldr	r1, [pc, #220]	; (8003a20 <HAL_RCC_ClockConfig+0x3d4>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <HAL_RCC_ClockConfig+0x3d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e05b      	b.n	8003a14 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003974:	429a      	cmp	r2, r3
 8003976:	d208      	bcs.n	800398a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4925      	ldr	r1, [pc, #148]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d209      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4919      	ldr	r1, [pc, #100]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d208      	bcs.n	80039ea <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	490d      	ldr	r1, [pc, #52]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80039ea:	f000 f821 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039ee:	4602      	mov	r2, r0
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x3d0>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	490a      	ldr	r1, [pc, #40]	; (8003a24 <HAL_RCC_ClockConfig+0x3d8>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x3dc>)
 8003a02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x3e0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fa2b 	bl	8001e64 <HAL_InitTick>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	46020c00 	.word	0x46020c00
 8003a20:	40022000 	.word	0x40022000
 8003a24:	0800d5d4 	.word	0x0800d5d4
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b08b      	sub	sp, #44	; 0x2c
 8003a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4b7b      	ldr	r3, [pc, #492]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4b78      	ldr	r3, [pc, #480]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d121      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d11e      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003a64:	4b71      	ldr	r3, [pc, #452]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003a70:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a76:	0b1b      	lsrs	r3, r3, #12
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003a80:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	0f1b      	lsrs	r3, r3, #28
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a8c:	4a68      	ldr	r2, [pc, #416]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d110      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003aa0:	e00d      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aa2:	4b62      	ldr	r3, [pc, #392]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aae:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	e004      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aba:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003abc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	f040 80ac 	bne.w	8003c1e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003ac6:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003ad0:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003ade:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003aea:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	08db      	lsrs	r3, r3, #3
 8003af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8086 	beq.w	8003c1a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d003      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0xec>
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d022      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x130>
 8003b1a:	e043      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003c38 <HAL_RCC_GetSysClockFreq+0x208>
 8003b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b3e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003b42:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003c3c <HAL_RCC_GetSysClockFreq+0x20c>
 8003b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003b5e:	e046      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003c38 <HAL_RCC_GetSysClockFreq+0x208>
 8003b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b72:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b82:	ed97 6a01 	vldr	s12, [r7, #4]
 8003b86:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003c3c <HAL_RCC_GetSysClockFreq+0x20c>
 8003b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003ba2:	e024      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003bcc:	ed97 6a01 	vldr	s12, [r7, #4]
 8003bd0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003c3c <HAL_RCC_GetSysClockFreq+0x20c>
 8003bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003bec:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	0e1b      	lsrs	r3, r3, #24
 8003bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c12:	ee17 3a90 	vmov	r3, s15
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	e001      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	372c      	adds	r7, #44	; 0x2c
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	46020c00 	.word	0x46020c00
 8003c30:	0800d5ec 	.word	0x0800d5ec
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	4b742400 	.word	0x4b742400
 8003c3c:	46000000 	.word	0x46000000

08003c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003c44:	f7ff fef4 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x28>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4906      	ldr	r1, [pc, #24]	; (8003c6c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <HAL_RCC_GetHCLKFreq+0x30>)
 8003c5c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <HAL_RCC_GetHCLKFreq+0x30>)
 8003c60:	681b      	ldr	r3, [r3, #0]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	46020c00 	.word	0x46020c00
 8003c6c:	0800d5d4 	.word	0x0800d5d4
 8003c70:	20000000 	.word	0x20000000

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003c78:	f7ff ffe2 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	46020c00 	.word	0x46020c00
 8003c98:	0800d5e4 	.word	0x0800d5e4

08003c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003ca0:	f7ff ffce 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	46020c00 	.word	0x46020c00
 8003cc0:	0800d5e4 	.word	0x0800d5e4

08003cc4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003cc8:	f7ff ffba 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	46020c00 	.word	0x46020c00
 8003ce8:	0800d5e4 	.word	0x0800d5e4

08003cec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d02:	f7fe fda9 	bl	8002858 <HAL_PWREx_GetVoltageRange>
 8003d06:	6178      	str	r0, [r7, #20]
 8003d08:	e019      	b.n	8003d3e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d10:	4a37      	ldr	r2, [pc, #220]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003d1a:	4b35      	ldr	r3, [pc, #212]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d28:	f7fe fd96 	bl	8002858 <HAL_PWREx_GetVoltageRange>
 8003d2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003d36:	f023 0304 	bic.w	r3, r3, #4
 8003d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d44:	d003      	beq.n	8003d4e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d4c:	d109      	bne.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d54:	d202      	bcs.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003d56:	2301      	movs	r3, #1
 8003d58:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003d5a:	e033      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003d60:	e030      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d68:	d208      	bcs.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d102      	bne.n	8003d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003d72:	2303      	movs	r3, #3
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e025      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e035      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d82:	d90f      	bls.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d90:	d902      	bls.n	8003d98 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e015      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003d98:	2301      	movs	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	e012      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	e00f      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003daa:	d109      	bne.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db2:	d102      	bne.n	8003dba <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003db4:	2301      	movs	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e004      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003dba:	2302      	movs	r3, #2
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e001      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 020f 	bic.w	r2, r3, #15
 8003dcc:	4909      	ldr	r1, [pc, #36]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d001      	beq.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	46020c00 	.word	0x46020c00
 8003df4:	40022000 	.word	0x40022000

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b0b6      	sub	sp, #216	; 0xd8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f002 0401 	and.w	r4, r2, #1
 8003e1c:	2500      	movs	r5, #0
 8003e1e:	ea54 0305 	orrs.w	r3, r4, r5
 8003e22:	d00b      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003e24:	4bc5      	ldr	r3, [pc, #788]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e2a:	f023 0103 	bic.w	r1, r3, #3
 8003e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	4ac1      	ldr	r2, [pc, #772]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e36:	430b      	orrs	r3, r1
 8003e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f002 0804 	and.w	r8, r2, #4
 8003e48:	f04f 0900 	mov.w	r9, #0
 8003e4c:	ea58 0309 	orrs.w	r3, r8, r9
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003e52:	4bba      	ldr	r3, [pc, #744]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	4ab6      	ldr	r2, [pc, #728]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f002 0a08 	and.w	sl, r2, #8
 8003e76:	f04f 0b00 	mov.w	fp, #0
 8003e7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e7e:	d00b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003e80:	4bae      	ldr	r3, [pc, #696]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	4aaa      	ldr	r2, [pc, #680]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 0310 	and.w	r3, r2, #16
 8003ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003eae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003eb8:	4ba0      	ldr	r3, [pc, #640]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	4a9c      	ldr	r2, [pc, #624]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 0320 	and.w	r3, r2, #32
 8003edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ee6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ef0:	4b92      	ldr	r3, [pc, #584]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef6:	f023 0107 	bic.w	r1, r3, #7
 8003efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f00:	4a8e      	ldr	r2, [pc, #568]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f1e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f22:	460b      	mov	r3, r1
 8003f24:	4313      	orrs	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003f28:	4b84      	ldr	r3, [pc, #528]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f2e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f38:	4a80      	ldr	r2, [pc, #512]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f56:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f70:	4a72      	ldr	r2, [pc, #456]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f72:	430b      	orrs	r3, r1
 8003f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f92:	460b      	mov	r3, r1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa8:	4a64      	ldr	r2, [pc, #400]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003faa:	430b      	orrs	r3, r1
 8003fac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fc6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003fd0:	4b5a      	ldr	r3, [pc, #360]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a56      	ldr	r2, [pc, #344]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ffe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d00b      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004008:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800400a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800400e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004018:	4a48      	ldr	r2, [pc, #288]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800401a:	430b      	orrs	r3, r1
 800401c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800402c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004036:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800403a:	460b      	mov	r3, r1
 800403c:	4313      	orrs	r3, r2
 800403e:	d00b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004040:	4b3e      	ldr	r3, [pc, #248]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004046:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800404a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800404e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004050:	4a3a      	ldr	r2, [pc, #232]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004052:	430b      	orrs	r3, r1
 8004054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004064:	67bb      	str	r3, [r7, #120]	; 0x78
 8004066:	2300      	movs	r3, #0
 8004068:	67fb      	str	r3, [r7, #124]	; 0x7c
 800406a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800406e:	460b      	mov	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	d00b      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004074:	4b31      	ldr	r3, [pc, #196]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800407a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800407e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004084:	4a2d      	ldr	r2, [pc, #180]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004086:	430b      	orrs	r3, r1
 8004088:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800408c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004098:	673b      	str	r3, [r7, #112]	; 0x70
 800409a:	2300      	movs	r3, #0
 800409c:	677b      	str	r3, [r7, #116]	; 0x74
 800409e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80040a2:	460b      	mov	r3, r1
 80040a4:	4313      	orrs	r3, r2
 80040a6:	d04f      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80040a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	d02d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d827      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d02b      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80040bc:	2b60      	cmp	r3, #96	; 0x60
 80040be:	d823      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d006      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d81f      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d011      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80040d0:	e01a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	4a19      	ldr	r2, [pc, #100]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040de:	e01a      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040e4:	3308      	adds	r3, #8
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 f93e 	bl	8006368 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040f2:	e010      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f8:	332c      	adds	r3, #44	; 0x2c
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 f9cc 	bl	8006498 <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004106:	e006      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800410e:	e002      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004116:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004120:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004124:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800412c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004130:	4a02      	ldr	r2, [pc, #8]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004132:	430b      	orrs	r3, r1
 8004134:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800413a:	bf00      	nop
 800413c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004144:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004154:	66bb      	str	r3, [r7, #104]	; 0x68
 8004156:	2300      	movs	r3, #0
 8004158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800415a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d046      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004168:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800416c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004170:	d028      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004172:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004176:	d821      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800417c:	d022      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800417e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004182:	d81b      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004188:	d01c      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800418a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800418e:	d815      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004194:	d008      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419a:	d80f      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d011      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d00e      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80041a6:	e009      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041ac:	3308      	adds	r3, #8
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 f8da 	bl	8006368 <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041ba:	e004      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 80041c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80041ce:	4bb6      	ldr	r3, [pc, #728]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80041d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80041d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041e0:	4ab1      	ldr	r2, [pc, #708]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80041e2:	430b      	orrs	r3, r1
 80041e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041e8:	e003      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ea:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80041ee:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80041f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80041fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004200:	2300      	movs	r3, #0
 8004202:	667b      	str	r3, [r7, #100]	; 0x64
 8004204:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004208:	460b      	mov	r3, r1
 800420a:	4313      	orrs	r3, r2
 800420c:	d03e      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800420e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	2b04      	cmp	r3, #4
 8004218:	d81d      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	0800425f 	.word	0x0800425f
 8004224:	08004235 	.word	0x08004235
 8004228:	08004243 	.word	0x08004243
 800422c:	0800425f 	.word	0x0800425f
 8004230:	0800425f 	.word	0x0800425f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004234:	4b9c      	ldr	r3, [pc, #624]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	4a9b      	ldr	r2, [pc, #620]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800423a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004240:	e00e      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004246:	332c      	adds	r3, #44	; 0x2c
 8004248:	4618      	mov	r0, r3
 800424a:	f002 f925 	bl	8006498 <RCCEx_PLL3_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004254:	e004      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800425c:	e000      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 800425e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004260:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004268:	4b8f      	ldr	r3, [pc, #572]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800426a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800426e:	f023 0107 	bic.w	r1, r3, #7
 8004272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427a:	4a8b      	ldr	r2, [pc, #556]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800427c:	430b      	orrs	r3, r1
 800427e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004282:	e003      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004288:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800428c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004298:	65bb      	str	r3, [r7, #88]	; 0x58
 800429a:	2300      	movs	r3, #0
 800429c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800429e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d04a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80042a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042b4:	d028      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80042b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ba:	d821      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80042bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042c0:	d024      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042c6:	d81b      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80042c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042cc:	d00e      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80042ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042d2:	d815      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d110      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042de:	4b72      	ldr	r3, [pc, #456]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	4a71      	ldr	r2, [pc, #452]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80042ea:	e012      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042f0:	332c      	adds	r3, #44	; 0x2c
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 f8d0 	bl	8006498 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80042fe:	e008      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004306:	e004      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004308:	bf00      	nop
 800430a:	e002      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800430c:	bf00      	nop
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004310:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004312:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800431c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004320:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	4a5e      	ldr	r2, [pc, #376]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800432e:	430b      	orrs	r3, r1
 8004330:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800433a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800433e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800434a:	653b      	str	r3, [r7, #80]	; 0x50
 800434c:	2300      	movs	r3, #0
 800434e:	657b      	str	r3, [r7, #84]	; 0x54
 8004350:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004354:	460b      	mov	r3, r1
 8004356:	4313      	orrs	r3, r2
 8004358:	f000 80ba 	beq.w	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435c:	2300      	movs	r3, #0
 800435e:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	4b51      	ldr	r3, [pc, #324]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d113      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004370:	4b4d      	ldr	r3, [pc, #308]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004376:	4a4c      	ldr	r2, [pc, #304]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004380:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800438e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004398:	4b44      	ldr	r3, [pc, #272]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	4a43      	ldr	r2, [pc, #268]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a4:	f7fd fda8 	bl	8001ef8 <HAL_GetTick>
 80043a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043ac:	e00b      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ae:	f7fd fda3 	bl	8001ef8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d903      	bls.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80043c4:	e005      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0ed      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 80043d2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d16a      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043da:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80043dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80043e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80043f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043f4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80043f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d01b      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004400:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004414:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004434:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d019      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd fd58 	bl	8001ef8 <HAL_GetTick>
 8004448:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444c:	e00d      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd fd53 	bl	8001ef8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	f241 3388 	movw	r3, #5000	; 0x1388
 800445e:	429a      	cmp	r2, r3
 8004460:	d903      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800446c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ea      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8004478:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10d      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004486:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800448a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800448e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004494:	430b      	orrs	r3, r1
 8004496:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800449a:	e00d      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800449c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80044a0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80044a4:	e008      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80044a6:	bf00      	nop
 80044a8:	46020c00 	.word	0x46020c00
 80044ac:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80044b4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044b8:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d107      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	4bb2      	ldr	r3, [pc, #712]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	4ab1      	ldr	r2, [pc, #708]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80044d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80044de:	2300      	movs	r3, #0
 80044e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044e6:	460b      	mov	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	d042      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80044ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044f8:	d022      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80044fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044fe:	d81b      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004504:	d011      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x732>
 8004506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450a:	d815      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d019      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004514:	d110      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800451a:	3308      	adds	r3, #8
 800451c:	4618      	mov	r0, r3
 800451e:	f001 ff23 	bl	8006368 <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004528:	e00d      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452a:	4b98      	ldr	r3, [pc, #608]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	4a97      	ldr	r2, [pc, #604]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004536:	e006      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800453e:	e002      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004544:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004546:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800454e:	4b8f      	ldr	r3, [pc, #572]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004554:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800455c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004560:	4a8a      	ldr	r2, [pc, #552]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004562:	430b      	orrs	r3, r1
 8004564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800456e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800457e:	643b      	str	r3, [r7, #64]	; 0x40
 8004580:	2300      	movs	r3, #0
 8004582:	647b      	str	r3, [r7, #68]	; 0x44
 8004584:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d02d      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800458e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	d00b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d804      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	d007      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80045b2:	e004      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80045b4:	bf00      	nop
 80045b6:	e002      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80045bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80045be:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10d      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80045c6:	4b71      	ldr	r3, [pc, #452]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80045c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	4a6c      	ldr	r2, [pc, #432]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80045da:	430b      	orrs	r3, r1
 80045dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80045e6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80045ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f8:	2300      	movs	r3, #0
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d00c      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004606:	4b61      	ldr	r3, [pc, #388]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004608:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800460c:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004618:	4a5c      	ldr	r2, [pc, #368]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800461a:	430b      	orrs	r3, r1
 800461c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
 800462e:	2300      	movs	r3, #0
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
 8004632:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d019      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800463c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004648:	d105      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800464a:	4b50      	ldr	r3, [pc, #320]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	4a4f      	ldr	r2, [pc, #316]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004656:	4b4d      	ldr	r3, [pc, #308]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800465c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004668:	4a48      	ldr	r2, [pc, #288]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800466a:	430b      	orrs	r3, r1
 800466c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
 800467e:	2300      	movs	r3, #0
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004682:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	d00c      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800468e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800469a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800469e:	493b      	ldr	r1, [pc, #236]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80046a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046bc:	460b      	mov	r3, r1
 80046be:	4313      	orrs	r3, r2
 80046c0:	d00c      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80046c2:	4b32      	ldr	r3, [pc, #200]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80046c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046d4:	492d      	ldr	r1, [pc, #180]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80046dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d00c      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80046fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046fe:	f023 0218 	bic.w	r2, r3, #24
 8004702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800470a:	4920      	ldr	r1, [pc, #128]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004712:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004728:	460b      	mov	r3, r1
 800472a:	4313      	orrs	r3, r2
 800472c:	d034      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800472e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004732:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4b13      	ldr	r3, [pc, #76]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004746:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800474c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004754:	d108      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800475a:	3308      	adds	r3, #8
 800475c:	4618      	mov	r0, r3
 800475e:	f001 fe03 	bl	8006368 <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 8004768:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10f      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004772:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004776:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800477a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800477e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004782:	4902      	ldr	r1, [pc, #8]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800478a:	e005      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800478c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004794:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d03a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80047b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c0:	d00e      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80047c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c6:	d815      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d017      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80047cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d0:	d110      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d2:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	4a26      	ldr	r2, [pc, #152]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80047d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80047de:	e00e      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047e4:	3308      	adds	r3, #8
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 fdbe 	bl	8006368 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 80047fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80047fe:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800480c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004818:	4915      	ldr	r1, [pc, #84]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004820:	e003      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004826:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800482a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004840:	460b      	mov	r3, r1
 8004842:	4313      	orrs	r3, r2
 8004844:	d00c      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800484c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004858:	4905      	ldr	r1, [pc, #20]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004860:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 8004864:	4618      	mov	r0, r3
 8004866:	37d8      	adds	r7, #216	; 0xd8
 8004868:	46bd      	mov	sp, r7
 800486a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486e:	bf00      	nop
 8004870:	46020c00 	.word	0x46020c00

08004874 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800487c:	4bad      	ldr	r3, [pc, #692]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004884:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004886:	4bab      	ldr	r3, [pc, #684]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004890:	4ba8      	ldr	r3, [pc, #672]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	3301      	adds	r3, #1
 800489c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800489e:	4ba5      	ldr	r3, [pc, #660]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80048aa:	4ba2      	ldr	r3, [pc, #648]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8123 	beq.w	8004b14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d062      	beq.n	800499a <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	f200 8081 	bhi.w	80049de <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d024      	beq.n	800492c <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d17a      	bne.n	80049de <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004b38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b8e      	ldr	r3, [pc, #568]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800490a:	ed97 6a02 	vldr	s12, [r7, #8]
 800490e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800491a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492a:	e08f      	b.n	8004a4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800492c:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8004938:	4b7e      	ldr	r3, [pc, #504]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	0f1b      	lsrs	r3, r3, #28
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	e006      	b.n	8004952 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	0f1b      	lsrs	r3, r3, #28
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	4a7b      	ldr	r2, [pc, #492]	; (8004b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	ee07 3a90 	vmov	s15, r3
 800495c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004978:	ed97 6a02 	vldr	s12, [r7, #8]
 800497c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004988:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800498c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004994:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004998:	e058      	b.n	8004a4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004b38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80049a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ac:	4b61      	ldr	r3, [pc, #388]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80049c0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80049c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049dc:	e036      	b.n	8004a4c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80049de:	4b55      	ldr	r3, [pc, #340]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 80049ea:	4b52      	ldr	r3, [pc, #328]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0f1b      	lsrs	r3, r3, #28
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	e006      	b.n	8004a04 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 80049f6:	4b4f      	ldr	r3, [pc, #316]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	0f1b      	lsrs	r3, r3, #28
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	4a4e      	ldr	r2, [pc, #312]	; (8004b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a2e:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004b3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004a4c:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d017      	beq.n	8004a88 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a58:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	0a5b      	lsrs	r3, r3, #9
 8004a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a7e:	ee17 2a90 	vmov	r2, s15
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e002      	b.n	8004a8e <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004a8e:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d017      	beq.n	8004aca <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a9a:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004ab4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac0:	ee17 2a90 	vmov	r2, s15
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d017      	beq.n	8004b0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004adc:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b02:	ee17 2a90 	vmov	r2, s15
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004b0a:	e00c      	b.n	8004b26 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	609a      	str	r2, [r3, #8]
}
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
}
 8004b26:	bf00      	nop
 8004b28:	3724      	adds	r7, #36	; 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	46020c00 	.word	0x46020c00
 8004b38:	4b742400 	.word	0x4b742400
 8004b3c:	46000000 	.word	0x46000000
 8004b40:	0800d5ec 	.word	0x0800d5ec

08004b44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	; 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004b4c:	4bad      	ldr	r3, [pc, #692]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b54:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004b56:	4bab      	ldr	r3, [pc, #684]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004b60:	4ba8      	ldr	r3, [pc, #672]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004b6e:	4ba5      	ldr	r3, [pc, #660]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004b7a:	4ba2      	ldr	r3, [pc, #648]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	08db      	lsrs	r3, r3, #3
 8004b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8123 	beq.w	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d062      	beq.n	8004c6a <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	f200 8081 	bhi.w	8004cae <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d024      	beq.n	8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d17a      	bne.n	8004cae <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b8e      	ldr	r3, [pc, #568]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bde:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfa:	e08f      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004bfc:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8004c08:	4b7e      	ldr	r3, [pc, #504]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	0f1b      	lsrs	r3, r3, #28
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	e006      	b.n	8004c22 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8004c14:	4b7b      	ldr	r3, [pc, #492]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	0f1b      	lsrs	r3, r3, #28
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	4a7b      	ldr	r2, [pc, #492]	; (8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c48:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c4c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004c50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c68:	e058      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c74:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c90:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004c94:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cac:	e036      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004cae:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8004cba:	4b52      	ldr	r3, [pc, #328]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0f1b      	lsrs	r3, r3, #28
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8004cc6:	4b4f      	ldr	r3, [pc, #316]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	0f1b      	lsrs	r3, r3, #28
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	4a4e      	ldr	r2, [pc, #312]	; (8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8004cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	ee07 3a90 	vmov	s15, r3
 8004ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cfe:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1a:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004d1c:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d017      	beq.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004d28:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	0a5b      	lsrs	r3, r3, #9
 8004d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4e:	ee17 2a90 	vmov	r2, s15
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e002      	b.n	8004d5e <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d017      	beq.n	8004d9a <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004d6a:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d80:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d90:	ee17 2a90 	vmov	r2, s15
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	605a      	str	r2, [r3, #4]
 8004d98:	e002      	b.n	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004da0:	4b18      	ldr	r3, [pc, #96]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d017      	beq.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004dac:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	0e1b      	lsrs	r3, r3, #24
 8004db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd2:	ee17 2a90 	vmov	r2, s15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dda:	e00c      	b.n	8004df6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
}
 8004de2:	e008      	b.n	8004df6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	609a      	str	r2, [r3, #8]
}
 8004df6:	bf00      	nop
 8004df8:	3724      	adds	r7, #36	; 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	46020c00 	.word	0x46020c00
 8004e08:	4b742400 	.word	0x4b742400
 8004e0c:	46000000 	.word	0x46000000
 8004e10:	0800d5ec 	.word	0x0800d5ec

08004e14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004e1c:	4bad      	ldr	r3, [pc, #692]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e24:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004e26:	4bab      	ldr	r3, [pc, #684]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004e30:	4ba8      	ldr	r3, [pc, #672]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004e3e:	4ba5      	ldr	r3, [pc, #660]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004e4a:	4ba2      	ldr	r3, [pc, #648]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4e:	08db      	lsrs	r3, r3, #3
 8004e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8123 	beq.w	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d062      	beq.n	8004f3a <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f200 8081 	bhi.w	8004f7e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d024      	beq.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d17a      	bne.n	8004f7e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eddf 6a91 	vldr	s13, [pc, #580]	; 80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b8e      	ldr	r3, [pc, #568]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eae:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8004eca:	e08f      	b.n	8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004ecc:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004ed8:	4b7e      	ldr	r3, [pc, #504]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	0f1b      	lsrs	r3, r3, #28
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	e006      	b.n	8004ef2 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004ee4:	4b7b      	ldr	r3, [pc, #492]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	0f1b      	lsrs	r3, r3, #28
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	4a7b      	ldr	r2, [pc, #492]	; (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef8:	ee07 3a90 	vmov	s15, r3
 8004efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f18:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f1c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f38:	e058      	b.n	8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f44:	eddf 6a64 	vldr	s13, [pc, #400]	; 80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4c:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f60:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7c:	e036      	b.n	8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004f7e:	4b55      	ldr	r3, [pc, #340]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004f8a:	4b52      	ldr	r3, [pc, #328]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0f1b      	lsrs	r3, r3, #28
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	e006      	b.n	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004f96:	4b4f      	ldr	r3, [pc, #316]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	0f1b      	lsrs	r3, r3, #28
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	4a4e      	ldr	r2, [pc, #312]	; (80050e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fce:	eddf 5a43 	vldr	s11, [pc, #268]	; 80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fea:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004fec:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d017      	beq.n	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	0a5b      	lsrs	r3, r3, #9
 8004ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800500a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800500e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005012:	edd7 6a07 	vldr	s13, [r7, #28]
 8005016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501e:	ee17 2a90 	vmov	r2, s15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e002      	b.n	800502e <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800502e:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d017      	beq.n	800506a <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800503a:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800504c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005050:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005054:	edd7 6a07 	vldr	s13, [r7, #28]
 8005058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005060:	ee17 2a90 	vmov	r2, s15
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	e002      	b.n	8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005070:	4b18      	ldr	r3, [pc, #96]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d017      	beq.n	80050ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	0e1b      	lsrs	r3, r3, #24
 8005082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800508e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005092:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005096:	edd7 6a07 	vldr	s13, [r7, #28]
 800509a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a2:	ee17 2a90 	vmov	r2, s15
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80050aa:	e00c      	b.n	80050c6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
}
 80050b2:	e008      	b.n	80050c6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	609a      	str	r2, [r3, #8]
}
 80050c6:	bf00      	nop
 80050c8:	3724      	adds	r7, #36	; 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	46020c00 	.word	0x46020c00
 80050d8:	4b742400 	.word	0x4b742400
 80050dc:	46000000 	.word	0x46000000
 80050e0:	0800d5ec 	.word	0x0800d5ec

080050e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08e      	sub	sp, #56	; 0x38
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80050ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80050f6:	430b      	orrs	r3, r1
 80050f8:	d145      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80050fa:	4b9b      	ldr	r3, [pc, #620]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80050fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005104:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005106:	4b98      	ldr	r3, [pc, #608]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d108      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511a:	d104      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800511c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
 8005122:	f001 b912 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005126:	4b90      	ldr	r3, [pc, #576]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005134:	d114      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513c:	d110      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800513e:	4b8a      	ldr	r3, [pc, #552]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514c:	d103      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800514e:	23fa      	movs	r3, #250	; 0xfa
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005152:	f001 b8fa 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005156:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800515c:	f001 b8f5 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005160:	4b81      	ldr	r3, [pc, #516]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800516c:	d107      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005174:	d103      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005176:	4b7d      	ldr	r3, [pc, #500]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
 800517a:	f001 b8e6 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
 8005182:	f001 b8e2 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800518a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800518e:	430b      	orrs	r3, r1
 8005190:	d151      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005192:	4b75      	ldr	r3, [pc, #468]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005198:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800519c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	d035      	beq.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	d841      	bhi.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d02a      	beq.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2b60      	cmp	r3, #96	; 0x60
 80051b4:	d83b      	bhi.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d009      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d835      	bhi.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d012      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80051ce:	e02e      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fb4d 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051de:	f001 b8b4 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051e2:	f107 0318 	add.w	r3, r7, #24
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fcac 	bl	8004b44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051f0:	f001 b8ab 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051f4:	f107 030c 	add.w	r3, r7, #12
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fe0b 	bl	8004e14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005202:	f001 b8a2 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005206:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800520c:	f001 b89d 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005210:	4b55      	ldr	r3, [pc, #340]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521c:	d103      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800521e:	4b54      	ldr	r3, [pc, #336]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005222:	f001 b892 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800522a:	f001 b88e 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005232:	f001 b88a 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800523a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800523e:	430b      	orrs	r3, r1
 8005240:	d126      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005242:	4b49      	ldr	r3, [pc, #292]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005244:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524c:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800524e:	4b46      	ldr	r3, [pc, #280]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525a:	d106      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 8005262:	4b43      	ldr	r3, [pc, #268]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
 8005266:	f001 b870 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800526a:	4b3f      	ldr	r3, [pc, #252]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005276:	d107      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800527e:	d103      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8005280:	4b3c      	ldr	r3, [pc, #240]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
 8005284:	f001 b861 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
 800528c:	f001 b85d 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005294:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005298:	430b      	orrs	r3, r1
 800529a:	d171      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800529c:	4b32      	ldr	r3, [pc, #200]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800529e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052ae:	d034      	beq.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052b6:	d853      	bhi.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052be:	d00b      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c6:	d84b      	bhi.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d4:	d009      	beq.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80052d6:	e043      	b.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fac9 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052e6:	f001 b830 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ea:	f107 0318 	add.w	r3, r7, #24
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fc28 	bl	8004b44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052f8:	f001 b827 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d103      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 800530a:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800530e:	f001 b81c 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005316:	f001 b818 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800531a:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d118      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005332:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	0e1b      	lsrs	r3, r3, #24
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	e006      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	0e1b      	lsrs	r3, r3, #24
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	4a0b      	ldr	r2, [pc, #44]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800534e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005354:	f000 bff9 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800535c:	f000 bff5 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005364:	f000 bff1 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005368:	46020c00 	.word	0x46020c00
 800536c:	0007a120 	.word	0x0007a120
 8005370:	00f42400 	.word	0x00f42400
 8005374:	007a1200 	.word	0x007a1200
 8005378:	02dc6c00 	.word	0x02dc6c00
 800537c:	0800d5ec 	.word	0x0800d5ec
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005384:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005388:	430b      	orrs	r3, r1
 800538a:	d17f      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800538c:	4ba8      	ldr	r3, [pc, #672]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800538e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005396:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	2b00      	cmp	r3, #0
 800539c:	d165      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800539e:	4ba4      	ldr	r3, [pc, #656]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80053a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053b0:	d034      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053b8:	d853      	bhi.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c0:	d00b      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c8:	d84b      	bhi.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d6:	d009      	beq.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80053d8:	e043      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fa48 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80053e8:	f000 bfaf 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ec:	f107 0318 	add.w	r3, r7, #24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fba7 	bl	8004b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80053fa:	f000 bfa6 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80053fe:	4b8c      	ldr	r3, [pc, #560]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540a:	d103      	bne.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 800540c:	4b89      	ldr	r3, [pc, #548]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005410:	f000 bf9b 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005418:	f000 bf97 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800541c:	4b84      	ldr	r3, [pc, #528]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d118      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005428:	4b81      	ldr	r3, [pc, #516]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005434:	4b7e      	ldr	r3, [pc, #504]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	0e1b      	lsrs	r3, r3, #24
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	e006      	b.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8005440:	4b7b      	ldr	r3, [pc, #492]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	0e1b      	lsrs	r3, r3, #24
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	4a7a      	ldr	r2, [pc, #488]	; (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005456:	f000 bf78 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800545e:	f000 bf74 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005466:	f000 bf70 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005470:	d108      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f9fc 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
 8005480:	f000 bf63 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
 8005488:	f000 bf5f 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800548c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005490:	1e51      	subs	r1, r2, #1
 8005492:	430b      	orrs	r3, r1
 8005494:	d136      	bne.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005496:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7fe fbf8 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 80054ac:	6378      	str	r0, [r7, #52]	; 0x34
 80054ae:	f000 bf4c 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d104      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054b8:	f7fe faba 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80054bc:	6378      	str	r0, [r7, #52]	; 0x34
 80054be:	f000 bf44 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80054c2:	4b5b      	ldr	r3, [pc, #364]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d106      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d103      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80054d6:	4b59      	ldr	r3, [pc, #356]	; (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
 80054da:	f000 bf36 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80054de:	4b54      	ldr	r3, [pc, #336]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80054e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d107      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d104      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 80054f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
 80054f8:	f000 bf27 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005500:	f000 bf23 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005508:	1f11      	subs	r1, r2, #4
 800550a:	430b      	orrs	r3, r1
 800550c:	d136      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800550e:	4b48      	ldr	r3, [pc, #288]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005514:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005518:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005520:	f7fe fba8 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005524:	6378      	str	r0, [r7, #52]	; 0x34
 8005526:	f000 bf10 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	2b10      	cmp	r3, #16
 800552e:	d104      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005530:	f7fe fa7e 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005534:	6378      	str	r0, [r7, #52]	; 0x34
 8005536:	f000 bf08 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800553a:	4b3d      	ldr	r3, [pc, #244]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005546:	d106      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	2b20      	cmp	r3, #32
 800554c:	d103      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 800554e:	4b3b      	ldr	r3, [pc, #236]	; (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	f000 befa 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005556:	4b36      	ldr	r3, [pc, #216]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b02      	cmp	r3, #2
 8005562:	d107      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	2b30      	cmp	r3, #48	; 0x30
 8005568:	d104      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	f000 beeb 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
 8005578:	f000 bee7 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800557c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005580:	f1a2 0108 	sub.w	r1, r2, #8
 8005584:	430b      	orrs	r3, r1
 8005586:	d136      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005588:	4b29      	ldr	r3, [pc, #164]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800558a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800558e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005592:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800559a:	f7fe fb6b 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 800559e:	6378      	str	r0, [r7, #52]	; 0x34
 80055a0:	f000 bed3 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d104      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80055aa:	f7fe fa41 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80055ae:	6378      	str	r0, [r7, #52]	; 0x34
 80055b0:	f000 becb 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c0:	d106      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d103      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 80055c8:	4b1c      	ldr	r3, [pc, #112]	; (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
 80055cc:	f000 bebd 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80055d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d107      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2bc0      	cmp	r3, #192	; 0xc0
 80055e2:	d104      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 80055e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ea:	f000 beae 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
 80055f2:	f000 beaa 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80055f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055fa:	f1a2 0110 	sub.w	r1, r2, #16
 80055fe:	430b      	orrs	r3, r1
 8005600:	d141      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8005604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe fb2e 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005618:	6378      	str	r0, [r7, #52]	; 0x34
 800561a:	f000 be96 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005624:	d10c      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005626:	f7fe fa03 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 800562a:	6378      	str	r0, [r7, #52]	; 0x34
 800562c:	f000 be8d 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005630:	46020c00 	.word	0x46020c00
 8005634:	02dc6c00 	.word	0x02dc6c00
 8005638:	0800d5ec 	.word	0x0800d5ec
 800563c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005640:	4baa      	ldr	r3, [pc, #680]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564c:	d107      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005654:	d103      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005656:	4ba6      	ldr	r3, [pc, #664]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
 800565a:	f000 be76 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800565e:	4ba3      	ldr	r3, [pc, #652]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d108      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005672:	d104      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8005674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
 800567a:	f000 be66 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
 8005682:	f000 be62 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800568a:	f1a2 0120 	sub.w	r1, r2, #32
 800568e:	430b      	orrs	r3, r1
 8005690:	d158      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005692:	4b96      	ldr	r3, [pc, #600]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80056a4:	f7fe fb0e 	bl	8003cc4 <HAL_RCC_GetPCLK3Freq>
 80056a8:	6378      	str	r0, [r7, #52]	; 0x34
 80056aa:	f000 be4e 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d104      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056b4:	f7fe f9bc 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80056b8:	6378      	str	r0, [r7, #52]	; 0x34
 80056ba:	f000 be46 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80056be:	4b8b      	ldr	r3, [pc, #556]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ca:	d106      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d103      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 80056d2:	4b87      	ldr	r3, [pc, #540]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
 80056d6:	f000 be38 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80056da:	4b84      	ldr	r3, [pc, #528]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d107      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d104      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 80056ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
 80056f4:	f000 be29 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80056f8:	4b7c      	ldr	r3, [pc, #496]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b20      	cmp	r3, #32
 8005702:	d11b      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	2b04      	cmp	r3, #4
 8005708:	d118      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800570a:	4b78      	ldr	r3, [pc, #480]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8005716:	4b75      	ldr	r3, [pc, #468]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0e1b      	lsrs	r3, r3, #24
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005722:	4b72      	ldr	r3, [pc, #456]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	0e1b      	lsrs	r3, r3, #24
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	4a70      	ldr	r2, [pc, #448]	; (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
 8005738:	f000 be07 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
 8005740:	f000 be03 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005748:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800574c:	430b      	orrs	r3, r1
 800574e:	d16c      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005750:	4b66      	ldr	r3, [pc, #408]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005756:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800575a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005762:	d104      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005764:	f7fe f964 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005768:	6378      	str	r0, [r7, #52]	; 0x34
 800576a:	f000 bdee 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005774:	d108      	bne.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005776:	f107 0318 	add.w	r3, r7, #24
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff f9e2 	bl	8004b44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
 8005784:	f000 bde1 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800578e:	f7fe fa57 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8005792:	6378      	str	r0, [r7, #52]	; 0x34
 8005794:	f000 bdd9 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800579e:	d122      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80057a0:	4b52      	ldr	r3, [pc, #328]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d118      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057ac:	4b4f      	ldr	r3, [pc, #316]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80057b8:	4b4c      	ldr	r3, [pc, #304]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	0e1b      	lsrs	r3, r3, #24
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	e006      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80057c4:	4b49      	ldr	r3, [pc, #292]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80057c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	0e1b      	lsrs	r3, r3, #24
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	4a48      	ldr	r2, [pc, #288]	; (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80057d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
 80057da:	f000 bdb6 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
 80057e2:	f000 bdb2 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80057e6:	4b41      	ldr	r3, [pc, #260]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057fa:	d103      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80057fc:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005800:	f000 bda3 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005804:	4b39      	ldr	r3, [pc, #228]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005810:	d107      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005818:	d103      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 800581a:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
 800581e:	f000 bd94 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
 8005826:	f000 bd90 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800582a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800582e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005832:	430b      	orrs	r3, r1
 8005834:	d160      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005836:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005838:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	2b04      	cmp	r3, #4
 8005846:	d84c      	bhi.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005889 	.word	0x08005889
 8005854:	08005865 	.word	0x08005865
 8005858:	08005877 	.word	0x08005877
 800585c:	08005893 	.word	0x08005893
 8005860:	0800589d 	.word	0x0800589d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff f803 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005872:	f000 bd6a 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005876:	f107 030c 	add.w	r3, r7, #12
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff faca 	bl	8004e14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005884:	f000 bd61 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005888:	f7fe f9da 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 800588c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800588e:	f000 bd5c 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005892:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005898:	f000 bd57 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d118      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058a8:	4b10      	ldr	r3, [pc, #64]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	0e1b      	lsrs	r3, r3, #24
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	e006      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80058c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	0e1b      	lsrs	r3, r3, #24
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80058d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058d6:	f000 bd38 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058de:	f000 bd34 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e6:	f000 bd30 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80058ea:	bf00      	nop
 80058ec:	46020c00 	.word	0x46020c00
 80058f0:	00f42400 	.word	0x00f42400
 80058f4:	0800d5ec 	.word	0x0800d5ec
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80058f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058fc:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005900:	430b      	orrs	r3, r1
 8005902:	d167      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005904:	4ba0      	ldr	r3, [pc, #640]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800590a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800590e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005916:	d036      	beq.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800591e:	d855      	bhi.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005926:	d029      	beq.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800592e:	d84d      	bhi.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005936:	d013      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800593e:	d845      	bhi.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2b00      	cmp	r3, #0
 8005944:	d015      	beq.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d13e      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800594e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe ff8e 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800595c:	f000 bcf5 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fa55 	bl	8004e14 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800596e:	f000 bcec 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005972:	f7fe f965 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8005976:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005978:	f000 bce7 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800597c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005982:	f000 bce2 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005986:	4b80      	ldr	r3, [pc, #512]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b20      	cmp	r3, #32
 8005990:	d118      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005992:	4b7d      	ldr	r3, [pc, #500]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800599e:	4b7a      	ldr	r3, [pc, #488]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0e1b      	lsrs	r3, r3, #24
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	e006      	b.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80059aa:	4b77      	ldr	r3, [pc, #476]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80059ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059b0:	041b      	lsls	r3, r3, #16
 80059b2:	0e1b      	lsrs	r3, r3, #24
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	4a74      	ldr	r2, [pc, #464]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80059ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059c0:	f000 bcc3 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059c8:	f000 bcbf 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059d0:	f000 bcbb 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80059dc:	430b      	orrs	r3, r1
 80059de:	d14c      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80059e0:	4b69      	ldr	r3, [pc, #420]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80059e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80059f2:	f7fe f93f 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 80059f6:	6378      	str	r0, [r7, #52]	; 0x34
 80059f8:	f000 bca7 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a02:	d104      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a04:	f7fe f814 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005a08:	6378      	str	r0, [r7, #52]	; 0x34
 8005a0a:	f000 bc9e 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005a0e:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a22:	d103      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8005a24:	4b5a      	ldr	r3, [pc, #360]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
 8005a28:	f000 bc8f 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005a2c:	4b56      	ldr	r3, [pc, #344]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d11c      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a3e:	d118      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a40:	4b51      	ldr	r3, [pc, #324]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005a4c:	4b4e      	ldr	r3, [pc, #312]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	0e1b      	lsrs	r3, r3, #24
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	e006      	b.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8005a58:	4b4b      	ldr	r3, [pc, #300]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a5e:	041b      	lsls	r3, r3, #16
 8005a60:	0e1b      	lsrs	r3, r3, #24
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	4a49      	ldr	r2, [pc, #292]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6e:	f000 bc6c 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	f000 bc68 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7e:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005a82:	430b      	orrs	r3, r1
 8005a84:	d14c      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005a86:	4b40      	ldr	r3, [pc, #256]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a90:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a98:	f7fe f8ec 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005a9c:	6378      	str	r0, [r7, #52]	; 0x34
 8005a9e:	f000 bc54 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa8:	d104      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005aaa:	f7fd ffc1 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005aae:	6378      	str	r0, [r7, #52]	; 0x34
 8005ab0:	f000 bc4b 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005ab4:	4b34      	ldr	r3, [pc, #208]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac8:	d103      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ace:	f000 bc3c 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005ad2:	4b2d      	ldr	r3, [pc, #180]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d11c      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ae4:	d118      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ae6:	4b28      	ldr	r3, [pc, #160]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005af2:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0e1b      	lsrs	r3, r3, #24
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	e006      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 8005afe:	4b22      	ldr	r3, [pc, #136]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	0e1b      	lsrs	r3, r3, #24
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
 8005b14:	f000 bc19 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1c:	f000 bc15 	b.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b24:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	d157      	bne.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b2c:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b3c:	d02a      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	2bc0      	cmp	r3, #192	; 0xc0
 8005b42:	d848      	bhi.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d00d      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b80      	cmp	r3, #128	; 0x80
 8005b4e:	d842      	bhi.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d011      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005b5c:	e03b      	b.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005b5e:	f7fe f8b1 	bl	8003cc4 <HAL_RCC_GetPCLK3Freq>
 8005b62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b64:	e3f1      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b72:	d102      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b78:	e3e7      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b7e:	e3e4      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005b80:	f7fd ff56 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005b84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b86:	e3e0      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005b88:	46020c00 	.word	0x46020c00
 8005b8c:	0800d5ec 	.word	0x0800d5ec
 8005b90:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b94:	4ba3      	ldr	r3, [pc, #652]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d117      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ba0:	4ba0      	ldr	r3, [pc, #640]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8005bac:	4b9d      	ldr	r3, [pc, #628]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	0e1b      	lsrs	r3, r3, #24
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	e006      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8005bb8:	4b9a      	ldr	r3, [pc, #616]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	0e1b      	lsrs	r3, r3, #24
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	4a98      	ldr	r2, [pc, #608]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bce:	e3bc      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd4:	e3b9      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bda:	e3b6      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005be4:	430b      	orrs	r3, r1
 8005be6:	d147      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005be8:	4b8e      	ldr	r3, [pc, #568]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bf2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7fe f83b 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	6378      	str	r0, [r7, #52]	; 0x34
 8005c00:	e3a3      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c08:	d103      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fd ff11 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005c0e:	6378      	str	r0, [r7, #52]	; 0x34
 8005c10:	e39b      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005c12:	4b84      	ldr	r3, [pc, #528]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1e:	d106      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	d102      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8005c28:	4b80      	ldr	r3, [pc, #512]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2c:	e38d      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005c2e:	4b7d      	ldr	r3, [pc, #500]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d11b      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c40:	d117      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c42:	4b78      	ldr	r3, [pc, #480]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8005c4e:	4b75      	ldr	r3, [pc, #468]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	0e1b      	lsrs	r3, r3, #24
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8005c5a:	4b72      	ldr	r3, [pc, #456]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	0e1b      	lsrs	r3, r3, #24
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	4a6f      	ldr	r2, [pc, #444]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c70:	e36b      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
 8005c76:	e368      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005c80:	430b      	orrs	r3, r1
 8005c82:	d164      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005c84:	4b67      	ldr	r3, [pc, #412]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d120      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c96:	4b63      	ldr	r3, [pc, #396]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d117      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ca2:	4b60      	ldr	r3, [pc, #384]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8005cae:	4b5d      	ldr	r3, [pc, #372]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	0e1b      	lsrs	r3, r3, #24
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	e006      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005cba:	4b5a      	ldr	r3, [pc, #360]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	0e1b      	lsrs	r3, r3, #24
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	4a57      	ldr	r2, [pc, #348]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd0:	e33b      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd6:	e338      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005cd8:	4b52      	ldr	r3, [pc, #328]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce6:	d112      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cee:	d10e      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005cf0:	4b4c      	ldr	r3, [pc, #304]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cfe:	d102      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8005d00:	23fa      	movs	r3, #250	; 0xfa
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d04:	e321      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005d06:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d0a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d0c:	e31d      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005d0e:	4b45      	ldr	r3, [pc, #276]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d22:	d102      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8005d24:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
 8005d28:	e30f      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005d2a:	4b3e      	ldr	r3, [pc, #248]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d107      	bne.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3e:	d103      	bne.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8005d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
 8005d46:	e300      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4c:	e2fd      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d52:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005d56:	430b      	orrs	r3, r1
 8005d58:	d16a      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005d5a:	4b32      	ldr	r3, [pc, #200]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d120      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d117      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d78:	4b2a      	ldr	r3, [pc, #168]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	0e1b      	lsrs	r3, r3, #24
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	e006      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005d90:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	0e1b      	lsrs	r3, r3, #24
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
 8005da6:	e2d0      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dac:	e2cd      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005dae:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dbc:	d112      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc4:	d10e      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dc6:	4b17      	ldr	r3, [pc, #92]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd4:	d102      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005dd6:	23fa      	movs	r3, #250	; 0xfa
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dda:	e2b6      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005ddc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005de2:	e2b2      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005de4:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df0:	d106      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df8:	d102      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfe:	e2a4      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d107      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e14:	d103      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1c:	e295      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
 8005e22:	e292      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005e24:	46020c00 	.word	0x46020c00
 8005e28:	0800d5ec 	.word	0x0800d5ec
 8005e2c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e34:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	d147      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e3c:	4b9a      	ldr	r3, [pc, #616]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e42:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e46:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e4e:	f7fd ff11 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005e52:	6378      	str	r0, [r7, #52]	; 0x34
 8005e54:	e279      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005e56:	4b94      	ldr	r3, [pc, #592]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e64:	d112      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e6c:	d10e      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e6e:	4b8e      	ldr	r3, [pc, #568]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e7c:	d102      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8005e7e:	23fa      	movs	r3, #250	; 0xfa
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e82:	e262      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005e84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e8a:	e25e      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005e8c:	4b86      	ldr	r3, [pc, #536]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e98:	d106      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8005ea2:	4b82      	ldr	r3, [pc, #520]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea6:	e250      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ebc:	d103      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8005ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec4:	e241      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	e23e      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	d12d      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005ed8:	4b73      	ldr	r3, [pc, #460]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ede:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005ee2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005ee4:	4b70      	ldr	r3, [pc, #448]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef0:	d105      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8005ef8:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
 8005efc:	e225      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f04:	d107      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe fcb2 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
 8005f14:	e219      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1e:	f107 0318 	add.w	r3, r7, #24
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fe0e 	bl	8004b44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2c:	e20d      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
 8005f32:	e20a      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f38:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	d156      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005f40:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f52:	d028      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f5a:	d845      	bhi.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f62:	d013      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f6a:	d83d      	bhi.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f78:	d004      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8005f7a:	e035      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005f7c:	f7fd fe8e 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 8005f80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f82:	e1e2      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005f84:	f7fd fd54 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8005f88:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f8a:	e1de      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f8c:	4b46      	ldr	r3, [pc, #280]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8005f9a:	4b44      	ldr	r3, [pc, #272]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f9e:	e1d4      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fa4:	e1d1      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005fa6:	4b40      	ldr	r3, [pc, #256]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d117      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8005fbe:	4b3a      	ldr	r3, [pc, #232]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	0e1b      	lsrs	r3, r3, #24
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	e006      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005fca:	4b37      	ldr	r3, [pc, #220]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	0e1b      	lsrs	r3, r3, #24
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	4a35      	ldr	r2, [pc, #212]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8005fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fe0:	e1b3      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fe6:	e1b0      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fec:	e1ad      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff2:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005ff6:	430b      	orrs	r3, r1
 8005ff8:	d15c      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005ffa:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8005ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006004:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800600c:	d028      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006014:	d845      	bhi.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800601c:	d013      	beq.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006024:	d83d      	bhi.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006032:	d004      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8006034:	e035      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006036:	f7fd fe1d 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 800603a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800603c:	e185      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800603e:	f7fd fcf7 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8006042:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006044:	e181      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006046:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006052:	d102      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8006054:	4b15      	ldr	r3, [pc, #84]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006058:	e177      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800605e:	e174      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006060:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b20      	cmp	r3, #32
 800606a:	d117      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800606c:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	0e1b      	lsrs	r3, r3, #24
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	e006      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800608a:	041b      	lsls	r3, r3, #16
 800608c:	0e1b      	lsrs	r3, r3, #24
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8006094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800609a:	e156      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060a0:	e153      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060a6:	e150      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80060a8:	46020c00 	.word	0x46020c00
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	0800d5ec 	.word	0x0800d5ec
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80060b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b8:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80060bc:	430b      	orrs	r3, r1
 80060be:	d176      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80060c0:	4ba4      	ldr	r3, [pc, #656]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80060c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060c6:	f003 0318 	and.w	r3, r3, #24
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	2b18      	cmp	r3, #24
 80060d0:	d86a      	bhi.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	0800613d 	.word	0x0800613d
 80060dc:	080061a9 	.word	0x080061a9
 80060e0:	080061a9 	.word	0x080061a9
 80060e4:	080061a9 	.word	0x080061a9
 80060e8:	080061a9 	.word	0x080061a9
 80060ec:	080061a9 	.word	0x080061a9
 80060f0:	080061a9 	.word	0x080061a9
 80060f4:	080061a9 	.word	0x080061a9
 80060f8:	08006145 	.word	0x08006145
 80060fc:	080061a9 	.word	0x080061a9
 8006100:	080061a9 	.word	0x080061a9
 8006104:	080061a9 	.word	0x080061a9
 8006108:	080061a9 	.word	0x080061a9
 800610c:	080061a9 	.word	0x080061a9
 8006110:	080061a9 	.word	0x080061a9
 8006114:	080061a9 	.word	0x080061a9
 8006118:	0800614d 	.word	0x0800614d
 800611c:	080061a9 	.word	0x080061a9
 8006120:	080061a9 	.word	0x080061a9
 8006124:	080061a9 	.word	0x080061a9
 8006128:	080061a9 	.word	0x080061a9
 800612c:	080061a9 	.word	0x080061a9
 8006130:	080061a9 	.word	0x080061a9
 8006134:	080061a9 	.word	0x080061a9
 8006138:	08006167 	.word	0x08006167
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800613c:	f7fd fdc2 	bl	8003cc4 <HAL_RCC_GetPCLK3Freq>
 8006140:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006142:	e102      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006144:	f7fd fc74 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8006148:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800614a:	e0fe      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800614c:	4b81      	ldr	r3, [pc, #516]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d102      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 800615a:	4b7f      	ldr	r3, [pc, #508]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800615e:	e0f4      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006164:	e0f1      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006166:	4b7b      	ldr	r3, [pc, #492]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b20      	cmp	r3, #32
 8006170:	d117      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006172:	4b78      	ldr	r3, [pc, #480]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800617e:	4b75      	ldr	r3, [pc, #468]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0e1b      	lsrs	r3, r3, #24
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	e006      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 800618a:	4b72      	ldr	r3, [pc, #456]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800618c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	0e1b      	lsrs	r3, r3, #24
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	4a70      	ldr	r2, [pc, #448]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061a0:	e0d3      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a6:	e0d0      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ac:	e0cd      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80061ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80061b6:	430b      	orrs	r3, r1
 80061b8:	d155      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80061ba:	4b66      	ldr	r3, [pc, #408]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80061bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061cc:	d013      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061d4:	d844      	bhi.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061dc:	d013      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e4:	d83c      	bhi.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d014      	beq.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f2:	d014      	beq.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80061f4:	e034      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f6:	f107 0318 	add.w	r3, r7, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fca2 	bl	8004b44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006204:	e0a1      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fb32 	bl	8004874 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006214:	e099      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006216:	f7fd fc0b 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 800621a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800621c:	e095      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800621e:	4b4d      	ldr	r3, [pc, #308]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b20      	cmp	r3, #32
 8006228:	d117      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800622a:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	0e1b      	lsrs	r3, r3, #24
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	e006      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8006242:	4b44      	ldr	r3, [pc, #272]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006248:	041b      	lsls	r3, r3, #16
 800624a:	0e1b      	lsrs	r3, r3, #24
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	4a42      	ldr	r2, [pc, #264]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8006252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006258:	e077      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800625e:	e074      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006264:	e071      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800626e:	430b      	orrs	r3, r1
 8006270:	d131      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006272:	4b38      	ldr	r3, [pc, #224]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800627e:	4b35      	ldr	r3, [pc, #212]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b02      	cmp	r3, #2
 800628a:	d106      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 8006292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
 8006298:	e057      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800629a:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800629c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a8:	d112      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	d10e      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062b2:	4b28      	ldr	r3, [pc, #160]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80062b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062c0:	d102      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 80062c2:	23fa      	movs	r3, #250	; 0xfa
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062c6:	e040      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80062c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062ce:	e03c      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
 80062d4:	e039      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80062d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062da:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80062de:	430b      	orrs	r3, r1
 80062e0:	d131      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80062e2:	4b1c      	ldr	r3, [pc, #112]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80062e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80062ee:	4b19      	ldr	r3, [pc, #100]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fa:	d105      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 8006302:	4b17      	ldr	r3, [pc, #92]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
 8006306:	e020      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006308:	4b12      	ldr	r3, [pc, #72]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d106      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d102      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
 8006322:	e012      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006330:	d106      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006338:	d102      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
 800633e:	e004      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
 8006344:	e001      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800634c:	4618      	mov	r0, r3
 800634e:	3738      	adds	r7, #56	; 0x38
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	46020c00 	.word	0x46020c00
 8006358:	00f42400 	.word	0x00f42400
 800635c:	0800d5ec 	.word	0x0800d5ec
 8006360:	02dc6c00 	.word	0x02dc6c00
 8006364:	016e3600 	.word	0x016e3600

08006368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006370:	4b47      	ldr	r3, [pc, #284]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a46      	ldr	r2, [pc, #280]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006376:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800637a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800637c:	f7fb fdbc 	bl	8001ef8 <HAL_GetTick>
 8006380:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006382:	e008      	b.n	8006396 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006384:	f7fb fdb8 	bl	8001ef8 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e077      	b.n	8006486 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006396:	4b3e      	ldr	r3, [pc, #248]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80063a2:	4b3b      	ldr	r3, [pc, #236]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6811      	ldr	r1, [r2, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6852      	ldr	r2, [r2, #4]
 80063b6:	3a01      	subs	r2, #1
 80063b8:	0212      	lsls	r2, r2, #8
 80063ba:	430a      	orrs	r2, r1
 80063bc:	4934      	ldr	r1, [pc, #208]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80063c2:	4b33      	ldr	r3, [pc, #204]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 80063c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c6:	4b33      	ldr	r3, [pc, #204]	; (8006494 <RCCEx_PLL2_Config+0x12c>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6892      	ldr	r2, [r2, #8]
 80063ce:	3a01      	subs	r2, #1
 80063d0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	68d2      	ldr	r2, [r2, #12]
 80063d8:	3a01      	subs	r2, #1
 80063da:	0252      	lsls	r2, r2, #9
 80063dc:	b292      	uxth	r2, r2
 80063de:	4311      	orrs	r1, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6912      	ldr	r2, [r2, #16]
 80063e4:	3a01      	subs	r2, #1
 80063e6:	0412      	lsls	r2, r2, #16
 80063e8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80063ec:	4311      	orrs	r1, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6952      	ldr	r2, [r2, #20]
 80063f2:	3a01      	subs	r2, #1
 80063f4:	0612      	lsls	r2, r2, #24
 80063f6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80063fa:	430a      	orrs	r2, r1
 80063fc:	4924      	ldr	r1, [pc, #144]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f023 020c 	bic.w	r2, r3, #12
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	4920      	ldr	r1, [pc, #128]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006410:	4313      	orrs	r3, r2
 8006412:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006414:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	491c      	ldr	r1, [pc, #112]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 800641e:	4313      	orrs	r3, r2
 8006420:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006422:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006428:	f023 0310 	bic.w	r3, r3, #16
 800642c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006436:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	69d2      	ldr	r2, [r2, #28]
 800643e:	00d2      	lsls	r2, r2, #3
 8006440:	4913      	ldr	r1, [pc, #76]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006442:	4313      	orrs	r3, r2
 8006444:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006446:	4b12      	ldr	r3, [pc, #72]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	4a11      	ldr	r2, [pc, #68]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 800644c:	f043 0310 	orr.w	r3, r3, #16
 8006450:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a0e      	ldr	r2, [pc, #56]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 8006458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800645c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800645e:	f7fb fd4b 	bl	8001ef8 <HAL_GetTick>
 8006462:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006464:	e008      	b.n	8006478 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006466:	f7fb fd47 	bl	8001ef8 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e006      	b.n	8006486 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <RCCEx_PLL2_Config+0x128>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0

}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	46020c00 	.word	0x46020c00
 8006494:	80800000 	.word	0x80800000

08006498 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80064a0:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a46      	ldr	r2, [pc, #280]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 80064a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064ac:	f7fb fd24 	bl	8001ef8 <HAL_GetTick>
 80064b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064b2:	e008      	b.n	80064c6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064b4:	f7fb fd20 	bl	8001ef8 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e077      	b.n	80065b6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064c6:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80064d2:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6811      	ldr	r1, [r2, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6852      	ldr	r2, [r2, #4]
 80064e6:	3a01      	subs	r2, #1
 80064e8:	0212      	lsls	r2, r2, #8
 80064ea:	430a      	orrs	r2, r1
 80064ec:	4934      	ldr	r1, [pc, #208]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	630b      	str	r3, [r1, #48]	; 0x30
 80064f2:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 80064f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f6:	4b33      	ldr	r3, [pc, #204]	; (80065c4 <RCCEx_PLL3_Config+0x12c>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	3a01      	subs	r2, #1
 8006500:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68d2      	ldr	r2, [r2, #12]
 8006508:	3a01      	subs	r2, #1
 800650a:	0252      	lsls	r2, r2, #9
 800650c:	b292      	uxth	r2, r2
 800650e:	4311      	orrs	r1, r2
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6912      	ldr	r2, [r2, #16]
 8006514:	3a01      	subs	r2, #1
 8006516:	0412      	lsls	r2, r2, #16
 8006518:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800651c:	4311      	orrs	r1, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6952      	ldr	r2, [r2, #20]
 8006522:	3a01      	subs	r2, #1
 8006524:	0612      	lsls	r2, r2, #24
 8006526:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800652a:	430a      	orrs	r2, r1
 800652c:	4924      	ldr	r1, [pc, #144]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 800652e:	4313      	orrs	r3, r2
 8006530:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006532:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f023 020c 	bic.w	r2, r3, #12
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	4920      	ldr	r1, [pc, #128]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006540:	4313      	orrs	r3, r2
 8006542:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006544:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	491c      	ldr	r1, [pc, #112]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 800654e:	4313      	orrs	r3, r2
 8006550:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006552:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	4a1a      	ldr	r2, [pc, #104]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006558:	f023 0310 	bic.w	r3, r3, #16
 800655c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800655e:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006566:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	69d2      	ldr	r2, [r2, #28]
 800656e:	00d2      	lsls	r2, r2, #3
 8006570:	4913      	ldr	r1, [pc, #76]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006572:	4313      	orrs	r3, r2
 8006574:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 800657c:	f043 0310 	orr.w	r3, r3, #16
 8006580:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 8006588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800658e:	f7fb fcb3 	bl	8001ef8 <HAL_GetTick>
 8006592:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006594:	e008      	b.n	80065a8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006596:	f7fb fcaf 	bl	8001ef8 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e006      	b.n	80065b6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <RCCEx_PLL3_Config+0x128>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	46020c00 	.word	0x46020c00
 80065c4:	80800000 	.word	0x80800000

080065c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e075      	b.n	80066c6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fb f8a9 	bl	8001744 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2204      	movs	r2, #4
 80065f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f868 	bl	80066d0 <HAL_SD_InitCard>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e05d      	b.n	80066c6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800660a:	f107 0308 	add.w	r3, r7, #8
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fdb5 	bl	8007180 <HAL_SD_GetCardStatus>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e052      	b.n	80066c6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006620:	7e3b      	ldrb	r3, [r7, #24]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006626:	7e7b      	ldrb	r3, [r7, #25]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	2b01      	cmp	r3, #1
 8006632:	d10a      	bne.n	800664a <HAL_SD_Init+0x82>
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <HAL_SD_Init+0x78>
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006646:	659a      	str	r2, [r3, #88]	; 0x58
 8006648:	e00b      	b.n	8006662 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	2b01      	cmp	r3, #1
 8006650:	d104      	bne.n	800665c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006658:	659a      	str	r2, [r3, #88]	; 0x58
 800665a:	e002      	b.n	8006662 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fe73 	bl	8007354 <HAL_SD_ConfigWideBusOperation>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e026      	b.n	80066c6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006678:	f7fb fc3e 	bl	8001ef8 <HAL_GetTick>
 800667c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800667e:	e011      	b.n	80066a4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006680:	f7fb fc3a 	bl	8001ef8 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800668e:	d109      	bne.n	80066a4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006696:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e010      	b.n	80066c6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 ff67 	bl	8007578 <HAL_SD_GetCardState>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d1e7      	bne.n	8006680 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3728      	adds	r7, #40	; 0x28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b08d      	sub	sp, #52	; 0x34
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80066e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80066ec:	f04f 0100 	mov.w	r1, #0
 80066f0:	f7fe fcf8 	bl	80050e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80066f4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d109      	bne.n	8006710 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800670a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e070      	b.n	80067f2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	4a39      	ldr	r2, [pc, #228]	; (80067fc <HAL_SD_InitCard+0x12c>)
 8006716:	fba2 2303 	umull	r2, r3, r2, r3
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681c      	ldr	r4, [r3, #0]
 8006722:	466a      	mov	r2, sp
 8006724:	f107 0318 	add.w	r3, r7, #24
 8006728:	e893 0003 	ldmia.w	r3, {r0, r1}
 800672c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006730:	f107 030c 	add.w	r3, r7, #12
 8006734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006736:	4620      	mov	r0, r4
 8006738:	f003 f88a 	bl	8009850 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f003 f8cd 	bl	80098e0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	fbb2 f3f3 	udiv	r3, r2, r3
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800675e:	4a28      	ldr	r2, [pc, #160]	; (8006800 <HAL_SD_InitCard+0x130>)
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	fbb2 f3f3 	udiv	r3, r2, r3
 8006766:	3301      	adds	r3, #1
 8006768:	4618      	mov	r0, r3
 800676a:	f7fb fbd1 	bl	8001f10 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fff0 	bl	8007754 <SD_PowerON>
 8006774:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00b      	beq.n	8006794 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e02e      	b.n	80067f2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 ff0f 	bl	80075b8 <SD_InitCard>
 800679a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e01b      	b.n	80067f2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067c2:	4618      	mov	r0, r3
 80067c4:	f003 f922 	bl	8009a0c <SDMMC_CmdBlockLength>
 80067c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00f      	beq.n	80067f0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a0b      	ldr	r2, [pc, #44]	; (8006804 <HAL_SD_InitCard+0x134>)
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	372c      	adds	r7, #44	; 0x2c
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd90      	pop	{r4, r7, pc}
 80067fa:	bf00      	nop
 80067fc:	014f8b59 	.word	0x014f8b59
 8006800:	00012110 	.word	0x00012110
 8006804:	1fe00fff 	.word	0x1fe00fff

08006808 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b092      	sub	sp, #72	; 0x48
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006816:	f7fb fb6f 	bl	8001ef8 <HAL_GetTick>
 800681a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e167      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	f040 815a 	bne.w	8006afc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800684e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	429a      	cmp	r2, r3
 800685a:	d907      	bls.n	800686c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006860:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e14e      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2203      	movs	r2, #3
 8006870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2200      	movs	r2, #0
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	2b01      	cmp	r3, #1
 8006882:	d002      	beq.n	800688a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	025b      	lsls	r3, r3, #9
 8006888:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800688a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800688e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	025b      	lsls	r3, r3, #9
 8006894:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006896:	2390      	movs	r3, #144	; 0x90
 8006898:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800689a:	2302      	movs	r3, #2
 800689c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800689e:	2300      	movs	r3, #0
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f107 0214 	add.w	r2, r7, #20
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f003 f87f 	bl	80099b4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d90a      	bls.n	80068e2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2202      	movs	r2, #2
 80068d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068d8:	4618      	mov	r0, r3
 80068da:	f003 f8dd 	bl	8009a98 <SDMMC_CmdReadMultiBlock>
 80068de:	6478      	str	r0, [r7, #68]	; 0x44
 80068e0:	e009      	b.n	80068f6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068ee:	4618      	mov	r0, r3
 80068f0:	f003 f8af 	bl	8009a52 <SDMMC_CmdReadSingleBlock>
 80068f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80068f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d012      	beq.n	8006922 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a84      	ldr	r2, [pc, #528]	; (8006b14 <HAL_SD_ReadBlocks+0x30c>)
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690a:	431a      	orrs	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e0f3      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006926:	e058      	b.n	80069da <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d033      	beq.n	800699e <HAL_SD_ReadBlocks+0x196>
 8006936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006938:	2b1f      	cmp	r3, #31
 800693a:	d930      	bls.n	800699e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800693c:	2300      	movs	r3, #0
 800693e:	643b      	str	r3, [r7, #64]	; 0x40
 8006940:	e027      	b.n	8006992 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f002 ffac 	bl	80098a4 <SDMMC_ReadFIFO>
 800694c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	b2da      	uxtb	r2, r3
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006958:	3301      	adds	r3, #1
 800695a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	b2da      	uxtb	r2, r3
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006968:	3301      	adds	r3, #1
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	0c1b      	lsrs	r3, r3, #16
 8006970:	b2da      	uxtb	r2, r3
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	3301      	adds	r3, #1
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	0e1b      	lsrs	r3, r3, #24
 8006980:	b2da      	uxtb	r2, r3
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	3301      	adds	r3, #1
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800698c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698e:	3301      	adds	r3, #1
 8006990:	643b      	str	r3, [r7, #64]	; 0x40
 8006992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006994:	2b07      	cmp	r3, #7
 8006996:	d9d4      	bls.n	8006942 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	3b20      	subs	r3, #32
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800699e:	f7fb faab 	bl	8001ef8 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d902      	bls.n	80069b4 <HAL_SD_ReadBlocks+0x1ac>
 80069ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d112      	bne.n	80069da <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a56      	ldr	r2, [pc, #344]	; (8006b14 <HAL_SD_ReadBlocks+0x30c>)
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e097      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d09f      	beq.n	8006928 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d022      	beq.n	8006a4c <HAL_SD_ReadBlocks+0x244>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d91f      	bls.n	8006a4c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d01b      	beq.n	8006a4c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f003 f8a7 	bl	8009b6c <SDMMC_CmdStopTransfer>
 8006a1e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d012      	beq.n	8006a4c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <HAL_SD_ReadBlocks+0x30c>)
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e05e      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d012      	beq.n	8006a80 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a2d      	ldr	r2, [pc, #180]	; (8006b14 <HAL_SD_ReadBlocks+0x30c>)
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a66:	f043 0208 	orr.w	r2, r3, #8
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e044      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d012      	beq.n	8006ab4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <HAL_SD_ReadBlocks+0x30c>)
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9a:	f043 0202 	orr.w	r2, r3, #2
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e02a      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d012      	beq.n	8006ae8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <HAL_SD_ReadBlocks+0x30c>)
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ace:	f043 0220 	orr.w	r2, r3, #32
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e010      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a0a      	ldr	r2, [pc, #40]	; (8006b18 <HAL_SD_ReadBlocks+0x310>)
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e006      	b.n	8006b0a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
  }
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3748      	adds	r7, #72	; 0x48
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	1fe00fff 	.word	0x1fe00fff
 8006b18:	18000f3a 	.word	0x18000f3a

08006b1c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b092      	sub	sp, #72	; 0x48
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b2a:	f7fb f9e5 	bl	8001ef8 <HAL_GetTick>
 8006b2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d107      	bne.n	8006b4e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e16b      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	f040 815e 	bne.w	8006e18 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d907      	bls.n	8006b80 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e152      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2203      	movs	r2, #3
 8006b84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d002      	beq.n	8006b9e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	025b      	lsls	r3, r3, #9
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ba2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	025b      	lsls	r3, r3, #9
 8006ba8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006baa:	2390      	movs	r3, #144	; 0x90
 8006bac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f107 0218 	add.w	r2, r7, #24
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 fef5 	bl	80099b4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bd8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d90a      	bls.n	8006bf6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 ff99 	bl	8009b24 <SDMMC_CmdWriteMultiBlock>
 8006bf2:	6478      	str	r0, [r7, #68]	; 0x44
 8006bf4:	e009      	b.n	8006c0a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2210      	movs	r2, #16
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 ff6b 	bl	8009ade <SDMMC_CmdWriteSingleBlock>
 8006c08:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d012      	beq.n	8006c36 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a86      	ldr	r2, [pc, #536]	; (8006e30 <HAL_SD_WriteBlocks+0x314>)
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e0f7      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006c3a:	e05c      	b.n	8006cf6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d037      	beq.n	8006cba <HAL_SD_WriteBlocks+0x19e>
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4c:	2b1f      	cmp	r3, #31
 8006c4e:	d934      	bls.n	8006cba <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006c50:	2300      	movs	r3, #0
 8006c52:	643b      	str	r3, [r7, #64]	; 0x40
 8006c54:	e02b      	b.n	8006cae <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	3301      	adds	r3, #1
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c70:	3301      	adds	r3, #1
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	041a      	lsls	r2, r3, #16
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	3301      	adds	r3, #1
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	061a      	lsls	r2, r3, #24
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	3301      	adds	r3, #1
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f107 0214 	add.w	r2, r7, #20
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f002 fe0b 	bl	80098be <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006caa:	3301      	adds	r3, #1
 8006cac:	643b      	str	r3, [r7, #64]	; 0x40
 8006cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb0:	2b07      	cmp	r3, #7
 8006cb2:	d9d0      	bls.n	8006c56 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	3b20      	subs	r3, #32
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006cba:	f7fb f91d 	bl	8001ef8 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d902      	bls.n	8006cd0 <HAL_SD_WriteBlocks+0x1b4>
 8006cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d112      	bne.n	8006cf6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a56      	ldr	r2, [pc, #344]	; (8006e30 <HAL_SD_WriteBlocks+0x314>)
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e097      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d09b      	beq.n	8006c3c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d12:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d022      	beq.n	8006d68 <HAL_SD_WriteBlocks+0x24c>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d91f      	bls.n	8006d68 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d01b      	beq.n	8006d68 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f002 ff19 	bl	8009b6c <SDMMC_CmdStopTransfer>
 8006d3a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d012      	beq.n	8006d68 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3a      	ldr	r2, [pc, #232]	; (8006e30 <HAL_SD_WriteBlocks+0x314>)
 8006d48:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e05e      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d012      	beq.n	8006d9c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a2d      	ldr	r2, [pc, #180]	; (8006e30 <HAL_SD_WriteBlocks+0x314>)
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	f043 0208 	orr.w	r2, r3, #8
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e044      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d012      	beq.n	8006dd0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a20      	ldr	r2, [pc, #128]	; (8006e30 <HAL_SD_WriteBlocks+0x314>)
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	f043 0202 	orr.w	r2, r3, #2
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e02a      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d012      	beq.n	8006e04 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a13      	ldr	r2, [pc, #76]	; (8006e30 <HAL_SD_WriteBlocks+0x314>)
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	f043 0210 	orr.w	r2, r3, #16
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e010      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <HAL_SD_WriteBlocks+0x318>)
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e006      	b.n	8006e26 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
  }
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3748      	adds	r7, #72	; 0x48
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	1fe00fff 	.word	0x1fe00fff
 8006e34:	18000f3a 	.word	0x18000f3a

08006e38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	0f9b      	lsrs	r3, r3, #30
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e52:	0e9b      	lsrs	r3, r3, #26
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e64:	0e1b      	lsrs	r3, r3, #24
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e76:	0c1b      	lsrs	r3, r3, #16
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e98:	0d1b      	lsrs	r3, r3, #20
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb6:	0bdb      	lsrs	r3, r3, #15
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec8:	0b9b      	lsrs	r3, r3, #14
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eda:	0b5b      	lsrs	r3, r3, #13
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	0b1b      	lsrs	r3, r3, #12
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2200      	movs	r2, #0
 8006efe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d163      	bne.n	8006fd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0c:	009a      	lsls	r2, r3, #2
 8006f0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f12:	4013      	ands	r3, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006f18:	0f92      	lsrs	r2, r2, #30
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f24:	0edb      	lsrs	r3, r3, #27
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f36:	0e1b      	lsrs	r3, r3, #24
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f48:	0d5b      	lsrs	r3, r3, #21
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5a:	0c9b      	lsrs	r3, r3, #18
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6c:	0bdb      	lsrs	r3, r3, #15
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	7e1b      	ldrb	r3, [r3, #24]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	3302      	adds	r3, #2
 8006f90:	2201      	movs	r2, #1
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f9a:	fb03 f202 	mul.w	r2, r3, r2
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	7a1b      	ldrb	r3, [r3, #8]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	2201      	movs	r2, #1
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006fbc:	0a52      	lsrs	r2, r2, #9
 8006fbe:	fb03 f202 	mul.w	r2, r3, r2
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fcc:	655a      	str	r2, [r3, #84]	; 0x54
 8006fce:	e031      	b.n	8007034 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d11d      	bne.n	8007014 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	029a      	lsls	r2, r3, #10
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007008:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	655a      	str	r2, [r3, #84]	; 0x54
 8007012:	e00f      	b.n	8007034 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a58      	ldr	r2, [pc, #352]	; (800717c <HAL_SD_GetCardCSD+0x344>)
 800701a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007020:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e09d      	b.n	8007170 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007038:	0b9b      	lsrs	r3, r3, #14
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	b2da      	uxtb	r2, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800704a:	09db      	lsrs	r3, r3, #7
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007052:	b2da      	uxtb	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007062:	b2da      	uxtb	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800706c:	0fdb      	lsrs	r3, r3, #31
 800706e:	b2da      	uxtb	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007078:	0f5b      	lsrs	r3, r3, #29
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	b2da      	uxtb	r2, r3
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800708a:	0e9b      	lsrs	r3, r3, #26
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	b2da      	uxtb	r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800709c:	0d9b      	lsrs	r3, r3, #22
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ae:	0d5b      	lsrs	r3, r3, #21
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070de:	0bdb      	lsrs	r3, r3, #15
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070f2:	0b9b      	lsrs	r3, r3, #14
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007106:	0b5b      	lsrs	r3, r3, #13
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	b2da      	uxtb	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711a:	0b1b      	lsrs	r3, r3, #12
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	b2da      	uxtb	r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800712e:	0a9b      	lsrs	r3, r3, #10
 8007130:	b2db      	uxtb	r3, r3
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	b2da      	uxtb	r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	b2da      	uxtb	r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	b2db      	uxtb	r3, r3
 800715a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800715e:	b2da      	uxtb	r2, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	1fe00fff 	.word	0x1fe00fff

08007180 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b094      	sub	sp, #80	; 0x50
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b03      	cmp	r3, #3
 800719a:	d101      	bne.n	80071a0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e0a7      	b.n	80072f0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fb62 	bl	8007870 <SD_SendSDStatus>
 80071ac:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80071ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d011      	beq.n	80071d8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a4f      	ldr	r2, [pc, #316]	; (80072f8 <HAL_SD_GetCardStatus+0x178>)
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80071d6:	e070      	b.n	80072ba <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	099b      	lsrs	r3, r3, #6
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007202:	b29a      	uxth	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	0e1b      	lsrs	r3, r3, #24
 8007208:	b29b      	uxth	r3, r3
 800720a:	4313      	orrs	r3, r2
 800720c:	b29a      	uxth	r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	061a      	lsls	r2, r3, #24
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800721e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007228:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	0e1b      	lsrs	r3, r3, #24
 800722e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	b2da      	uxtb	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	0d1b      	lsrs	r3, r3, #20
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	b2da      	uxtb	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	b29b      	uxth	r3, r3
 800725c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007260:	b29a      	uxth	r2, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	b29b      	uxth	r3, r3
 8007266:	b2db      	uxtb	r3, r3
 8007268:	b29b      	uxth	r3, r3
 800726a:	4313      	orrs	r3, r2
 800726c:	b29a      	uxth	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	0a9b      	lsrs	r3, r3, #10
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800727c:	b2da      	uxtb	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	0a1b      	lsrs	r3, r3, #8
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	b2da      	uxtb	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	b2da      	uxtb	r2, r3
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	0e1b      	lsrs	r3, r3, #24
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072c2:	4618      	mov	r0, r3
 80072c4:	f002 fba2 	bl	8009a0c <SDMMC_CmdBlockLength>
 80072c8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80072ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <HAL_SD_GetCardStatus+0x178>)
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072dc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80072ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3750      	adds	r7, #80	; 0x50
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	1fe00fff 	.word	0x1fe00fff

080072fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b08d      	sub	sp, #52	; 0x34
 8007358:	af02      	add	r7, sp, #8
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2203      	movs	r2, #3
 8007368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	2b03      	cmp	r3, #3
 8007372:	d02e      	beq.n	80073d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737a:	d106      	bne.n	800738a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007380:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	635a      	str	r2, [r3, #52]	; 0x34
 8007388:	e029      	b.n	80073de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007390:	d10a      	bne.n	80073a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fb64 	bl	8007a60 <SD_WideBus_Enable>
 8007398:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	635a      	str	r2, [r3, #52]	; 0x34
 80073a6:	e01a      	b.n	80073de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fba1 	bl	8007af6 <SD_WideBus_Disable>
 80073b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	635a      	str	r2, [r3, #52]	; 0x34
 80073c2:	e00c      	b.n	80073de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	635a      	str	r2, [r3, #52]	; 0x34
 80073d0:	e005      	b.n	80073de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a5f      	ldr	r2, [pc, #380]	; (8007568 <HAL_SD_ConfigWideBusOperation+0x214>)
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073f4:	e096      	b.n	8007524 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80073f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80073fa:	f04f 0100 	mov.w	r1, #0
 80073fe:	f7fd fe71 	bl	80050e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007402:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 8083 	beq.w	8007512 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4950      	ldr	r1, [pc, #320]	; (800756c <HAL_SD_ConfigWideBusOperation+0x218>)
 800742a:	fba1 1303 	umull	r1, r3, r1, r3
 800742e:	0e1b      	lsrs	r3, r3, #24
 8007430:	429a      	cmp	r2, r3
 8007432:	d303      	bcc.n	800743c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e05a      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007444:	d103      	bne.n	800744e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e051      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007456:	d126      	bne.n	80074a6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10e      	bne.n	800747e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4a43      	ldr	r2, [pc, #268]	; (8007570 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d906      	bls.n	8007476 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	4a40      	ldr	r2, [pc, #256]	; (800756c <HAL_SD_ConfigWideBusOperation+0x218>)
 800746c:	fba2 2303 	umull	r2, r3, r2, r3
 8007470:	0e5b      	lsrs	r3, r3, #25
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	e03d      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e039      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	fbb2 f3f3 	udiv	r3, r2, r3
 800748a:	4a39      	ldr	r2, [pc, #228]	; (8007570 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d906      	bls.n	800749e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4a36      	ldr	r2, [pc, #216]	; (800756c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007494:	fba2 2303 	umull	r2, r3, r2, r3
 8007498:	0e5b      	lsrs	r3, r3, #25
 800749a:	61bb      	str	r3, [r7, #24]
 800749c:	e029      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e025      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10e      	bne.n	80074cc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4a30      	ldr	r2, [pc, #192]	; (8007574 <HAL_SD_ConfigWideBusOperation+0x220>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d906      	bls.n	80074c4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4a2c      	ldr	r2, [pc, #176]	; (800756c <HAL_SD_ConfigWideBusOperation+0x218>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	0e1b      	lsrs	r3, r3, #24
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e016      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e012      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	4a26      	ldr	r2, [pc, #152]	; (8007574 <HAL_SD_ConfigWideBusOperation+0x220>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d906      	bls.n	80074ec <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4a22      	ldr	r2, [pc, #136]	; (800756c <HAL_SD_ConfigWideBusOperation+0x218>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	0e1b      	lsrs	r3, r3, #24
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	e002      	b.n	80074f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681c      	ldr	r4, [r3, #0]
 80074f6:	466a      	mov	r2, sp
 80074f8:	f107 0314 	add.w	r3, r7, #20
 80074fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007500:	e882 0003 	stmia.w	r2, {r0, r1}
 8007504:	f107 0308 	add.w	r3, r7, #8
 8007508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800750a:	4620      	mov	r0, r4
 800750c:	f002 f9a0 	bl	8009850 <SDMMC_Init>
 8007510:	e008      	b.n	8007524 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007516:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800752c:	4618      	mov	r0, r3
 800752e:	f002 fa6d 	bl	8009a0c <SDMMC_CmdBlockLength>
 8007532:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00c      	beq.n	8007554 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800755c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007560:	4618      	mov	r0, r3
 8007562:	372c      	adds	r7, #44	; 0x2c
 8007564:	46bd      	mov	sp, r7
 8007566:	bd90      	pop	{r4, r7, pc}
 8007568:	1fe00fff 	.word	0x1fe00fff
 800756c:	55e63b89 	.word	0x55e63b89
 8007570:	02faf080 	.word	0x02faf080
 8007574:	017d7840 	.word	0x017d7840

08007578 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007584:	f107 030c 	add.w	r3, r7, #12
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa40 	bl	8007a10 <SD_SendStatus>
 8007590:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	0a5b      	lsrs	r3, r3, #9
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80075ae:	693b      	ldr	r3, [r7, #16]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b090      	sub	sp, #64	; 0x40
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80075c4:	f7fa fc98 	bl	8001ef8 <HAL_GetTick>
 80075c8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 f997 	bl	8009902 <SDMMC_GetPowerState>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80075de:	e0b5      	b.n	800774c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d02e      	beq.n	8007646 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f002 fbe2 	bl	8009db6 <SDMMC_CmdSendCID>
 80075f2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <SD_InitCard+0x46>
    {
      return errorstate;
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	e0a6      	b.n	800774c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f002 f9c2 	bl	800998e <SDMMC_GetResponse>
 800760a:	4602      	mov	r2, r0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2104      	movs	r1, #4
 8007616:	4618      	mov	r0, r3
 8007618:	f002 f9b9 	bl	800998e <SDMMC_GetResponse>
 800761c:	4602      	mov	r2, r0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2108      	movs	r1, #8
 8007628:	4618      	mov	r0, r3
 800762a:	f002 f9b0 	bl	800998e <SDMMC_GetResponse>
 800762e:	4602      	mov	r2, r0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	210c      	movs	r1, #12
 800763a:	4618      	mov	r0, r3
 800763c:	f002 f9a7 	bl	800998e <SDMMC_GetResponse>
 8007640:	4602      	mov	r2, r0
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	2b03      	cmp	r3, #3
 800764c:	d01d      	beq.n	800768a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800764e:	e019      	b.n	8007684 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f107 020a 	add.w	r2, r7, #10
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f002 fbea 	bl	8009e34 <SDMMC_CmdSetRelAdd>
 8007660:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <SD_InitCard+0xb4>
      {
        return errorstate;
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	e06f      	b.n	800774c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800766c:	f7fa fc44 	bl	8001ef8 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f241 3287 	movw	r2, #4999	; 0x1387
 800767a:	4293      	cmp	r3, r2
 800767c:	d902      	bls.n	8007684 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800767e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007682:	e063      	b.n	800774c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007684:	897b      	ldrh	r3, [r7, #10]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0e2      	beq.n	8007650 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	2b03      	cmp	r3, #3
 8007690:	d036      	beq.n	8007700 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007692:	897b      	ldrh	r3, [r7, #10]
 8007694:	461a      	mov	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f002 fba4 	bl	8009df4 <SDMMC_CmdSendCSD>
 80076ac:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <SD_InitCard+0x100>
    {
      return errorstate;
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	e049      	b.n	800774c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f002 f965 	bl	800998e <SDMMC_GetResponse>
 80076c4:	4602      	mov	r2, r0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2104      	movs	r1, #4
 80076d0:	4618      	mov	r0, r3
 80076d2:	f002 f95c 	bl	800998e <SDMMC_GetResponse>
 80076d6:	4602      	mov	r2, r0
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2108      	movs	r1, #8
 80076e2:	4618      	mov	r0, r3
 80076e4:	f002 f953 	bl	800998e <SDMMC_GetResponse>
 80076e8:	4602      	mov	r2, r0
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	210c      	movs	r1, #12
 80076f4:	4618      	mov	r0, r3
 80076f6:	f002 f94a 	bl	800998e <SDMMC_GetResponse>
 80076fa:	4602      	mov	r2, r0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2104      	movs	r1, #4
 8007706:	4618      	mov	r0, r3
 8007708:	f002 f941 	bl	800998e <SDMMC_GetResponse>
 800770c:	4603      	mov	r3, r0
 800770e:	0d1a      	lsrs	r2, r3, #20
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007714:	f107 030c 	add.w	r3, r7, #12
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fb8c 	bl	8006e38 <HAL_SD_GetCardCSD>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007726:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800772a:	e00f      	b.n	800774c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007734:	041b      	lsls	r3, r3, #16
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f002 fa53 	bl	8009be4 <SDMMC_CmdSelDesel>
 800773e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <SD_InitCard+0x192>
  {
    return errorstate;
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	e000      	b.n	800774c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3740      	adds	r7, #64	; 0x40
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f002 fa5c 	bl	8009c2a <SDMMC_CmdGoIdleState>
 8007772:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <SD_PowerON+0x2a>
  {
    return errorstate;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	e072      	b.n	8007864 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f002 fa6f 	bl	8009c66 <SDMMC_CmdOperCond>
 8007788:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007790:	d10d      	bne.n	80077ae <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f002 fa44 	bl	8009c2a <SDMMC_CmdGoIdleState>
 80077a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d004      	beq.n	80077b4 <SD_PowerON+0x60>
    {
      return errorstate;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	e05a      	b.n	8007864 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d137      	bne.n	800782c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f002 fa6f 	bl	8009ca6 <SDMMC_CmdAppCommand>
 80077c8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d02d      	beq.n	800782c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077d4:	e046      	b.n	8007864 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2100      	movs	r1, #0
 80077dc:	4618      	mov	r0, r3
 80077de:	f002 fa62 	bl	8009ca6 <SDMMC_CmdAppCommand>
 80077e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <SD_PowerON+0x9a>
    {
      return errorstate;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	e03a      	b.n	8007864 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	491e      	ldr	r1, [pc, #120]	; (800786c <SD_PowerON+0x118>)
 80077f4:	4618      	mov	r0, r3
 80077f6:	f002 fa79 	bl	8009cec <SDMMC_CmdAppOperCommand>
 80077fa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007802:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007806:	e02d      	b.n	8007864 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f002 f8bd 	bl	800998e <SDMMC_GetResponse>
 8007814:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	0fdb      	lsrs	r3, r3, #31
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <SD_PowerON+0xce>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <SD_PowerON+0xd0>
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]

    count++;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3301      	adds	r3, #1
 800782a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007832:	4293      	cmp	r3, r2
 8007834:	d802      	bhi.n	800783c <SD_PowerON+0xe8>
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0cc      	beq.n	80077d6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007842:	4293      	cmp	r3, r2
 8007844:	d902      	bls.n	800784c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800784a:	e00b      	b.n	8007864 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	c1100000 	.word	0xc1100000

08007870 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08c      	sub	sp, #48	; 0x30
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800787a:	f7fa fb3d 	bl	8001ef8 <HAL_GetTick>
 800787e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2100      	movs	r1, #0
 800788a:	4618      	mov	r0, r3
 800788c:	f002 f87f 	bl	800998e <SDMMC_GetResponse>
 8007890:	4603      	mov	r3, r0
 8007892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800789a:	d102      	bne.n	80078a2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800789c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078a0:	e0b0      	b.n	8007a04 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2140      	movs	r1, #64	; 0x40
 80078a8:	4618      	mov	r0, r3
 80078aa:	f002 f8af 	bl	8009a0c <SDMMC_CmdBlockLength>
 80078ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	e0a0      	b.n	8007a04 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	041b      	lsls	r3, r3, #16
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f002 f9e9 	bl	8009ca6 <SDMMC_CmdAppCommand>
 80078d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	e08d      	b.n	8007a04 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80078f2:	2360      	movs	r3, #96	; 0x60
 80078f4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078f6:	2302      	movs	r3, #2
 80078f8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80078fe:	2301      	movs	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f107 0208 	add.w	r2, r7, #8
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f002 f851 	bl	80099b4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f002 fad1 	bl	8009ebe <SDMMC_CmdStatusRegister>
 800791c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d02b      	beq.n	800797c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	e069      	b.n	8007a04 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d013      	beq.n	8007966 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800793e:	2300      	movs	r3, #0
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007942:	e00d      	b.n	8007960 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f001 ffab 	bl	80098a4 <SDMMC_ReadFIFO>
 800794e:	4602      	mov	r2, r0
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	601a      	str	r2, [r3, #0]
        pData++;
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	3304      	adds	r3, #4
 8007958:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	3301      	adds	r3, #1
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	2b07      	cmp	r3, #7
 8007964:	d9ee      	bls.n	8007944 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007966:	f7fa fac7 	bl	8001ef8 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007974:	d102      	bne.n	800797c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007976:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800797a:	e043      	b.n	8007a04 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0d2      	beq.n	8007930 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007998:	2308      	movs	r3, #8
 800799a:	e033      	b.n	8007a04 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80079aa:	2302      	movs	r3, #2
 80079ac:	e02a      	b.n	8007a04 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d017      	beq.n	80079ec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80079bc:	2320      	movs	r3, #32
 80079be:	e021      	b.n	8007a04 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 ff6d 	bl	80098a4 <SDMMC_ReadFIFO>
 80079ca:	4602      	mov	r2, r0
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	601a      	str	r2, [r3, #0]
    pData++;
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	3304      	adds	r3, #4
 80079d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079d6:	f7fa fa8f 	bl	8001ef8 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e4:	d102      	bne.n	80079ec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079ea:	e00b      	b.n	8007a04 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e2      	bne.n	80079c0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a03      	ldr	r2, [pc, #12]	; (8007a0c <SD_SendSDStatus+0x19c>)
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3730      	adds	r7, #48	; 0x30
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	18000f3a 	.word	0x18000f3a

08007a10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a24:	e018      	b.n	8007a58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f002 fa20 	bl	8009e78 <SDMMC_CmdSendStatus>
 8007a38:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	e009      	b.n	8007a58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 ff9f 	bl	800998e <SDMMC_GetResponse>
 8007a50:	4602      	mov	r2, r0
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2100      	movs	r1, #0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 ff89 	bl	800998e <SDMMC_GetResponse>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a86:	d102      	bne.n	8007a8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a8c:	e02f      	b.n	8007aee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a8e:	f107 030c 	add.w	r3, r7, #12
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f879 	bl	8007b8c <SD_FindSCR>
 8007a9a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	e023      	b.n	8007aee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01c      	beq.n	8007aea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f002 f8f2 	bl	8009ca6 <SDMMC_CmdAppCommand>
 8007ac2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	e00f      	b.n	8007aee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f002 f929 	bl	8009d2c <SDMMC_CmdBusWidth>
 8007ada:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	e003      	b.n	8007aee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e001      	b.n	8007aee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007aea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	2300      	movs	r3, #0
 8007b04:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 ff3e 	bl	800998e <SDMMC_GetResponse>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b1c:	d102      	bne.n	8007b24 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b22:	e02f      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f82e 	bl	8007b8c <SD_FindSCR>
 8007b30:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	e023      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01c      	beq.n	8007b80 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f002 f8a7 	bl	8009ca6 <SDMMC_CmdAppCommand>
 8007b58:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	e00f      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f002 f8de 	bl	8009d2c <SDMMC_CmdBusWidth>
 8007b70:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	e003      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e001      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08e      	sub	sp, #56	; 0x38
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b96:	f7fa f9af 	bl	8001ef8 <HAL_GetTick>
 8007b9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60bb      	str	r3, [r7, #8]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2108      	movs	r1, #8
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 ff2a 	bl	8009a0c <SDMMC_CmdBlockLength>
 8007bb8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	e0ad      	b.n	8007d20 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f002 f868 	bl	8009ca6 <SDMMC_CmdAppCommand>
 8007bd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	e09e      	b.n	8007d20 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007be6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007be8:	2308      	movs	r3, #8
 8007bea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007bec:	2330      	movs	r3, #48	; 0x30
 8007bee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f107 0210 	add.w	r2, r7, #16
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 fed4 	bl	80099b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 f8ae 	bl	8009d72 <SDMMC_CmdSendSCR>
 8007c16:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d027      	beq.n	8007c6e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	e07e      	b.n	8007d20 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d113      	bne.n	8007c58 <SD_FindSCR+0xcc>
 8007c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d110      	bne.n	8007c58 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fe32 	bl	80098a4 <SDMMC_ReadFIFO>
 8007c40:	4603      	mov	r3, r0
 8007c42:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f001 fe2b 	bl	80098a4 <SDMMC_ReadFIFO>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	60fb      	str	r3, [r7, #12]
      index++;
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	3301      	adds	r3, #1
 8007c56:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c58:	f7fa f94e 	bl	8001ef8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c66:	d102      	bne.n	8007c6e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c6c:	e058      	b.n	8007d20 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c74:	f240 532a 	movw	r3, #1322	; 0x52a
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0d1      	beq.n	8007c22 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2208      	movs	r2, #8
 8007c92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c94:	2308      	movs	r3, #8
 8007c96:	e043      	b.n	8007d20 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2202      	movs	r2, #2
 8007cac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e036      	b.n	8007d20 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007cc8:	2320      	movs	r3, #32
 8007cca:	e029      	b.n	8007d20 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <SD_FindSCR+0x19c>)
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	061a      	lsls	r2, r3, #24
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ce0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	0a1b      	lsrs	r3, r3, #8
 8007ce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007cea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	0e1b      	lsrs	r3, r3, #24
 8007cf0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	601a      	str	r2, [r3, #0]
    scr++;
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	061a      	lsls	r2, r3, #24
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	0a1b      	lsrs	r3, r3, #8
 8007d0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007d12:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	0e1b      	lsrs	r3, r3, #24
 8007d18:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3738      	adds	r7, #56	; 0x38
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	18000f3a 	.word	0x18000f3a

08007d2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e0fb      	b.n	8007f36 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a7f      	ldr	r2, [pc, #508]	; (8007f40 <HAL_SPI_Init+0x214>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d004      	beq.n	8007d52 <HAL_SPI_Init+0x26>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a7d      	ldr	r2, [pc, #500]	; (8007f44 <HAL_SPI_Init+0x218>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	e000      	b.n	8007d54 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007d52:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a78      	ldr	r2, [pc, #480]	; (8007f40 <HAL_SPI_Init+0x214>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d004      	beq.n	8007d6e <HAL_SPI_Init+0x42>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a76      	ldr	r2, [pc, #472]	; (8007f44 <HAL_SPI_Init+0x218>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d105      	bne.n	8007d7a <HAL_SPI_Init+0x4e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b0f      	cmp	r3, #15
 8007d74:	d901      	bls.n	8007d7a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e0dd      	b.n	8007f36 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fd88 	bl	8008890 <SPI_GetPacketSize>
 8007d80:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6e      	ldr	r2, [pc, #440]	; (8007f40 <HAL_SPI_Init+0x214>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_SPI_Init+0x6a>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a6c      	ldr	r2, [pc, #432]	; (8007f44 <HAL_SPI_Init+0x218>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d102      	bne.n	8007d9c <HAL_SPI_Init+0x70>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d816      	bhi.n	8007dca <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007da0:	4a69      	ldr	r2, [pc, #420]	; (8007f48 <HAL_SPI_Init+0x21c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00e      	beq.n	8007dc4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a68      	ldr	r2, [pc, #416]	; (8007f4c <HAL_SPI_Init+0x220>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d009      	beq.n	8007dc4 <HAL_SPI_Init+0x98>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a66      	ldr	r2, [pc, #408]	; (8007f50 <HAL_SPI_Init+0x224>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d004      	beq.n	8007dc4 <HAL_SPI_Init+0x98>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a65      	ldr	r2, [pc, #404]	; (8007f54 <HAL_SPI_Init+0x228>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d104      	bne.n	8007dce <HAL_SPI_Init+0xa2>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d901      	bls.n	8007dce <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e0b3      	b.n	8007f36 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7f9 fd3e 	bl	8001864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e0a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e14:	d119      	bne.n	8007e4a <HAL_SPI_Init+0x11e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e1e:	d103      	bne.n	8007e28 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10c      	bne.n	8007e4a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e38:	d107      	bne.n	8007e4a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00f      	beq.n	8007e76 <HAL_SPI_Init+0x14a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	2b06      	cmp	r3, #6
 8007e5c:	d90b      	bls.n	8007e76 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	e007      	b.n	8007e86 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69da      	ldr	r2, [r3, #28]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	ea42 0103 	orr.w	r1, r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef2:	ea42 0103 	orr.w	r1, r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	46002000 	.word	0x46002000
 8007f44:	56002000 	.word	0x56002000
 8007f48:	40013000 	.word	0x40013000
 8007f4c:	50013000 	.word	0x50013000
 8007f50:	40003800 	.word	0x40003800
 8007f54:	50003800 	.word	0x50003800

08007f58 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	4613      	mov	r3, r2
 8007f66:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3320      	adds	r3, #32
 8007f6e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_SPI_Transmit+0x2a>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e203      	b.n	800838a <HAL_SPI_Transmit+0x432>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f8a:	f7f9 ffb5 	bl	8001ef8 <HAL_GetTick>
 8007f8e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d007      	beq.n	8007fac <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007fa8:	7efb      	ldrb	r3, [r7, #27]
 8007faa:	e1ee      	b.n	800838a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <HAL_SPI_Transmit+0x60>
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d107      	bne.n	8007fc8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007fc4:	7efb      	ldrb	r3, [r7, #27]
 8007fc6:	e1e0      	b.n	800838a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2203      	movs	r2, #3
 8007fcc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008018:	d108      	bne.n	800802c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	e009      	b.n	8008040 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800803e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	0c1b      	lsrs	r3, r3, #16
 8008048:	041b      	lsls	r3, r3, #16
 800804a:	88f9      	ldrh	r1, [r7, #6]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	430b      	orrs	r3, r1
 8008052:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10c      	bne.n	800808c <HAL_SPI_Transmit+0x134>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800807a:	d107      	bne.n	800808c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800808a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b0f      	cmp	r3, #15
 8008092:	d95b      	bls.n	800814c <HAL_SPI_Transmit+0x1f4>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a8f      	ldr	r2, [pc, #572]	; (80082d8 <HAL_SPI_Transmit+0x380>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d04f      	beq.n	800813e <HAL_SPI_Transmit+0x1e6>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a8e      	ldr	r2, [pc, #568]	; (80082dc <HAL_SPI_Transmit+0x384>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d04a      	beq.n	800813e <HAL_SPI_Transmit+0x1e6>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a8c      	ldr	r2, [pc, #560]	; (80082e0 <HAL_SPI_Transmit+0x388>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d045      	beq.n	800813e <HAL_SPI_Transmit+0x1e6>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a8b      	ldr	r2, [pc, #556]	; (80082e4 <HAL_SPI_Transmit+0x38c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d147      	bne.n	800814c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80080bc:	e03f      	b.n	800813e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d114      	bne.n	80080f6 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080dc:	1d1a      	adds	r2, r3, #4
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80080f4:	e023      	b.n	800813e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f6:	f7f9 feff 	bl	8001ef8 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d803      	bhi.n	800810e <HAL_SPI_Transmit+0x1b6>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800810c:	d102      	bne.n	8008114 <HAL_SPI_Transmit+0x1bc>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d114      	bne.n	800813e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 faed 	bl	80086f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008128:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e125      	b.n	800838a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1b9      	bne.n	80080be <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800814a:	e0f8      	b.n	800833e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	2b07      	cmp	r3, #7
 8008152:	f240 80ed 	bls.w	8008330 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008156:	e05d      	b.n	8008214 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b02      	cmp	r3, #2
 8008164:	d132      	bne.n	80081cc <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b01      	cmp	r3, #1
 8008170:	d918      	bls.n	80081a4 <HAL_SPI_Transmit+0x24c>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d014      	beq.n	80081a4 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800818a:	1d1a      	adds	r2, r3, #4
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b02      	subs	r3, #2
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081a2:	e037      	b.n	8008214 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a8:	881a      	ldrh	r2, [r3, #0]
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b2:	1c9a      	adds	r2, r3, #2
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081ca:	e023      	b.n	8008214 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081cc:	f7f9 fe94 	bl	8001ef8 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d803      	bhi.n	80081e4 <HAL_SPI_Transmit+0x28c>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e2:	d102      	bne.n	80081ea <HAL_SPI_Transmit+0x292>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d114      	bne.n	8008214 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fa82 	bl	80086f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e0ba      	b.n	800838a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d19b      	bne.n	8008158 <HAL_SPI_Transmit+0x200>
 8008220:	e08d      	b.n	800833e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b02      	cmp	r3, #2
 800822e:	d15b      	bne.n	80082e8 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008236:	b29b      	uxth	r3, r3
 8008238:	2b03      	cmp	r3, #3
 800823a:	d918      	bls.n	800826e <HAL_SPI_Transmit+0x316>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008240:	2b40      	cmp	r3, #64	; 0x40
 8008242:	d914      	bls.n	800826e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008254:	1d1a      	adds	r2, r3, #4
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b04      	subs	r3, #4
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800826c:	e060      	b.n	8008330 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b01      	cmp	r3, #1
 8008278:	d917      	bls.n	80082aa <HAL_SPI_Transmit+0x352>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d013      	beq.n	80082aa <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008286:	881a      	ldrh	r2, [r3, #0]
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008290:	1c9a      	adds	r2, r3, #2
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b02      	subs	r3, #2
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80082a8:	e042      	b.n	8008330 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3320      	adds	r3, #32
 80082b4:	7812      	ldrb	r2, [r2, #0]
 80082b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3b01      	subs	r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80082d4:	e02c      	b.n	8008330 <HAL_SPI_Transmit+0x3d8>
 80082d6:	bf00      	nop
 80082d8:	40013000 	.word	0x40013000
 80082dc:	50013000 	.word	0x50013000
 80082e0:	40003800 	.word	0x40003800
 80082e4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082e8:	f7f9 fe06 	bl	8001ef8 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d803      	bhi.n	8008300 <HAL_SPI_Transmit+0x3a8>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082fe:	d102      	bne.n	8008306 <HAL_SPI_Transmit+0x3ae>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d114      	bne.n	8008330 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f9f4 	bl	80086f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e02c      	b.n	800838a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	f47f af72 	bne.w	8008222 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2200      	movs	r2, #0
 8008346:	2108      	movs	r1, #8
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fa73 	bl	8008834 <SPI_WaitOnFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 f9c5 	bl	80086f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8008388:	7efb      	ldrb	r3, [r7, #27]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3720      	adds	r7, #32
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop

08008394 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	4613      	mov	r3, r2
 80083a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3330      	adds	r3, #48	; 0x30
 80083ae:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_SPI_Receive+0x2a>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e18e      	b.n	80086dc <HAL_SPI_Receive+0x348>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083c6:	f7f9 fd97 	bl	8001ef8 <HAL_GetTick>
 80083ca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d007      	beq.n	80083e8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
 80083da:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80083e4:	7ffb      	ldrb	r3, [r7, #31]
 80083e6:	e179      	b.n	80086dc <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_SPI_Receive+0x60>
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d107      	bne.n	8008404 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008400:	7ffb      	ldrb	r3, [r7, #31]
 8008402:	e16b      	b.n	80086dc <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2204      	movs	r2, #4
 8008408:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008454:	d108      	bne.n	8008468 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e009      	b.n	800847c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800847a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	0c1b      	lsrs	r3, r3, #16
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	88f9      	ldrh	r1, [r7, #6]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	430b      	orrs	r3, r1
 800848e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0201 	orr.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10c      	bne.n	80084c8 <HAL_SPI_Receive+0x134>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b6:	d107      	bne.n	80084c8 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	2b0f      	cmp	r3, #15
 80084ce:	d95c      	bls.n	800858a <HAL_SPI_Receive+0x1f6>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a83      	ldr	r2, [pc, #524]	; (80086e4 <HAL_SPI_Receive+0x350>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d050      	beq.n	800857c <HAL_SPI_Receive+0x1e8>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a82      	ldr	r2, [pc, #520]	; (80086e8 <HAL_SPI_Receive+0x354>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d04b      	beq.n	800857c <HAL_SPI_Receive+0x1e8>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a80      	ldr	r2, [pc, #512]	; (80086ec <HAL_SPI_Receive+0x358>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d046      	beq.n	800857c <HAL_SPI_Receive+0x1e8>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a7f      	ldr	r2, [pc, #508]	; (80086f0 <HAL_SPI_Receive+0x35c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d148      	bne.n	800858a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80084f8:	e040      	b.n	800857c <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695a      	ldr	r2, [r3, #20]
 8008500:	f248 0308 	movw	r3, #32776	; 0x8008
 8008504:	4013      	ands	r3, r2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d014      	beq.n	8008534 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008512:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008514:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851a:	1d1a      	adds	r2, r3, #4
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008532:	e023      	b.n	800857c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008534:	f7f9 fce0 	bl	8001ef8 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d803      	bhi.n	800854c <HAL_SPI_Receive+0x1b8>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800854a:	d102      	bne.n	8008552 <HAL_SPI_Receive+0x1be>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d114      	bne.n	800857c <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f8ce 	bl	80086f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e0af      	b.n	80086dc <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1b8      	bne.n	80084fa <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008588:	e095      	b.n	80086b6 <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b07      	cmp	r3, #7
 8008590:	f240 808b 	bls.w	80086aa <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008594:	e03f      	b.n	8008616 <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d114      	bne.n	80085ce <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	8812      	ldrh	r2, [r2, #0]
 80085ac:	b292      	uxth	r2, r2
 80085ae:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b4:	1c9a      	adds	r2, r3, #2
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80085cc:	e023      	b.n	8008616 <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085ce:	f7f9 fc93 	bl	8001ef8 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d803      	bhi.n	80085e6 <HAL_SPI_Receive+0x252>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e4:	d102      	bne.n	80085ec <HAL_SPI_Receive+0x258>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d114      	bne.n	8008616 <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f881 	bl	80086f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008600:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e062      	b.n	80086dc <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1b9      	bne.n	8008596 <HAL_SPI_Receive+0x202>
 8008622:	e048      	b.n	80086b6 <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b01      	cmp	r3, #1
 8008630:	d117      	bne.n	8008662 <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008660:	e023      	b.n	80086aa <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008662:	f7f9 fc49 	bl	8001ef8 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d803      	bhi.n	800867a <HAL_SPI_Receive+0x2e6>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008678:	d102      	bne.n	8008680 <HAL_SPI_Receive+0x2ec>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d114      	bne.n	80086aa <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f837 	bl	80086f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008694:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e018      	b.n	80086dc <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1b6      	bne.n	8008624 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f81c 	bl	80086f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 80086da:	7ffb      	ldrb	r3, [r7, #31]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40013000 	.word	0x40013000
 80086e8:	50013000 	.word	0x50013000
 80086ec:	40003800 	.word	0x40003800
 80086f0:	50003800 	.word	0x50003800

080086f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0208 	orr.w	r2, r2, #8
 8008712:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0210 	orr.w	r2, r2, #16
 8008722:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008742:	f023 0303 	bic.w	r3, r3, #3
 8008746:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008756:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b04      	cmp	r3, #4
 8008762:	d014      	beq.n	800878e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00f      	beq.n	800878e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008774:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f042 0220 	orr.w	r2, r2, #32
 800878c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d014      	beq.n	80087c4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00f      	beq.n	80087c4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087aa:	f043 0204 	orr.w	r2, r3, #4
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00f      	beq.n	80087ee <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087d4:	f043 0201 	orr.w	r2, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00f      	beq.n	8008818 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087fe:	f043 0208 	orr.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699a      	ldr	r2, [r3, #24]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008816:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008828:	bf00      	nop
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	4613      	mov	r3, r2
 8008842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008844:	e010      	b.n	8008868 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008846:	f7f9 fb57 	bl	8001ef8 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d803      	bhi.n	800885e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800885c:	d102      	bne.n	8008864 <SPI_WaitOnFlagUntilTimeout+0x30>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e00f      	b.n	8008888 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	695a      	ldr	r2, [r3, #20]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4013      	ands	r3, r2
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	429a      	cmp	r2, r3
 8008876:	bf0c      	ite	eq
 8008878:	2301      	moveq	r3, #1
 800887a:	2300      	movne	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	429a      	cmp	r2, r3
 8008884:	d0df      	beq.n	8008846 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	095b      	lsrs	r3, r3, #5
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	3307      	adds	r3, #7
 80088ae:	08db      	lsrs	r3, r3, #3
 80088b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d12e      	bne.n	800893a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e028      	b.n	800893c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2202      	movs	r2, #2
 80088f6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0201 	bic.w	r2, r2, #1
 8008908:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008916:	ea42 0103 	orr.w	r1, r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	e000      	b.n	800893c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
  }
}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e049      	b.n	80089ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7f9 f870 	bl	8001a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f000 f8d6 	bl	8008b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d001      	beq.n	8008a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e072      	b.n	8008af6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a35      	ldr	r2, [pc, #212]	; (8008b04 <HAL_TIM_Base_Start_IT+0x10c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d040      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a34      	ldr	r2, [pc, #208]	; (8008b08 <HAL_TIM_Base_Start_IT+0x110>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d03b      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a44:	d036      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a4e:	d031      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2d      	ldr	r2, [pc, #180]	; (8008b0c <HAL_TIM_Base_Start_IT+0x114>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d02c      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2c      	ldr	r2, [pc, #176]	; (8008b10 <HAL_TIM_Base_Start_IT+0x118>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d027      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <HAL_TIM_Base_Start_IT+0x11c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d022      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a29      	ldr	r2, [pc, #164]	; (8008b18 <HAL_TIM_Base_Start_IT+0x120>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d01d      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a27      	ldr	r2, [pc, #156]	; (8008b1c <HAL_TIM_Base_Start_IT+0x124>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d018      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a26      	ldr	r2, [pc, #152]	; (8008b20 <HAL_TIM_Base_Start_IT+0x128>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d013      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a24      	ldr	r2, [pc, #144]	; (8008b24 <HAL_TIM_Base_Start_IT+0x12c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00e      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a23      	ldr	r2, [pc, #140]	; (8008b28 <HAL_TIM_Base_Start_IT+0x130>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d009      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a21      	ldr	r2, [pc, #132]	; (8008b2c <HAL_TIM_Base_Start_IT+0x134>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d004      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0xbc>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a20      	ldr	r2, [pc, #128]	; (8008b30 <HAL_TIM_Base_Start_IT+0x138>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d115      	bne.n	8008ae0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <HAL_TIM_Base_Start_IT+0x13c>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b06      	cmp	r3, #6
 8008ac4:	d015      	beq.n	8008af2 <HAL_TIM_Base_Start_IT+0xfa>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008acc:	d011      	beq.n	8008af2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0201 	orr.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ade:	e008      	b.n	8008af2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0201 	orr.w	r2, r2, #1
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	e000      	b.n	8008af4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	40012c00 	.word	0x40012c00
 8008b08:	50012c00 	.word	0x50012c00
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	50000400 	.word	0x50000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	50000800 	.word	0x50000800
 8008b1c:	40000c00 	.word	0x40000c00
 8008b20:	50000c00 	.word	0x50000c00
 8008b24:	40013400 	.word	0x40013400
 8008b28:	50013400 	.word	0x50013400
 8008b2c:	40014000 	.word	0x40014000
 8008b30:	50014000 	.word	0x50014000
 8008b34:	00010007 	.word	0x00010007

08008b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a68      	ldr	r2, [pc, #416]	; (8008cec <TIM_Base_SetConfig+0x1b4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d02b      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a67      	ldr	r2, [pc, #412]	; (8008cf0 <TIM_Base_SetConfig+0x1b8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d027      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d023      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b66:	d01f      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a62      	ldr	r2, [pc, #392]	; (8008cf4 <TIM_Base_SetConfig+0x1bc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d01b      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a61      	ldr	r2, [pc, #388]	; (8008cf8 <TIM_Base_SetConfig+0x1c0>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d017      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a60      	ldr	r2, [pc, #384]	; (8008cfc <TIM_Base_SetConfig+0x1c4>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d013      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a5f      	ldr	r2, [pc, #380]	; (8008d00 <TIM_Base_SetConfig+0x1c8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00f      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a5e      	ldr	r2, [pc, #376]	; (8008d04 <TIM_Base_SetConfig+0x1cc>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00b      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a5d      	ldr	r2, [pc, #372]	; (8008d08 <TIM_Base_SetConfig+0x1d0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d007      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a5c      	ldr	r2, [pc, #368]	; (8008d0c <TIM_Base_SetConfig+0x1d4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_Base_SetConfig+0x70>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a5b      	ldr	r2, [pc, #364]	; (8008d10 <TIM_Base_SetConfig+0x1d8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d108      	bne.n	8008bba <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a4b      	ldr	r2, [pc, #300]	; (8008cec <TIM_Base_SetConfig+0x1b4>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d043      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a4a      	ldr	r2, [pc, #296]	; (8008cf0 <TIM_Base_SetConfig+0x1b8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d03f      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd0:	d03b      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd8:	d037      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a45      	ldr	r2, [pc, #276]	; (8008cf4 <TIM_Base_SetConfig+0x1bc>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d033      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a44      	ldr	r2, [pc, #272]	; (8008cf8 <TIM_Base_SetConfig+0x1c0>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d02f      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a43      	ldr	r2, [pc, #268]	; (8008cfc <TIM_Base_SetConfig+0x1c4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d02b      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a42      	ldr	r2, [pc, #264]	; (8008d00 <TIM_Base_SetConfig+0x1c8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d027      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a41      	ldr	r2, [pc, #260]	; (8008d04 <TIM_Base_SetConfig+0x1cc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d023      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a40      	ldr	r2, [pc, #256]	; (8008d08 <TIM_Base_SetConfig+0x1d0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d01f      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a3f      	ldr	r2, [pc, #252]	; (8008d0c <TIM_Base_SetConfig+0x1d4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d01b      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a3e      	ldr	r2, [pc, #248]	; (8008d10 <TIM_Base_SetConfig+0x1d8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d017      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a3d      	ldr	r2, [pc, #244]	; (8008d14 <TIM_Base_SetConfig+0x1dc>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d013      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a3c      	ldr	r2, [pc, #240]	; (8008d18 <TIM_Base_SetConfig+0x1e0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00f      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a3b      	ldr	r2, [pc, #236]	; (8008d1c <TIM_Base_SetConfig+0x1e4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00b      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a3a      	ldr	r2, [pc, #232]	; (8008d20 <TIM_Base_SetConfig+0x1e8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d007      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a39      	ldr	r2, [pc, #228]	; (8008d24 <TIM_Base_SetConfig+0x1ec>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d003      	beq.n	8008c4a <TIM_Base_SetConfig+0x112>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a38      	ldr	r2, [pc, #224]	; (8008d28 <TIM_Base_SetConfig+0x1f0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d108      	bne.n	8008c5c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a1a      	ldr	r2, [pc, #104]	; (8008cec <TIM_Base_SetConfig+0x1b4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d023      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a19      	ldr	r2, [pc, #100]	; (8008cf0 <TIM_Base_SetConfig+0x1b8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d01f      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a1e      	ldr	r2, [pc, #120]	; (8008d0c <TIM_Base_SetConfig+0x1d4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d01b      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1d      	ldr	r2, [pc, #116]	; (8008d10 <TIM_Base_SetConfig+0x1d8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d017      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a1c      	ldr	r2, [pc, #112]	; (8008d14 <TIM_Base_SetConfig+0x1dc>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1b      	ldr	r2, [pc, #108]	; (8008d18 <TIM_Base_SetConfig+0x1e0>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00f      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1a      	ldr	r2, [pc, #104]	; (8008d1c <TIM_Base_SetConfig+0x1e4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00b      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a19      	ldr	r2, [pc, #100]	; (8008d20 <TIM_Base_SetConfig+0x1e8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d007      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a18      	ldr	r2, [pc, #96]	; (8008d24 <TIM_Base_SetConfig+0x1ec>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d003      	beq.n	8008cd0 <TIM_Base_SetConfig+0x198>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <TIM_Base_SetConfig+0x1f0>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d103      	bne.n	8008cd8 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	615a      	str	r2, [r3, #20]
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40012c00 	.word	0x40012c00
 8008cf0:	50012c00 	.word	0x50012c00
 8008cf4:	40000400 	.word	0x40000400
 8008cf8:	50000400 	.word	0x50000400
 8008cfc:	40000800 	.word	0x40000800
 8008d00:	50000800 	.word	0x50000800
 8008d04:	40000c00 	.word	0x40000c00
 8008d08:	50000c00 	.word	0x50000c00
 8008d0c:	40013400 	.word	0x40013400
 8008d10:	50013400 	.word	0x50013400
 8008d14:	40014000 	.word	0x40014000
 8008d18:	50014000 	.word	0x50014000
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	50014400 	.word	0x50014400
 8008d24:	40014800 	.word	0x40014800
 8008d28:	50014800 	.word	0x50014800

08008d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e042      	b.n	8008dc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f8 fea1 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2224      	movs	r2, #36	; 0x24
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0201 	bic.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f8ba 	bl	8008ee8 <UART_SetConfig>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e022      	b.n	8008dc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d002      	beq.n	8008d8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa46 	bl	8009218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0201 	orr.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 facd 	bl	800935c <UART_CheckIdleState>
 8008dc2:	4603      	mov	r3, r0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	; 0x28
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d17b      	bne.n	8008ede <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <HAL_UART_Transmit+0x26>
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e074      	b.n	8008ee0 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2221      	movs	r2, #33	; 0x21
 8008e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e06:	f7f9 f877 	bl	8001ef8 <HAL_GetTick>
 8008e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	88fa      	ldrh	r2, [r7, #6]
 8008e10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	88fa      	ldrh	r2, [r7, #6]
 8008e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e24:	d108      	bne.n	8008e38 <HAL_UART_Transmit+0x6c>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d104      	bne.n	8008e38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	61bb      	str	r3, [r7, #24]
 8008e36:	e003      	b.n	8008e40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e40:	e030      	b.n	8008ea4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2180      	movs	r1, #128	; 0x80
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 fb2f 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e03d      	b.n	8008ee0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10b      	bne.n	8008e82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	61bb      	str	r3, [r7, #24]
 8008e80:	e007      	b.n	8008e92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1c8      	bne.n	8008e42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2140      	movs	r1, #64	; 0x40
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 faf8 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e006      	b.n	8008ee0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	e000      	b.n	8008ee0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ede:	2302      	movs	r3, #2
  }
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3720      	adds	r7, #32
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eec:	b094      	sub	sp, #80	; 0x50
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	4b9b      	ldr	r3, [pc, #620]	; (800916c <UART_SetConfig+0x284>)
 8008efe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4994      	ldr	r1, [pc, #592]	; (8009170 <UART_SetConfig+0x288>)
 8008f20:	4019      	ands	r1, r3
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	68d9      	ldr	r1, [r3, #12]
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	ea40 0301 	orr.w	r3, r0, r1
 8008f42:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4b87      	ldr	r3, [pc, #540]	; (800916c <UART_SetConfig+0x284>)
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d009      	beq.n	8008f68 <UART_SetConfig+0x80>
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	4b86      	ldr	r3, [pc, #536]	; (8009174 <UART_SetConfig+0x28c>)
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d004      	beq.n	8008f68 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	6a1a      	ldr	r2, [r3, #32]
 8008f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f64:	4313      	orrs	r3, r2
 8008f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008f72:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	f023 000f 	bic.w	r0, r3, #15
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	ea40 0301 	orr.w	r3, r0, r1
 8008f96:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	4b76      	ldr	r3, [pc, #472]	; (8009178 <UART_SetConfig+0x290>)
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d102      	bne.n	8008fa8 <UART_SetConfig+0xc0>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa6:	e021      	b.n	8008fec <UART_SetConfig+0x104>
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	4b73      	ldr	r3, [pc, #460]	; (800917c <UART_SetConfig+0x294>)
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d102      	bne.n	8008fb8 <UART_SetConfig+0xd0>
 8008fb2:	2304      	movs	r3, #4
 8008fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fb6:	e019      	b.n	8008fec <UART_SetConfig+0x104>
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	4b70      	ldr	r3, [pc, #448]	; (8009180 <UART_SetConfig+0x298>)
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d102      	bne.n	8008fc8 <UART_SetConfig+0xe0>
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc6:	e011      	b.n	8008fec <UART_SetConfig+0x104>
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b6d      	ldr	r3, [pc, #436]	; (8009184 <UART_SetConfig+0x29c>)
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d102      	bne.n	8008fd8 <UART_SetConfig+0xf0>
 8008fd2:	2310      	movs	r3, #16
 8008fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fd6:	e009      	b.n	8008fec <UART_SetConfig+0x104>
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4b63      	ldr	r3, [pc, #396]	; (800916c <UART_SetConfig+0x284>)
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d102      	bne.n	8008fe8 <UART_SetConfig+0x100>
 8008fe2:	2320      	movs	r3, #32
 8008fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fe6:	e001      	b.n	8008fec <UART_SetConfig+0x104>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	4b5e      	ldr	r3, [pc, #376]	; (800916c <UART_SetConfig+0x284>)
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d004      	beq.n	8009000 <UART_SetConfig+0x118>
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	4b5e      	ldr	r3, [pc, #376]	; (8009174 <UART_SetConfig+0x28c>)
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d172      	bne.n	80090e6 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009002:	2200      	movs	r2, #0
 8009004:	623b      	str	r3, [r7, #32]
 8009006:	627a      	str	r2, [r7, #36]	; 0x24
 8009008:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800900c:	f7fc f86a 	bl	80050e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009010:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80e7 	beq.w	80091e8 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	4a5a      	ldr	r2, [pc, #360]	; (8009188 <UART_SetConfig+0x2a0>)
 8009020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009024:	461a      	mov	r2, r3
 8009026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009028:	fbb3 f3f2 	udiv	r3, r3, r2
 800902c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	4613      	mov	r3, r2
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	4413      	add	r3, r2
 8009038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800903a:	429a      	cmp	r2, r3
 800903c:	d305      	bcc.n	800904a <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009046:	429a      	cmp	r2, r3
 8009048:	d903      	bls.n	8009052 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009050:	e048      	b.n	80090e4 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009054:	2200      	movs	r2, #0
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	61fa      	str	r2, [r7, #28]
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	4a4a      	ldr	r2, [pc, #296]	; (8009188 <UART_SetConfig+0x2a0>)
 8009060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009064:	b29b      	uxth	r3, r3
 8009066:	2200      	movs	r2, #0
 8009068:	613b      	str	r3, [r7, #16]
 800906a:	617a      	str	r2, [r7, #20]
 800906c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009070:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4610      	mov	r0, r2
 800907e:	4619      	mov	r1, r3
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	f04f 0300 	mov.w	r3, #0
 8009088:	020b      	lsls	r3, r1, #8
 800908a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800908e:	0202      	lsls	r2, r0, #8
 8009090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009092:	6849      	ldr	r1, [r1, #4]
 8009094:	0849      	lsrs	r1, r1, #1
 8009096:	2000      	movs	r0, #0
 8009098:	460c      	mov	r4, r1
 800909a:	4605      	mov	r5, r0
 800909c:	eb12 0804 	adds.w	r8, r2, r4
 80090a0:	eb43 0905 	adc.w	r9, r3, r5
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	60bb      	str	r3, [r7, #8]
 80090ac:	60fa      	str	r2, [r7, #12]
 80090ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 f8e7 	bl	8000288 <__aeabi_uldivmod>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4613      	mov	r3, r2
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090c8:	d308      	bcc.n	80090dc <UART_SetConfig+0x1f4>
 80090ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090d0:	d204      	bcs.n	80090dc <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090d8:	60da      	str	r2, [r3, #12]
 80090da:	e003      	b.n	80090e4 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80090e2:	e081      	b.n	80091e8 <UART_SetConfig+0x300>
 80090e4:	e080      	b.n	80091e8 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ee:	d14d      	bne.n	800918c <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f2:	2200      	movs	r2, #0
 80090f4:	603b      	str	r3, [r7, #0]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090fc:	f7fb fff2 	bl	80050e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009100:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	d06f      	beq.n	80091e8 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	4a1e      	ldr	r2, [pc, #120]	; (8009188 <UART_SetConfig+0x2a0>)
 800910e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009112:	461a      	mov	r2, r3
 8009114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009116:	fbb3 f3f2 	udiv	r3, r3, r2
 800911a:	005a      	lsls	r2, r3, #1
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	085b      	lsrs	r3, r3, #1
 8009122:	441a      	add	r2, r3
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	fbb2 f3f3 	udiv	r3, r2, r3
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800912e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009130:	2b0f      	cmp	r3, #15
 8009132:	d916      	bls.n	8009162 <UART_SetConfig+0x27a>
 8009134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913a:	d212      	bcs.n	8009162 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800913c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913e:	b29b      	uxth	r3, r3
 8009140:	f023 030f 	bic.w	r3, r3, #15
 8009144:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009148:	085b      	lsrs	r3, r3, #1
 800914a:	b29b      	uxth	r3, r3
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	b29a      	uxth	r2, r3
 8009152:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009154:	4313      	orrs	r3, r2
 8009156:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800915e:	60da      	str	r2, [r3, #12]
 8009160:	e042      	b.n	80091e8 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009168:	e03e      	b.n	80091e8 <UART_SetConfig+0x300>
 800916a:	bf00      	nop
 800916c:	46002400 	.word	0x46002400
 8009170:	cfff69f3 	.word	0xcfff69f3
 8009174:	56002400 	.word	0x56002400
 8009178:	40013800 	.word	0x40013800
 800917c:	40004800 	.word	0x40004800
 8009180:	40004c00 	.word	0x40004c00
 8009184:	40005000 	.word	0x40005000
 8009188:	0800d6ac 	.word	0x0800d6ac
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800918c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800918e:	2200      	movs	r2, #0
 8009190:	469a      	mov	sl, r3
 8009192:	4693      	mov	fp, r2
 8009194:	4650      	mov	r0, sl
 8009196:	4659      	mov	r1, fp
 8009198:	f7fb ffa4 	bl	80050e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800919c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800919e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d021      	beq.n	80091e8 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	4a1a      	ldr	r2, [pc, #104]	; (8009214 <UART_SetConfig+0x32c>)
 80091aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ae:	461a      	mov	r2, r3
 80091b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	441a      	add	r2, r3
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d909      	bls.n	80091e2 <UART_SetConfig+0x2fa>
 80091ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d4:	d205      	bcs.n	80091e2 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	b29a      	uxth	r2, r3
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60da      	str	r2, [r3, #12]
 80091e0:	e002      	b.n	80091e8 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	2201      	movs	r2, #1
 80091ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	2200      	movs	r2, #0
 80091fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	2200      	movs	r2, #0
 8009202:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009204:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009208:	4618      	mov	r0, r3
 800920a:	3750      	adds	r7, #80	; 0x50
 800920c:	46bd      	mov	sp, r7
 800920e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009212:	bf00      	nop
 8009214:	0800d6ac 	.word	0x0800d6ac

08009218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	f003 0308 	and.w	r3, r3, #8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01a      	beq.n	800932e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009316:	d10a      	bne.n	800932e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	605a      	str	r2, [r3, #4]
  }
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b098      	sub	sp, #96	; 0x60
 8009360:	af02      	add	r7, sp, #8
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800936c:	f7f8 fdc4 	bl	8001ef8 <HAL_GetTick>
 8009370:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b08      	cmp	r3, #8
 800937e:	d12f      	bne.n	80093e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009388:	2200      	movs	r2, #0
 800938a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f88e 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d022      	beq.n	80093e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093ae:	653b      	str	r3, [r7, #80]	; 0x50
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b8:	647b      	str	r3, [r7, #68]	; 0x44
 80093ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e063      	b.n	80094a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0304 	and.w	r3, r3, #4
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d149      	bne.n	8009482 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093f6:	2200      	movs	r2, #0
 80093f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f857 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d03c      	beq.n	8009482 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	623b      	str	r3, [r7, #32]
   return(result);
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800941c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009426:	633b      	str	r3, [r7, #48]	; 0x30
 8009428:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800942c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e6      	bne.n	8009408 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	60fb      	str	r3, [r7, #12]
   return(result);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	64bb      	str	r3, [r7, #72]	; 0x48
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800945a:	61fa      	str	r2, [r7, #28]
 800945c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	69b9      	ldr	r1, [r7, #24]
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	617b      	str	r3, [r7, #20]
   return(result);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e012      	b.n	80094a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3758      	adds	r7, #88	; 0x58
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094c0:	e049      	b.n	8009556 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094c8:	d045      	beq.n	8009556 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ca:	f7f8 fd15 	bl	8001ef8 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d302      	bcc.n	80094e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e048      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d031      	beq.n	8009556 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	f003 0308 	and.w	r3, r3, #8
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d110      	bne.n	8009522 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2208      	movs	r2, #8
 8009506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f838 	bl	800957e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2208      	movs	r2, #8
 8009512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e029      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800952c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009530:	d111      	bne.n	8009556 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800953a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f81e 	bl	800957e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e00f      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69da      	ldr	r2, [r3, #28]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4013      	ands	r3, r2
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	bf0c      	ite	eq
 8009566:	2301      	moveq	r3, #1
 8009568:	2300      	movne	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	461a      	mov	r2, r3
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	429a      	cmp	r2, r3
 8009572:	d0a6      	beq.n	80094c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800957e:	b480      	push	{r7}
 8009580:	b095      	sub	sp, #84	; 0x54
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800959a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a4:	643b      	str	r3, [r7, #64]	; 0x40
 80095a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3308      	adds	r3, #8
 80095da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e3      	bne.n	80095b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d118      	bne.n	800962a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	60bb      	str	r3, [r7, #8]
   return(result);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f023 0310 	bic.w	r3, r3, #16
 800960c:	647b      	str	r3, [r7, #68]	; 0x44
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009616:	61bb      	str	r3, [r7, #24]
 8009618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6979      	ldr	r1, [r7, #20]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	613b      	str	r3, [r7, #16]
   return(result);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e6      	bne.n	80095f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2220      	movs	r2, #32
 800962e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800963e:	bf00      	nop
 8009640:	3754      	adds	r7, #84	; 0x54
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800964a:	b480      	push	{r7}
 800964c:	b085      	sub	sp, #20
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_UARTEx_DisableFifoMode+0x16>
 800965c:	2302      	movs	r3, #2
 800965e:	e027      	b.n	80096b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2224      	movs	r2, #36	; 0x24
 800966c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f022 0201 	bic.w	r2, r2, #1
 8009686:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800968e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d101      	bne.n	80096d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096d0:	2302      	movs	r3, #2
 80096d2:	e02d      	b.n	8009730 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2224      	movs	r2, #36	; 0x24
 80096e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0201 	bic.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f84f 	bl	80097b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2220      	movs	r2, #32
 8009722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009748:	2b01      	cmp	r3, #1
 800974a:	d101      	bne.n	8009750 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800974c:	2302      	movs	r3, #2
 800974e:	e02d      	b.n	80097ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2224      	movs	r2, #36	; 0x24
 800975c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0201 	bic.w	r2, r2, #1
 8009776:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f811 	bl	80097b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d108      	bne.n	80097d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097d4:	e031      	b.n	800983a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097d6:	2308      	movs	r3, #8
 80097d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097da:	2308      	movs	r3, #8
 80097dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	0e5b      	lsrs	r3, r3, #25
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	f003 0307 	and.w	r3, r3, #7
 80097ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	0f5b      	lsrs	r3, r3, #29
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 0307 	and.w	r3, r3, #7
 80097fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	7b3a      	ldrb	r2, [r7, #12]
 8009802:	4911      	ldr	r1, [pc, #68]	; (8009848 <UARTEx_SetNbDataToProcess+0x94>)
 8009804:	5c8a      	ldrb	r2, [r1, r2]
 8009806:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800980a:	7b3a      	ldrb	r2, [r7, #12]
 800980c:	490f      	ldr	r1, [pc, #60]	; (800984c <UARTEx_SetNbDataToProcess+0x98>)
 800980e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009810:	fb93 f3f2 	sdiv	r3, r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	7b7a      	ldrb	r2, [r7, #13]
 8009820:	4909      	ldr	r1, [pc, #36]	; (8009848 <UARTEx_SetNbDataToProcess+0x94>)
 8009822:	5c8a      	ldrb	r2, [r1, r2]
 8009824:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009828:	7b7a      	ldrb	r2, [r7, #13]
 800982a:	4908      	ldr	r1, [pc, #32]	; (800984c <UARTEx_SetNbDataToProcess+0x98>)
 800982c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800982e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	0800d6c4 	.word	0x0800d6c4
 800984c:	0800d6cc 	.word	0x0800d6cc

08009850 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009850:	b084      	sub	sp, #16
 8009852:	b480      	push	{r7}
 8009854:	b085      	sub	sp, #20
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	f107 001c 	add.w	r0, r7, #28
 800985e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009866:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009868:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800986a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800986e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009872:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009876:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <SDMMC_Init+0x50>)
 8009884:	4013      	ands	r3, r2
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	b004      	add	sp, #16
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	ffc02c00 	.word	0xffc02c00

080098a4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f043 0203 	orr.w	r2, r3, #3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0303 	and.w	r3, r3, #3
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800993e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009944:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800994a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	4b06      	ldr	r3, [pc, #24]	; (8009970 <SDMMC_SendCommand+0x50>)
 8009958:	4013      	ands	r3, r2
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	431a      	orrs	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	fffee0c0 	.word	0xfffee0c0

08009974 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	b2db      	uxtb	r3, r3
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800998e:	b480      	push	{r7}
 8009990:	b085      	sub	sp, #20
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3314      	adds	r3, #20
 800999c:	461a      	mov	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099da:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80099e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80099e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0

}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009a1a:	2310      	movs	r3, #16
 8009a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a24:	2300      	movs	r3, #0
 8009a26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a2e:	f107 0308 	add.w	r3, r7, #8
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff ff73 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a3e:	2110      	movs	r1, #16
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fa5f 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a48:	69fb      	ldr	r3, [r7, #28]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3720      	adds	r7, #32
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b088      	sub	sp, #32
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009a60:	2311      	movs	r3, #17
 8009a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff ff50 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a84:	2111      	movs	r1, #17
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa3c 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009a8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3720      	adds	r7, #32
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009aa6:	2312      	movs	r3, #18
 8009aa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ab8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff ff2d 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aca:	2112      	movs	r1, #18
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa19 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b088      	sub	sp, #32
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009aec:	2318      	movs	r3, #24
 8009aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009afe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff ff0a 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b10:	2118      	movs	r1, #24
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f9f6 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009b32:	2319      	movs	r3, #25
 8009b34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b46:	f107 0308 	add.w	r3, r7, #8
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff fee7 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b56:	2119      	movs	r1, #25
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f9d3 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009b5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b60:	69fb      	ldr	r3, [r7, #28]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b78:	230c      	movs	r3, #12
 8009b7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b82:	2300      	movs	r3, #0
 8009b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b8a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ba4:	f107 0308 	add.w	r3, r7, #8
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff feb8 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009bb0:	4a0b      	ldr	r2, [pc, #44]	; (8009be0 <SDMMC_CmdStopTransfer+0x74>)
 8009bb2:	210c      	movs	r1, #12
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f9a5 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009bba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bce:	d101      	bne.n	8009bd4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3720      	adds	r7, #32
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	05f5e100 	.word	0x05f5e100

08009be4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009bf2:	2307      	movs	r3, #7
 8009bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c06:	f107 0308 	add.w	r3, r7, #8
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff fe87 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c16:	2107      	movs	r1, #7
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f973 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c20:	69fb      	ldr	r3, [r7, #28]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3720      	adds	r7, #32
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b088      	sub	sp, #32
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c48:	f107 0308 	add.w	r3, r7, #8
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff fe66 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fb97 	bl	800a388 <SDMMC_GetCmdError>
 8009c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3720      	adds	r7, #32
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b088      	sub	sp, #32
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c6e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c74:	2308      	movs	r3, #8
 8009c76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c88:	f107 0308 	add.w	r3, r7, #8
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff fe46 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fb29 	bl	800a2ec <SDMMC_GetCmdResp7>
 8009c9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9c:	69fb      	ldr	r3, [r7, #28]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3720      	adds	r7, #32
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b088      	sub	sp, #32
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009cb4:	2337      	movs	r3, #55	; 0x37
 8009cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cc8:	f107 0308 	add.w	r3, r7, #8
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff fe26 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd8:	2137      	movs	r1, #55	; 0x37
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f912 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009ce0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009cfa:	2329      	movs	r3, #41	; 0x29
 8009cfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7ff fe03 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa2e 	bl	800a17c <SDMMC_GetCmdResp3>
 8009d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d22:	69fb      	ldr	r3, [r7, #28]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3720      	adds	r7, #32
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009d3a:	2306      	movs	r3, #6
 8009d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d4e:	f107 0308 	add.w	r3, r7, #8
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff fde3 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5e:	2106      	movs	r1, #6
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f8cf 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009d66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d68:	69fb      	ldr	r3, [r7, #28]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3720      	adds	r7, #32
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b088      	sub	sp, #32
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d7e:	2333      	movs	r3, #51	; 0x33
 8009d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fdc1 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da2:	2133      	movs	r1, #51	; 0x33
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f8ad 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dac:	69fb      	ldr	r3, [r7, #28]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b088      	sub	sp, #32
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dd6:	f107 0308 	add.w	r3, r7, #8
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff fd9f 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f980 	bl	800a0e8 <SDMMC_GetCmdResp2>
 8009de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009e02:	2309      	movs	r3, #9
 8009e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e16:	f107 0308 	add.w	r3, r7, #8
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff fd7f 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f960 	bl	800a0e8 <SDMMC_GetCmdResp2>
 8009e28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e2a:	69fb      	ldr	r3, [r7, #28]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3720      	adds	r7, #32
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009e42:	2303      	movs	r3, #3
 8009e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff fd5f 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	2103      	movs	r1, #3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9c8 	bl	800a1fc <SDMMC_GetCmdResp6>
 8009e6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e6e:	69fb      	ldr	r3, [r7, #28]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3720      	adds	r7, #32
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b088      	sub	sp, #32
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009e86:	230d      	movs	r3, #13
 8009e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e9a:	f107 0308 	add.w	r3, r7, #8
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff fd3d 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eaa:	210d      	movs	r1, #13
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f829 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eb4:	69fb      	ldr	r3, [r7, #28]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3720      	adds	r7, #32
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b088      	sub	sp, #32
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009eca:	230d      	movs	r3, #13
 8009ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009edc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ede:	f107 0308 	add.w	r3, r7, #8
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff fd1b 	bl	8009920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eee:	210d      	movs	r1, #13
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f807 	bl	8009f04 <SDMMC_GetCmdResp1>
 8009ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef8:	69fb      	ldr	r3, [r7, #28]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f12:	4b70      	ldr	r3, [pc, #448]	; (800a0d4 <SDMMC_GetCmdResp1+0x1d0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a70      	ldr	r2, [pc, #448]	; (800a0d8 <SDMMC_GetCmdResp1+0x1d4>)
 8009f18:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1c:	0a5a      	lsrs	r2, r3, #9
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	fb02 f303 	mul.w	r3, r2, r3
 8009f24:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	1e5a      	subs	r2, r3, #1
 8009f2a:	61fa      	str	r2, [r7, #28]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f34:	e0c9      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	4b67      	ldr	r3, [pc, #412]	; (800a0dc <SDMMC_GetCmdResp1+0x1d8>)
 8009f40:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0ef      	beq.n	8009f26 <SDMMC_GetCmdResp1+0x22>
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1ea      	bne.n	8009f26 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d004      	beq.n	8009f66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2204      	movs	r2, #4
 8009f60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f62:	2304      	movs	r3, #4
 8009f64:	e0b1      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d004      	beq.n	8009f7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2201      	movs	r2, #1
 8009f76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e0a6      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a58      	ldr	r2, [pc, #352]	; (800a0e0 <SDMMC_GetCmdResp1+0x1dc>)
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f7ff fcf6 	bl	8009974 <SDMMC_GetCommandResponse>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d001      	beq.n	8009f96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e099      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f96:	2100      	movs	r1, #0
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff fcf8 	bl	800998e <SDMMC_GetResponse>
 8009f9e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	4b50      	ldr	r3, [pc, #320]	; (800a0e4 <SDMMC_GetCmdResp1+0x1e0>)
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e08d      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	da02      	bge.n	8009fba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009fb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fb8:	e087      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	e080      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fd2:	2380      	movs	r3, #128	; 0x80
 8009fd4:	e079      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fe4:	e071      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff4:	e069      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a004:	e061      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a014:	e059      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a024:	e051      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a034:	e049      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a044:	e041      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a054:	e039      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a064:	e031      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a070:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a074:	e029      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a080:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a084:	e021      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a090:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a094:	e019      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a0a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a0a4:	e011      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a0b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0b4:	e009      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f003 0308 	and.w	r3, r3, #8
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a0c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a0c4:	e001      	b.n	800a0ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20000000 	.word	0x20000000
 800a0d8:	10624dd3 	.word	0x10624dd3
 800a0dc:	00200045 	.word	0x00200045
 800a0e0:	002000c5 	.word	0x002000c5
 800a0e4:	fdffe008 	.word	0xfdffe008

0800a0e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0f0:	4b1f      	ldr	r3, [pc, #124]	; (800a170 <SDMMC_GetCmdResp2+0x88>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	; (800a174 <SDMMC_GetCmdResp2+0x8c>)
 800a0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fa:	0a5b      	lsrs	r3, r3, #9
 800a0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a100:	fb02 f303 	mul.w	r3, r2, r3
 800a104:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	60fa      	str	r2, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a110:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a114:	e026      	b.n	800a164 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0ef      	beq.n	800a106 <SDMMC_GetCmdResp2+0x1e>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ea      	bne.n	800a106 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2204      	movs	r2, #4
 800a140:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a142:	2304      	movs	r3, #4
 800a144:	e00e      	b.n	800a164 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d004      	beq.n	800a15c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a158:	2301      	movs	r3, #1
 800a15a:	e003      	b.n	800a164 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a06      	ldr	r2, [pc, #24]	; (800a178 <SDMMC_GetCmdResp2+0x90>)
 800a160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	20000000 	.word	0x20000000
 800a174:	10624dd3 	.word	0x10624dd3
 800a178:	002000c5 	.word	0x002000c5

0800a17c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a184:	4b1a      	ldr	r3, [pc, #104]	; (800a1f0 <SDMMC_GetCmdResp3+0x74>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1a      	ldr	r2, [pc, #104]	; (800a1f4 <SDMMC_GetCmdResp3+0x78>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	0a5b      	lsrs	r3, r3, #9
 800a190:	f241 3288 	movw	r2, #5000	; 0x1388
 800a194:	fb02 f303 	mul.w	r3, r2, r3
 800a198:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1e5a      	subs	r2, r3, #1
 800a19e:	60fa      	str	r2, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a8:	e01b      	b.n	800a1e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0ef      	beq.n	800a19a <SDMMC_GetCmdResp3+0x1e>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1ea      	bne.n	800a19a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2204      	movs	r2, #4
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e003      	b.n	800a1e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a06      	ldr	r2, [pc, #24]	; (800a1f8 <SDMMC_GetCmdResp3+0x7c>)
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20000000 	.word	0x20000000
 800a1f4:	10624dd3 	.word	0x10624dd3
 800a1f8:	002000c5 	.word	0x002000c5

0800a1fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b088      	sub	sp, #32
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	460b      	mov	r3, r1
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a20a:	4b35      	ldr	r3, [pc, #212]	; (800a2e0 <SDMMC_GetCmdResp6+0xe4>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a35      	ldr	r2, [pc, #212]	; (800a2e4 <SDMMC_GetCmdResp6+0xe8>)
 800a210:	fba2 2303 	umull	r2, r3, r2, r3
 800a214:	0a5b      	lsrs	r3, r3, #9
 800a216:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21a:	fb02 f303 	mul.w	r3, r2, r3
 800a21e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	1e5a      	subs	r2, r3, #1
 800a224:	61fa      	str	r2, [r7, #28]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a22a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a22e:	e052      	b.n	800a2d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a234:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0ef      	beq.n	800a220 <SDMMC_GetCmdResp6+0x24>
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1ea      	bne.n	800a220 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b00      	cmp	r3, #0
 800a254:	d004      	beq.n	800a260 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2204      	movs	r2, #4
 800a25a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a25c:	2304      	movs	r3, #4
 800a25e:	e03a      	b.n	800a2d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d004      	beq.n	800a276 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a272:	2301      	movs	r3, #1
 800a274:	e02f      	b.n	800a2d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f7ff fb7c 	bl	8009974 <SDMMC_GetCommandResponse>
 800a27c:	4603      	mov	r3, r0
 800a27e:	461a      	mov	r2, r3
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	4293      	cmp	r3, r2
 800a284:	d001      	beq.n	800a28a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a286:	2301      	movs	r3, #1
 800a288:	e025      	b.n	800a2d6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4a16      	ldr	r2, [pc, #88]	; (800a2e8 <SDMMC_GetCmdResp6+0xec>)
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a290:	2100      	movs	r1, #0
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff fb7b 	bl	800998e <SDMMC_GetResponse>
 800a298:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	0c1b      	lsrs	r3, r3, #16
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e011      	b.n	800a2d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2c0:	e009      	b.n	800a2d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2d0:	e001      	b.n	800a2d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3720      	adds	r7, #32
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000000 	.word	0x20000000
 800a2e4:	10624dd3 	.word	0x10624dd3
 800a2e8:	002000c5 	.word	0x002000c5

0800a2ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2f4:	4b22      	ldr	r3, [pc, #136]	; (800a380 <SDMMC_GetCmdResp7+0x94>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a22      	ldr	r2, [pc, #136]	; (800a384 <SDMMC_GetCmdResp7+0x98>)
 800a2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fe:	0a5b      	lsrs	r3, r3, #9
 800a300:	f241 3288 	movw	r2, #5000	; 0x1388
 800a304:	fb02 f303 	mul.w	r3, r2, r3
 800a308:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	1e5a      	subs	r2, r3, #1
 800a30e:	60fa      	str	r2, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a318:	e02c      	b.n	800a374 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a326:	2b00      	cmp	r3, #0
 800a328:	d0ef      	beq.n	800a30a <SDMMC_GetCmdResp7+0x1e>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ea      	bne.n	800a30a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d004      	beq.n	800a34a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2204      	movs	r2, #4
 800a344:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a346:	2304      	movs	r3, #4
 800a348:	e014      	b.n	800a374 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d004      	beq.n	800a360 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e009      	b.n	800a374 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2240      	movs	r2, #64	; 0x40
 800a370:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a372:	2300      	movs	r3, #0

}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	20000000 	.word	0x20000000
 800a384:	10624dd3 	.word	0x10624dd3

0800a388 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a390:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <SDMMC_GetCmdError+0x50>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a11      	ldr	r2, [pc, #68]	; (800a3dc <SDMMC_GetCmdError+0x54>)
 800a396:	fba2 2303 	umull	r2, r3, r2, r3
 800a39a:	0a5b      	lsrs	r3, r3, #9
 800a39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
 800a3a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	1e5a      	subs	r2, r3, #1
 800a3aa:	60fa      	str	r2, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3b4:	e009      	b.n	800a3ca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0f1      	beq.n	800a3a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a06      	ldr	r2, [pc, #24]	; (800a3e0 <SDMMC_GetCmdError+0x58>)
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	20000000 	.word	0x20000000
 800a3dc:	10624dd3 	.word	0x10624dd3
 800a3e0:	002000c5 	.word	0x002000c5

0800a3e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fc:	f043 0201 	orr.w	r2, r3, #1
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a412:	b084      	sub	sp, #16
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	f107 001c 	add.w	r0, r7, #28
 800a420:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e008      	b.n	800a440 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff ffd8 	bl	800a3e4 <USB_CoreReset>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a44a:	b004      	add	sp, #16
 800a44c:	4770      	bx	lr

0800a44e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a44e:	b480      	push	{r7}
 800a450:	b085      	sub	sp, #20
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a456:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a45a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	43db      	mvns	r3, r3
 800a464:	401a      	ands	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d106      	bne.n	800a498 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	641a      	str	r2, [r3, #64]	; 0x40
 800a496:	e00b      	b.n	800a4b0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d106      	bne.n	800a4ac <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	641a      	str	r2, [r3, #64]	; 0x40
 800a4aa:	e001      	b.n	800a4b0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e000      	b.n	800a4b2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a4be:	b084      	sub	sp, #16
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	f107 001c 	add.w	r0, r7, #28
 800a4cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	f023 0201 	bic.w	r2, r3, #1
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ffc7 	bl	800a478 <USB_SetCurrentMode>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a500:	b004      	add	sp, #16
 800a502:	4770      	bx	lr

0800a504 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a510:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a52c:	4904      	ldr	r1, [pc, #16]	; (800a540 <MX_FATFS_Init+0x18>)
 800a52e:	4805      	ldr	r0, [pc, #20]	; (800a544 <MX_FATFS_Init+0x1c>)
 800a530:	f002 fb32 	bl	800cb98 <FATFS_LinkDriver>
 800a534:	4603      	mov	r3, r0
 800a536:	461a      	mov	r2, r3
 800a538:	4b03      	ldr	r3, [pc, #12]	; (800a548 <MX_FATFS_Init+0x20>)
 800a53a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a53c:	bf00      	nop
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20000660 	.word	0x20000660
 800a544:	0800d6d4 	.word	0x0800d6d4
 800a548:	2000065c 	.word	0x2000065c

0800a54c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a54c:	b480      	push	{r7}
 800a54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a550:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a552:	4618      	mov	r0, r3
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a566:	f000 f879 	bl	800a65c <BSP_SD_IsDetected>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d001      	beq.n	800a574 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a570:	2302      	movs	r3, #2
 800a572:	e012      	b.n	800a59a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a574:	480b      	ldr	r0, [pc, #44]	; (800a5a4 <BSP_SD_Init+0x48>)
 800a576:	f7fc f827 	bl	80065c8 <HAL_SD_Init>
 800a57a:	4603      	mov	r3, r0
 800a57c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d109      	bne.n	800a598 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a588:	4806      	ldr	r0, [pc, #24]	; (800a5a4 <BSP_SD_Init+0x48>)
 800a58a:	f7fc fee3 	bl	8007354 <HAL_SD_ConfigWideBusOperation>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a598:	79fb      	ldrb	r3, [r7, #7]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	200000a8 	.word	0x200000a8

0800a5a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
 800a5b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	68f9      	ldr	r1, [r7, #12]
 800a5c4:	4806      	ldr	r0, [pc, #24]	; (800a5e0 <BSP_SD_ReadBlocks+0x38>)
 800a5c6:	f7fc f91f 	bl	8006808 <HAL_SD_ReadBlocks>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200000a8 	.word	0x200000a8

0800a5e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b088      	sub	sp, #32
 800a5e8:	af02      	add	r7, sp, #8
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	4806      	ldr	r0, [pc, #24]	; (800a61c <BSP_SD_WriteBlocks+0x38>)
 800a602:	f7fc fa8b 	bl	8006b1c <HAL_SD_WriteBlocks>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a610:	7dfb      	ldrb	r3, [r7, #23]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	200000a8 	.word	0x200000a8

0800a620 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a624:	4805      	ldr	r0, [pc, #20]	; (800a63c <BSP_SD_GetCardState+0x1c>)
 800a626:	f7fc ffa7 	bl	8007578 <HAL_SD_GetCardState>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b04      	cmp	r3, #4
 800a62e:	bf14      	ite	ne
 800a630:	2301      	movne	r3, #1
 800a632:	2300      	moveq	r3, #0
 800a634:	b2db      	uxtb	r3, r3
}
 800a636:	4618      	mov	r0, r3
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	200000a8 	.word	0x200000a8

0800a640 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	4803      	ldr	r0, [pc, #12]	; (800a658 <BSP_SD_GetCardInfo+0x18>)
 800a64c:	f7fc fe56 	bl	80072fc <HAL_SD_GetCardInfo>
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	200000a8 	.word	0x200000a8

0800a65c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a662:	2301      	movs	r3, #1
 800a664:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	b2db      	uxtb	r3, r3
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
	...

0800a678 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a682:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <SD_CheckStatus+0x38>)
 800a684:	2201      	movs	r2, #1
 800a686:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a688:	f7ff ffca 	bl	800a620 <BSP_SD_GetCardState>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d107      	bne.n	800a6a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a692:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <SD_CheckStatus+0x38>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f023 0301 	bic.w	r3, r3, #1
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <SD_CheckStatus+0x38>)
 800a6a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a6a2:	4b03      	ldr	r3, [pc, #12]	; (800a6b0 <SD_CheckStatus+0x38>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	b2db      	uxtb	r3, r3
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000009 	.word	0x20000009

0800a6b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a6be:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <SD_initialize+0x38>)
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a6c4:	f7ff ff4a 	bl	800a55c <BSP_SD_Init>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d107      	bne.n	800a6de <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff ffd1 	bl	800a678 <SD_CheckStatus>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <SD_initialize+0x38>)
 800a6dc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a6de:	4b03      	ldr	r3, [pc, #12]	; (800a6ec <SD_initialize+0x38>)
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	b2db      	uxtb	r3, r3
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	20000009 	.word	0x20000009

0800a6f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff ffbb 	bl	800a678 <SD_CheckStatus>
 800a702:	4603      	mov	r3, r0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	60b9      	str	r1, [r7, #8]
 800a714:	607a      	str	r2, [r7, #4]
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	68b8      	ldr	r0, [r7, #8]
 800a72a:	f7ff ff3d 	bl	800a5a8 <BSP_SD_ReadBlocks>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d107      	bne.n	800a744 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a734:	bf00      	nop
 800a736:	f7ff ff73 	bl	800a620 <BSP_SD_GetCardState>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1fa      	bne.n	800a736 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a744:	7dfb      	ldrb	r3, [r7, #23]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
 800a75a:	4603      	mov	r3, r0
 800a75c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	68b8      	ldr	r0, [r7, #8]
 800a76c:	f7ff ff3a 	bl	800a5e4 <BSP_SD_WriteBlocks>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d107      	bne.n	800a786 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a776:	bf00      	nop
 800a778:	f7ff ff52 	bl	800a620 <BSP_SD_GetCardState>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1fa      	bne.n	800a778 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a786:	7dfb      	ldrb	r3, [r7, #23]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08c      	sub	sp, #48	; 0x30
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	603a      	str	r2, [r7, #0]
 800a79a:	71fb      	strb	r3, [r7, #7]
 800a79c:	460b      	mov	r3, r1
 800a79e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7a6:	4b25      	ldr	r3, [pc, #148]	; (800a83c <SD_ioctl+0xac>)
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <SD_ioctl+0x28>
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e03c      	b.n	800a832 <SD_ioctl+0xa2>

  switch (cmd)
 800a7b8:	79bb      	ldrb	r3, [r7, #6]
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d834      	bhi.n	800a828 <SD_ioctl+0x98>
 800a7be:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <SD_ioctl+0x34>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a7d5 	.word	0x0800a7d5
 800a7c8:	0800a7dd 	.word	0x0800a7dd
 800a7cc:	0800a7f5 	.word	0x0800a7f5
 800a7d0:	0800a80f 	.word	0x0800a80f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7da:	e028      	b.n	800a82e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a7dc:	f107 0308 	add.w	r3, r7, #8
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff ff2d 	bl	800a640 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a7e6:	6a3a      	ldr	r2, [r7, #32]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7f2:	e01c      	b.n	800a82e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a7f4:	f107 0308 	add.w	r3, r7, #8
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7ff ff21 	bl	800a640 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	b29a      	uxth	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a80c:	e00f      	b.n	800a82e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a80e:	f107 0308 	add.w	r3, r7, #8
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff ff14 	bl	800a640 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	0a5a      	lsrs	r2, r3, #9
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a826:	e002      	b.n	800a82e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a828:	2304      	movs	r3, #4
 800a82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a832:	4618      	mov	r0, r3
 800a834:	3730      	adds	r7, #48	; 0x30
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000009 	.word	0x20000009

0800a840 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	4a08      	ldr	r2, [pc, #32]	; (800a870 <disk_status+0x30>)
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	79fa      	ldrb	r2, [r7, #7]
 800a858:	4905      	ldr	r1, [pc, #20]	; (800a870 <disk_status+0x30>)
 800a85a:	440a      	add	r2, r1
 800a85c:	7a12      	ldrb	r2, [r2, #8]
 800a85e:	4610      	mov	r0, r2
 800a860:	4798      	blx	r3
 800a862:	4603      	mov	r3, r0
 800a864:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a866:	7bfb      	ldrb	r3, [r7, #15]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	2000068c 	.word	0x2000068c

0800a874 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	4603      	mov	r3, r0
 800a87c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	4a0d      	ldr	r2, [pc, #52]	; (800a8bc <disk_initialize+0x48>)
 800a886:	5cd3      	ldrb	r3, [r2, r3]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d111      	bne.n	800a8b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	4a0b      	ldr	r2, [pc, #44]	; (800a8bc <disk_initialize+0x48>)
 800a890:	2101      	movs	r1, #1
 800a892:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	4a09      	ldr	r2, [pc, #36]	; (800a8bc <disk_initialize+0x48>)
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	79fa      	ldrb	r2, [r7, #7]
 800a8a2:	4906      	ldr	r1, [pc, #24]	; (800a8bc <disk_initialize+0x48>)
 800a8a4:	440a      	add	r2, r1
 800a8a6:	7a12      	ldrb	r2, [r2, #8]
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	2000068c 	.word	0x2000068c

0800a8c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a8c0:	b590      	push	{r4, r7, lr}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60b9      	str	r1, [r7, #8]
 800a8c8:	607a      	str	r2, [r7, #4]
 800a8ca:	603b      	str	r3, [r7, #0]
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <disk_read+0x3c>)
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	689c      	ldr	r4, [r3, #8]
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	4a07      	ldr	r2, [pc, #28]	; (800a8fc <disk_read+0x3c>)
 800a8e0:	4413      	add	r3, r2
 800a8e2:	7a18      	ldrb	r0, [r3, #8]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	68b9      	ldr	r1, [r7, #8]
 800a8ea:	47a0      	blx	r4
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd90      	pop	{r4, r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	2000068c 	.word	0x2000068c

0800a900 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a900:	b590      	push	{r4, r7, lr}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	60b9      	str	r1, [r7, #8]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	4a0a      	ldr	r2, [pc, #40]	; (800a93c <disk_write+0x3c>)
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	68dc      	ldr	r4, [r3, #12]
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	4a07      	ldr	r2, [pc, #28]	; (800a93c <disk_write+0x3c>)
 800a920:	4413      	add	r3, r2
 800a922:	7a18      	ldrb	r0, [r3, #8]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	47a0      	blx	r4
 800a92c:	4603      	mov	r3, r0
 800a92e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
}
 800a932:	4618      	mov	r0, r3
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	bd90      	pop	{r4, r7, pc}
 800a93a:	bf00      	nop
 800a93c:	2000068c 	.word	0x2000068c

0800a940 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	603a      	str	r2, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
 800a94c:	460b      	mov	r3, r1
 800a94e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	4a09      	ldr	r2, [pc, #36]	; (800a978 <disk_ioctl+0x38>)
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	79fa      	ldrb	r2, [r7, #7]
 800a95e:	4906      	ldr	r1, [pc, #24]	; (800a978 <disk_ioctl+0x38>)
 800a960:	440a      	add	r2, r1
 800a962:	7a10      	ldrb	r0, [r2, #8]
 800a964:	79b9      	ldrb	r1, [r7, #6]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	2000068c 	.word	0x2000068c

0800a97c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3301      	adds	r3, #1
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a98c:	89fb      	ldrh	r3, [r7, #14]
 800a98e:	021b      	lsls	r3, r3, #8
 800a990:	b21a      	sxth	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	b21b      	sxth	r3, r3
 800a998:	4313      	orrs	r3, r2
 800a99a:	b21b      	sxth	r3, r3
 800a99c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a99e:	89fb      	ldrh	r3, [r7, #14]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3303      	adds	r3, #3
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	021b      	lsls	r3, r3, #8
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	3202      	adds	r2, #2
 800a9c4:	7812      	ldrb	r2, [r2, #0]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	021b      	lsls	r3, r3, #8
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	3201      	adds	r2, #1
 800a9d2:	7812      	ldrb	r2, [r2, #0]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	7812      	ldrb	r2, [r2, #0]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	887a      	ldrh	r2, [r7, #2]
 800aa06:	b2d2      	uxtb	r2, r2
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	887b      	ldrh	r3, [r7, #2]
 800aa0c:	0a1b      	lsrs	r3, r3, #8
 800aa0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	607a      	str	r2, [r7, #4]
 800aa16:	887a      	ldrh	r2, [r7, #2]
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	701a      	strb	r2, [r3, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	b2d2      	uxtb	r2, r2
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	0a1b      	lsrs	r3, r3, #8
 800aa42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	607a      	str	r2, [r7, #4]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	b2d2      	uxtb	r2, r2
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	0a1b      	lsrs	r3, r3, #8
 800aa54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	b2d2      	uxtb	r2, r2
 800aa60:	701a      	strb	r2, [r3, #0]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	0a1b      	lsrs	r3, r3, #8
 800aa66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	b2d2      	uxtb	r2, r2
 800aa72:	701a      	strb	r2, [r3, #0]
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00d      	beq.n	800aab6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	1c53      	adds	r3, r2, #1
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	1c59      	adds	r1, r3, #1
 800aaa4:	6179      	str	r1, [r7, #20]
 800aaa6:	7812      	ldrb	r2, [r2, #0]
 800aaa8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	607b      	str	r3, [r7, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1f1      	bne.n	800aa9a <mem_cpy+0x1a>
	}
}
 800aab6:	bf00      	nop
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aac2:	b480      	push	{r7}
 800aac4:	b087      	sub	sp, #28
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	617a      	str	r2, [r7, #20]
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	607b      	str	r3, [r7, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1f3      	bne.n	800aad2 <mem_set+0x10>
}
 800aaea:	bf00      	nop
 800aaec:	bf00      	nop
 800aaee:	371c      	adds	r7, #28
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aaf8:	b480      	push	{r7}
 800aafa:	b089      	sub	sp, #36	; 0x24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	61fa      	str	r2, [r7, #28]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	61ba      	str	r2, [r7, #24]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	1acb      	subs	r3, r1, r3
 800ab24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	607b      	str	r3, [r7, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d002      	beq.n	800ab38 <mem_cmp+0x40>
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d0eb      	beq.n	800ab10 <mem_cmp+0x18>

	return r;
 800ab38:	697b      	ldr	r3, [r7, #20]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3724      	adds	r7, #36	; 0x24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ab50:	e002      	b.n	800ab58 <chk_chr+0x12>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3301      	adds	r3, #1
 800ab56:	607b      	str	r3, [r7, #4]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d005      	beq.n	800ab6c <chk_chr+0x26>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d1f2      	bne.n	800ab52 <chk_chr+0xc>
	return *str;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab86:	2300      	movs	r3, #0
 800ab88:	60bb      	str	r3, [r7, #8]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	60fb      	str	r3, [r7, #12]
 800ab8e:	e029      	b.n	800abe4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ab90:	4a27      	ldr	r2, [pc, #156]	; (800ac30 <chk_lock+0xb4>)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	4413      	add	r3, r2
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d01d      	beq.n	800abda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab9e:	4a24      	ldr	r2, [pc, #144]	; (800ac30 <chk_lock+0xb4>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	4413      	add	r3, r2
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d116      	bne.n	800abde <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800abb0:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <chk_lock+0xb4>)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	011b      	lsls	r3, r3, #4
 800abb6:	4413      	add	r3, r2
 800abb8:	3304      	adds	r3, #4
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d10c      	bne.n	800abde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abc4:	4a1a      	ldr	r2, [pc, #104]	; (800ac30 <chk_lock+0xb4>)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	4413      	add	r3, r2
 800abcc:	3308      	adds	r3, #8
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d102      	bne.n	800abde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abd8:	e007      	b.n	800abea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800abda:	2301      	movs	r3, #1
 800abdc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3301      	adds	r3, #1
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d9d2      	bls.n	800ab90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d109      	bne.n	800ac04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d102      	bne.n	800abfc <chk_lock+0x80>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d101      	bne.n	800ac00 <chk_lock+0x84>
 800abfc:	2300      	movs	r3, #0
 800abfe:	e010      	b.n	800ac22 <chk_lock+0xa6>
 800ac00:	2312      	movs	r3, #18
 800ac02:	e00e      	b.n	800ac22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d108      	bne.n	800ac1c <chk_lock+0xa0>
 800ac0a:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <chk_lock+0xb4>)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	011b      	lsls	r3, r3, #4
 800ac10:	4413      	add	r3, r2
 800ac12:	330c      	adds	r3, #12
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac1a:	d101      	bne.n	800ac20 <chk_lock+0xa4>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	e000      	b.n	800ac22 <chk_lock+0xa6>
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	2000066c 	.word	0x2000066c

0800ac34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	e002      	b.n	800ac46 <enq_lock+0x12>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3301      	adds	r3, #1
 800ac44:	607b      	str	r3, [r7, #4]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d806      	bhi.n	800ac5a <enq_lock+0x26>
 800ac4c:	4a09      	ldr	r2, [pc, #36]	; (800ac74 <enq_lock+0x40>)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	4413      	add	r3, r2
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1f2      	bne.n	800ac40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	bf14      	ite	ne
 800ac60:	2301      	movne	r3, #1
 800ac62:	2300      	moveq	r3, #0
 800ac64:	b2db      	uxtb	r3, r3
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	2000066c 	.word	0x2000066c

0800ac78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	e01f      	b.n	800acc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ac88:	4a41      	ldr	r2, [pc, #260]	; (800ad90 <inc_lock+0x118>)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	4413      	add	r3, r2
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d113      	bne.n	800acc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ac9a:	4a3d      	ldr	r2, [pc, #244]	; (800ad90 <inc_lock+0x118>)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	011b      	lsls	r3, r3, #4
 800aca0:	4413      	add	r3, r2
 800aca2:	3304      	adds	r3, #4
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800acaa:	429a      	cmp	r2, r3
 800acac:	d109      	bne.n	800acc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800acae:	4a38      	ldr	r2, [pc, #224]	; (800ad90 <inc_lock+0x118>)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	4413      	add	r3, r2
 800acb6:	3308      	adds	r3, #8
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d006      	beq.n	800acd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3301      	adds	r3, #1
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d9dc      	bls.n	800ac88 <inc_lock+0x10>
 800acce:	e000      	b.n	800acd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800acd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d132      	bne.n	800ad3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800acd8:	2300      	movs	r3, #0
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	e002      	b.n	800ace4 <inc_lock+0x6c>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d806      	bhi.n	800acf8 <inc_lock+0x80>
 800acea:	4a29      	ldr	r2, [pc, #164]	; (800ad90 <inc_lock+0x118>)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	011b      	lsls	r3, r3, #4
 800acf0:	4413      	add	r3, r2
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f2      	bne.n	800acde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d101      	bne.n	800ad02 <inc_lock+0x8a>
 800acfe:	2300      	movs	r3, #0
 800ad00:	e040      	b.n	800ad84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	4922      	ldr	r1, [pc, #136]	; (800ad90 <inc_lock+0x118>)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	011b      	lsls	r3, r3, #4
 800ad0c:	440b      	add	r3, r1
 800ad0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	491e      	ldr	r1, [pc, #120]	; (800ad90 <inc_lock+0x118>)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	011b      	lsls	r3, r3, #4
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	695a      	ldr	r2, [r3, #20]
 800ad24:	491a      	ldr	r1, [pc, #104]	; (800ad90 <inc_lock+0x118>)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	440b      	add	r3, r1
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ad30:	4a17      	ldr	r2, [pc, #92]	; (800ad90 <inc_lock+0x118>)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	011b      	lsls	r3, r3, #4
 800ad36:	4413      	add	r3, r2
 800ad38:	330c      	adds	r3, #12
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d009      	beq.n	800ad58 <inc_lock+0xe0>
 800ad44:	4a12      	ldr	r2, [pc, #72]	; (800ad90 <inc_lock+0x118>)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	4413      	add	r3, r2
 800ad4c:	330c      	adds	r3, #12
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <inc_lock+0xe0>
 800ad54:	2300      	movs	r3, #0
 800ad56:	e015      	b.n	800ad84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d108      	bne.n	800ad70 <inc_lock+0xf8>
 800ad5e:	4a0c      	ldr	r2, [pc, #48]	; (800ad90 <inc_lock+0x118>)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	4413      	add	r3, r2
 800ad66:	330c      	adds	r3, #12
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	e001      	b.n	800ad74 <inc_lock+0xfc>
 800ad70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad74:	4906      	ldr	r1, [pc, #24]	; (800ad90 <inc_lock+0x118>)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	440b      	add	r3, r1
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3301      	adds	r3, #1
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	2000066c 	.word	0x2000066c

0800ad94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	607b      	str	r3, [r7, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d825      	bhi.n	800adf4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ada8:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <dec_lock+0x74>)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	011b      	lsls	r3, r3, #4
 800adae:	4413      	add	r3, r2
 800adb0:	330c      	adds	r3, #12
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800adb6:	89fb      	ldrh	r3, [r7, #14]
 800adb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adbc:	d101      	bne.n	800adc2 <dec_lock+0x2e>
 800adbe:	2300      	movs	r3, #0
 800adc0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800adc2:	89fb      	ldrh	r3, [r7, #14]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <dec_lock+0x3a>
 800adc8:	89fb      	ldrh	r3, [r7, #14]
 800adca:	3b01      	subs	r3, #1
 800adcc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800adce:	4a0e      	ldr	r2, [pc, #56]	; (800ae08 <dec_lock+0x74>)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	4413      	add	r3, r2
 800add6:	330c      	adds	r3, #12
 800add8:	89fa      	ldrh	r2, [r7, #14]
 800adda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800addc:	89fb      	ldrh	r3, [r7, #14]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d105      	bne.n	800adee <dec_lock+0x5a>
 800ade2:	4a09      	ldr	r2, [pc, #36]	; (800ae08 <dec_lock+0x74>)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	4413      	add	r3, r2
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	737b      	strb	r3, [r7, #13]
 800adf2:	e001      	b.n	800adf8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800adf4:	2302      	movs	r3, #2
 800adf6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800adf8:	7b7b      	ldrb	r3, [r7, #13]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	2000066c 	.word	0x2000066c

0800ae0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	e010      	b.n	800ae3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae1a:	4a0d      	ldr	r2, [pc, #52]	; (800ae50 <clear_lock+0x44>)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	4413      	add	r3, r2
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d105      	bne.n	800ae36 <clear_lock+0x2a>
 800ae2a:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <clear_lock+0x44>)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	011b      	lsls	r3, r3, #4
 800ae30:	4413      	add	r3, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d9eb      	bls.n	800ae1a <clear_lock+0xe>
	}
}
 800ae42:	bf00      	nop
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	2000066c 	.word	0x2000066c

0800ae54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	78db      	ldrb	r3, [r3, #3]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d034      	beq.n	800aed2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7858      	ldrb	r0, [r3, #1]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae78:	2301      	movs	r3, #1
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	f7ff fd40 	bl	800a900 <disk_write>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	73fb      	strb	r3, [r7, #15]
 800ae8a:	e022      	b.n	800aed2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	1ad2      	subs	r2, r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d217      	bcs.n	800aed2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	789b      	ldrb	r3, [r3, #2]
 800aea6:	613b      	str	r3, [r7, #16]
 800aea8:	e010      	b.n	800aecc <sync_window+0x78>
					wsect += fs->fsize;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7858      	ldrb	r0, [r3, #1]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aebe:	2301      	movs	r3, #1
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	f7ff fd1d 	bl	800a900 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	613b      	str	r3, [r7, #16]
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d8eb      	bhi.n	800aeaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d01b      	beq.n	800af2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff ffad 	bl	800ae54 <sync_window>
 800aefa:	4603      	mov	r3, r0
 800aefc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d113      	bne.n	800af2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	7858      	ldrb	r0, [r3, #1]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af0e:	2301      	movs	r3, #1
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	f7ff fcd5 	bl	800a8c0 <disk_read>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af22:	2301      	movs	r3, #1
 800af24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff ff87 	bl	800ae54 <sync_window>
 800af46:	4603      	mov	r3, r0
 800af48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d158      	bne.n	800b002 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b03      	cmp	r3, #3
 800af56:	d148      	bne.n	800afea <sync_fs+0xb2>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	791b      	ldrb	r3, [r3, #4]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d144      	bne.n	800afea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3330      	adds	r3, #48	; 0x30
 800af64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af68:	2100      	movs	r1, #0
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fda9 	bl	800aac2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3330      	adds	r3, #48	; 0x30
 800af74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af78:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff fd38 	bl	800a9f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3330      	adds	r3, #48	; 0x30
 800af86:	4921      	ldr	r1, [pc, #132]	; (800b00c <sync_fs+0xd4>)
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fd4d 	bl	800aa28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3330      	adds	r3, #48	; 0x30
 800af92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800af96:	491e      	ldr	r1, [pc, #120]	; (800b010 <sync_fs+0xd8>)
 800af98:	4618      	mov	r0, r3
 800af9a:	f7ff fd45 	bl	800aa28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3330      	adds	r3, #48	; 0x30
 800afa2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7ff fd3b 	bl	800aa28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3330      	adds	r3, #48	; 0x30
 800afb6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	4619      	mov	r1, r3
 800afc0:	4610      	mov	r0, r2
 800afc2:	f7ff fd31 	bl	800aa28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	7858      	ldrb	r0, [r3, #1]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afde:	2301      	movs	r3, #1
 800afe0:	f7ff fc8e 	bl	800a900 <disk_write>
			fs->fsi_flag = 0;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	2200      	movs	r2, #0
 800aff0:	2100      	movs	r1, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff fca4 	bl	800a940 <disk_ioctl>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <sync_fs+0xca>
 800affe:	2301      	movs	r3, #1
 800b000:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	41615252 	.word	0x41615252
 800b010:	61417272 	.word	0x61417272

0800b014 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	3b02      	subs	r3, #2
 800b022:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	3b02      	subs	r3, #2
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d301      	bcc.n	800b034 <clust2sect+0x20>
 800b030:	2300      	movs	r3, #0
 800b032:	e008      	b.n	800b046 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	895b      	ldrh	r3, [r3, #10]
 800b038:	461a      	mov	r2, r3
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	fb03 f202 	mul.w	r2, r3, r2
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b044:	4413      	add	r3, r2
}
 800b046:	4618      	mov	r0, r3
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b086      	sub	sp, #24
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d904      	bls.n	800b072 <get_fat+0x20>
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d302      	bcc.n	800b078 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b072:	2301      	movs	r3, #1
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	e08f      	b.n	800b198 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b07c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b03      	cmp	r3, #3
 800b084:	d062      	beq.n	800b14c <get_fat+0xfa>
 800b086:	2b03      	cmp	r3, #3
 800b088:	dc7c      	bgt.n	800b184 <get_fat+0x132>
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d002      	beq.n	800b094 <get_fat+0x42>
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d042      	beq.n	800b118 <get_fat+0xc6>
 800b092:	e077      	b.n	800b184 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	085b      	lsrs	r3, r3, #1
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	4413      	add	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	6a1a      	ldr	r2, [r3, #32]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	0a5b      	lsrs	r3, r3, #9
 800b0aa:	4413      	add	r3, r2
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6938      	ldr	r0, [r7, #16]
 800b0b0:	f7ff ff14 	bl	800aedc <move_window>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d167      	bne.n	800b18a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	60fa      	str	r2, [r7, #12]
 800b0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6a1a      	ldr	r2, [r3, #32]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	0a5b      	lsrs	r3, r3, #9
 800b0d6:	4413      	add	r3, r2
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6938      	ldr	r0, [r7, #16]
 800b0dc:	f7ff fefe 	bl	800aedc <move_window>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d153      	bne.n	800b18e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0f4:	021b      	lsls	r3, r3, #8
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <get_fat+0xbc>
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	091b      	lsrs	r3, r3, #4
 800b10c:	e002      	b.n	800b114 <get_fat+0xc2>
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b114:	617b      	str	r3, [r7, #20]
			break;
 800b116:	e03f      	b.n	800b198 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	6a1a      	ldr	r2, [r3, #32]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	0a1b      	lsrs	r3, r3, #8
 800b120:	4413      	add	r3, r2
 800b122:	4619      	mov	r1, r3
 800b124:	6938      	ldr	r0, [r7, #16]
 800b126:	f7ff fed9 	bl	800aedc <move_window>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d130      	bne.n	800b192 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b13e:	4413      	add	r3, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff fc1b 	bl	800a97c <ld_word>
 800b146:	4603      	mov	r3, r0
 800b148:	617b      	str	r3, [r7, #20]
			break;
 800b14a:	e025      	b.n	800b198 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	6a1a      	ldr	r2, [r3, #32]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	09db      	lsrs	r3, r3, #7
 800b154:	4413      	add	r3, r2
 800b156:	4619      	mov	r1, r3
 800b158:	6938      	ldr	r0, [r7, #16]
 800b15a:	f7ff febf 	bl	800aedc <move_window>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d118      	bne.n	800b196 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b172:	4413      	add	r3, r2
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff fc19 	bl	800a9ac <ld_dword>
 800b17a:	4603      	mov	r3, r0
 800b17c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b180:	617b      	str	r3, [r7, #20]
			break;
 800b182:	e009      	b.n	800b198 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b184:	2301      	movs	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	e006      	b.n	800b198 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b18a:	bf00      	nop
 800b18c:	e004      	b.n	800b198 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b18e:	bf00      	nop
 800b190:	e002      	b.n	800b198 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b196:	bf00      	nop
		}
	}

	return val;
 800b198:	697b      	ldr	r3, [r7, #20]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b1a2:	b590      	push	{r4, r7, lr}
 800b1a4:	b089      	sub	sp, #36	; 0x24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	60b9      	str	r1, [r7, #8]
 800b1ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	f240 80d2 	bls.w	800b35e <put_fat+0x1bc>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	f080 80cc 	bcs.w	800b35e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	f000 8096 	beq.w	800b2fc <put_fat+0x15a>
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	f300 80cd 	bgt.w	800b370 <put_fat+0x1ce>
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d002      	beq.n	800b1e0 <put_fat+0x3e>
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d06e      	beq.n	800b2bc <put_fat+0x11a>
 800b1de:	e0c7      	b.n	800b370 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	61bb      	str	r3, [r7, #24]
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6a1a      	ldr	r2, [r3, #32]
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	0a5b      	lsrs	r3, r3, #9
 800b1f6:	4413      	add	r3, r2
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fe6e 	bl	800aedc <move_window>
 800b200:	4603      	mov	r3, r0
 800b202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b204:	7ffb      	ldrb	r3, [r7, #31]
 800b206:	2b00      	cmp	r3, #0
 800b208:	f040 80ab 	bne.w	800b362 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	1c59      	adds	r1, r3, #1
 800b216:	61b9      	str	r1, [r7, #24]
 800b218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21c:	4413      	add	r3, r2
 800b21e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00d      	beq.n	800b246 <put_fat+0xa4>
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b25b      	sxtb	r3, r3
 800b230:	f003 030f 	and.w	r3, r3, #15
 800b234:	b25a      	sxtb	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	011b      	lsls	r3, r3, #4
 800b23c:	b25b      	sxtb	r3, r3
 800b23e:	4313      	orrs	r3, r2
 800b240:	b25b      	sxtb	r3, r3
 800b242:	b2db      	uxtb	r3, r3
 800b244:	e001      	b.n	800b24a <put_fat+0xa8>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2201      	movs	r2, #1
 800b252:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6a1a      	ldr	r2, [r3, #32]
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	0a5b      	lsrs	r3, r3, #9
 800b25c:	4413      	add	r3, r2
 800b25e:	4619      	mov	r1, r3
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7ff fe3b 	bl	800aedc <move_window>
 800b266:	4603      	mov	r3, r0
 800b268:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b26a:	7ffb      	ldrb	r3, [r7, #31]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d17a      	bne.n	800b366 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27c:	4413      	add	r3, r2
 800b27e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <put_fat+0xf0>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	091b      	lsrs	r3, r3, #4
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	e00e      	b.n	800b2b0 <put_fat+0x10e>
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	b25b      	sxtb	r3, r3
 800b298:	f023 030f 	bic.w	r3, r3, #15
 800b29c:	b25a      	sxtb	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	0a1b      	lsrs	r3, r3, #8
 800b2a2:	b25b      	sxtb	r3, r3
 800b2a4:	f003 030f 	and.w	r3, r3, #15
 800b2a8:	b25b      	sxtb	r3, r3
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	b25b      	sxtb	r3, r3
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	70da      	strb	r2, [r3, #3]
			break;
 800b2ba:	e059      	b.n	800b370 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6a1a      	ldr	r2, [r3, #32]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	0a1b      	lsrs	r3, r3, #8
 800b2c4:	4413      	add	r3, r2
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7ff fe07 	bl	800aedc <move_window>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2d2:	7ffb      	ldrb	r3, [r7, #31]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d148      	bne.n	800b36a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b2e6:	4413      	add	r3, r2
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff fb7f 	bl	800a9f2 <st_word>
			fs->wflag = 1;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	70da      	strb	r2, [r3, #3]
			break;
 800b2fa:	e039      	b.n	800b370 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6a1a      	ldr	r2, [r3, #32]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	09db      	lsrs	r3, r3, #7
 800b304:	4413      	add	r3, r2
 800b306:	4619      	mov	r1, r3
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f7ff fde7 	bl	800aedc <move_window>
 800b30e:	4603      	mov	r3, r0
 800b310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b312:	7ffb      	ldrb	r3, [r7, #31]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d12a      	bne.n	800b36e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b32c:	4413      	add	r3, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fb3c 	bl	800a9ac <ld_dword>
 800b334:	4603      	mov	r3, r0
 800b336:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b33a:	4323      	orrs	r3, r4
 800b33c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b34c:	4413      	add	r3, r2
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fb69 	bl	800aa28 <st_dword>
			fs->wflag = 1;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2201      	movs	r2, #1
 800b35a:	70da      	strb	r2, [r3, #3]
			break;
 800b35c:	e008      	b.n	800b370 <put_fat+0x1ce>
		}
	}
 800b35e:	bf00      	nop
 800b360:	e006      	b.n	800b370 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b362:	bf00      	nop
 800b364:	e004      	b.n	800b370 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b366:	bf00      	nop
 800b368:	e002      	b.n	800b370 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b36a:	bf00      	nop
 800b36c:	e000      	b.n	800b370 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b36e:	bf00      	nop
	return res;
 800b370:	7ffb      	ldrb	r3, [r7, #31]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3724      	adds	r7, #36	; 0x24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd90      	pop	{r4, r7, pc}

0800b37a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b088      	sub	sp, #32
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d904      	bls.n	800b3a0 <remove_chain+0x26>
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d301      	bcc.n	800b3a4 <remove_chain+0x2a>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e04b      	b.n	800b43c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00c      	beq.n	800b3c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b3aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	69b8      	ldr	r0, [r7, #24]
 800b3b2:	f7ff fef6 	bl	800b1a2 <put_fat>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b3ba:	7ffb      	ldrb	r3, [r7, #31]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <remove_chain+0x4a>
 800b3c0:	7ffb      	ldrb	r3, [r7, #31]
 800b3c2:	e03b      	b.n	800b43c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b3c4:	68b9      	ldr	r1, [r7, #8]
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7ff fe43 	bl	800b052 <get_fat>
 800b3cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d031      	beq.n	800b438 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d101      	bne.n	800b3de <remove_chain+0x64>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e02e      	b.n	800b43c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3e4:	d101      	bne.n	800b3ea <remove_chain+0x70>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e028      	b.n	800b43c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	69b8      	ldr	r0, [r7, #24]
 800b3f0:	f7ff fed7 	bl	800b1a2 <put_fat>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b3f8:	7ffb      	ldrb	r3, [r7, #31]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <remove_chain+0x88>
 800b3fe:	7ffb      	ldrb	r3, [r7, #31]
 800b400:	e01c      	b.n	800b43c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	691a      	ldr	r2, [r3, #16]
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	3b02      	subs	r3, #2
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d20b      	bcs.n	800b428 <remove_chain+0xae>
			fs->free_clst++;
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	791b      	ldrb	r3, [r3, #4]
 800b41e:	f043 0301 	orr.w	r3, r3, #1
 800b422:	b2da      	uxtb	r2, r3
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	429a      	cmp	r2, r3
 800b434:	d3c6      	bcc.n	800b3c4 <remove_chain+0x4a>
 800b436:	e000      	b.n	800b43a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b438:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3720      	adds	r7, #32
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10d      	bne.n	800b476 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d004      	beq.n	800b470 <create_chain+0x2c>
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	69ba      	ldr	r2, [r7, #24]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d31b      	bcc.n	800b4a8 <create_chain+0x64>
 800b470:	2301      	movs	r3, #1
 800b472:	61bb      	str	r3, [r7, #24]
 800b474:	e018      	b.n	800b4a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fdea 	bl	800b052 <get_fat>
 800b47e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d801      	bhi.n	800b48a <create_chain+0x46>
 800b486:	2301      	movs	r3, #1
 800b488:	e070      	b.n	800b56c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b490:	d101      	bne.n	800b496 <create_chain+0x52>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	e06a      	b.n	800b56c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d201      	bcs.n	800b4a4 <create_chain+0x60>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	e063      	b.n	800b56c <create_chain+0x128>
		scl = clst;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d307      	bcc.n	800b4cc <create_chain+0x88>
				ncl = 2;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b4c0:	69fa      	ldr	r2, [r7, #28]
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d901      	bls.n	800b4cc <create_chain+0x88>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	e04f      	b.n	800b56c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4cc:	69f9      	ldr	r1, [r7, #28]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fdbf 	bl	800b052 <get_fat>
 800b4d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00e      	beq.n	800b4fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d003      	beq.n	800b4ea <create_chain+0xa6>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4e8:	d101      	bne.n	800b4ee <create_chain+0xaa>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	e03e      	b.n	800b56c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d1da      	bne.n	800b4ac <create_chain+0x68>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	e038      	b.n	800b56c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b4fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b500:	69f9      	ldr	r1, [r7, #28]
 800b502:	6938      	ldr	r0, [r7, #16]
 800b504:	f7ff fe4d 	bl	800b1a2 <put_fat>
 800b508:	4603      	mov	r3, r0
 800b50a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d109      	bne.n	800b526 <create_chain+0xe2>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d006      	beq.n	800b526 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b518:	69fa      	ldr	r2, [r7, #28]
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6938      	ldr	r0, [r7, #16]
 800b51e:	f7ff fe40 	bl	800b1a2 <put_fat>
 800b522:	4603      	mov	r3, r0
 800b524:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d116      	bne.n	800b55a <create_chain+0x116>
		fs->last_clst = ncl;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	69fa      	ldr	r2, [r7, #28]
 800b530:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	691a      	ldr	r2, [r3, #16]
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	3b02      	subs	r3, #2
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d804      	bhi.n	800b54a <create_chain+0x106>
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	1e5a      	subs	r2, r3, #1
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	791b      	ldrb	r3, [r3, #4]
 800b54e:	f043 0301 	orr.w	r3, r3, #1
 800b552:	b2da      	uxtb	r2, r3
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	711a      	strb	r2, [r3, #4]
 800b558:	e007      	b.n	800b56a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d102      	bne.n	800b566 <create_chain+0x122>
 800b560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b564:	e000      	b.n	800b568 <create_chain+0x124>
 800b566:	2301      	movs	r3, #1
 800b568:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b56a:	69fb      	ldr	r3, [r7, #28]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3720      	adds	r7, #32
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b574:	b480      	push	{r7}
 800b576:	b087      	sub	sp, #28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	3304      	adds	r3, #4
 800b58a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	0a5b      	lsrs	r3, r3, #9
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	8952      	ldrh	r2, [r2, #10]
 800b594:	fbb3 f3f2 	udiv	r3, r3, r2
 800b598:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	1d1a      	adds	r2, r3, #4
 800b59e:	613a      	str	r2, [r7, #16]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <clmt_clust+0x3a>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e010      	b.n	800b5d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d307      	bcc.n	800b5c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b5c4:	e7e9      	b.n	800b59a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b5c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	4413      	add	r3, r2
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	371c      	adds	r7, #28
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5f2:	d204      	bcs.n	800b5fe <dir_sdi+0x22>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	f003 031f 	and.w	r3, r3, #31
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b5fe:	2302      	movs	r3, #2
 800b600:	e063      	b.n	800b6ca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d106      	bne.n	800b622 <dir_sdi+0x46>
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d902      	bls.n	800b622 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b620:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10c      	bne.n	800b642 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	095b      	lsrs	r3, r3, #5
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	8912      	ldrh	r2, [r2, #8]
 800b630:	4293      	cmp	r3, r2
 800b632:	d301      	bcc.n	800b638 <dir_sdi+0x5c>
 800b634:	2302      	movs	r3, #2
 800b636:	e048      	b.n	800b6ca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	61da      	str	r2, [r3, #28]
 800b640:	e029      	b.n	800b696 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	895b      	ldrh	r3, [r3, #10]
 800b646:	025b      	lsls	r3, r3, #9
 800b648:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b64a:	e019      	b.n	800b680 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6979      	ldr	r1, [r7, #20]
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff fcfe 	bl	800b052 <get_fat>
 800b656:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b65e:	d101      	bne.n	800b664 <dir_sdi+0x88>
 800b660:	2301      	movs	r3, #1
 800b662:	e032      	b.n	800b6ca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d904      	bls.n	800b674 <dir_sdi+0x98>
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	429a      	cmp	r2, r3
 800b672:	d301      	bcc.n	800b678 <dir_sdi+0x9c>
 800b674:	2302      	movs	r3, #2
 800b676:	e028      	b.n	800b6ca <dir_sdi+0xee>
			ofs -= csz;
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	429a      	cmp	r2, r3
 800b686:	d2e1      	bcs.n	800b64c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b688:	6979      	ldr	r1, [r7, #20]
 800b68a:	6938      	ldr	r0, [r7, #16]
 800b68c:	f7ff fcc2 	bl	800b014 <clust2sect>
 800b690:	4602      	mov	r2, r0
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	69db      	ldr	r3, [r3, #28]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <dir_sdi+0xcc>
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	e010      	b.n	800b6ca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	69da      	ldr	r2, [r3, #28]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	0a5b      	lsrs	r3, r3, #9
 800b6b0:	441a      	add	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c2:	441a      	add	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b086      	sub	sp, #24
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	3320      	adds	r3, #32
 800b6e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <dir_next+0x28>
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6f8:	d301      	bcc.n	800b6fe <dir_next+0x2c>
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	e0aa      	b.n	800b854 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b704:	2b00      	cmp	r3, #0
 800b706:	f040 8098 	bne.w	800b83a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	1c5a      	adds	r2, r3, #1
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10b      	bne.n	800b734 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	095b      	lsrs	r3, r3, #5
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	8912      	ldrh	r2, [r2, #8]
 800b724:	4293      	cmp	r3, r2
 800b726:	f0c0 8088 	bcc.w	800b83a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	61da      	str	r2, [r3, #28]
 800b730:	2304      	movs	r3, #4
 800b732:	e08f      	b.n	800b854 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	0a5b      	lsrs	r3, r3, #9
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	8952      	ldrh	r2, [r2, #10]
 800b73c:	3a01      	subs	r2, #1
 800b73e:	4013      	ands	r3, r2
 800b740:	2b00      	cmp	r3, #0
 800b742:	d17a      	bne.n	800b83a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	4619      	mov	r1, r3
 800b74c:	4610      	mov	r0, r2
 800b74e:	f7ff fc80 	bl	800b052 <get_fat>
 800b752:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d801      	bhi.n	800b75e <dir_next+0x8c>
 800b75a:	2302      	movs	r3, #2
 800b75c:	e07a      	b.n	800b854 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b764:	d101      	bne.n	800b76a <dir_next+0x98>
 800b766:	2301      	movs	r3, #1
 800b768:	e074      	b.n	800b854 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	429a      	cmp	r2, r3
 800b772:	d358      	bcc.n	800b826 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d104      	bne.n	800b784 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	61da      	str	r2, [r3, #28]
 800b780:	2304      	movs	r3, #4
 800b782:	e067      	b.n	800b854 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	4619      	mov	r1, r3
 800b78c:	4610      	mov	r0, r2
 800b78e:	f7ff fe59 	bl	800b444 <create_chain>
 800b792:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <dir_next+0xcc>
 800b79a:	2307      	movs	r3, #7
 800b79c:	e05a      	b.n	800b854 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d101      	bne.n	800b7a8 <dir_next+0xd6>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e055      	b.n	800b854 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7ae:	d101      	bne.n	800b7b4 <dir_next+0xe2>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e04f      	b.n	800b854 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f7ff fb4d 	bl	800ae54 <sync_window>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <dir_next+0xf2>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e047      	b.n	800b854 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3330      	adds	r3, #48	; 0x30
 800b7c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff f977 	bl	800aac2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	613b      	str	r3, [r7, #16]
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f7ff fc1a 	bl	800b014 <clust2sect>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	62da      	str	r2, [r3, #44]	; 0x2c
 800b7e6:	e012      	b.n	800b80e <dir_next+0x13c>
						fs->wflag = 1;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff fb30 	bl	800ae54 <sync_window>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <dir_next+0x12c>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e02a      	b.n	800b854 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	3301      	adds	r3, #1
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	895b      	ldrh	r3, [r3, #10]
 800b812:	461a      	mov	r2, r3
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	4293      	cmp	r3, r2
 800b818:	d3e6      	bcc.n	800b7e8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	1ad2      	subs	r2, r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b82c:	6979      	ldr	r1, [r7, #20]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fbf0 	bl	800b014 <clust2sect>
 800b834:	4602      	mov	r2, r0
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b84c:	441a      	add	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b86c:	2100      	movs	r1, #0
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff feb4 	bl	800b5dc <dir_sdi>
 800b874:	4603      	mov	r3, r0
 800b876:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d12b      	bne.n	800b8d6 <dir_alloc+0x7a>
		n = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	4619      	mov	r1, r3
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fb27 	bl	800aedc <move_window>
 800b88e:	4603      	mov	r3, r0
 800b890:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d11d      	bne.n	800b8d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2be5      	cmp	r3, #229	; 0xe5
 800b8a0:	d004      	beq.n	800b8ac <dir_alloc+0x50>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d107      	bne.n	800b8bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	613b      	str	r3, [r7, #16]
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d102      	bne.n	800b8c0 <dir_alloc+0x64>
 800b8ba:	e00c      	b.n	800b8d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff ff05 	bl	800b6d2 <dir_next>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0d7      	beq.n	800b882 <dir_alloc+0x26>
 800b8d2:	e000      	b.n	800b8d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b8d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d101      	bne.n	800b8e0 <dir_alloc+0x84>
 800b8dc:	2307      	movs	r3, #7
 800b8de:	75fb      	strb	r3, [r7, #23]
	return res;
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	331a      	adds	r3, #26
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff f83f 	bl	800a97c <ld_word>
 800b8fe:	4603      	mov	r3, r0
 800b900:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b03      	cmp	r3, #3
 800b908:	d109      	bne.n	800b91e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	3314      	adds	r3, #20
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff f834 	bl	800a97c <ld_word>
 800b914:	4603      	mov	r3, r0
 800b916:	041b      	lsls	r3, r3, #16
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b91e:	68fb      	ldr	r3, [r7, #12]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	331a      	adds	r3, #26
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	b292      	uxth	r2, r2
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff f857 	bl	800a9f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	2b03      	cmp	r3, #3
 800b94a:	d109      	bne.n	800b960 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f103 0214 	add.w	r2, r3, #20
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	b29b      	uxth	r3, r3
 800b958:	4619      	mov	r1, r3
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7ff f849 	bl	800a9f2 <st_word>
	}
}
 800b960:	bf00      	nop
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b976:	2100      	movs	r1, #0
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7ff fe2f 	bl	800b5dc <dir_sdi>
 800b97e:	4603      	mov	r3, r0
 800b980:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <dir_find+0x24>
 800b988:	7dfb      	ldrb	r3, [r7, #23]
 800b98a:	e03e      	b.n	800ba0a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	4619      	mov	r1, r3
 800b992:	6938      	ldr	r0, [r7, #16]
 800b994:	f7ff faa2 	bl	800aedc <move_window>
 800b998:	4603      	mov	r3, r0
 800b99a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d12f      	bne.n	800ba02 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <dir_find+0x4e>
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	75fb      	strb	r3, [r7, #23]
 800b9b4:	e028      	b.n	800ba08 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	330b      	adds	r3, #11
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a1b      	ldr	r3, [r3, #32]
 800b9cc:	330b      	adds	r3, #11
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f003 0308 	and.w	r3, r3, #8
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10a      	bne.n	800b9ee <dir_find+0x86>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a18      	ldr	r0, [r3, #32]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3324      	adds	r3, #36	; 0x24
 800b9e0:	220b      	movs	r2, #11
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	f7ff f888 	bl	800aaf8 <mem_cmp>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00b      	beq.n	800ba06 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7ff fe6e 	bl	800b6d2 <dir_next>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0c5      	beq.n	800b98c <dir_find+0x24>
 800ba00:	e002      	b.n	800ba08 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ba02:	bf00      	nop
 800ba04:	e000      	b.n	800ba08 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba06:	bf00      	nop

	return res;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ba20:	2101      	movs	r1, #1
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff ff1a 	bl	800b85c <dir_alloc>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d11c      	bne.n	800ba6c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	4619      	mov	r1, r3
 800ba38:	68b8      	ldr	r0, [r7, #8]
 800ba3a:	f7ff fa4f 	bl	800aedc <move_window>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ba42:	7bfb      	ldrb	r3, [r7, #15]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d111      	bne.n	800ba6c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	2100      	movs	r1, #0
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff f836 	bl	800aac2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a18      	ldr	r0, [r3, #32]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3324      	adds	r3, #36	; 0x24
 800ba5e:	220b      	movs	r2, #11
 800ba60:	4619      	mov	r1, r3
 800ba62:	f7ff f80d 	bl	800aa80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3324      	adds	r3, #36	; 0x24
 800ba8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ba8e:	220b      	movs	r2, #11
 800ba90:	2120      	movs	r1, #32
 800ba92:	68b8      	ldr	r0, [r7, #8]
 800ba94:	f7ff f815 	bl	800aac2 <mem_set>
	si = i = 0; ni = 8;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	613b      	str	r3, [r7, #16]
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	61fb      	str	r3, [r7, #28]
 800baa0:	2308      	movs	r3, #8
 800baa2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	61fa      	str	r2, [r7, #28]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	4413      	add	r3, r2
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bab2:	7efb      	ldrb	r3, [r7, #27]
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d94e      	bls.n	800bb56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bab8:	7efb      	ldrb	r3, [r7, #27]
 800baba:	2b2f      	cmp	r3, #47	; 0x2f
 800babc:	d006      	beq.n	800bacc <create_name+0x54>
 800babe:	7efb      	ldrb	r3, [r7, #27]
 800bac0:	2b5c      	cmp	r3, #92	; 0x5c
 800bac2:	d110      	bne.n	800bae6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bac4:	e002      	b.n	800bacc <create_name+0x54>
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	3301      	adds	r3, #1
 800baca:	61fb      	str	r3, [r7, #28]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	4413      	add	r3, r2
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	2b2f      	cmp	r3, #47	; 0x2f
 800bad6:	d0f6      	beq.n	800bac6 <create_name+0x4e>
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	4413      	add	r3, r2
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b5c      	cmp	r3, #92	; 0x5c
 800bae2:	d0f0      	beq.n	800bac6 <create_name+0x4e>
			break;
 800bae4:	e038      	b.n	800bb58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bae6:	7efb      	ldrb	r3, [r7, #27]
 800bae8:	2b2e      	cmp	r3, #46	; 0x2e
 800baea:	d003      	beq.n	800baf4 <create_name+0x7c>
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d30c      	bcc.n	800bb0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	2b0b      	cmp	r3, #11
 800baf8:	d002      	beq.n	800bb00 <create_name+0x88>
 800bafa:	7efb      	ldrb	r3, [r7, #27]
 800bafc:	2b2e      	cmp	r3, #46	; 0x2e
 800bafe:	d001      	beq.n	800bb04 <create_name+0x8c>
 800bb00:	2306      	movs	r3, #6
 800bb02:	e044      	b.n	800bb8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bb04:	2308      	movs	r3, #8
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	230b      	movs	r3, #11
 800bb0a:	617b      	str	r3, [r7, #20]
			continue;
 800bb0c:	e022      	b.n	800bb54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bb0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	da04      	bge.n	800bb20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bb16:	7efb      	ldrb	r3, [r7, #27]
 800bb18:	3b80      	subs	r3, #128	; 0x80
 800bb1a:	4a1f      	ldr	r2, [pc, #124]	; (800bb98 <create_name+0x120>)
 800bb1c:	5cd3      	ldrb	r3, [r2, r3]
 800bb1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bb20:	7efb      	ldrb	r3, [r7, #27]
 800bb22:	4619      	mov	r1, r3
 800bb24:	481d      	ldr	r0, [pc, #116]	; (800bb9c <create_name+0x124>)
 800bb26:	f7ff f80e 	bl	800ab46 <chk_chr>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <create_name+0xbc>
 800bb30:	2306      	movs	r3, #6
 800bb32:	e02c      	b.n	800bb8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bb34:	7efb      	ldrb	r3, [r7, #27]
 800bb36:	2b60      	cmp	r3, #96	; 0x60
 800bb38:	d905      	bls.n	800bb46 <create_name+0xce>
 800bb3a:	7efb      	ldrb	r3, [r7, #27]
 800bb3c:	2b7a      	cmp	r3, #122	; 0x7a
 800bb3e:	d802      	bhi.n	800bb46 <create_name+0xce>
 800bb40:	7efb      	ldrb	r3, [r7, #27]
 800bb42:	3b20      	subs	r3, #32
 800bb44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	613a      	str	r2, [r7, #16]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	4413      	add	r3, r2
 800bb50:	7efa      	ldrb	r2, [r7, #27]
 800bb52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bb54:	e7a6      	b.n	800baa4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	441a      	add	r2, r3
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <create_name+0xf4>
 800bb68:	2306      	movs	r3, #6
 800bb6a:	e010      	b.n	800bb8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2be5      	cmp	r3, #229	; 0xe5
 800bb72:	d102      	bne.n	800bb7a <create_name+0x102>
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2205      	movs	r2, #5
 800bb78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bb7a:	7efb      	ldrb	r3, [r7, #27]
 800bb7c:	2b20      	cmp	r3, #32
 800bb7e:	d801      	bhi.n	800bb84 <create_name+0x10c>
 800bb80:	2204      	movs	r2, #4
 800bb82:	e000      	b.n	800bb86 <create_name+0x10e>
 800bb84:	2200      	movs	r2, #0
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	330b      	adds	r3, #11
 800bb8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bb8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3720      	adds	r7, #32
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	0800d6e8 	.word	0x0800d6e8
 800bb9c:	0800d58c 	.word	0x0800d58c

0800bba0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bbb4:	e002      	b.n	800bbbc <follow_path+0x1c>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b2f      	cmp	r3, #47	; 0x2f
 800bbc2:	d0f8      	beq.n	800bbb6 <follow_path+0x16>
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	2b5c      	cmp	r3, #92	; 0x5c
 800bbca:	d0f4      	beq.n	800bbb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	2b1f      	cmp	r3, #31
 800bbd8:	d80a      	bhi.n	800bbf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2280      	movs	r2, #128	; 0x80
 800bbde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff fcf9 	bl	800b5dc <dir_sdi>
 800bbea:	4603      	mov	r3, r0
 800bbec:	75fb      	strb	r3, [r7, #23]
 800bbee:	e043      	b.n	800bc78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbf0:	463b      	mov	r3, r7
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff ff3f 	bl	800ba78 <create_name>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d134      	bne.n	800bc6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff feaf 	bl	800b968 <dir_find>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00a      	beq.n	800bc32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	d127      	bne.n	800bc72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bc22:	7afb      	ldrb	r3, [r7, #11]
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d122      	bne.n	800bc72 <follow_path+0xd2>
 800bc2c:	2305      	movs	r3, #5
 800bc2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bc30:	e01f      	b.n	800bc72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc32:	7afb      	ldrb	r3, [r7, #11]
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d11c      	bne.n	800bc76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	799b      	ldrb	r3, [r3, #6]
 800bc40:	f003 0310 	and.w	r3, r3, #16
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bc48:	2305      	movs	r3, #5
 800bc4a:	75fb      	strb	r3, [r7, #23]
 800bc4c:	e014      	b.n	800bc78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	695b      	ldr	r3, [r3, #20]
 800bc58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5c:	4413      	add	r3, r2
 800bc5e:	4619      	mov	r1, r3
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f7ff fe42 	bl	800b8ea <ld_clust>
 800bc66:	4602      	mov	r2, r0
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc6c:	e7c0      	b.n	800bbf0 <follow_path+0x50>
			if (res != FR_OK) break;
 800bc6e:	bf00      	nop
 800bc70:	e002      	b.n	800bc78 <follow_path+0xd8>
				break;
 800bc72:	bf00      	nop
 800bc74:	e000      	b.n	800bc78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc76:	bf00      	nop
			}
		}
	}

	return res;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b087      	sub	sp, #28
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d031      	beq.n	800bcfc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	617b      	str	r3, [r7, #20]
 800bc9e:	e002      	b.n	800bca6 <get_ldnumber+0x24>
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	3301      	adds	r3, #1
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b20      	cmp	r3, #32
 800bcac:	d903      	bls.n	800bcb6 <get_ldnumber+0x34>
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b3a      	cmp	r3, #58	; 0x3a
 800bcb4:	d1f4      	bne.n	800bca0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b3a      	cmp	r3, #58	; 0x3a
 800bcbc:	d11c      	bne.n	800bcf8 <get_ldnumber+0x76>
			tp = *path;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	60fa      	str	r2, [r7, #12]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	3b30      	subs	r3, #48	; 0x30
 800bcce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2b09      	cmp	r3, #9
 800bcd4:	d80e      	bhi.n	800bcf4 <get_ldnumber+0x72>
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d10a      	bne.n	800bcf4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d107      	bne.n	800bcf4 <get_ldnumber+0x72>
					vol = (int)i;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	3301      	adds	r3, #1
 800bcec:	617b      	str	r3, [r7, #20]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	e002      	b.n	800bcfe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bcfc:	693b      	ldr	r3, [r7, #16]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	371c      	adds	r7, #28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
	...

0800bd0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	70da      	strb	r2, [r3, #3]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7ff f8d8 	bl	800aedc <move_window>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <check_fs+0x2a>
 800bd32:	2304      	movs	r3, #4
 800bd34:	e038      	b.n	800bda8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3330      	adds	r3, #48	; 0x30
 800bd3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe fe1c 	bl	800a97c <ld_word>
 800bd44:	4603      	mov	r3, r0
 800bd46:	461a      	mov	r2, r3
 800bd48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d001      	beq.n	800bd54 <check_fs+0x48>
 800bd50:	2303      	movs	r3, #3
 800bd52:	e029      	b.n	800bda8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd5a:	2be9      	cmp	r3, #233	; 0xe9
 800bd5c:	d009      	beq.n	800bd72 <check_fs+0x66>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd64:	2beb      	cmp	r3, #235	; 0xeb
 800bd66:	d11e      	bne.n	800bda6 <check_fs+0x9a>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bd6e:	2b90      	cmp	r3, #144	; 0x90
 800bd70:	d119      	bne.n	800bda6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	3330      	adds	r3, #48	; 0x30
 800bd76:	3336      	adds	r3, #54	; 0x36
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fe fe17 	bl	800a9ac <ld_dword>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd84:	4a0a      	ldr	r2, [pc, #40]	; (800bdb0 <check_fs+0xa4>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d101      	bne.n	800bd8e <check_fs+0x82>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e00c      	b.n	800bda8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3330      	adds	r3, #48	; 0x30
 800bd92:	3352      	adds	r3, #82	; 0x52
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fe fe09 	bl	800a9ac <ld_dword>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	4a05      	ldr	r2, [pc, #20]	; (800bdb4 <check_fs+0xa8>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d101      	bne.n	800bda6 <check_fs+0x9a>
 800bda2:	2300      	movs	r3, #0
 800bda4:	e000      	b.n	800bda8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bda6:	2302      	movs	r3, #2
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	00544146 	.word	0x00544146
 800bdb4:	33544146 	.word	0x33544146

0800bdb8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b096      	sub	sp, #88	; 0x58
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f7ff ff58 	bl	800bc82 <get_ldnumber>
 800bdd2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	da01      	bge.n	800bdde <find_volume+0x26>
 800bdda:	230b      	movs	r3, #11
 800bddc:	e22d      	b.n	800c23a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bdde:	4aa1      	ldr	r2, [pc, #644]	; (800c064 <find_volume+0x2ac>)
 800bde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bde6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <find_volume+0x3a>
 800bdee:	230c      	movs	r3, #12
 800bdf0:	e223      	b.n	800c23a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdf6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bdf8:	79fb      	ldrb	r3, [r7, #7]
 800bdfa:	f023 0301 	bic.w	r3, r3, #1
 800bdfe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01a      	beq.n	800be3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	785b      	ldrb	r3, [r3, #1]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fe fd17 	bl	800a840 <disk_status>
 800be12:	4603      	mov	r3, r0
 800be14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800be18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10c      	bne.n	800be3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d007      	beq.n	800be3a <find_volume+0x82>
 800be2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800be36:	230a      	movs	r3, #10
 800be38:	e1ff      	b.n	800c23a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800be3a:	2300      	movs	r3, #0
 800be3c:	e1fd      	b.n	800c23a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	2200      	movs	r2, #0
 800be42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be46:	b2da      	uxtb	r2, r3
 800be48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	785b      	ldrb	r3, [r3, #1]
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fd0f 	bl	800a874 <disk_initialize>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800be5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800be68:	2303      	movs	r3, #3
 800be6a:	e1e6      	b.n	800c23a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d007      	beq.n	800be82 <find_volume+0xca>
 800be72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800be7e:	230a      	movs	r3, #10
 800be80:	e1db      	b.n	800c23a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be8a:	f7ff ff3f 	bl	800bd0c <check_fs>
 800be8e:	4603      	mov	r3, r0
 800be90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d149      	bne.n	800bf30 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be9c:	2300      	movs	r3, #0
 800be9e:	643b      	str	r3, [r7, #64]	; 0x40
 800bea0:	e01e      	b.n	800bee0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beaa:	011b      	lsls	r3, r3, #4
 800beac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800beb0:	4413      	add	r3, r2
 800beb2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	3304      	adds	r3, #4
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d006      	beq.n	800becc <find_volume+0x114>
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	3308      	adds	r3, #8
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe fd72 	bl	800a9ac <ld_dword>
 800bec8:	4602      	mov	r2, r0
 800beca:	e000      	b.n	800bece <find_volume+0x116>
 800becc:	2200      	movs	r2, #0
 800bece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	3358      	adds	r3, #88	; 0x58
 800bed4:	443b      	add	r3, r7
 800bed6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800beda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bedc:	3301      	adds	r3, #1
 800bede:	643b      	str	r3, [r7, #64]	; 0x40
 800bee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d9dd      	bls.n	800bea2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bee6:	2300      	movs	r3, #0
 800bee8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800beea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <find_volume+0x13e>
 800bef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef2:	3b01      	subs	r3, #1
 800bef4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	3358      	adds	r3, #88	; 0x58
 800befc:	443b      	add	r3, r7
 800befe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bf02:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <find_volume+0x15e>
 800bf0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf0e:	f7ff fefd 	bl	800bd0c <check_fs>
 800bf12:	4603      	mov	r3, r0
 800bf14:	e000      	b.n	800bf18 <find_volume+0x160>
 800bf16:	2303      	movs	r3, #3
 800bf18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d905      	bls.n	800bf30 <find_volume+0x178>
 800bf24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf26:	3301      	adds	r3, #1
 800bf28:	643b      	str	r3, [r7, #64]	; 0x40
 800bf2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d9e2      	bls.n	800bef6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d101      	bne.n	800bf3c <find_volume+0x184>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e17e      	b.n	800c23a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d901      	bls.n	800bf48 <find_volume+0x190>
 800bf44:	230d      	movs	r3, #13
 800bf46:	e178      	b.n	800c23a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	3330      	adds	r3, #48	; 0x30
 800bf4c:	330b      	adds	r3, #11
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fd14 	bl	800a97c <ld_word>
 800bf54:	4603      	mov	r3, r0
 800bf56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf5a:	d001      	beq.n	800bf60 <find_volume+0x1a8>
 800bf5c:	230d      	movs	r3, #13
 800bf5e:	e16c      	b.n	800c23a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	3330      	adds	r3, #48	; 0x30
 800bf64:	3316      	adds	r3, #22
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe fd08 	bl	800a97c <ld_word>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <find_volume+0x1cc>
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	3330      	adds	r3, #48	; 0x30
 800bf7a:	3324      	adds	r3, #36	; 0x24
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fe fd15 	bl	800a9ac <ld_dword>
 800bf82:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf88:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	789b      	ldrb	r3, [r3, #2]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d005      	beq.n	800bfa8 <find_volume+0x1f0>
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9e:	789b      	ldrb	r3, [r3, #2]
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d001      	beq.n	800bfa8 <find_volume+0x1f0>
 800bfa4:	230d      	movs	r3, #13
 800bfa6:	e148      	b.n	800c23a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	789b      	ldrb	r3, [r3, #2]
 800bfac:	461a      	mov	r2, r3
 800bfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb0:	fb02 f303 	mul.w	r3, r2, r3
 800bfb4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	895b      	ldrh	r3, [r3, #10]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d008      	beq.n	800bfdc <find_volume+0x224>
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	895b      	ldrh	r3, [r3, #10]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd2:	895b      	ldrh	r3, [r3, #10]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <find_volume+0x228>
 800bfdc:	230d      	movs	r3, #13
 800bfde:	e12c      	b.n	800c23a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	3330      	adds	r3, #48	; 0x30
 800bfe4:	3311      	adds	r3, #17
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe fcc8 	bl	800a97c <ld_word>
 800bfec:	4603      	mov	r3, r0
 800bfee:	461a      	mov	r2, r3
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff6:	891b      	ldrh	r3, [r3, #8]
 800bff8:	f003 030f 	and.w	r3, r3, #15
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <find_volume+0x24e>
 800c002:	230d      	movs	r3, #13
 800c004:	e119      	b.n	800c23a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	3330      	adds	r3, #48	; 0x30
 800c00a:	3313      	adds	r3, #19
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fe fcb5 	bl	800a97c <ld_word>
 800c012:	4603      	mov	r3, r0
 800c014:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d106      	bne.n	800c02a <find_volume+0x272>
 800c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01e:	3330      	adds	r3, #48	; 0x30
 800c020:	3320      	adds	r3, #32
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fcc2 	bl	800a9ac <ld_dword>
 800c028:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	3330      	adds	r3, #48	; 0x30
 800c02e:	330e      	adds	r3, #14
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe fca3 	bl	800a97c <ld_word>
 800c036:	4603      	mov	r3, r0
 800c038:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c03a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <find_volume+0x28c>
 800c040:	230d      	movs	r3, #13
 800c042:	e0fa      	b.n	800c23a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c044:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c048:	4413      	add	r3, r2
 800c04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c04c:	8912      	ldrh	r2, [r2, #8]
 800c04e:	0912      	lsrs	r2, r2, #4
 800c050:	b292      	uxth	r2, r2
 800c052:	4413      	add	r3, r2
 800c054:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d204      	bcs.n	800c068 <find_volume+0x2b0>
 800c05e:	230d      	movs	r3, #13
 800c060:	e0eb      	b.n	800c23a <find_volume+0x482>
 800c062:	bf00      	nop
 800c064:	20000664 	.word	0x20000664
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c070:	8952      	ldrh	r2, [r2, #10]
 800c072:	fbb3 f3f2 	udiv	r3, r3, r2
 800c076:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <find_volume+0x2ca>
 800c07e:	230d      	movs	r3, #13
 800c080:	e0db      	b.n	800c23a <find_volume+0x482>
		fmt = FS_FAT32;
 800c082:	2303      	movs	r3, #3
 800c084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c08e:	4293      	cmp	r3, r2
 800c090:	d802      	bhi.n	800c098 <find_volume+0x2e0>
 800c092:	2302      	movs	r3, #2
 800c094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d802      	bhi.n	800c0a8 <find_volume+0x2f0>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	1c9a      	adds	r2, r3, #2
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c0b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ba:	441a      	add	r2, r3
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c0c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c4:	441a      	add	r2, r3
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c0ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d11e      	bne.n	800c110 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	3330      	adds	r3, #48	; 0x30
 800c0d6:	332a      	adds	r3, #42	; 0x2a
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe fc4f 	bl	800a97c <ld_word>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <find_volume+0x330>
 800c0e4:	230d      	movs	r3, #13
 800c0e6:	e0a8      	b.n	800c23a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	891b      	ldrh	r3, [r3, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <find_volume+0x33c>
 800c0f0:	230d      	movs	r3, #13
 800c0f2:	e0a2      	b.n	800c23a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	3330      	adds	r3, #48	; 0x30
 800c0f8:	332c      	adds	r3, #44	; 0x2c
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fc56 	bl	800a9ac <ld_dword>
 800c100:	4602      	mov	r2, r0
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	647b      	str	r3, [r7, #68]	; 0x44
 800c10e:	e01f      	b.n	800c150 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	891b      	ldrh	r3, [r3, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <find_volume+0x364>
 800c118:	230d      	movs	r3, #13
 800c11a:	e08e      	b.n	800c23a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	6a1a      	ldr	r2, [r3, #32]
 800c120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c122:	441a      	add	r2, r3
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d103      	bne.n	800c138 <find_volume+0x380>
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	e00a      	b.n	800c14e <find_volume+0x396>
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	695a      	ldr	r2, [r3, #20]
 800c13c:	4613      	mov	r3, r2
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	4413      	add	r3, r2
 800c142:	085a      	lsrs	r2, r3, #1
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c14e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c152:	699a      	ldr	r2, [r3, #24]
 800c154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c156:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c15a:	0a5b      	lsrs	r3, r3, #9
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d201      	bcs.n	800c164 <find_volume+0x3ac>
 800c160:	230d      	movs	r3, #13
 800c162:	e06a      	b.n	800c23a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c16a:	611a      	str	r2, [r3, #16]
 800c16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16e:	691a      	ldr	r2, [r3, #16]
 800c170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c172:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	2280      	movs	r2, #128	; 0x80
 800c178:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c17a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d149      	bne.n	800c216 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	3330      	adds	r3, #48	; 0x30
 800c186:	3330      	adds	r3, #48	; 0x30
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe fbf7 	bl	800a97c <ld_word>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b01      	cmp	r3, #1
 800c192:	d140      	bne.n	800c216 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c196:	3301      	adds	r3, #1
 800c198:	4619      	mov	r1, r3
 800c19a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c19c:	f7fe fe9e 	bl	800aedc <move_window>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d137      	bne.n	800c216 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	3330      	adds	r3, #48	; 0x30
 800c1b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fe fbe1 	bl	800a97c <ld_word>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	461a      	mov	r2, r3
 800c1be:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d127      	bne.n	800c216 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	3330      	adds	r3, #48	; 0x30
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe fbee 	bl	800a9ac <ld_dword>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	4a1c      	ldr	r2, [pc, #112]	; (800c244 <find_volume+0x48c>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d11e      	bne.n	800c216 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	3330      	adds	r3, #48	; 0x30
 800c1dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe fbe3 	bl	800a9ac <ld_dword>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	4a17      	ldr	r2, [pc, #92]	; (800c248 <find_volume+0x490>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d113      	bne.n	800c216 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	3330      	adds	r3, #48	; 0x30
 800c1f2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fbd8 	bl	800a9ac <ld_dword>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c204:	3330      	adds	r3, #48	; 0x30
 800c206:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe fbce 	bl	800a9ac <ld_dword>
 800c210:	4602      	mov	r2, r0
 800c212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c214:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c21c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c21e:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <find_volume+0x494>)
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	3301      	adds	r3, #1
 800c224:	b29a      	uxth	r2, r3
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <find_volume+0x494>)
 800c228:	801a      	strh	r2, [r3, #0]
 800c22a:	4b08      	ldr	r3, [pc, #32]	; (800c24c <find_volume+0x494>)
 800c22c:	881a      	ldrh	r2, [r3, #0]
 800c22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c230:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c232:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c234:	f7fe fdea 	bl	800ae0c <clear_lock>
#endif
	return FR_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3758      	adds	r7, #88	; 0x58
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	41615252 	.word	0x41615252
 800c248:	61417272 	.word	0x61417272
 800c24c:	20000668 	.word	0x20000668

0800c250 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c25a:	2309      	movs	r3, #9
 800c25c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01c      	beq.n	800c29e <validate+0x4e>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d018      	beq.n	800c29e <validate+0x4e>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d013      	beq.n	800c29e <validate+0x4e>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	889a      	ldrh	r2, [r3, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	88db      	ldrh	r3, [r3, #6]
 800c280:	429a      	cmp	r2, r3
 800c282:	d10c      	bne.n	800c29e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	785b      	ldrb	r3, [r3, #1]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe fad8 	bl	800a840 <disk_status>
 800c290:	4603      	mov	r3, r0
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <validate+0x4e>
			res = FR_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <validate+0x5a>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	e000      	b.n	800c2ac <validate+0x5c>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	683a      	ldr	r2, [r7, #0]
 800c2ae:	6013      	str	r3, [r2, #0]
	return res;
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c2ce:	f107 0310 	add.w	r3, r7, #16
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff fcd5 	bl	800bc82 <get_ldnumber>
 800c2d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	da01      	bge.n	800c2e4 <f_mount+0x28>
 800c2e0:	230b      	movs	r3, #11
 800c2e2:	e02b      	b.n	800c33c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c2e4:	4a17      	ldr	r2, [pc, #92]	; (800c344 <f_mount+0x88>)
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c2f4:	69b8      	ldr	r0, [r7, #24]
 800c2f6:	f7fe fd89 	bl	800ae0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	490d      	ldr	r1, [pc, #52]	; (800c344 <f_mount+0x88>)
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <f_mount+0x66>
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d001      	beq.n	800c326 <f_mount+0x6a>
 800c322:	2300      	movs	r3, #0
 800c324:	e00a      	b.n	800c33c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c326:	f107 010c 	add.w	r1, r7, #12
 800c32a:	f107 0308 	add.w	r3, r7, #8
 800c32e:	2200      	movs	r2, #0
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fd41 	bl	800bdb8 <find_volume>
 800c336:	4603      	mov	r3, r0
 800c338:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3720      	adds	r7, #32
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20000664 	.word	0x20000664

0800c348 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b098      	sub	sp, #96	; 0x60
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	4613      	mov	r3, r2
 800c354:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d101      	bne.n	800c360 <f_open+0x18>
 800c35c:	2309      	movs	r3, #9
 800c35e:	e1ad      	b.n	800c6bc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c366:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c368:	79fa      	ldrb	r2, [r7, #7]
 800c36a:	f107 0110 	add.w	r1, r7, #16
 800c36e:	f107 0308 	add.w	r3, r7, #8
 800c372:	4618      	mov	r0, r3
 800c374:	f7ff fd20 	bl	800bdb8 <find_volume>
 800c378:	4603      	mov	r3, r0
 800c37a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c37e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c382:	2b00      	cmp	r3, #0
 800c384:	f040 8191 	bne.w	800c6aa <f_open+0x362>
		dj.obj.fs = fs;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	f107 0314 	add.w	r3, r7, #20
 800c392:	4611      	mov	r1, r2
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff fc03 	bl	800bba0 <follow_path>
 800c39a:	4603      	mov	r3, r0
 800c39c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c3a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d11a      	bne.n	800c3de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c3a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3ac:	b25b      	sxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	da03      	bge.n	800c3ba <f_open+0x72>
				res = FR_INVALID_NAME;
 800c3b2:	2306      	movs	r3, #6
 800c3b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c3b8:	e011      	b.n	800c3de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3ba:	79fb      	ldrb	r3, [r7, #7]
 800c3bc:	f023 0301 	bic.w	r3, r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	bf14      	ite	ne
 800c3c4:	2301      	movne	r3, #1
 800c3c6:	2300      	moveq	r3, #0
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f107 0314 	add.w	r3, r7, #20
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe fbd2 	bl	800ab7c <chk_lock>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	f003 031c 	and.w	r3, r3, #28
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d07f      	beq.n	800c4e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c3e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d017      	beq.n	800c420 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c3f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3f4:	2b04      	cmp	r3, #4
 800c3f6:	d10e      	bne.n	800c416 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3f8:	f7fe fc1c 	bl	800ac34 <enq_lock>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d006      	beq.n	800c410 <f_open+0xc8>
 800c402:	f107 0314 	add.w	r3, r7, #20
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff fb03 	bl	800ba12 <dir_register>
 800c40c:	4603      	mov	r3, r0
 800c40e:	e000      	b.n	800c412 <f_open+0xca>
 800c410:	2312      	movs	r3, #18
 800c412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c416:	79fb      	ldrb	r3, [r7, #7]
 800c418:	f043 0308 	orr.w	r3, r3, #8
 800c41c:	71fb      	strb	r3, [r7, #7]
 800c41e:	e010      	b.n	800c442 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c420:	7ebb      	ldrb	r3, [r7, #26]
 800c422:	f003 0311 	and.w	r3, r3, #17
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <f_open+0xea>
					res = FR_DENIED;
 800c42a:	2307      	movs	r3, #7
 800c42c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c430:	e007      	b.n	800c442 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	f003 0304 	and.w	r3, r3, #4
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <f_open+0xfa>
 800c43c:	2308      	movs	r3, #8
 800c43e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c446:	2b00      	cmp	r3, #0
 800c448:	d168      	bne.n	800c51c <f_open+0x1d4>
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	f003 0308 	and.w	r3, r3, #8
 800c450:	2b00      	cmp	r3, #0
 800c452:	d063      	beq.n	800c51c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c454:	f7fe f87a 	bl	800a54c <get_fattime>
 800c458:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45c:	330e      	adds	r3, #14
 800c45e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c460:	4618      	mov	r0, r3
 800c462:	f7fe fae1 	bl	800aa28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c468:	3316      	adds	r3, #22
 800c46a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fadb 	bl	800aa28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c474:	330b      	adds	r3, #11
 800c476:	2220      	movs	r2, #32
 800c478:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c47e:	4611      	mov	r1, r2
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fa32 	bl	800b8ea <ld_clust>
 800c486:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c48c:	2200      	movs	r2, #0
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff fa4a 	bl	800b928 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c496:	331c      	adds	r3, #28
 800c498:	2100      	movs	r1, #0
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fac4 	bl	800aa28 <st_dword>
					fs->wflag = 1;
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d037      	beq.n	800c51c <f_open+0x1d4>
						dw = fs->winsect;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c4b2:	f107 0314 	add.w	r3, r7, #20
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe ff5d 	bl	800b37a <remove_chain>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c4c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d126      	bne.n	800c51c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fe fd02 	bl	800aedc <move_window>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4e2:	3a01      	subs	r2, #1
 800c4e4:	60da      	str	r2, [r3, #12]
 800c4e6:	e019      	b.n	800c51c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d115      	bne.n	800c51c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c4f0:	7ebb      	ldrb	r3, [r7, #26]
 800c4f2:	f003 0310 	and.w	r3, r3, #16
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d003      	beq.n	800c502 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c4fa:	2304      	movs	r3, #4
 800c4fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c500:	e00c      	b.n	800c51c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	f003 0302 	and.w	r3, r3, #2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d007      	beq.n	800c51c <f_open+0x1d4>
 800c50c:	7ebb      	ldrb	r3, [r7, #26]
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	2b00      	cmp	r3, #0
 800c514:	d002      	beq.n	800c51c <f_open+0x1d4>
						res = FR_DENIED;
 800c516:	2307      	movs	r3, #7
 800c518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c51c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c520:	2b00      	cmp	r3, #0
 800c522:	d128      	bne.n	800c576 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	f003 0308 	and.w	r3, r3, #8
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c52e:	79fb      	ldrb	r3, [r7, #7]
 800c530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c534:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c53e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	f023 0301 	bic.w	r3, r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	bf14      	ite	ne
 800c54e:	2301      	movne	r3, #1
 800c550:	2300      	moveq	r3, #0
 800c552:	b2db      	uxtb	r3, r3
 800c554:	461a      	mov	r2, r3
 800c556:	f107 0314 	add.w	r3, r7, #20
 800c55a:	4611      	mov	r1, r2
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fb8b 	bl	800ac78 <inc_lock>
 800c562:	4602      	mov	r2, r0
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d102      	bne.n	800c576 <f_open+0x22e>
 800c570:	2302      	movs	r3, #2
 800c572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f040 8095 	bne.w	800c6aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c584:	4611      	mov	r1, r2
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff f9af 	bl	800b8ea <ld_clust>
 800c58c:	4602      	mov	r2, r0
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c594:	331c      	adds	r3, #28
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fa08 	bl	800a9ac <ld_dword>
 800c59c:	4602      	mov	r2, r0
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	88da      	ldrh	r2, [r3, #6]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	79fa      	ldrb	r2, [r7, #7]
 800c5ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3330      	adds	r3, #48	; 0x30
 800c5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fe fa72 	bl	800aac2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c5de:	79fb      	ldrb	r3, [r7, #7]
 800c5e0:	f003 0320 	and.w	r3, r3, #32
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d060      	beq.n	800c6aa <f_open+0x362>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d05c      	beq.n	800c6aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	68da      	ldr	r2, [r3, #12]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	895b      	ldrh	r3, [r3, #10]
 800c5fc:	025b      	lsls	r3, r3, #9
 800c5fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	657b      	str	r3, [r7, #84]	; 0x54
 800c60c:	e016      	b.n	800c63c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe fd1d 	bl	800b052 <get_fat>
 800c618:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d802      	bhi.n	800c626 <f_open+0x2de>
 800c620:	2302      	movs	r3, #2
 800c622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c62c:	d102      	bne.n	800c634 <f_open+0x2ec>
 800c62e:	2301      	movs	r3, #1
 800c630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c634:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	657b      	str	r3, [r7, #84]	; 0x54
 800c63c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c640:	2b00      	cmp	r3, #0
 800c642:	d103      	bne.n	800c64c <f_open+0x304>
 800c644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c648:	429a      	cmp	r2, r3
 800c64a:	d8e0      	bhi.n	800c60e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c650:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c656:	2b00      	cmp	r3, #0
 800c658:	d127      	bne.n	800c6aa <f_open+0x362>
 800c65a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c660:	2b00      	cmp	r3, #0
 800c662:	d022      	beq.n	800c6aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fe fcd3 	bl	800b014 <clust2sect>
 800c66e:	6478      	str	r0, [r7, #68]	; 0x44
 800c670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c672:	2b00      	cmp	r3, #0
 800c674:	d103      	bne.n	800c67e <f_open+0x336>
						res = FR_INT_ERR;
 800c676:	2302      	movs	r3, #2
 800c678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c67c:	e015      	b.n	800c6aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c680:	0a5a      	lsrs	r2, r3, #9
 800c682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c684:	441a      	add	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	7858      	ldrb	r0, [r3, #1]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6a1a      	ldr	r2, [r3, #32]
 800c698:	2301      	movs	r3, #1
 800c69a:	f7fe f911 	bl	800a8c0 <disk_read>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <f_open+0x362>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c6aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <f_open+0x370>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c6b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3760      	adds	r7, #96	; 0x60
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08c      	sub	sp, #48	; 0x30
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
 800c6d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f107 0210 	add.w	r2, r7, #16
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7ff fdb3 	bl	800c250 <validate>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d107      	bne.n	800c708 <f_write+0x44>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	7d5b      	ldrb	r3, [r3, #21]
 800c6fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <f_write+0x4a>
 800c708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c70c:	e14b      	b.n	800c9a6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	7d1b      	ldrb	r3, [r3, #20]
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b00      	cmp	r3, #0
 800c718:	d101      	bne.n	800c71e <f_write+0x5a>
 800c71a:	2307      	movs	r3, #7
 800c71c:	e143      	b.n	800c9a6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	699a      	ldr	r2, [r3, #24]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	441a      	add	r2, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	f080 812d 	bcs.w	800c98a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	43db      	mvns	r3, r3
 800c736:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c738:	e127      	b.n	800c98a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c742:	2b00      	cmp	r3, #0
 800c744:	f040 80e3 	bne.w	800c90e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	0a5b      	lsrs	r3, r3, #9
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	8952      	ldrh	r2, [r2, #10]
 800c752:	3a01      	subs	r2, #1
 800c754:	4013      	ands	r3, r2
 800c756:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d143      	bne.n	800c7e6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10c      	bne.n	800c780 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d11a      	bne.n	800c7a8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2100      	movs	r1, #0
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe fe64 	bl	800b444 <create_chain>
 800c77c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c77e:	e013      	b.n	800c7a8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c784:	2b00      	cmp	r3, #0
 800c786:	d007      	beq.n	800c798 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	4619      	mov	r1, r3
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f7fe fef0 	bl	800b574 <clmt_clust>
 800c794:	62b8      	str	r0, [r7, #40]	; 0x28
 800c796:	e007      	b.n	800c7a8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fe fe4f 	bl	800b444 <create_chain>
 800c7a6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 80f2 	beq.w	800c994 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d104      	bne.n	800c7c0 <f_write+0xfc>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	755a      	strb	r2, [r3, #21]
 800c7bc:	2302      	movs	r3, #2
 800c7be:	e0f2      	b.n	800c9a6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c6:	d104      	bne.n	800c7d2 <f_write+0x10e>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	755a      	strb	r2, [r3, #21]
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e0e9      	b.n	800c9a6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <f_write+0x122>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7e4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	7d1b      	ldrb	r3, [r3, #20]
 800c7ea:	b25b      	sxtb	r3, r3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	da18      	bge.n	800c822 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	7858      	ldrb	r0, [r3, #1]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6a1a      	ldr	r2, [r3, #32]
 800c7fe:	2301      	movs	r3, #1
 800c800:	f7fe f87e 	bl	800a900 <disk_write>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d004      	beq.n	800c814 <f_write+0x150>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2201      	movs	r2, #1
 800c80e:	755a      	strb	r2, [r3, #21]
 800c810:	2301      	movs	r3, #1
 800c812:	e0c8      	b.n	800c9a6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	7d1b      	ldrb	r3, [r3, #20]
 800c818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	69db      	ldr	r3, [r3, #28]
 800c828:	4619      	mov	r1, r3
 800c82a:	4610      	mov	r0, r2
 800c82c:	f7fe fbf2 	bl	800b014 <clust2sect>
 800c830:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d104      	bne.n	800c842 <f_write+0x17e>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2202      	movs	r2, #2
 800c83c:	755a      	strb	r2, [r3, #21]
 800c83e:	2302      	movs	r3, #2
 800c840:	e0b1      	b.n	800c9a6 <f_write+0x2e2>
			sect += csect;
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	4413      	add	r3, r2
 800c848:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	0a5b      	lsrs	r3, r3, #9
 800c84e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c850:	6a3b      	ldr	r3, [r7, #32]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d03c      	beq.n	800c8d0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c856:	69ba      	ldr	r2, [r7, #24]
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	4413      	add	r3, r2
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	8952      	ldrh	r2, [r2, #10]
 800c860:	4293      	cmp	r3, r2
 800c862:	d905      	bls.n	800c870 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	895b      	ldrh	r3, [r3, #10]
 800c868:	461a      	mov	r2, r3
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	7858      	ldrb	r0, [r3, #1]
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	69f9      	ldr	r1, [r7, #28]
 800c87a:	f7fe f841 	bl	800a900 <disk_write>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d004      	beq.n	800c88e <f_write+0x1ca>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	755a      	strb	r2, [r3, #21]
 800c88a:	2301      	movs	r3, #1
 800c88c:	e08b      	b.n	800c9a6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6a1a      	ldr	r2, [r3, #32]
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	6a3a      	ldr	r2, [r7, #32]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d915      	bls.n	800c8c8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6a1a      	ldr	r2, [r3, #32]
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	025b      	lsls	r3, r3, #9
 800c8ac:	69fa      	ldr	r2, [r7, #28]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	f7fe f8e3 	bl	800aa80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	7d1b      	ldrb	r3, [r3, #20]
 800c8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	025b      	lsls	r3, r3, #9
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8ce:	e03f      	b.n	800c950 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d016      	beq.n	800c908 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	699a      	ldr	r2, [r3, #24]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d210      	bcs.n	800c908 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	7858      	ldrb	r0, [r3, #1]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	697a      	ldr	r2, [r7, #20]
 800c8f4:	f7fd ffe4 	bl	800a8c0 <disk_read>
 800c8f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d004      	beq.n	800c908 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	755a      	strb	r2, [r3, #21]
 800c904:	2301      	movs	r3, #1
 800c906:	e04e      	b.n	800c9a6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c916:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c91a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	429a      	cmp	r2, r3
 800c922:	d901      	bls.n	800c928 <f_write+0x264>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	699b      	ldr	r3, [r3, #24]
 800c932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c936:	4413      	add	r3, r2
 800c938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93a:	69f9      	ldr	r1, [r7, #28]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fe f89f 	bl	800aa80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	7d1b      	ldrb	r3, [r3, #20]
 800c946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c950:	69fa      	ldr	r2, [r7, #28]
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	4413      	add	r3, r2
 800c956:	61fb      	str	r3, [r7, #28]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	699a      	ldr	r2, [r3, #24]
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	441a      	add	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	619a      	str	r2, [r3, #24]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	68da      	ldr	r2, [r3, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	699b      	ldr	r3, [r3, #24]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	bf38      	it	cc
 800c970:	461a      	movcc	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	60da      	str	r2, [r3, #12]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	441a      	add	r2, r3
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f47f aed4 	bne.w	800c73a <f_write+0x76>
 800c992:	e000      	b.n	800c996 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c994:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	7d1b      	ldrb	r3, [r3, #20]
 800c99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3730      	adds	r7, #48	; 0x30
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b086      	sub	sp, #24
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f107 0208 	add.w	r2, r7, #8
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff fc46 	bl	800c250 <validate>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d168      	bne.n	800caa0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7d1b      	ldrb	r3, [r3, #20]
 800c9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d062      	beq.n	800caa0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	7d1b      	ldrb	r3, [r3, #20]
 800c9de:	b25b      	sxtb	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	da15      	bge.n	800ca10 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	7858      	ldrb	r0, [r3, #1]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1a      	ldr	r2, [r3, #32]
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f7fd ff84 	bl	800a900 <disk_write>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <f_sync+0x54>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e04f      	b.n	800caa2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7d1b      	ldrb	r3, [r3, #20]
 800ca06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca10:	f7fd fd9c 	bl	800a54c <get_fattime>
 800ca14:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4610      	mov	r0, r2
 800ca20:	f7fe fa5c 	bl	800aedc <move_window>
 800ca24:	4603      	mov	r3, r0
 800ca26:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d138      	bne.n	800caa0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca32:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	330b      	adds	r3, #11
 800ca38:	781a      	ldrb	r2, [r3, #0]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	330b      	adds	r3, #11
 800ca3e:	f042 0220 	orr.w	r2, r2, #32
 800ca42:	b2d2      	uxtb	r2, r2
 800ca44:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6818      	ldr	r0, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	68f9      	ldr	r1, [r7, #12]
 800ca52:	f7fe ff69 	bl	800b928 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f103 021c 	add.w	r2, r3, #28
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	4619      	mov	r1, r3
 800ca62:	4610      	mov	r0, r2
 800ca64:	f7fd ffe0 	bl	800aa28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3316      	adds	r3, #22
 800ca6c:	6939      	ldr	r1, [r7, #16]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fd ffda 	bl	800aa28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3312      	adds	r3, #18
 800ca78:	2100      	movs	r1, #0
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fd ffb9 	bl	800a9f2 <st_word>
					fs->wflag = 1;
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2201      	movs	r2, #1
 800ca84:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe fa55 	bl	800af38 <sync_fs>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	7d1b      	ldrb	r3, [r3, #20]
 800ca96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff ff7b 	bl	800c9ae <f_sync>
 800cab8:	4603      	mov	r3, r0
 800caba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d118      	bne.n	800caf4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f107 0208 	add.w	r2, r7, #8
 800cac8:	4611      	mov	r1, r2
 800caca:	4618      	mov	r0, r3
 800cacc:	f7ff fbc0 	bl	800c250 <validate>
 800cad0:	4603      	mov	r3, r0
 800cad2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10c      	bne.n	800caf4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe f958 	bl	800ad94 <dec_lock>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d102      	bne.n	800caf4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b087      	sub	sp, #28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb16:	4b1f      	ldr	r3, [pc, #124]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb18:	7a5b      	ldrb	r3, [r3, #9]
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d131      	bne.n	800cb84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb20:	4b1c      	ldr	r3, [pc, #112]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb22:	7a5b      	ldrb	r3, [r3, #9]
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	461a      	mov	r2, r3
 800cb28:	4b1a      	ldr	r3, [pc, #104]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb2e:	4b19      	ldr	r3, [pc, #100]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb30:	7a5b      	ldrb	r3, [r3, #9]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	4a17      	ldr	r2, [pc, #92]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb3e:	4b15      	ldr	r3, [pc, #84]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb40:	7a5b      	ldrb	r3, [r3, #9]
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	461a      	mov	r2, r3
 800cb46:	4b13      	ldr	r3, [pc, #76]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb48:	4413      	add	r3, r2
 800cb4a:	79fa      	ldrb	r2, [r7, #7]
 800cb4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb4e:	4b11      	ldr	r3, [pc, #68]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb50:	7a5b      	ldrb	r3, [r3, #9]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	b2d1      	uxtb	r1, r2
 800cb58:	4a0e      	ldr	r2, [pc, #56]	; (800cb94 <FATFS_LinkDriverEx+0x94>)
 800cb5a:	7251      	strb	r1, [r2, #9]
 800cb5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb5e:	7dbb      	ldrb	r3, [r7, #22]
 800cb60:	3330      	adds	r3, #48	; 0x30
 800cb62:	b2da      	uxtb	r2, r3
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	223a      	movs	r2, #58	; 0x3a
 800cb6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	3302      	adds	r3, #2
 800cb74:	222f      	movs	r2, #47	; 0x2f
 800cb76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	3303      	adds	r3, #3
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	2000068c 	.word	0x2000068c

0800cb98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cba2:	2200      	movs	r2, #0
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff ffaa 	bl	800cb00 <FATFS_LinkDriverEx>
 800cbac:	4603      	mov	r3, r0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <__errno>:
 800cbb8:	4b01      	ldr	r3, [pc, #4]	; (800cbc0 <__errno+0x8>)
 800cbba:	6818      	ldr	r0, [r3, #0]
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	2000000c 	.word	0x2000000c

0800cbc4 <__libc_init_array>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	4d0d      	ldr	r5, [pc, #52]	; (800cbfc <__libc_init_array+0x38>)
 800cbc8:	2600      	movs	r6, #0
 800cbca:	4c0d      	ldr	r4, [pc, #52]	; (800cc00 <__libc_init_array+0x3c>)
 800cbcc:	1b64      	subs	r4, r4, r5
 800cbce:	10a4      	asrs	r4, r4, #2
 800cbd0:	42a6      	cmp	r6, r4
 800cbd2:	d109      	bne.n	800cbe8 <__libc_init_array+0x24>
 800cbd4:	4d0b      	ldr	r5, [pc, #44]	; (800cc04 <__libc_init_array+0x40>)
 800cbd6:	2600      	movs	r6, #0
 800cbd8:	4c0b      	ldr	r4, [pc, #44]	; (800cc08 <__libc_init_array+0x44>)
 800cbda:	f000 fc9d 	bl	800d518 <_init>
 800cbde:	1b64      	subs	r4, r4, r5
 800cbe0:	10a4      	asrs	r4, r4, #2
 800cbe2:	42a6      	cmp	r6, r4
 800cbe4:	d105      	bne.n	800cbf2 <__libc_init_array+0x2e>
 800cbe6:	bd70      	pop	{r4, r5, r6, pc}
 800cbe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbec:	3601      	adds	r6, #1
 800cbee:	4798      	blx	r3
 800cbf0:	e7ee      	b.n	800cbd0 <__libc_init_array+0xc>
 800cbf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbf6:	3601      	adds	r6, #1
 800cbf8:	4798      	blx	r3
 800cbfa:	e7f2      	b.n	800cbe2 <__libc_init_array+0x1e>
 800cbfc:	0800d7a4 	.word	0x0800d7a4
 800cc00:	0800d7a4 	.word	0x0800d7a4
 800cc04:	0800d7a4 	.word	0x0800d7a4
 800cc08:	0800d7a8 	.word	0x0800d7a8

0800cc0c <memset>:
 800cc0c:	4402      	add	r2, r0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d100      	bne.n	800cc16 <memset+0xa>
 800cc14:	4770      	bx	lr
 800cc16:	f803 1b01 	strb.w	r1, [r3], #1
 800cc1a:	e7f9      	b.n	800cc10 <memset+0x4>

0800cc1c <siprintf>:
 800cc1c:	b40e      	push	{r1, r2, r3}
 800cc1e:	b500      	push	{lr}
 800cc20:	b09c      	sub	sp, #112	; 0x70
 800cc22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc26:	ab1d      	add	r3, sp, #116	; 0x74
 800cc28:	9002      	str	r0, [sp, #8]
 800cc2a:	9006      	str	r0, [sp, #24]
 800cc2c:	9107      	str	r1, [sp, #28]
 800cc2e:	9104      	str	r1, [sp, #16]
 800cc30:	4808      	ldr	r0, [pc, #32]	; (800cc54 <siprintf+0x38>)
 800cc32:	4909      	ldr	r1, [pc, #36]	; (800cc58 <siprintf+0x3c>)
 800cc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc38:	9105      	str	r1, [sp, #20]
 800cc3a:	a902      	add	r1, sp, #8
 800cc3c:	6800      	ldr	r0, [r0, #0]
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	f000 f868 	bl	800cd14 <_svfiprintf_r>
 800cc44:	9b02      	ldr	r3, [sp, #8]
 800cc46:	2200      	movs	r2, #0
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	b01c      	add	sp, #112	; 0x70
 800cc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc50:	b003      	add	sp, #12
 800cc52:	4770      	bx	lr
 800cc54:	2000000c 	.word	0x2000000c
 800cc58:	ffff0208 	.word	0xffff0208

0800cc5c <__ssputs_r>:
 800cc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc60:	688e      	ldr	r6, [r1, #8]
 800cc62:	4682      	mov	sl, r0
 800cc64:	460c      	mov	r4, r1
 800cc66:	4690      	mov	r8, r2
 800cc68:	429e      	cmp	r6, r3
 800cc6a:	461f      	mov	r7, r3
 800cc6c:	d838      	bhi.n	800cce0 <__ssputs_r+0x84>
 800cc6e:	898a      	ldrh	r2, [r1, #12]
 800cc70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc74:	d032      	beq.n	800ccdc <__ssputs_r+0x80>
 800cc76:	6825      	ldr	r5, [r4, #0]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	6909      	ldr	r1, [r1, #16]
 800cc7c:	eba5 0901 	sub.w	r9, r5, r1
 800cc80:	6965      	ldr	r5, [r4, #20]
 800cc82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc86:	444b      	add	r3, r9
 800cc88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc8c:	106d      	asrs	r5, r5, #1
 800cc8e:	429d      	cmp	r5, r3
 800cc90:	bf38      	it	cc
 800cc92:	461d      	movcc	r5, r3
 800cc94:	0553      	lsls	r3, r2, #21
 800cc96:	d531      	bpl.n	800ccfc <__ssputs_r+0xa0>
 800cc98:	4629      	mov	r1, r5
 800cc9a:	f000 fb73 	bl	800d384 <_malloc_r>
 800cc9e:	4606      	mov	r6, r0
 800cca0:	b950      	cbnz	r0, 800ccb8 <__ssputs_r+0x5c>
 800cca2:	230c      	movs	r3, #12
 800cca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cca8:	f8ca 3000 	str.w	r3, [sl]
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb2:	81a3      	strh	r3, [r4, #12]
 800ccb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb8:	464a      	mov	r2, r9
 800ccba:	6921      	ldr	r1, [r4, #16]
 800ccbc:	f000 face 	bl	800d25c <memcpy>
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccca:	81a3      	strh	r3, [r4, #12]
 800cccc:	6126      	str	r6, [r4, #16]
 800ccce:	444e      	add	r6, r9
 800ccd0:	6165      	str	r5, [r4, #20]
 800ccd2:	eba5 0509 	sub.w	r5, r5, r9
 800ccd6:	6026      	str	r6, [r4, #0]
 800ccd8:	463e      	mov	r6, r7
 800ccda:	60a5      	str	r5, [r4, #8]
 800ccdc:	42be      	cmp	r6, r7
 800ccde:	d900      	bls.n	800cce2 <__ssputs_r+0x86>
 800cce0:	463e      	mov	r6, r7
 800cce2:	4632      	mov	r2, r6
 800cce4:	4641      	mov	r1, r8
 800cce6:	6820      	ldr	r0, [r4, #0]
 800cce8:	f000 fac5 	bl	800d276 <memmove>
 800ccec:	68a3      	ldr	r3, [r4, #8]
 800ccee:	2000      	movs	r0, #0
 800ccf0:	1b9b      	subs	r3, r3, r6
 800ccf2:	60a3      	str	r3, [r4, #8]
 800ccf4:	6823      	ldr	r3, [r4, #0]
 800ccf6:	4433      	add	r3, r6
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	e7db      	b.n	800ccb4 <__ssputs_r+0x58>
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	f000 fbb5 	bl	800d46c <_realloc_r>
 800cd02:	4606      	mov	r6, r0
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d1e1      	bne.n	800cccc <__ssputs_r+0x70>
 800cd08:	6921      	ldr	r1, [r4, #16]
 800cd0a:	4650      	mov	r0, sl
 800cd0c:	f000 face 	bl	800d2ac <_free_r>
 800cd10:	e7c7      	b.n	800cca2 <__ssputs_r+0x46>
	...

0800cd14 <_svfiprintf_r>:
 800cd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd18:	4698      	mov	r8, r3
 800cd1a:	898b      	ldrh	r3, [r1, #12]
 800cd1c:	b09d      	sub	sp, #116	; 0x74
 800cd1e:	4607      	mov	r7, r0
 800cd20:	061b      	lsls	r3, r3, #24
 800cd22:	460d      	mov	r5, r1
 800cd24:	4614      	mov	r4, r2
 800cd26:	d50e      	bpl.n	800cd46 <_svfiprintf_r+0x32>
 800cd28:	690b      	ldr	r3, [r1, #16]
 800cd2a:	b963      	cbnz	r3, 800cd46 <_svfiprintf_r+0x32>
 800cd2c:	2140      	movs	r1, #64	; 0x40
 800cd2e:	f000 fb29 	bl	800d384 <_malloc_r>
 800cd32:	6028      	str	r0, [r5, #0]
 800cd34:	6128      	str	r0, [r5, #16]
 800cd36:	b920      	cbnz	r0, 800cd42 <_svfiprintf_r+0x2e>
 800cd38:	230c      	movs	r3, #12
 800cd3a:	603b      	str	r3, [r7, #0]
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd40:	e0d1      	b.n	800cee6 <_svfiprintf_r+0x1d2>
 800cd42:	2340      	movs	r3, #64	; 0x40
 800cd44:	616b      	str	r3, [r5, #20]
 800cd46:	2300      	movs	r3, #0
 800cd48:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd4c:	f04f 0901 	mov.w	r9, #1
 800cd50:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800cf00 <_svfiprintf_r+0x1ec>
 800cd54:	9309      	str	r3, [sp, #36]	; 0x24
 800cd56:	2320      	movs	r3, #32
 800cd58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd5c:	2330      	movs	r3, #48	; 0x30
 800cd5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd62:	4623      	mov	r3, r4
 800cd64:	469a      	mov	sl, r3
 800cd66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd6a:	b10a      	cbz	r2, 800cd70 <_svfiprintf_r+0x5c>
 800cd6c:	2a25      	cmp	r2, #37	; 0x25
 800cd6e:	d1f9      	bne.n	800cd64 <_svfiprintf_r+0x50>
 800cd70:	ebba 0b04 	subs.w	fp, sl, r4
 800cd74:	d00b      	beq.n	800cd8e <_svfiprintf_r+0x7a>
 800cd76:	465b      	mov	r3, fp
 800cd78:	4622      	mov	r2, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	f7ff ff6d 	bl	800cc5c <__ssputs_r>
 800cd82:	3001      	adds	r0, #1
 800cd84:	f000 80aa 	beq.w	800cedc <_svfiprintf_r+0x1c8>
 800cd88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd8a:	445a      	add	r2, fp
 800cd8c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd8e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 80a2 	beq.w	800cedc <_svfiprintf_r+0x1c8>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd9e:	f10a 0a01 	add.w	sl, sl, #1
 800cda2:	9304      	str	r3, [sp, #16]
 800cda4:	9307      	str	r3, [sp, #28]
 800cda6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdaa:	931a      	str	r3, [sp, #104]	; 0x68
 800cdac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdb0:	4654      	mov	r4, sl
 800cdb2:	2205      	movs	r2, #5
 800cdb4:	4852      	ldr	r0, [pc, #328]	; (800cf00 <_svfiprintf_r+0x1ec>)
 800cdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdba:	f000 fa41 	bl	800d240 <memchr>
 800cdbe:	9a04      	ldr	r2, [sp, #16]
 800cdc0:	b9d8      	cbnz	r0, 800cdfa <_svfiprintf_r+0xe6>
 800cdc2:	06d0      	lsls	r0, r2, #27
 800cdc4:	bf44      	itt	mi
 800cdc6:	2320      	movmi	r3, #32
 800cdc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdcc:	0711      	lsls	r1, r2, #28
 800cdce:	bf44      	itt	mi
 800cdd0:	232b      	movmi	r3, #43	; 0x2b
 800cdd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdda:	2b2a      	cmp	r3, #42	; 0x2a
 800cddc:	d015      	beq.n	800ce0a <_svfiprintf_r+0xf6>
 800cdde:	9a07      	ldr	r2, [sp, #28]
 800cde0:	4654      	mov	r4, sl
 800cde2:	2000      	movs	r0, #0
 800cde4:	f04f 0c0a 	mov.w	ip, #10
 800cde8:	4621      	mov	r1, r4
 800cdea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdee:	3b30      	subs	r3, #48	; 0x30
 800cdf0:	2b09      	cmp	r3, #9
 800cdf2:	d94e      	bls.n	800ce92 <_svfiprintf_r+0x17e>
 800cdf4:	b1b0      	cbz	r0, 800ce24 <_svfiprintf_r+0x110>
 800cdf6:	9207      	str	r2, [sp, #28]
 800cdf8:	e014      	b.n	800ce24 <_svfiprintf_r+0x110>
 800cdfa:	eba0 0308 	sub.w	r3, r0, r8
 800cdfe:	46a2      	mov	sl, r4
 800ce00:	fa09 f303 	lsl.w	r3, r9, r3
 800ce04:	4313      	orrs	r3, r2
 800ce06:	9304      	str	r3, [sp, #16]
 800ce08:	e7d2      	b.n	800cdb0 <_svfiprintf_r+0x9c>
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	1d19      	adds	r1, r3, #4
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	9103      	str	r1, [sp, #12]
 800ce14:	bfbb      	ittet	lt
 800ce16:	425b      	neglt	r3, r3
 800ce18:	f042 0202 	orrlt.w	r2, r2, #2
 800ce1c:	9307      	strge	r3, [sp, #28]
 800ce1e:	9307      	strlt	r3, [sp, #28]
 800ce20:	bfb8      	it	lt
 800ce22:	9204      	strlt	r2, [sp, #16]
 800ce24:	7823      	ldrb	r3, [r4, #0]
 800ce26:	2b2e      	cmp	r3, #46	; 0x2e
 800ce28:	d10c      	bne.n	800ce44 <_svfiprintf_r+0x130>
 800ce2a:	7863      	ldrb	r3, [r4, #1]
 800ce2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2e:	d135      	bne.n	800ce9c <_svfiprintf_r+0x188>
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	3402      	adds	r4, #2
 800ce34:	1d1a      	adds	r2, r3, #4
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	9203      	str	r2, [sp, #12]
 800ce3c:	bfb8      	it	lt
 800ce3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce42:	9305      	str	r3, [sp, #20]
 800ce44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf10 <_svfiprintf_r+0x1fc>
 800ce48:	2203      	movs	r2, #3
 800ce4a:	7821      	ldrb	r1, [r4, #0]
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	f000 f9f7 	bl	800d240 <memchr>
 800ce52:	b140      	cbz	r0, 800ce66 <_svfiprintf_r+0x152>
 800ce54:	2340      	movs	r3, #64	; 0x40
 800ce56:	eba0 000a 	sub.w	r0, r0, sl
 800ce5a:	3401      	adds	r4, #1
 800ce5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ce60:	9b04      	ldr	r3, [sp, #16]
 800ce62:	4303      	orrs	r3, r0
 800ce64:	9304      	str	r3, [sp, #16]
 800ce66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6a:	2206      	movs	r2, #6
 800ce6c:	4825      	ldr	r0, [pc, #148]	; (800cf04 <_svfiprintf_r+0x1f0>)
 800ce6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce72:	f000 f9e5 	bl	800d240 <memchr>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d038      	beq.n	800ceec <_svfiprintf_r+0x1d8>
 800ce7a:	4b23      	ldr	r3, [pc, #140]	; (800cf08 <_svfiprintf_r+0x1f4>)
 800ce7c:	bb1b      	cbnz	r3, 800cec6 <_svfiprintf_r+0x1b2>
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	3307      	adds	r3, #7
 800ce82:	f023 0307 	bic.w	r3, r3, #7
 800ce86:	3308      	adds	r3, #8
 800ce88:	9303      	str	r3, [sp, #12]
 800ce8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce8c:	4433      	add	r3, r6
 800ce8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce90:	e767      	b.n	800cd62 <_svfiprintf_r+0x4e>
 800ce92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce96:	460c      	mov	r4, r1
 800ce98:	2001      	movs	r0, #1
 800ce9a:	e7a5      	b.n	800cde8 <_svfiprintf_r+0xd4>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	3401      	adds	r4, #1
 800cea0:	f04f 0c0a 	mov.w	ip, #10
 800cea4:	4619      	mov	r1, r3
 800cea6:	9305      	str	r3, [sp, #20]
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceae:	3a30      	subs	r2, #48	; 0x30
 800ceb0:	2a09      	cmp	r2, #9
 800ceb2:	d903      	bls.n	800cebc <_svfiprintf_r+0x1a8>
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d0c5      	beq.n	800ce44 <_svfiprintf_r+0x130>
 800ceb8:	9105      	str	r1, [sp, #20]
 800ceba:	e7c3      	b.n	800ce44 <_svfiprintf_r+0x130>
 800cebc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cec0:	4604      	mov	r4, r0
 800cec2:	2301      	movs	r3, #1
 800cec4:	e7f0      	b.n	800cea8 <_svfiprintf_r+0x194>
 800cec6:	ab03      	add	r3, sp, #12
 800cec8:	462a      	mov	r2, r5
 800ceca:	a904      	add	r1, sp, #16
 800cecc:	4638      	mov	r0, r7
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	4b0e      	ldr	r3, [pc, #56]	; (800cf0c <_svfiprintf_r+0x1f8>)
 800ced2:	e000      	b.n	800ced6 <_svfiprintf_r+0x1c2>
 800ced4:	bf00      	nop
 800ced6:	1c42      	adds	r2, r0, #1
 800ced8:	4606      	mov	r6, r0
 800ceda:	d1d6      	bne.n	800ce8a <_svfiprintf_r+0x176>
 800cedc:	89ab      	ldrh	r3, [r5, #12]
 800cede:	065b      	lsls	r3, r3, #25
 800cee0:	f53f af2c 	bmi.w	800cd3c <_svfiprintf_r+0x28>
 800cee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cee6:	b01d      	add	sp, #116	; 0x74
 800cee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceec:	ab03      	add	r3, sp, #12
 800ceee:	462a      	mov	r2, r5
 800cef0:	a904      	add	r1, sp, #16
 800cef2:	4638      	mov	r0, r7
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	4b05      	ldr	r3, [pc, #20]	; (800cf0c <_svfiprintf_r+0x1f8>)
 800cef8:	f000 f87c 	bl	800cff4 <_printf_i>
 800cefc:	e7eb      	b.n	800ced6 <_svfiprintf_r+0x1c2>
 800cefe:	bf00      	nop
 800cf00:	0800d768 	.word	0x0800d768
 800cf04:	0800d772 	.word	0x0800d772
 800cf08:	00000000 	.word	0x00000000
 800cf0c:	0800cc5d 	.word	0x0800cc5d
 800cf10:	0800d76e 	.word	0x0800d76e

0800cf14 <_printf_common>:
 800cf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf18:	4616      	mov	r6, r2
 800cf1a:	4699      	mov	r9, r3
 800cf1c:	688a      	ldr	r2, [r1, #8]
 800cf1e:	4607      	mov	r7, r0
 800cf20:	690b      	ldr	r3, [r1, #16]
 800cf22:	460c      	mov	r4, r1
 800cf24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	bfb8      	it	lt
 800cf2c:	4613      	movlt	r3, r2
 800cf2e:	6033      	str	r3, [r6, #0]
 800cf30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf34:	b10a      	cbz	r2, 800cf3a <_printf_common+0x26>
 800cf36:	3301      	adds	r3, #1
 800cf38:	6033      	str	r3, [r6, #0]
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	0699      	lsls	r1, r3, #26
 800cf3e:	bf42      	ittt	mi
 800cf40:	6833      	ldrmi	r3, [r6, #0]
 800cf42:	3302      	addmi	r3, #2
 800cf44:	6033      	strmi	r3, [r6, #0]
 800cf46:	6825      	ldr	r5, [r4, #0]
 800cf48:	f015 0506 	ands.w	r5, r5, #6
 800cf4c:	d106      	bne.n	800cf5c <_printf_common+0x48>
 800cf4e:	f104 0a19 	add.w	sl, r4, #25
 800cf52:	68e3      	ldr	r3, [r4, #12]
 800cf54:	6832      	ldr	r2, [r6, #0]
 800cf56:	1a9b      	subs	r3, r3, r2
 800cf58:	42ab      	cmp	r3, r5
 800cf5a:	dc29      	bgt.n	800cfb0 <_printf_common+0x9c>
 800cf5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf60:	1e13      	subs	r3, r2, #0
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	bf18      	it	ne
 800cf66:	2301      	movne	r3, #1
 800cf68:	0692      	lsls	r2, r2, #26
 800cf6a:	d42e      	bmi.n	800cfca <_printf_common+0xb6>
 800cf6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf70:	4649      	mov	r1, r9
 800cf72:	4638      	mov	r0, r7
 800cf74:	47c0      	blx	r8
 800cf76:	3001      	adds	r0, #1
 800cf78:	d021      	beq.n	800cfbe <_printf_common+0xaa>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	341a      	adds	r4, #26
 800cf7e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800cf82:	f003 0306 	and.w	r3, r3, #6
 800cf86:	6832      	ldr	r2, [r6, #0]
 800cf88:	2600      	movs	r6, #0
 800cf8a:	2b04      	cmp	r3, #4
 800cf8c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cf90:	bf08      	it	eq
 800cf92:	1aad      	subeq	r5, r5, r2
 800cf94:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800cf98:	bf14      	ite	ne
 800cf9a:	2500      	movne	r5, #0
 800cf9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	bfc4      	itt	gt
 800cfa4:	1a9b      	subgt	r3, r3, r2
 800cfa6:	18ed      	addgt	r5, r5, r3
 800cfa8:	42b5      	cmp	r5, r6
 800cfaa:	d11a      	bne.n	800cfe2 <_printf_common+0xce>
 800cfac:	2000      	movs	r0, #0
 800cfae:	e008      	b.n	800cfc2 <_printf_common+0xae>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4652      	mov	r2, sl
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	47c0      	blx	r8
 800cfba:	3001      	adds	r0, #1
 800cfbc:	d103      	bne.n	800cfc6 <_printf_common+0xb2>
 800cfbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc6:	3501      	adds	r5, #1
 800cfc8:	e7c3      	b.n	800cf52 <_printf_common+0x3e>
 800cfca:	18e1      	adds	r1, r4, r3
 800cfcc:	1c5a      	adds	r2, r3, #1
 800cfce:	2030      	movs	r0, #48	; 0x30
 800cfd0:	3302      	adds	r3, #2
 800cfd2:	4422      	add	r2, r4
 800cfd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfe0:	e7c4      	b.n	800cf6c <_printf_common+0x58>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	4649      	mov	r1, r9
 800cfe8:	4638      	mov	r0, r7
 800cfea:	47c0      	blx	r8
 800cfec:	3001      	adds	r0, #1
 800cfee:	d0e6      	beq.n	800cfbe <_printf_common+0xaa>
 800cff0:	3601      	adds	r6, #1
 800cff2:	e7d9      	b.n	800cfa8 <_printf_common+0x94>

0800cff4 <_printf_i>:
 800cff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cff8:	7e0f      	ldrb	r7, [r1, #24]
 800cffa:	4691      	mov	r9, r2
 800cffc:	4680      	mov	r8, r0
 800cffe:	460c      	mov	r4, r1
 800d000:	2f78      	cmp	r7, #120	; 0x78
 800d002:	469a      	mov	sl, r3
 800d004:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d00a:	d807      	bhi.n	800d01c <_printf_i+0x28>
 800d00c:	2f62      	cmp	r7, #98	; 0x62
 800d00e:	d80a      	bhi.n	800d026 <_printf_i+0x32>
 800d010:	2f00      	cmp	r7, #0
 800d012:	f000 80d8 	beq.w	800d1c6 <_printf_i+0x1d2>
 800d016:	2f58      	cmp	r7, #88	; 0x58
 800d018:	f000 80a3 	beq.w	800d162 <_printf_i+0x16e>
 800d01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d024:	e03a      	b.n	800d09c <_printf_i+0xa8>
 800d026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d02a:	2b15      	cmp	r3, #21
 800d02c:	d8f6      	bhi.n	800d01c <_printf_i+0x28>
 800d02e:	a101      	add	r1, pc, #4	; (adr r1, 800d034 <_printf_i+0x40>)
 800d030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d034:	0800d08d 	.word	0x0800d08d
 800d038:	0800d0a1 	.word	0x0800d0a1
 800d03c:	0800d01d 	.word	0x0800d01d
 800d040:	0800d01d 	.word	0x0800d01d
 800d044:	0800d01d 	.word	0x0800d01d
 800d048:	0800d01d 	.word	0x0800d01d
 800d04c:	0800d0a1 	.word	0x0800d0a1
 800d050:	0800d01d 	.word	0x0800d01d
 800d054:	0800d01d 	.word	0x0800d01d
 800d058:	0800d01d 	.word	0x0800d01d
 800d05c:	0800d01d 	.word	0x0800d01d
 800d060:	0800d1ad 	.word	0x0800d1ad
 800d064:	0800d0d1 	.word	0x0800d0d1
 800d068:	0800d18f 	.word	0x0800d18f
 800d06c:	0800d01d 	.word	0x0800d01d
 800d070:	0800d01d 	.word	0x0800d01d
 800d074:	0800d1cf 	.word	0x0800d1cf
 800d078:	0800d01d 	.word	0x0800d01d
 800d07c:	0800d0d1 	.word	0x0800d0d1
 800d080:	0800d01d 	.word	0x0800d01d
 800d084:	0800d01d 	.word	0x0800d01d
 800d088:	0800d197 	.word	0x0800d197
 800d08c:	682b      	ldr	r3, [r5, #0]
 800d08e:	1d1a      	adds	r2, r3, #4
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	602a      	str	r2, [r5, #0]
 800d094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d09c:	2301      	movs	r3, #1
 800d09e:	e0a3      	b.n	800d1e8 <_printf_i+0x1f4>
 800d0a0:	6820      	ldr	r0, [r4, #0]
 800d0a2:	6829      	ldr	r1, [r5, #0]
 800d0a4:	0606      	lsls	r6, r0, #24
 800d0a6:	f101 0304 	add.w	r3, r1, #4
 800d0aa:	d50a      	bpl.n	800d0c2 <_printf_i+0xce>
 800d0ac:	680e      	ldr	r6, [r1, #0]
 800d0ae:	602b      	str	r3, [r5, #0]
 800d0b0:	2e00      	cmp	r6, #0
 800d0b2:	da03      	bge.n	800d0bc <_printf_i+0xc8>
 800d0b4:	232d      	movs	r3, #45	; 0x2d
 800d0b6:	4276      	negs	r6, r6
 800d0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0bc:	485e      	ldr	r0, [pc, #376]	; (800d238 <_printf_i+0x244>)
 800d0be:	230a      	movs	r3, #10
 800d0c0:	e019      	b.n	800d0f6 <_printf_i+0x102>
 800d0c2:	680e      	ldr	r6, [r1, #0]
 800d0c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	bf18      	it	ne
 800d0cc:	b236      	sxthne	r6, r6
 800d0ce:	e7ef      	b.n	800d0b0 <_printf_i+0xbc>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	6820      	ldr	r0, [r4, #0]
 800d0d4:	1d19      	adds	r1, r3, #4
 800d0d6:	6029      	str	r1, [r5, #0]
 800d0d8:	0601      	lsls	r1, r0, #24
 800d0da:	d501      	bpl.n	800d0e0 <_printf_i+0xec>
 800d0dc:	681e      	ldr	r6, [r3, #0]
 800d0de:	e002      	b.n	800d0e6 <_printf_i+0xf2>
 800d0e0:	0646      	lsls	r6, r0, #25
 800d0e2:	d5fb      	bpl.n	800d0dc <_printf_i+0xe8>
 800d0e4:	881e      	ldrh	r6, [r3, #0]
 800d0e6:	2f6f      	cmp	r7, #111	; 0x6f
 800d0e8:	4853      	ldr	r0, [pc, #332]	; (800d238 <_printf_i+0x244>)
 800d0ea:	bf0c      	ite	eq
 800d0ec:	2308      	moveq	r3, #8
 800d0ee:	230a      	movne	r3, #10
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0f6:	6865      	ldr	r5, [r4, #4]
 800d0f8:	2d00      	cmp	r5, #0
 800d0fa:	60a5      	str	r5, [r4, #8]
 800d0fc:	bfa2      	ittt	ge
 800d0fe:	6821      	ldrge	r1, [r4, #0]
 800d100:	f021 0104 	bicge.w	r1, r1, #4
 800d104:	6021      	strge	r1, [r4, #0]
 800d106:	b90e      	cbnz	r6, 800d10c <_printf_i+0x118>
 800d108:	2d00      	cmp	r5, #0
 800d10a:	d04d      	beq.n	800d1a8 <_printf_i+0x1b4>
 800d10c:	4615      	mov	r5, r2
 800d10e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d112:	fb03 6711 	mls	r7, r3, r1, r6
 800d116:	5dc7      	ldrb	r7, [r0, r7]
 800d118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d11c:	4637      	mov	r7, r6
 800d11e:	460e      	mov	r6, r1
 800d120:	42bb      	cmp	r3, r7
 800d122:	d9f4      	bls.n	800d10e <_printf_i+0x11a>
 800d124:	2b08      	cmp	r3, #8
 800d126:	d10b      	bne.n	800d140 <_printf_i+0x14c>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	07de      	lsls	r6, r3, #31
 800d12c:	d508      	bpl.n	800d140 <_printf_i+0x14c>
 800d12e:	6923      	ldr	r3, [r4, #16]
 800d130:	6861      	ldr	r1, [r4, #4]
 800d132:	4299      	cmp	r1, r3
 800d134:	bfde      	ittt	le
 800d136:	2330      	movle	r3, #48	; 0x30
 800d138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d13c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d140:	1b52      	subs	r2, r2, r5
 800d142:	6122      	str	r2, [r4, #16]
 800d144:	464b      	mov	r3, r9
 800d146:	aa03      	add	r2, sp, #12
 800d148:	4621      	mov	r1, r4
 800d14a:	4640      	mov	r0, r8
 800d14c:	f8cd a000 	str.w	sl, [sp]
 800d150:	f7ff fee0 	bl	800cf14 <_printf_common>
 800d154:	3001      	adds	r0, #1
 800d156:	d14c      	bne.n	800d1f2 <_printf_i+0x1fe>
 800d158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d15c:	b004      	add	sp, #16
 800d15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d162:	4835      	ldr	r0, [pc, #212]	; (800d238 <_printf_i+0x244>)
 800d164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d168:	6829      	ldr	r1, [r5, #0]
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d170:	6029      	str	r1, [r5, #0]
 800d172:	061d      	lsls	r5, r3, #24
 800d174:	d514      	bpl.n	800d1a0 <_printf_i+0x1ac>
 800d176:	07df      	lsls	r7, r3, #31
 800d178:	bf44      	itt	mi
 800d17a:	f043 0320 	orrmi.w	r3, r3, #32
 800d17e:	6023      	strmi	r3, [r4, #0]
 800d180:	b91e      	cbnz	r6, 800d18a <_printf_i+0x196>
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	f023 0320 	bic.w	r3, r3, #32
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	2310      	movs	r3, #16
 800d18c:	e7b0      	b.n	800d0f0 <_printf_i+0xfc>
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	f043 0320 	orr.w	r3, r3, #32
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	2378      	movs	r3, #120	; 0x78
 800d198:	4828      	ldr	r0, [pc, #160]	; (800d23c <_printf_i+0x248>)
 800d19a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d19e:	e7e3      	b.n	800d168 <_printf_i+0x174>
 800d1a0:	0659      	lsls	r1, r3, #25
 800d1a2:	bf48      	it	mi
 800d1a4:	b2b6      	uxthmi	r6, r6
 800d1a6:	e7e6      	b.n	800d176 <_printf_i+0x182>
 800d1a8:	4615      	mov	r5, r2
 800d1aa:	e7bb      	b.n	800d124 <_printf_i+0x130>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	6826      	ldr	r6, [r4, #0]
 800d1b0:	1d18      	adds	r0, r3, #4
 800d1b2:	6961      	ldr	r1, [r4, #20]
 800d1b4:	6028      	str	r0, [r5, #0]
 800d1b6:	0635      	lsls	r5, r6, #24
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	d501      	bpl.n	800d1c0 <_printf_i+0x1cc>
 800d1bc:	6019      	str	r1, [r3, #0]
 800d1be:	e002      	b.n	800d1c6 <_printf_i+0x1d2>
 800d1c0:	0670      	lsls	r0, r6, #25
 800d1c2:	d5fb      	bpl.n	800d1bc <_printf_i+0x1c8>
 800d1c4:	8019      	strh	r1, [r3, #0]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4615      	mov	r5, r2
 800d1ca:	6123      	str	r3, [r4, #16]
 800d1cc:	e7ba      	b.n	800d144 <_printf_i+0x150>
 800d1ce:	682b      	ldr	r3, [r5, #0]
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	1d1a      	adds	r2, r3, #4
 800d1d4:	602a      	str	r2, [r5, #0]
 800d1d6:	681d      	ldr	r5, [r3, #0]
 800d1d8:	6862      	ldr	r2, [r4, #4]
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f000 f830 	bl	800d240 <memchr>
 800d1e0:	b108      	cbz	r0, 800d1e6 <_printf_i+0x1f2>
 800d1e2:	1b40      	subs	r0, r0, r5
 800d1e4:	6060      	str	r0, [r4, #4]
 800d1e6:	6863      	ldr	r3, [r4, #4]
 800d1e8:	6123      	str	r3, [r4, #16]
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1f0:	e7a8      	b.n	800d144 <_printf_i+0x150>
 800d1f2:	6923      	ldr	r3, [r4, #16]
 800d1f4:	462a      	mov	r2, r5
 800d1f6:	4649      	mov	r1, r9
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	47d0      	blx	sl
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d0ab      	beq.n	800d158 <_printf_i+0x164>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	079b      	lsls	r3, r3, #30
 800d204:	d413      	bmi.n	800d22e <_printf_i+0x23a>
 800d206:	68e0      	ldr	r0, [r4, #12]
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	4298      	cmp	r0, r3
 800d20c:	bfb8      	it	lt
 800d20e:	4618      	movlt	r0, r3
 800d210:	e7a4      	b.n	800d15c <_printf_i+0x168>
 800d212:	2301      	movs	r3, #1
 800d214:	4632      	mov	r2, r6
 800d216:	4649      	mov	r1, r9
 800d218:	4640      	mov	r0, r8
 800d21a:	47d0      	blx	sl
 800d21c:	3001      	adds	r0, #1
 800d21e:	d09b      	beq.n	800d158 <_printf_i+0x164>
 800d220:	3501      	adds	r5, #1
 800d222:	68e3      	ldr	r3, [r4, #12]
 800d224:	9903      	ldr	r1, [sp, #12]
 800d226:	1a5b      	subs	r3, r3, r1
 800d228:	42ab      	cmp	r3, r5
 800d22a:	dcf2      	bgt.n	800d212 <_printf_i+0x21e>
 800d22c:	e7eb      	b.n	800d206 <_printf_i+0x212>
 800d22e:	2500      	movs	r5, #0
 800d230:	f104 0619 	add.w	r6, r4, #25
 800d234:	e7f5      	b.n	800d222 <_printf_i+0x22e>
 800d236:	bf00      	nop
 800d238:	0800d779 	.word	0x0800d779
 800d23c:	0800d78a 	.word	0x0800d78a

0800d240 <memchr>:
 800d240:	b2c9      	uxtb	r1, r1
 800d242:	4402      	add	r2, r0
 800d244:	b510      	push	{r4, lr}
 800d246:	4290      	cmp	r0, r2
 800d248:	4603      	mov	r3, r0
 800d24a:	d101      	bne.n	800d250 <memchr+0x10>
 800d24c:	2300      	movs	r3, #0
 800d24e:	e003      	b.n	800d258 <memchr+0x18>
 800d250:	781c      	ldrb	r4, [r3, #0]
 800d252:	3001      	adds	r0, #1
 800d254:	428c      	cmp	r4, r1
 800d256:	d1f6      	bne.n	800d246 <memchr+0x6>
 800d258:	4618      	mov	r0, r3
 800d25a:	bd10      	pop	{r4, pc}

0800d25c <memcpy>:
 800d25c:	440a      	add	r2, r1
 800d25e:	1e43      	subs	r3, r0, #1
 800d260:	4291      	cmp	r1, r2
 800d262:	d100      	bne.n	800d266 <memcpy+0xa>
 800d264:	4770      	bx	lr
 800d266:	b510      	push	{r4, lr}
 800d268:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d26c:	4291      	cmp	r1, r2
 800d26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d272:	d1f9      	bne.n	800d268 <memcpy+0xc>
 800d274:	bd10      	pop	{r4, pc}

0800d276 <memmove>:
 800d276:	4288      	cmp	r0, r1
 800d278:	b510      	push	{r4, lr}
 800d27a:	eb01 0402 	add.w	r4, r1, r2
 800d27e:	d902      	bls.n	800d286 <memmove+0x10>
 800d280:	4284      	cmp	r4, r0
 800d282:	4623      	mov	r3, r4
 800d284:	d807      	bhi.n	800d296 <memmove+0x20>
 800d286:	1e43      	subs	r3, r0, #1
 800d288:	42a1      	cmp	r1, r4
 800d28a:	d008      	beq.n	800d29e <memmove+0x28>
 800d28c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d290:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d294:	e7f8      	b.n	800d288 <memmove+0x12>
 800d296:	4402      	add	r2, r0
 800d298:	4601      	mov	r1, r0
 800d29a:	428a      	cmp	r2, r1
 800d29c:	d100      	bne.n	800d2a0 <memmove+0x2a>
 800d29e:	bd10      	pop	{r4, pc}
 800d2a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2a8:	e7f7      	b.n	800d29a <memmove+0x24>
	...

0800d2ac <_free_r>:
 800d2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2ae:	2900      	cmp	r1, #0
 800d2b0:	d043      	beq.n	800d33a <_free_r+0x8e>
 800d2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2b6:	1f0c      	subs	r4, r1, #4
 800d2b8:	9001      	str	r0, [sp, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	bfb8      	it	lt
 800d2be:	18e4      	addlt	r4, r4, r3
 800d2c0:	f000 f914 	bl	800d4ec <__malloc_lock>
 800d2c4:	4a1e      	ldr	r2, [pc, #120]	; (800d340 <_free_r+0x94>)
 800d2c6:	9801      	ldr	r0, [sp, #4]
 800d2c8:	6813      	ldr	r3, [r2, #0]
 800d2ca:	b933      	cbnz	r3, 800d2da <_free_r+0x2e>
 800d2cc:	6063      	str	r3, [r4, #4]
 800d2ce:	6014      	str	r4, [r2, #0]
 800d2d0:	b003      	add	sp, #12
 800d2d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2d6:	f000 b90f 	b.w	800d4f8 <__malloc_unlock>
 800d2da:	42a3      	cmp	r3, r4
 800d2dc:	d908      	bls.n	800d2f0 <_free_r+0x44>
 800d2de:	6825      	ldr	r5, [r4, #0]
 800d2e0:	1961      	adds	r1, r4, r5
 800d2e2:	428b      	cmp	r3, r1
 800d2e4:	bf01      	itttt	eq
 800d2e6:	6819      	ldreq	r1, [r3, #0]
 800d2e8:	685b      	ldreq	r3, [r3, #4]
 800d2ea:	1949      	addeq	r1, r1, r5
 800d2ec:	6021      	streq	r1, [r4, #0]
 800d2ee:	e7ed      	b.n	800d2cc <_free_r+0x20>
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	b10b      	cbz	r3, 800d2fa <_free_r+0x4e>
 800d2f6:	42a3      	cmp	r3, r4
 800d2f8:	d9fa      	bls.n	800d2f0 <_free_r+0x44>
 800d2fa:	6811      	ldr	r1, [r2, #0]
 800d2fc:	1855      	adds	r5, r2, r1
 800d2fe:	42a5      	cmp	r5, r4
 800d300:	d10b      	bne.n	800d31a <_free_r+0x6e>
 800d302:	6824      	ldr	r4, [r4, #0]
 800d304:	4421      	add	r1, r4
 800d306:	1854      	adds	r4, r2, r1
 800d308:	6011      	str	r1, [r2, #0]
 800d30a:	42a3      	cmp	r3, r4
 800d30c:	d1e0      	bne.n	800d2d0 <_free_r+0x24>
 800d30e:	681c      	ldr	r4, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	4421      	add	r1, r4
 800d314:	6053      	str	r3, [r2, #4]
 800d316:	6011      	str	r1, [r2, #0]
 800d318:	e7da      	b.n	800d2d0 <_free_r+0x24>
 800d31a:	d902      	bls.n	800d322 <_free_r+0x76>
 800d31c:	230c      	movs	r3, #12
 800d31e:	6003      	str	r3, [r0, #0]
 800d320:	e7d6      	b.n	800d2d0 <_free_r+0x24>
 800d322:	6825      	ldr	r5, [r4, #0]
 800d324:	1961      	adds	r1, r4, r5
 800d326:	428b      	cmp	r3, r1
 800d328:	bf02      	ittt	eq
 800d32a:	6819      	ldreq	r1, [r3, #0]
 800d32c:	685b      	ldreq	r3, [r3, #4]
 800d32e:	1949      	addeq	r1, r1, r5
 800d330:	6063      	str	r3, [r4, #4]
 800d332:	bf08      	it	eq
 800d334:	6021      	streq	r1, [r4, #0]
 800d336:	6054      	str	r4, [r2, #4]
 800d338:	e7ca      	b.n	800d2d0 <_free_r+0x24>
 800d33a:	b003      	add	sp, #12
 800d33c:	bd30      	pop	{r4, r5, pc}
 800d33e:	bf00      	nop
 800d340:	20000698 	.word	0x20000698

0800d344 <sbrk_aligned>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	4e0e      	ldr	r6, [pc, #56]	; (800d380 <sbrk_aligned+0x3c>)
 800d348:	460c      	mov	r4, r1
 800d34a:	4605      	mov	r5, r0
 800d34c:	6831      	ldr	r1, [r6, #0]
 800d34e:	b911      	cbnz	r1, 800d356 <sbrk_aligned+0x12>
 800d350:	f000 f8bc 	bl	800d4cc <_sbrk_r>
 800d354:	6030      	str	r0, [r6, #0]
 800d356:	4621      	mov	r1, r4
 800d358:	4628      	mov	r0, r5
 800d35a:	f000 f8b7 	bl	800d4cc <_sbrk_r>
 800d35e:	1c43      	adds	r3, r0, #1
 800d360:	d00a      	beq.n	800d378 <sbrk_aligned+0x34>
 800d362:	1cc4      	adds	r4, r0, #3
 800d364:	f024 0403 	bic.w	r4, r4, #3
 800d368:	42a0      	cmp	r0, r4
 800d36a:	d007      	beq.n	800d37c <sbrk_aligned+0x38>
 800d36c:	1a21      	subs	r1, r4, r0
 800d36e:	4628      	mov	r0, r5
 800d370:	f000 f8ac 	bl	800d4cc <_sbrk_r>
 800d374:	3001      	adds	r0, #1
 800d376:	d101      	bne.n	800d37c <sbrk_aligned+0x38>
 800d378:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d37c:	4620      	mov	r0, r4
 800d37e:	bd70      	pop	{r4, r5, r6, pc}
 800d380:	2000069c 	.word	0x2000069c

0800d384 <_malloc_r>:
 800d384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d388:	1ccd      	adds	r5, r1, #3
 800d38a:	4607      	mov	r7, r0
 800d38c:	f025 0503 	bic.w	r5, r5, #3
 800d390:	3508      	adds	r5, #8
 800d392:	2d0c      	cmp	r5, #12
 800d394:	bf38      	it	cc
 800d396:	250c      	movcc	r5, #12
 800d398:	2d00      	cmp	r5, #0
 800d39a:	db01      	blt.n	800d3a0 <_malloc_r+0x1c>
 800d39c:	42a9      	cmp	r1, r5
 800d39e:	d905      	bls.n	800d3ac <_malloc_r+0x28>
 800d3a0:	230c      	movs	r3, #12
 800d3a2:	2600      	movs	r6, #0
 800d3a4:	603b      	str	r3, [r7, #0]
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ac:	4e2e      	ldr	r6, [pc, #184]	; (800d468 <_malloc_r+0xe4>)
 800d3ae:	f000 f89d 	bl	800d4ec <__malloc_lock>
 800d3b2:	6833      	ldr	r3, [r6, #0]
 800d3b4:	461c      	mov	r4, r3
 800d3b6:	bb34      	cbnz	r4, 800d406 <_malloc_r+0x82>
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	f7ff ffc2 	bl	800d344 <sbrk_aligned>
 800d3c0:	1c43      	adds	r3, r0, #1
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	d14d      	bne.n	800d462 <_malloc_r+0xde>
 800d3c6:	6834      	ldr	r4, [r6, #0]
 800d3c8:	4626      	mov	r6, r4
 800d3ca:	2e00      	cmp	r6, #0
 800d3cc:	d140      	bne.n	800d450 <_malloc_r+0xcc>
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	4631      	mov	r1, r6
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	eb04 0803 	add.w	r8, r4, r3
 800d3d8:	f000 f878 	bl	800d4cc <_sbrk_r>
 800d3dc:	4580      	cmp	r8, r0
 800d3de:	d13a      	bne.n	800d456 <_malloc_r+0xd2>
 800d3e0:	6821      	ldr	r1, [r4, #0]
 800d3e2:	3503      	adds	r5, #3
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	1a6d      	subs	r5, r5, r1
 800d3e8:	f025 0503 	bic.w	r5, r5, #3
 800d3ec:	3508      	adds	r5, #8
 800d3ee:	2d0c      	cmp	r5, #12
 800d3f0:	bf38      	it	cc
 800d3f2:	250c      	movcc	r5, #12
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	f7ff ffa5 	bl	800d344 <sbrk_aligned>
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	d02b      	beq.n	800d456 <_malloc_r+0xd2>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	442b      	add	r3, r5
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	e00e      	b.n	800d424 <_malloc_r+0xa0>
 800d406:	6822      	ldr	r2, [r4, #0]
 800d408:	1b52      	subs	r2, r2, r5
 800d40a:	d41e      	bmi.n	800d44a <_malloc_r+0xc6>
 800d40c:	2a0b      	cmp	r2, #11
 800d40e:	d916      	bls.n	800d43e <_malloc_r+0xba>
 800d410:	1961      	adds	r1, r4, r5
 800d412:	42a3      	cmp	r3, r4
 800d414:	6025      	str	r5, [r4, #0]
 800d416:	bf18      	it	ne
 800d418:	6059      	strne	r1, [r3, #4]
 800d41a:	6863      	ldr	r3, [r4, #4]
 800d41c:	bf08      	it	eq
 800d41e:	6031      	streq	r1, [r6, #0]
 800d420:	5162      	str	r2, [r4, r5]
 800d422:	604b      	str	r3, [r1, #4]
 800d424:	f104 060b 	add.w	r6, r4, #11
 800d428:	4638      	mov	r0, r7
 800d42a:	f000 f865 	bl	800d4f8 <__malloc_unlock>
 800d42e:	1d23      	adds	r3, r4, #4
 800d430:	f026 0607 	bic.w	r6, r6, #7
 800d434:	1af2      	subs	r2, r6, r3
 800d436:	d0b6      	beq.n	800d3a6 <_malloc_r+0x22>
 800d438:	1b9b      	subs	r3, r3, r6
 800d43a:	50a3      	str	r3, [r4, r2]
 800d43c:	e7b3      	b.n	800d3a6 <_malloc_r+0x22>
 800d43e:	6862      	ldr	r2, [r4, #4]
 800d440:	42a3      	cmp	r3, r4
 800d442:	bf0c      	ite	eq
 800d444:	6032      	streq	r2, [r6, #0]
 800d446:	605a      	strne	r2, [r3, #4]
 800d448:	e7ec      	b.n	800d424 <_malloc_r+0xa0>
 800d44a:	4623      	mov	r3, r4
 800d44c:	6864      	ldr	r4, [r4, #4]
 800d44e:	e7b2      	b.n	800d3b6 <_malloc_r+0x32>
 800d450:	4634      	mov	r4, r6
 800d452:	6876      	ldr	r6, [r6, #4]
 800d454:	e7b9      	b.n	800d3ca <_malloc_r+0x46>
 800d456:	230c      	movs	r3, #12
 800d458:	4638      	mov	r0, r7
 800d45a:	603b      	str	r3, [r7, #0]
 800d45c:	f000 f84c 	bl	800d4f8 <__malloc_unlock>
 800d460:	e7a1      	b.n	800d3a6 <_malloc_r+0x22>
 800d462:	6025      	str	r5, [r4, #0]
 800d464:	e7de      	b.n	800d424 <_malloc_r+0xa0>
 800d466:	bf00      	nop
 800d468:	20000698 	.word	0x20000698

0800d46c <_realloc_r>:
 800d46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d470:	4680      	mov	r8, r0
 800d472:	4614      	mov	r4, r2
 800d474:	460e      	mov	r6, r1
 800d476:	b921      	cbnz	r1, 800d482 <_realloc_r+0x16>
 800d478:	4611      	mov	r1, r2
 800d47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d47e:	f7ff bf81 	b.w	800d384 <_malloc_r>
 800d482:	b92a      	cbnz	r2, 800d490 <_realloc_r+0x24>
 800d484:	4625      	mov	r5, r4
 800d486:	f7ff ff11 	bl	800d2ac <_free_r>
 800d48a:	4628      	mov	r0, r5
 800d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d490:	f000 f838 	bl	800d504 <_malloc_usable_size_r>
 800d494:	4284      	cmp	r4, r0
 800d496:	4607      	mov	r7, r0
 800d498:	d802      	bhi.n	800d4a0 <_realloc_r+0x34>
 800d49a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d49e:	d812      	bhi.n	800d4c6 <_realloc_r+0x5a>
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	f7ff ff6e 	bl	800d384 <_malloc_r>
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	d0ed      	beq.n	800d48a <_realloc_r+0x1e>
 800d4ae:	42bc      	cmp	r4, r7
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	bf28      	it	cs
 800d4b6:	463a      	movcs	r2, r7
 800d4b8:	f7ff fed0 	bl	800d25c <memcpy>
 800d4bc:	4631      	mov	r1, r6
 800d4be:	4640      	mov	r0, r8
 800d4c0:	f7ff fef4 	bl	800d2ac <_free_r>
 800d4c4:	e7e1      	b.n	800d48a <_realloc_r+0x1e>
 800d4c6:	4635      	mov	r5, r6
 800d4c8:	e7df      	b.n	800d48a <_realloc_r+0x1e>
	...

0800d4cc <_sbrk_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	4d05      	ldr	r5, [pc, #20]	; (800d4e8 <_sbrk_r+0x1c>)
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	602b      	str	r3, [r5, #0]
 800d4d8:	f7f4 fbfe 	bl	8001cd8 <_sbrk>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d102      	bne.n	800d4e6 <_sbrk_r+0x1a>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	b103      	cbz	r3, 800d4e6 <_sbrk_r+0x1a>
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	200006a0 	.word	0x200006a0

0800d4ec <__malloc_lock>:
 800d4ec:	4801      	ldr	r0, [pc, #4]	; (800d4f4 <__malloc_lock+0x8>)
 800d4ee:	f000 b811 	b.w	800d514 <__retarget_lock_acquire_recursive>
 800d4f2:	bf00      	nop
 800d4f4:	200006a4 	.word	0x200006a4

0800d4f8 <__malloc_unlock>:
 800d4f8:	4801      	ldr	r0, [pc, #4]	; (800d500 <__malloc_unlock+0x8>)
 800d4fa:	f000 b80c 	b.w	800d516 <__retarget_lock_release_recursive>
 800d4fe:	bf00      	nop
 800d500:	200006a4 	.word	0x200006a4

0800d504 <_malloc_usable_size_r>:
 800d504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d508:	1f18      	subs	r0, r3, #4
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfbc      	itt	lt
 800d50e:	580b      	ldrlt	r3, [r1, r0]
 800d510:	18c0      	addlt	r0, r0, r3
 800d512:	4770      	bx	lr

0800d514 <__retarget_lock_acquire_recursive>:
 800d514:	4770      	bx	lr

0800d516 <__retarget_lock_release_recursive>:
 800d516:	4770      	bx	lr

0800d518 <_init>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	bf00      	nop
 800d51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51e:	bc08      	pop	{r3}
 800d520:	469e      	mov	lr, r3
 800d522:	4770      	bx	lr

0800d524 <_fini>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	bf00      	nop
 800d528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52a:	bc08      	pop	{r3}
 800d52c:	469e      	mov	lr, r3
 800d52e:	4770      	bx	lr
